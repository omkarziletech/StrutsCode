/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import com.gp.cong.common.CommonConstants;
import com.gp.cong.logisoft.bc.fcl.BookingConstants;
import com.gp.cong.logisoft.bc.fcl.BookingFclBC;
import com.gp.cong.logisoft.bc.ratemanagement.PortsBC;
import com.gp.cong.logisoft.beans.CostBean;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cvst.logisoft.domain.BookingFcl;
import com.gp.cvst.logisoft.domain.BookingfclUnits;
import com.gp.cvst.logisoft.hibernate.dao.BookingFclDAO;
import com.gp.cvst.logisoft.hibernate.dao.BookingfclUnitsDAO;
import com.gp.cvst.logisoft.struts.form.NewBookingsForm;

/**
 * MyEclipse Struts Creation date: 07-28-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/newBookings" name="NewBookingsForm"
 *                input="/jsps/fclQuotes/newBookings.jsp" scope="request"
 *                validate="true"
 * @struts.action-forward name="success" path="/jsps/fclQuotes/newBookings.jsp"
 */
public class NewBookingAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        NewBookingsForm NewBookingsForm = (NewBookingsForm) form;// TODO
        BookingFclBC bookingFclBC = new BookingFclBC();
        BookingFclDAO bookingFclDAO = new BookingFclDAO();
        BookingfclUnitsDAO bookingFclUnitsDAO = new BookingfclUnitsDAO();
        String unitType = NewBookingsForm.getUnitSelect();
        String buttonValue = NewBookingsForm.getButtonValue();
        String forwardName = "";
        HttpSession session = request.getSession();
        DBUtil dbUtil = new DBUtil();
        CustomerDAO customerDAO = new CustomerDAO();
        NumberFormat numb = new DecimalFormat("###,###,##0.00");
        MessageResources messageResources = getResources(request);
        String requestObjectVAlue = null;
        if (session.getAttribute(CommonConstants.UNIQUE_ITEM) != null) {
            Map addUniqueCode = (Map) session.getAttribute(CommonConstants.UNIQUE_ITEM);
            Set set = addUniqueCode.entrySet();
            for (Iterator it = set.iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();

                if (entry.getKey() != null && entry.getKey().equals(CommonConstants.SEARCH_FILE_NUMBER)) {
                    String quoteFolderId = (String) entry.getValue();//QOT
                    String quoteLinkId = quoteFolderId.substring(quoteFolderId.lastIndexOf("=") + 1);//link id
                    String folderid = quoteFolderId.substring(quoteFolderId.indexOf("=") + 1, quoteFolderId.lastIndexOf("&"));

                    // request.setAttribute("linkid", quoteLinkId);
                    //request.setAttribute("folderId", folderid);
                    requestObjectVAlue = "folderId=" + folderid + "&linkid=" + quoteLinkId;

                }
            }
        }

        if (buttonValue.equals("numbersChanged")) {
            BookingFcl bookingFcl = bookingFclBC.save(NewBookingsForm);
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            NewBookingsForm.setBookingId(bookingFcl.getBookingId().toString());
            NewBookingsForm.setFieNo(bookingFcl.getFileNo().toString());
            List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            List otherChargesList = new ArrayList();
            List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            fclRates = bookingFclBC.setMarkupValuesIntoCharges(fclRates, NewBookingsForm);
            fclRates = bookingFclBC.doContainersChanged(fclRates, NewBookingsForm);
            for (int i = 0; i < fclRates.size(); i++) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) fclRates.get(i);
                if (bookingfclUnits.getAccountNo() != null) {
                    if (!bookingfclUnits.getAccountNo().equals(
                            request.getParameter("accountno" + i))) {
                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
                String accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                if (bookingfclUnits.getAccountName() != null) {
                    if (!bookingfclUnits.getAccountName().equals(accountName)) {
                        if (accountName != null && !accountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, accountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (accountName != null && !accountName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, accountName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
            }
            otherChargesList = bookingFclBC.setOtherMarkupValuesIntoCharges(otherChargesList, NewBookingsForm);
            for (int i = 0; i < otherChargesList.size(); i++) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) otherChargesList.get(i);
                if (bookingfclUnits.getAccountNo() != null) {
                    if (!bookingfclUnits.getAccountNo().equals(request.getParameter("otheraccountno" + i))) {
                        if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
                String otherAccountName = request.getParameter("otheraccountname" + i).replace("amp;", "").trim();
                if (bookingfclUnits.getAccountName() != null) {
                    if (!bookingfclUnits.getAccountName().equals(otherAccountName)) {
                        if (otherAccountName != null && !otherAccountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, otherAccountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (otherAccountName != null && !otherAccountName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, otherAccountName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
            }
            NewBookingsForm = bookingFclBC.saveCurrenciesIntoNewBookingForm(fclRates, NewBookingsForm);
            NewBookingsForm = bookingFclBC.saveCurrenciesofOtherChargesIntoNewBookingForm(otherChargesList, NewBookingsForm);
            bookingFclBC.chargesSave(fclRates, bookingFcl,request);
            bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
            bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
            Double totalCharges = Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges()));
            if (NewBookingsForm.getLocaldryage() != null && NewBookingsForm.getLocaldryage().equalsIgnoreCase("Y") && NewBookingsForm.getAmount() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getAmount()));
            }
            if (NewBookingsForm.getIntermodel() != null && NewBookingsForm.getIntermodel().equalsIgnoreCase("Y") && NewBookingsForm.getAmount() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getAmount1()));
            }
            if (NewBookingsForm.getInsurance() != null && NewBookingsForm.getInsurance().equalsIgnoreCase("Y") && NewBookingsForm.getInsurancamt() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()));
            }
            NewBookingsForm.setTotalCharges(numb.format(totalCharges));
            bookingFcl.setTotalCharges(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())));
            bookingFcl.setBaht(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getBaht())));
            bookingFcl.setBdt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getBdt())));
            bookingFcl.setCyp(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getCyp())));
            bookingFcl.setEur(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getEur())));
            bookingFcl.setHkd(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getHkd())));
            bookingFcl.setLkr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getLkr())));
            bookingFcl.setNt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getNt())));
            bookingFcl.setPrs(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getPrs())));
            bookingFcl.setRmb(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getRmb())));
            bookingFcl.setWon(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getWon())));
            bookingFcl.setYen(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getYen())));
            bookingFcl.setMyr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getMyr())));
            bookingFcl.setNht(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getNht())));
            bookingFcl.setPkr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getPkr())));
            bookingFcl.setRm(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getRm())));
            bookingFcl.setSpo(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getSpo())));
            bookingFcl.setVnd(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getVnd())));
            bookingFcl.setInr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInr())));
            if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("") && !bookingFcl.getCostofgoods().equals(0.00)) {
                NewBookingsForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())) -
                        Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()))));
                //bookingFcl=bookingFclBC.calculateInsurance(bookingFcl);
                NewBookingsForm.setInsurancamt(numb.format(bookingFcl.getInsurancamt()));
                NewBookingsForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())) +
                        Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()))));
            }
            bookingFclDAO.save(bookingFcl);
            request.setAttribute(BookingConstants.BOOKINGFORM, NewBookingsForm);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", dbUtil.getSpecialEquipmentUnitList(bookingFcl.getSelectedUnits()));
            forwardName = "success";
        }
        if (buttonValue.equals("recalc") || buttonValue.equals("hazmat") || buttonValue.equals("save") || buttonValue.equals("insurance")) {
            BookingFcl bookingFcl = bookingFclBC.save(NewBookingsForm);
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            NewBookingsForm.setBookingId(bookingFcl.getBookingId().toString());
            NewBookingsForm.setFieNo(bookingFcl.getFileNo().toString());
            List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            List otherChargesList = new ArrayList();
            List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                CostBean c1 = (CostBean) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            fclRates = bookingFclBC.setMarkupValuesIntoCharges(fclRates, NewBookingsForm);
            for (int i = 0; i < fclRates.size(); i++) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) fclRates.get(i);
                if (bookingfclUnits.getAccountNo() != null) {
                    if (!bookingfclUnits.getAccountNo().equals(
                            request.getParameter("accountno" + i))) {
                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
                String accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                if (bookingfclUnits.getAccountName() != null) {
                    if (!bookingfclUnits.getAccountName().equals(accountName)) {
                        if (accountName != null && !accountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, accountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (accountName != null && !accountName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, accountName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
            }
            otherChargesList = bookingFclBC.setOtherMarkupValuesIntoCharges(otherChargesList, NewBookingsForm);
            for (int i = 0; i < otherChargesList.size(); i++) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) otherChargesList.get(i);
                if (bookingfclUnits.getAccountNo() != null) {
                    if (!bookingfclUnits.getAccountNo().equals(request.getParameter("otheraccountno" + i))) {
                        if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
                String otherAccountName = request.getParameter("otheraccountname" + i).replace("amp;", "").trim();
                if (bookingfclUnits.getAccountName() != null) {
                    if (!bookingfclUnits.getAccountName().equals(otherAccountName)) {
                        if (otherAccountName != null && !otherAccountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, otherAccountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (otherAccountName != null && !otherAccountName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, otherAccountName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
            }
            NewBookingsForm = bookingFclBC.saveCurrenciesIntoNewBookingForm(fclRates, NewBookingsForm);
            NewBookingsForm = bookingFclBC.saveCurrenciesofOtherChargesIntoNewBookingForm(otherChargesList, NewBookingsForm);
            bookingFclBC.chargesSave(fclRates, bookingFcl,request);
            bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
            bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
            Double totalCharges = Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges()));
            if (NewBookingsForm.getLocaldryage() != null && NewBookingsForm.getLocaldryage().equalsIgnoreCase("Y") && NewBookingsForm.getAmount() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getAmount()));
            }
            if (NewBookingsForm.getIntermodel() != null && NewBookingsForm.getIntermodel().equalsIgnoreCase("Y") && NewBookingsForm.getAmount() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getAmount1()));
            }
            if (NewBookingsForm.getInsurance() != null && NewBookingsForm.getInsurance().equalsIgnoreCase("Y") && NewBookingsForm.getInsurancamt() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()));
            }
            /*if(NewBookingsForm.getCostofgoods1()!=null){
            totalCharges=totalCharges+Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getCostofgoods1()));
            }*/
            NewBookingsForm.setTotalCharges(numb.format(totalCharges));
            bookingFcl.setTotalCharges(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())));
            bookingFcl.setBaht(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getBaht())));
            bookingFcl.setBdt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getBdt())));
            bookingFcl.setCyp(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getCyp())));
            bookingFcl.setEur(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getEur())));
            bookingFcl.setHkd(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getHkd())));
            bookingFcl.setLkr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getLkr())));
            bookingFcl.setNt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getNt())));
            bookingFcl.setPrs(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getPrs())));
            bookingFcl.setRmb(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getRmb())));
            bookingFcl.setWon(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getWon())));
            bookingFcl.setYen(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getYen())));
            bookingFcl.setMyr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getMyr())));
            bookingFcl.setNht(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getNht())));
            bookingFcl.setPkr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getPkr())));
            bookingFcl.setRm(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getRm())));
            bookingFcl.setSpo(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getSpo())));
            bookingFcl.setVnd(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getVnd())));
            bookingFcl.setInr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInr())));
            if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("") && !bookingFcl.getCostofgoods().equals(0.00)) {
                //bookingFcl=bookingFclBC.calculateInsurance(bookingFcl);
                NewBookingsForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()))));
                NewBookingsForm.setInsurancamt(numb.format(bookingFcl.getInsurancamt()));
                NewBookingsForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()))));

            }
            bookingFclDAO.save(bookingFcl);
            request.setAttribute(BookingConstants.BOOKINGFORM, NewBookingsForm);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", dbUtil.getSpecialEquipmentUnitList(bookingFcl.getSelectedUnits()));
            if (buttonValue.equals("save")) {
                request.setAttribute("searchcollapse", "searchcollapse");
                List SearchingList = new ArrayList();
                SearchingList.add(bookingFcl);
                request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
                request.setAttribute(BookingConstants.SEARCHLIST, SearchingList);
                request.setAttribute("requestObjectVAlue", requestObjectVAlue);
                forwardName = "savesuccess";
                session.setAttribute("trade", "booking");
            //forwardName = "savesuccess";
            } else {
                forwardName = "success";
            }
        }
        if (buttonValue.equals("goBack")) {
            request.setAttribute("requestObjectVAlue", requestObjectVAlue);
            forwardName = "savesuccess";
            session.setAttribute("trade", "booking");
        }
        if (buttonValue.equals("thirdPartyRadio")) {
            request.setAttribute("ThirdParty", NewBookingsForm.getPrepaidToCollect());
            forwardName = "success";
        }
        if ("searchPort".equals(buttonValue)) {

            PortsBC portsBC = new PortsBC();
            request.setAttribute("regions", portsBC.getAllRegion1());
            request.setAttribute("textName", request.getParameter("textName"));
            request.setAttribute("from", request.getParameter("from"));
            forwardName = "portSearchPage";
        }
        if (buttonValue.equals("addCharges")) {
            BookingFcl bookingFcl = bookingFclBC.save(NewBookingsForm);
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            NewBookingsForm.setBookingId(bookingFcl.getBookingId().toString());
            NewBookingsForm.setFieNo(bookingFcl.getFileNo().toString());
            List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            List otherChargesList = new ArrayList();
            List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List bookingfclUnitsList1 = new ArrayList();
            List perkglbsList = new ArrayList();
            boolean flag1 = false;
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            fclRates = bookingFclBC.setMarkupValuesIntoCharges(fclRates, NewBookingsForm);
            for (int i = 0; i < fclRates.size(); i++) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) fclRates.get(i);
                if (bookingfclUnits.getAccountNo() != null) {
                    if (!bookingfclUnits.getAccountNo().equals(
                            request.getParameter("accountno" + i))) {
                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
                String accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                if (bookingfclUnits.getAccountName() != null) {
                    if (!bookingfclUnits.getAccountName().equals(accountName)) {
                        if (accountName != null && !accountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, accountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (accountName != null && !accountName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, accountName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
            }
            otherChargesList = bookingFclBC.setOtherMarkupValuesIntoCharges(otherChargesList, NewBookingsForm);
            for (int i = 0; i < otherChargesList.size(); i++) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) otherChargesList.get(i);
                if (bookingfclUnits.getAccountNo() != null) {
                    if (!bookingfclUnits.getAccountNo().equals(request.getParameter("otheraccountno" + i))) {
                        if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
                String otherAccountName = request.getParameter("otheraccountname" + i).replace("amp;", "").trim();
                if (bookingfclUnits.getAccountName() != null) {
                    if (!bookingfclUnits.getAccountName().equals(otherAccountName)) {
                        if (otherAccountName != null && !otherAccountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, otherAccountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                bookingfclUnits.setAccountNo(customer1.getAccountNo());
                                bookingfclUnits.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                } else {
                    if (otherAccountName != null && !otherAccountName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, otherAccountName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
                            bookingfclUnits.setAccountNo(customer1.getAccountNo());
                            bookingfclUnits.setAccountName(customer1.getAccountName());
                        }
                    }
                }
            }
            NewBookingsForm = bookingFclBC.saveCurrenciesIntoNewBookingForm(fclRates, NewBookingsForm);
            NewBookingsForm = bookingFclBC.saveCurrenciesofOtherChargesIntoNewBookingForm(otherChargesList, NewBookingsForm);
            BookingfclUnits bookingFclUnits = bookingFclBC.addCharges(NewBookingsForm);
            boolean flag3 = false;
            if ((bookingFclUnits.getCostType() != null && (bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("perbl")) ||
                    bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) ||
                    bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))))) {
                unitType = "0";
            }
            if ((bookingFclUnits.getCostType() != null && (bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("FlatRatePerConatinerSize")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))) && unitType.equals("0"))) {
                String msg = "Please select Unit Type";
                flag3 = true;
            }
            if (NewBookingsForm.getHazmat() != null && NewBookingsForm.getHazmat().equals("N") && (bookingFclUnits.getChgCode() != null && bookingFclUnits.getChgCode().trim().equals("HAZARDOUS SURCHARGE")) ||
                    (bookingFclUnits.getChgCode() != null && bookingFclUnits.getChgCode().trim().equals("HAZARDOUS SURCHARGE- LAND")) || (bookingFclUnits.getChgCode() != null && bookingFclUnits.getChgCode().trim().equals("HAZARDOUS SURCHARGE- SEA"))) {
                String msg = "Please select Hazmat = yes, for selecting the Hazardous charge code";
                request.setAttribute("msg", msg);
                flag3 = true;
            }
            if (NewBookingsForm.getSpecialequipment() != null && NewBookingsForm.getSpecialequipment().equals("N") &&
                    bookingFclUnits.getChgCode() != null && bookingFclUnits.getChgCode().trim().equals("SPECIAL EQUIPMENT SURCHARGE")) {
                String msg = "Please select Special Equipment, for selecting the Special Equipment Charge Code";
                request.setAttribute("msg", msg);
                flag3 = true;
            }
            if (NewBookingsForm.getSoc() != null && bookingFclUnits.getChgCode() != null && NewBookingsForm.getSoc().equals("N") && bookingFclUnits.getChargeCodeDesc().trim().equals("SOC")) {
                String msg = "Please select SOC, for selecting the SOC Charge Code";
                request.setAttribute("msg", msg);
                flag3 = true;
            }
            if (!flag3) {

                if (bookingFclUnits.getCostType() != null && (bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("FlatRatePerConatinerSize")) || bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("Flatratepercontainer")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")))) {
                    for (int i = 0; i < otherChargesList.size(); i++) {
                        BookingfclUnits bookingFcl1 = (BookingfclUnits) otherChargesList.get(i);
                        if (bookingFcl1.getChgCode().equals(bookingFclUnits.getChgCode())) {
                            String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                            request.setAttribute("msg", msg);
                            flag1 = true;
                            break;
                        }
                    }
                }
                if (bookingFclUnits.getCostType() != null && (bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("FlatRatePerConatinerSize")) || bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("Flatratepercontainer")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl")))) {
                    for (int i = 0; i < perkglbsList.size(); i++) {
                        BookingfclUnits bookingFcl2 = (BookingfclUnits) perkglbsList.get(i);
                        if (bookingFcl2.getChgCode().equals(bookingFclUnits.getChgCode())) {
                            String msg = "Please Enter the Different Charge Code or Cost Type, Because it is already exist";
                            request.setAttribute("msg", msg);
                            flag1 = true;
                            break;
                        }
                    }
                }
                if (bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) ||
                        bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) ||
                        bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    for (int i = 0; i < fclRates.size(); i++) {
                        BookingfclUnits bookingFcl1 = (BookingfclUnits) fclRates.get(i);
                        if (bookingFcl1.getChgCode().equals(bookingFclUnits.getChgCode())) {
                            String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                            request.setAttribute("msg", msg);
                            flag1 = true;
                            break;
                        }
                    }
                }
                if (!flag1) {
                    if (bookingFclUnits.getCostType() != null && bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))) {
                        boolean perFlag = false;
                        boolean perFlag1 = false;
                        for (int i = 0; i < fclRates.size(); i++) {
                            BookingfclUnits booking1 = (BookingfclUnits) fclRates.get(i);
                            bookingfclUnitsList1.add(booking1);
                            if (booking1.getUnitType().getId().toString().equals(unitType)) {
                                perFlag = true;
                                if (booking1.getChgCode().trim().equalsIgnoreCase("OCEAN FREIGHT")) {
                                    perFlag1 = true;
                                    bookingFclUnits.setAmount(bookingFclUnits.getAmount() * Double.parseDouble(booking1.getNumbers()));
                                    bookingFclUnits.setAmount(bookingFclUnits.getAmount() * booking1.getAmount() / 100);
                                    bookingfclUnitsList1.add(bookingFclUnits);
                                }
                            }
                        }
                        if (!perFlag || !perFlag1) {
                            String msg = "Please Select Ocean Freight before selecting Percent OFR";
                            request.setAttribute("msg", msg);
                        }
                    }

                    if (bookingFclUnits.getCostType() != null && (bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("FlatRatePerConatinerSize")) ||
                            bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("Flatratepercontainer")))) {
                        if (fclRates.size() > 0) {
                            boolean flag = false;
                            boolean flag2 = false;
                            int a = 0;
                            if (!unitType.equals("0")) {
                                for (int i = 0; i < fclRates.size(); i++) {
                                    BookingfclUnits bookingFcl2 = (BookingfclUnits) fclRates.get(i);
                                    if (!flag) {
                                        if (bookingFcl2.getUnitType() != null && bookingFcl2.getUnitType().getId().toString().equals(unitType)) {
                                            flag2 = true;
                                            a = a + 1;
                                            if (bookingFcl2.getChgCode().trim().equals(bookingFclUnits.getChgCode().trim()) && bookingFcl2.getUnitType().getId().toString().equals(bookingFclUnits.getUnitType().getId().toString())) {
                                                flag = true;
                                                String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                                                request.setAttribute("msg", msg);
                                                for (int j = i + 1; j < fclRates.size(); j++) {
                                                    BookingfclUnits bookingFcl3 = (BookingfclUnits) fclRates.get(j);
                                                    bookingfclUnitsList1.add(bookingFcl3);
                                                }
                                                break;
                                            }
                                        }
                                    } else {
                                        break;
                                    }
                                }
                                if (!flag2) {
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        BookingfclUnits bookingFcl4 = (BookingfclUnits) fclRates.get(i);
                                        bookingfclUnitsList1.add(bookingFcl4);
                                    }
                                    boolean flag6 = false;
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        BookingfclUnits bookingFcl5 = (BookingfclUnits) fclRates.get(i);
                                        if (bookingFcl5.getCostType().trim().equals(messageResources.getMessage("Flatratepercontainer"))) {
                                            if (bookingFcl5.getChgCode() != null && bookingFclUnits.getChgCode() != null && bookingFcl5.getChgCode().equals(bookingFclUnits.getChgCode()) &&
                                                    bookingFcl5.getUnitType().getId().toString().equals(bookingFclUnits.getUnitType().getId().toString())) {
                                                flag6 = false;
                                                String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                                                request.setAttribute("msg", msg);
                                                break;
                                            }
                                        }
                                    }
                                    if (!flag6) {
                                        bookingfclUnitsList1.add(bookingFclUnits);
                                    }
                                } else {
                                    if (!flag) {
                                        boolean flag4 = false;
                                        for (int j = 0; j < fclRates.size(); j++) {
                                            BookingfclUnits bookingFcl6 = (BookingfclUnits) fclRates.get(j);
                                            bookingfclUnitsList1.add(bookingFcl6);
                                            if (!flag4) {
                                                if (bookingFcl6.getUnitType() != null && bookingFcl6.getUnitType().getId().toString().equals(unitType)) {
                                                    flag4 = true;
                                                    boolean flag5 = false;
                                                    for (int i = 0; i < fclRates.size(); i++) {
                                                        BookingfclUnits bookingFcl7 = (BookingfclUnits) fclRates.get(i);
                                                        if (bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("Flatratepercontainer")) || bookingFcl7.getCostType().trim().equals(messageResources.getMessage("Flatratepercontainer"))) {
                                                            if (bookingFclUnits.getChgCode().equals(bookingFcl7.getChgCode()) && bookingFclUnits.getUnitType().getId().toString().equals(bookingFcl7.getUnitType().getId().toString())) {
                                                                flag5 = true;
                                                                String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                                                                request.setAttribute("msg", msg);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if (!flag5) {
                                                        bookingFclUnits.setAmount(bookingFclUnits.getAmount() * Double.parseDouble(bookingFcl6.getNumbers()));
                                                        bookingfclUnitsList1.add(bookingFclUnits);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                boolean flag4 = false;
                                for (int i = 0; i < fclRates.size(); i++) {
                                    BookingfclUnits bookingFcl8 = (BookingfclUnits) fclRates.get(i);
                                    if (bookingFcl8.getChgCode().equals(bookingFclUnits.getChgCode()) && bookingFcl8.getUnitType().getId().toString().equals(bookingFclUnits.getUnitType().getId().toString())) {
                                        String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                                        request.setAttribute("msg", msg);
                                        flag4 = true;
                                        break;
                                    }
                                }
                                if (!flag4) {
                                    boolean testFlag = false;
                                    for (int k = 0; k < fclRates.size(); k++) {
                                        BookingfclUnits bookingFcl9 = (BookingfclUnits) fclRates.get(k);
                                        if (bookingFcl9.getUnitType().getId().toString().equals(unitType)) {
                                            testFlag = true;
                                            bookingFclUnits.setAmount(bookingFclUnits.getAmount() * Double.parseDouble(bookingFcl9.getNumbers()));
                                            bookingfclUnitsList1.add(bookingFclUnits);
                                        } else {
                                            bookingfclUnitsList1.add(bookingFcl9);
                                        }
                                    }
                                    if (!testFlag) {
                                        bookingfclUnitsList1.add(bookingFclUnits);
                                    }
                                }
                            }
                        } else {
                            bookingfclUnitsList1.add(bookingFclUnits);
                        }
                        if (request.getAttribute("msg") == null) {
                        } else {
                        }
                    } else if (bookingFclUnits.getCostType() != null && (bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) || bookingFclUnits.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")))) {
                        boolean flag = false;
                        if (perkglbsList.size() > 0) {
                            for (int i = 0; i < perkglbsList.size(); i++) {
                                BookingfclUnits bookingFcl1 = (BookingfclUnits) perkglbsList.get(i);
                                if (bookingFcl1.getChgCode().equals(bookingFclUnits.getChgCode())) {
                                    flag = true;
                                    String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                                    request.setAttribute("msg", msg);
                                    break;
                                }
                            }
                        } else {
                            perkglbsList = new ArrayList();
                        }
                        if (!flag || perkglbsList.size() == 0) {
                            bookingFclUnits.setUnitType(null);
                            perkglbsList.add(bookingFclUnits);
                        }
                    } else if (bookingFclUnits.getCostType() != null && bookingFclUnits.getCostType().trim().equals(messageResources.getMessage("perbl"))) {
                        boolean flag = false;
                        if (otherChargesList.size() > 0) {
                            for (int i = 0; i < otherChargesList.size(); i++) {
                                BookingfclUnits bookingFcl12 = (BookingfclUnits) otherChargesList.get(i);
                                if (bookingFcl12.getChgCode().equals(bookingFclUnits.getChgCode())) {
                                    flag = true;
                                    String msg = "Please Enter the Ddifferent Charge Code or Cost Type, Because it is already exist";
                                    request.setAttribute("msg", msg);
                                    break;
                                }
                            }
                            if (!flag) {
                                bookingFclUnits.setUnitType(null);
                                otherChargesList.add(bookingFclUnits);
                            }
                        } else {
                            bookingFclUnits.setUnitType(null);
                            otherChargesList.add(bookingFclUnits);
                        }
                    }
                }
            }
            if (request.getAttribute("msg") == null) {
                if (bookingfclUnitsList1.size() > 0) {
                    bookingFclBC.chargesSave(bookingfclUnitsList1, bookingFcl,request);
                    bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
                    bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
                    NewBookingsForm = bookingFclBC.saveCurrenciesIntoNewBookingForm(bookingfclUnitsList1, NewBookingsForm);
                } else {
                    bookingFclBC.chargesSave(fclRates, bookingFcl,request);
                    bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
                    bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
                    NewBookingsForm = bookingFclBC.saveCurrenciesIntoNewBookingForm(fclRates, NewBookingsForm);
                }
            } else {
            }
            NewBookingsForm = bookingFclBC.saveCurrenciesofOtherChargesIntoNewBookingForm(otherChargesList, NewBookingsForm);

            List fclRates1 = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            request.setAttribute(BookingConstants.FCLRATES, fclRates1);
            List otherChargesList1 = new ArrayList();
            List otherList1 = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List perkglbsList1 = new ArrayList();
            for (int i = 0; i < otherList1.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList1.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList1.add(c1);
                } else {
                    otherChargesList1.add(c1);
                }
            }
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList1);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList1);
            Double totalCharges = Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges()));
            if (NewBookingsForm.getLocaldryage() != null && NewBookingsForm.getLocaldryage().equalsIgnoreCase("Y") && NewBookingsForm.getAmount() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getAmount()));
            }
            if (NewBookingsForm.getIntermodel() != null && NewBookingsForm.getIntermodel().equalsIgnoreCase("Y") && NewBookingsForm.getAmount() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getAmount1()));
            }
            if (NewBookingsForm.getInsurance() != null && NewBookingsForm.getInsurance().equalsIgnoreCase("Y") && NewBookingsForm.getInsurancamt() != null) {
                totalCharges = totalCharges + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()));
            }
            /*if(NewBookingsForm.getCostofgoods1()!=null){
            totalCharges=totalCharges+Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getCostofgoods1()));
            }*/
            NewBookingsForm.setTotalCharges(numb.format(totalCharges));
            bookingFcl.setTotalCharges(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())));
            bookingFcl.setBaht(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getBaht())));
            bookingFcl.setBdt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getBdt())));
            bookingFcl.setCyp(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getCyp())));
            bookingFcl.setEur(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getEur())));
            bookingFcl.setHkd(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getHkd())));
            bookingFcl.setLkr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getLkr())));
            bookingFcl.setNt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getNt())));
            bookingFcl.setPrs(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getPrs())));
            bookingFcl.setRmb(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getRmb())));
            bookingFcl.setWon(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getWon())));
            bookingFcl.setYen(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getYen())));
            bookingFcl.setMyr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getMyr())));
            bookingFcl.setNht(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getNht())));
            bookingFcl.setPkr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getPkr())));
            bookingFcl.setRm(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getRm())));
            bookingFcl.setSpo(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getSpo())));
            bookingFcl.setVnd(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getVnd())));
            bookingFcl.setInr(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInr())));
            if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("") && !bookingFcl.getCostofgoods().equals(0.00)) {
                //bookingFcl=bookingFclBC.calculateInsurance(bookingFcl);
                NewBookingsForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()))));
                NewBookingsForm.setInsurancamt(numb.format(bookingFcl.getInsurancamt()));
                NewBookingsForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsurancamt()))));
            }
            bookingFclDAO.save(bookingFcl);
            request.setAttribute(BookingConstants.BOOKINGFORM, NewBookingsForm);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", dbUtil.getSpecialEquipmentUnitList(bookingFcl.getSelectedUnits()));
            forwardName = "success";
        }
        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}