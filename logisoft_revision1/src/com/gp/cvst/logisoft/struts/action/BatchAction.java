/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonConstants;
import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.DateUtils;
import com.gp.cong.common.NumberUtils;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.accounting.JournalEntryBC;
import com.gp.cong.logisoft.bc.accounting.BatchesBC;
import com.gp.cong.logisoft.bc.notes.NotesConstants;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.BatchesBean;
import com.gp.cvst.logisoft.domain.AccountBalance;
import com.gp.cvst.logisoft.domain.Batch;
import com.gp.cvst.logisoft.domain.FiscalPeriod;
import com.gp.cvst.logisoft.domain.JournalEntry;
import com.gp.cvst.logisoft.domain.LineItem;
import com.gp.cvst.logisoft.hibernate.dao.AccountBalanceDAO;
import com.gp.cvst.logisoft.hibernate.dao.BatchDAO;
import com.gp.cvst.logisoft.hibernate.dao.FiscalPeriodDAO;
import com.gp.cvst.logisoft.hibernate.dao.FiscalYearDAO;
import com.gp.cvst.logisoft.struts.form.BatchForm;
import com.gp.cvst.logisoft.struts.form.NewBatchForm;
import com.gp.cvst.logisoft.util.DBUtil;
import com.logiware.utils.AuditNotesUtils;
import java.util.Date;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts.util.LabelValueBean;

/** 
 * MyEclipse Struts
 * Creation date: 02-26-2008
 * 
 * XDoclet definition:
 * @struts.action path="/batches" name="batchForm" input="/jsps/Accounting/Batches.jsp" scope="request" validate="true"
 */
public class BatchAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        BatchForm batchForm = (BatchForm) form;// TODO Auto-generated method stub
        HttpSession session = request.getSession();
        User loginUser = (User) session.getAttribute("loginuser");
        String buttonValue = batchForm.getButtonValue();
        String readyToPost = batchForm.getReadyToPost();
        String forward = "";
        String sourceLedger = batchForm.getSourceLedger();
        String batchno = batchForm.getBatchno();
        String status = request.getParameter("status");
        Batch batch = new Batch();
        BatchDAO batchDao = new BatchDAO();
        if (session.getAttribute("batchNo") != null) {
            session.removeAttribute("batchNo");
        }
        session.setAttribute("batchNo", batchno);
        if (request.getParameter("paramid") != null) {
            if (session.getAttribute("batchNo") != null) {
                session.removeAttribute("batchNo");
            }
            batch = batchDao.findById(request.getParameter("paramid"));
            NewBatchForm newBatchForm = new NewBatchForm();
            newBatchForm.setBatchno(batch.getBatchId().toString());
            newBatchForm.setDesc(batch.getBatchDesc());
            newBatchForm.setSourceLedger(null != batch.getSourceLedger() ? "" + batch.getSourceLedger().getId() : "0");
            newBatchForm.setType(batch.getType());
            newBatchForm.setTotalCredit(null != batch.getTotalCredit() ? NumberUtils.formatNumber(batch.getTotalCredit(), "###,###,##0.00") : "0.00");
            newBatchForm.setTotalDebit(null != batch.getTotalDebit() ? NumberUtils.formatNumber(batch.getTotalDebit(), "###,###,##0.00") : "0.00");
            if (CommonUtils.isEqual(batch.getReadyToPost(), "yes") && !CommonUtils.isEqual(batch.getStatus(), "posted")) {
                newBatchForm.setPost("on");
            } else {
                newBatchForm.setPost("off");
            }
            newBatchForm.setStatus(batch.getStatus());
            DBUtil dbUtil = new DBUtil();
            request.setAttribute("sourceLedgers", dbUtil.getSourcecodeList(33, "no", "Select Source Code"));
            List typeList = new ArrayList();
            typeList.add(new LabelValueBean("Manual", "manual"));
            typeList.add(new LabelValueBean("Auto", "auto"));
            request.setAttribute("typeList", typeList);
            List postList = new ArrayList();
            postList.add(new LabelValueBean("No", "no"));
            postList.add(new LabelValueBean("Yes", "yes"));
            request.setAttribute("postList", postList);
            request.setAttribute("newBatchForm", newBatchForm);
            return mapping.findForward("edit");
        } else {
            if (buttonValue.equals("showall")) {
                if (session.getAttribute("batchNo") != null) {
                    session.removeAttribute("batchNo");
                }
                List batchesList = batchDao.getGLBatches(null, null, status);
                session.setAttribute("batchesList", batchesList);
                forward = "showall";
            } else if (buttonValue.equals("detail")) {
                if (session.getAttribute("batchNo") != null) {
                    session.removeAttribute("batchNo");
                }
                Batch batchToJournal = new BatchDAO().findById(batchForm.getBatchId());
                session.setAttribute("batch", batchToJournal);
                List batchList = new DBUtil().batchList();
                session.setAttribute("batchList", batchList);
                buttonValue = "detail";
                session.setAttribute("buttonValue", buttonValue);
                session.setAttribute("trade", "journalentry");
                forward = "detail";
            } else if (buttonValue.equals("search")) {
                if (status == null) {
                    status = "";
                }
                List batchesList = batchDao.getGLBatches(batchno, sourceLedger, status);
                session.setAttribute("batchesList", batchesList);
                forward = "search";
            } else if (buttonValue.equals("addnew")) {
                if (session.getAttribute("batch") != null) {
                    session.removeAttribute("batch");
                }
                String batchId = new BatchDAO().getMaxBatchNumber();
                if (CommonUtils.isNotEmpty(batchId)) {
                    batchId = "" + (Integer.parseInt(batchId) + 1);
                } else {
                    batchId = "10000";
                }
                batch = new Batch();
                batch.setBatchId(Integer.parseInt(batchId));
                batch.setStatus("open");
                if (session.getAttribute("line") != null) {
                    session.removeAttribute("line");
                }
                NewBatchForm newBatchForm = new NewBatchForm();
                newBatchForm.setBatchno(batchId);
                newBatchForm.setSourceLedger("11285");
                newBatchForm.setType(batch.getType());
                newBatchForm.setTotalCredit("0.00");
                newBatchForm.setTotalDebit("0.00");
                newBatchForm.setPost("off");
                newBatchForm.setStatus("open");
                request.setAttribute("newBatchForm", newBatchForm);
                DBUtil dbUtil = new DBUtil();
                request.setAttribute("sourceLedgers", dbUtil.getSourcecodeList(33, "no", "Select Source Code"));
                List typeList = new ArrayList();
                typeList.add(new LabelValueBean("Manual", "manual"));
                typeList.add(new LabelValueBean("Auto", "auto"));
                request.setAttribute("typeList", typeList);
                List postList = new ArrayList();
                postList.add(new LabelValueBean("No", "no"));
                postList.add(new LabelValueBean("Yes", "yes"));
                request.setAttribute("postList", postList);
                forward = "addnew";
            } else if (buttonValue.equals("post") || buttonValue.equals("delete")) {
                if (session.getAttribute("postedBatchList") != null) {
                    session.removeAttribute("postedBatchList");
                }
                boolean flag = false;
                boolean flag1 = false;
                int index = batchForm.getIndex();
                List batchesList = (List) session.getAttribute("batchesList");
                BatchesBean batchesBean = (BatchesBean) batchesList.get(index);
                Batch glBatch = new BatchDAO().findById(batchesBean.getBatchno());
                //Batch b1=batchDAO.findById(Integer.parseInt(batch1.getBatchno()));
                List postedBatchList = new ArrayList();
                List nonpostedBatchList = new ArrayList();
                Double debit = 0.00;
                Double credit = 0.00;
                if (buttonValue.equals("post")) {
                    if (CommonUtils.isEmpty(glBatch.getJournalEntrySet())) {
                        flag = true;
                    } else {
                        if (glBatch.getJournalEntrySet() != null) {
                            Iterator iter = glBatch.getJournalEntrySet().iterator();
                            while (iter.hasNext()) {
                                JournalEntry je = (JournalEntry) iter.next();
                                FiscalPeriodDAO fosDAO = new FiscalPeriodDAO();
                                List fiscalPeriodList = fosDAO.getPeriodList3(je.getPeriod());
                                FiscalPeriod fis = new FiscalPeriod();
                                if (fiscalPeriodList != null && fiscalPeriodList.size() > 0) {
                                    fis = (FiscalPeriod) fiscalPeriodList.get(0);
                                }
                                if (CommonUtils.isEmpty(je.getLineItemSet())) {
                                    flag = true;
                                    break;
                                } else if ((je.getDebit() == null || je.getCredit() == null)
                                        || (!StringUtils.contains(je.getJournalEntryDesc(), "NET")
                                        && (je.getDebit() == 0d || je.getCredit() == 0d))) {
                                    flag = true;
                                    break;
                                }
                                if (!flag) {
                                    if (je.getDebit() != null) {
                                        debit = debit + je.getDebit();
                                    }
                                    if (je.getCredit() != null) {
                                        credit = credit + je.getCredit();
                                    }
                                    if (null != loginUser
                                            && (CommonUtils.isEqual(loginUser.getRole().getRoleDesc(), CommonConstants.ROLE_NAME_ADMIN)
                                            || CommonUtils.isEqual(loginUser.getRole().getRoleDesc(), CommonConstants.ROLE_NAME_ACCOUNTING_SUPERVISOR)
                                            || CommonUtils.isEqual(loginUser.getRole().getRoleDesc(), CommonConstants.ROLE_NAME_AP_MANAGER)
                                            || CommonUtils.isEqual(loginUser.getRole().getRoleDesc(), CommonConstants.ROLE_NAME_SUPERVISOR)
                                            || CommonUtils.isEqual(loginUser.getRole().getRoleDesc(), CommonConstants.ROLE_NAME_INTERNATIONAL_COLLECTIONS))) {
                                        String yearStatus = new FiscalYearDAO().getFiscalYearStatus("" + fis.getYear());
                                        if (CommonUtils.isEqual(yearStatus, "Close")) {
                                            flag1 = true;
                                            break;
                                        } else {
                                            postedBatchList.add(je);
                                            if (je.getDebit() != null && je.getCredit() != null) {
                                                if (je.getDebit().equals(je.getCredit())) {
                                                } else {
                                                    nonpostedBatchList.add(je);
                                                    flag = true;
                                                }
                                            }
                                        }
                                    } else {
                                        if (je.getPeriod() != null && fis.getStatus().trim().equalsIgnoreCase("Close")) {
                                            flag1 = true;
                                            break;
                                        }
                                        if (je.getPeriod() != null && fis.getStatus().trim().equalsIgnoreCase("open")) {
                                            postedBatchList.add(je);
                                            if (je.getDebit() != null && je.getCredit() != null) {
                                                if (je.getDebit().equals(je.getCredit())) {
                                                } else {
                                                    nonpostedBatchList.add(je);
                                                    flag = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (flag1) {
                        String message = "";
                        message = "The Period is Closed. Cannot Save";
                        if (nonpostedBatchList != null && nonpostedBatchList.size() > 0) {
                            session.setAttribute("postedBatchList", nonpostedBatchList);
                            message = "The Period is Closed.  Cannot Save";
                        }

                        request.setAttribute("message", message);
                    } else if (flag) {
                        String message = "";
                        message = "Cannot post - batch contains a JE with no line items";
                        if (nonpostedBatchList != null && nonpostedBatchList.size() > 0) {
                            session.setAttribute("postedBatchList", nonpostedBatchList);
                            message = "Cannot post - batch contains a JE with no line items";
                        }
                        request.setAttribute("message", message);
                    } else {
                        AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
                        for (int i = 0; i < postedBatchList.size(); i++) {
                            JournalEntry j1 = (JournalEntry) postedBatchList.get(i);
                            if (j1.getLineItemSet() != null) {
                                Iterator iter = j1.getLineItemSet().iterator();

                                while (iter.hasNext()) {
                                    LineItem l1 = (LineItem) iter.next();
                                    FiscalPeriodDAO fisDAO = new FiscalPeriodDAO();
                                    List fiscalPeriodList = fisDAO.getPeriodList3(j1.getPeriod());
                                    FiscalPeriod fis = new FiscalPeriod();
                                    if (fiscalPeriodList != null && fiscalPeriodList.size() > 0) {
                                        fis = (FiscalPeriod) fiscalPeriodList.get(0);
                                    }
                                    if (l1.getAccount() != null && !l1.getAccount().equals("")) {
                                        List accountBalance = accountBalanceDAO.getAccountNumber(l1.getAccount(), fis.getPeriod(), fis.getYear().toString());
                                        if (accountBalance != null && accountBalance.size() > 0) {
                                            for (int j = 0; j < accountBalance.size(); j++) {
                                                AccountBalance account = (AccountBalance) accountBalance.get(j);
                                                account.setToatlCredit(account.getToatlCredit() + l1.getCredit());
                                                account.setTotalDebit(account.getTotalDebit() + l1.getDebit());
                                                account.setPeriodBalance(account.getTotalDebit() - account.getToatlCredit());
                                                accountBalanceDAO.update(account);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        batchesBean.setPost("yes");
                        batchesBean.setStatus("posted");
                        // batchesList.remove(batchesBean);
                        glBatch.setStatus("posted");
                        glBatch.setReadyToPost("yes");
                        glBatch.setTotalCredit(credit);
                        glBatch.setTotalDebit(debit);
                        StringBuilder desc = new StringBuilder("GL Batch '").append(glBatch.getBatchId()).append("'");
                        desc.append(" posted by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                        AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.GL_BATCH, batch.getBatchId().toString(), NotesConstants.GL_BATCH, loginUser);
                    }
                }
                if (buttonValue.equals("delete")) {
                    if (batchesList.size() >= index) {
                        ((BatchesBean) batchesList.get(index)).setStatus("deleted");
                        batchesBean.setStatus("deleted");
                        glBatch.setStatus("deleted");
                        batchesBean.setReadyToPost("no");
                        glBatch.setReadyToPost("no");
                        if (glBatch.getJournalEntrySet() != null) {
                            glBatch.getJournalEntrySet().clear();
                        }
                        StringBuilder desc = new StringBuilder("GL Batch '").append(glBatch.getBatchId()).append("'");
                        desc.append(" voided by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                        AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.GL_BATCH, batch.getBatchId().toString(), NotesConstants.GL_BATCH, loginUser);
                    }
                    //batchesList.remove(batchesBean);
                }
                forward = "search";
            }
            if (buttonValue.equals("save")) {
                int index = batchForm.getIndex();
                List batchesList = (List) session.getAttribute("batchesList");
                BatchesBean batchesBean = (BatchesBean) batchesList.get(index);
                Batch glBatch = batchDao.findById(batchesBean.getBatchno());
                if (CommonUtils.isEqual(readyToPost, "on")) {
                    batchesBean.setReadyToPost(readyToPost);
                    batchesBean.setStatus("ready to post");
                    glBatch.setReadyToPost("yes");
                    glBatch.setStatus("ready to post");
                } else {
                    batchesBean.setReadyToPost("off");
                    batchesBean.setStatus("open");
                    glBatch.setReadyToPost("no");
                    glBatch.setStatus("open");
                }

                forward = "search";
            }
        }
        request.setAttribute("buttonValue", buttonValue);
        List batchlist = null;
        //This is for Batch Printing 12/01/09
        String reqReportName = "BatchReport";
        if (buttonValue.equals("batchReport")) {
            BatchDAO batchdao = new BatchDAO();
            Integer batchindex = batchForm.getIndex();
            List batchesList = null;
            if (session.getAttribute("batchesList") != null) {
                batchesList = (List) session.getAttribute("batchesList");
            }
            BatchesBean b1 = null;
            String BatchID = "";
            if (!batchesList.isEmpty()) {
                b1 = (BatchesBean) batchesList.get(batchindex);
                BatchID = b1.getBatchno();
            }
            batchlist = (List) batchDao.getbatchDetails(BatchID);
            BatchesBean bdto = new BatchesBean();
            if (!batchlist.isEmpty()) {
                BatchesBC batchbc = null;
                bdto = (BatchesBean) batchlist.get(0);
                String bn = (String) bdto.getBatchno();
                String bdesc = (String) bdto.getDesc();
                String td = (String) bdto.getTotalDebit();
                String tc = (String) bdto.getTotalCredit();
                List batchJELI = null;
                batchJELI = batchdao.getJEandLineDetailsofBatch(BatchID);
                if (batchJELI.isEmpty()) {
                    batchJELI.add("");
                }
                String ReportName = "GLJE" + reqReportName + batchno;
                String fileLocation = "c:/" + ReportName + ".pdf";

                LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
                String outputFileName = loadLogisoftProperties.getProperty("reportLocation") + "/Documents/JournalEntry/" + DateUtils.formatDate(new Date(), "yyyy/MM/dd") + "/";
                File file = new File(outputFileName);
                if (!file.exists()) {
                    file.mkdirs();
                }
                outputFileName += bn + ".pdf";
                JournalEntryBC journalEntryBC = new JournalEntryBC();
                    String realPath = this.getServlet().getServletContext().getRealPath("/");
                    journalEntryBC.createJournalEntryReport(bn, outputFileName, realPath);
                    request.setAttribute("fileName", outputFileName);
            }

            forward = "search";
        }

        return mapping.findForward(forward);
    }

    public void redirectToReport(HttpServletRequest request, HttpServletResponse response)throws Exception{
            response.sendRedirect(request.getContextPath() + "/report");
    }
}
