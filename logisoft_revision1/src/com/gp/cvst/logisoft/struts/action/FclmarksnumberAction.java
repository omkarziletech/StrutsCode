/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.DateUtils;
import com.gp.cong.logisoft.bc.fcl.ImportBc;
import com.gp.cong.logisoft.domain.User;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cvst.logisoft.domain.FclBl;
import com.gp.cvst.logisoft.domain.FclBlContainer;
import com.gp.cvst.logisoft.domain.FclBlMarks;
import com.gp.cvst.logisoft.domain.FclHouseDesc;
import com.gp.cvst.logisoft.domain.FclMastDesc;
import com.gp.cvst.logisoft.hibernate.dao.FclBlContainerDAO;
import com.gp.cvst.logisoft.hibernate.dao.FclBlDAO;
import com.gp.cvst.logisoft.struts.form.FclmarksnumberForm;

/**
 * MyEclipse Struts Creation date: 09-07-2008
 *
 * XDoclet definition:
 *
 * @struts.action path="/fclmarksnumber" name="fclmarksnumberForm"
 * input="/jsps/fclQuotes/fclmarksnumber.jsp" scope="request" validate="true"
 */
public class FclmarksnumberAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        FclmarksnumberForm fclmarksnumberForm = (FclmarksnumberForm) form;// TODO
        // Auto-generated
        // method
        // stub
        HttpSession session = ((HttpServletRequest) request).getSession(true);
        String buttonValue = fclmarksnumberForm.getButtonValue();
        String descpkgs = fclmarksnumberForm.getDescpkgs();
        // String marksNo = fclmarksnumberForm.getMarksNo();
        String measureCbm = fclmarksnumberForm.getMeasureCbm();
        String measureCft = fclmarksnumberForm.getMeasureCft();
        String noOfpkgs = fclmarksnumberForm.getNoOfpkgs();
        String weightKgs = fclmarksnumberForm.getWeightKgs();
        String tareWeightKgs = fclmarksnumberForm.getTareWeightKgs();
        String bottomLineVgmWeightKgs = fclmarksnumberForm.getBottomLineVgmWeightKgs();
        NumberFormat numberFormat = new DecimalFormat("###,###,##0.00");
        String weightLbs = fclmarksnumberForm.getWeightLbs();
        String tareWeightLbs = fclmarksnumberForm.getTareWeightLbs();
        String bottomLineVgmWeightLbs = fclmarksnumberForm.getBottomLineVgmWeightLbs();
        String verificationSignature = fclmarksnumberForm.getVerificationSignature();
        String netWeightLbs = fclmarksnumberForm.getNetweightLbs();
        String netWeightKgs = fclmarksnumberForm.getNetweightKgs();
        String descForMasterBl = fclmarksnumberForm.getDescForMasterBl();
        String uom = fclmarksnumberForm.getUom();
        String index = fclmarksnumberForm.getIndex();
        String bol = fclmarksnumberForm.getBol();
        String useHouseDescription = fclmarksnumberForm.getCopyDescription();
        request.setAttribute("bol", bol);
        String containerId = fclmarksnumberForm.getContainerId();
        request.setAttribute("containerId", containerId);
        FclBlMarks fclBlMarks = null;
        List<FclBlMarks> fclBlMarksList = null;
        List<FclBlMarks> fclMarksList = new ArrayList();
        FclBlDAO fclBlDAO = new FclBlDAO();
        FclBlContainerDAO fclBlContainerDAO = new FclBlContainerDAO();
        boolean importFlag;
        //--request to display FileNo and UnitNo-----
        if (null != bol) {
            FclBl fcl = fclBlDAO.findById(Integer.parseInt(bol));
            importFlag = null != fcl && "I".equalsIgnoreCase(fcl.getImportFlag());
        } else if (null != request.getParameter("importFlag")) {
            importFlag = "true".equalsIgnoreCase(request.getParameter("importFlag"));
        } else {
            importFlag = null != session.getAttribute(ImportBc.sessionName);
        }
        request.setAttribute("importFlag", importFlag);
        request.setAttribute("FileNo", request.getParameter("fileNo"));
        request.setAttribute("UnitNo", request.getParameter("unitNo"));
        //---request to set index-----
        request.setAttribute("index1", request.getParameter("index1"));
        request.setAttribute("remarkListforDesc", request.getParameter("remarkDesc"));
        String userName = "";
        User user = new User();
        if (session.getAttribute("loginuser") != null) {
            user = (User) session.getAttribute("loginuser");
            userName = user.getLoginName();
        }
        if (request.getParameter("button") != null && request.getParameter("button").equals("NewFCLBL")) {
            String bol1 = request.getParameter("bolid");
            String containerId1 = request.getParameter("containerId");
            fclBlMarksList = new ArrayList();
            Integer trilerNoId;
            // FclBl fclBl=fclBlDAO.findById(Integer.parseInt(bol));
            if (containerId1 != null && !containerId1.equals("")) {
                FclBlContainer fclBlContainer = (fclBlContainerDAO.findById(Integer.parseInt(containerId1)));
//                if (fclBlContainer.getFclBlMarks() != null) {
//                    Iterator iter = fclBlContainer.getFclBlMarks().iterator();
//                    while (iter.hasNext()) {
//                        FclBlMarks tempFclBlMarks = (FclBlMarks) iter.next();
//                        fclBlMarksList.add(tempFclBlMarks);
//                    }
//                }
                fclMarksList = fclBlContainerDAO.getPakagesDetails(fclBlContainer.getTrailerNoId());
                for (FclBlMarks fclMarksNewList : fclMarksList) {
                    fclBlMarksList.add(fclMarksNewList);
                }
                request.setAttribute("containerMarks", fclBlContainer.getMarks());
            }
            //request.setAttribute("fclBlMarksList", fclBlMarksList);
            request.setAttribute("fclBlMarksList", fclBlMarksList);
            request.setAttribute("bol", bol1);
            request.setAttribute("containerId", containerId1);
        } else if (buttonValue != null && (buttonValue.equals("save") || buttonValue.equals("add") || buttonValue.equals("update"))) {
            String mastDescArray[] = descForMasterBl.split("\\n");
            String houseDescArray[] = descpkgs.split("\\n");
            FclBlContainer fclBlContainer = (fclBlContainerDAO.findById(Integer.parseInt(containerId)));
            // fclBlContainer.setMarks(marksNo);
            FclBl fclBl = fclBlDAO.findById(Integer.parseInt(bol));
            fclBlMarks = new FclBlMarks();
            /*
             * if(fclBlContainer.getFclBlMarks()!=null){ Iterator
             * iter=fclBlContainer.getFclBlMarks().iterator();
             * while(iter.hasNext()){ fclBlMarks=(FclBlMarks)iter.next(); } }
             */
            // fclBlMarks.setMarkNo(marksNo);
            fclBlMarks.setDescPckgs(descpkgs);
            fclBlMarks.setDescForMasterBl(descForMasterBl);
            if (noOfpkgs != null && !noOfpkgs.trim().equals("")) {
                int ind = noOfpkgs.indexOf(" ");
                if (ind != -1) {
                    noOfpkgs = noOfpkgs.substring(0, ind) + noOfpkgs.substring(ind + 1, noOfpkgs.length());
                }
                fclBlMarks.setNoOfPkgs(Integer.parseInt(noOfpkgs.trim()));
            } else {
                fclBlMarks.setNoOfPkgs(null);
            }
            if (uom != null && !uom.equals("")) {
                fclBlMarks.setUom(uom);
            } else {
                fclBlMarks.setUom(null);
            }
            if (weightLbs != null && weightLbs.contains(",")) {
                weightLbs = weightLbs.replace(",", "");
            }
            if (weightKgs != null && weightKgs.contains(",")) {
                weightKgs = weightKgs.replace(",", "");
            }
            if (measureCft != null && measureCft.contains(",")) {
                measureCft = measureCft.replace(",", "");
            }
            if (weightLbs == null || weightLbs.equals("")) {
                weightLbs = "0.000";
            }
            if (netWeightKgs == null || netWeightKgs.equals("")) {
                netWeightKgs = "0.000";
            }
            if (measureCbm == null || measureCbm.equals("")) {
                measureCbm = "0.000";
            }
            if (measureCft == null || measureCft.equals("")) {
                measureCft = "0.000";
            }
            if (weightKgs == null || weightKgs.equals("")) {
                weightKgs = "0.000";
            }
            if (tareWeightKgs == null || tareWeightKgs.equals("")) {
                tareWeightKgs = "0.000";
            }
            if (bottomLineVgmWeightKgs == null || bottomLineVgmWeightKgs.equals("")) {
                bottomLineVgmWeightKgs = "0.000";
            }
            if (tareWeightLbs == null || tareWeightLbs.equals("")) {
                tareWeightLbs = "0.000";
            }
            if (bottomLineVgmWeightLbs == null || bottomLineVgmWeightLbs.equals("")) {
                bottomLineVgmWeightLbs = "0.000";
            }
            if (null != userName && !userName.equals("")) {
                fclBlMarks.setUpdateBy(userName);
            } else {
                fclBlMarks.setUpdateBy("");
            }
            fclBlMarks.setTareWeightKgs(Double.parseDouble(tareWeightKgs.replaceAll(",", "")));
            fclBlMarks.setBottomLineVgmWeightKgs(Double.parseDouble(bottomLineVgmWeightKgs.replaceAll(",", "")));
            fclBlMarks.setTareWeightLbs(Double.parseDouble(tareWeightLbs.replaceAll(",", "")));
            fclBlMarks.setBottomLineVgmWeightLbs(Double.parseDouble(bottomLineVgmWeightLbs.replaceAll(",", "")));
            fclBlMarks.setVerificationSignature(null != verificationSignature ? verificationSignature.toUpperCase() : "");
            if (fclmarksnumberForm.getVerificationDate() != null && !fclmarksnumberForm.getVerificationDate().trim().equals("")) {
                fclBlMarks.setVerificationDate(DateUtils.parseDate(fclmarksnumberForm.getVerificationDate(), "MM/dd/yyyy HH:mm a"));
            } else {
                fclBlMarks.setVerificationDate(null);
            }
            fclBlMarks.setNetweightLbs(Double.parseDouble(weightLbs.replaceAll(",", "")));
            fclBlMarks.setNetweightKgs(Double.parseDouble(weightKgs.replaceAll(",", "")));
            fclBlMarks.setMeasureCbm(Double.parseDouble(measureCbm.replaceAll(",", "")));
            fclBlMarks.setMeasureCft(Double.parseDouble(measureCft.replaceAll(",", "")));

            /*if (weightKgs != null && !weightKgs.equals("0.000")) {
             if (fclBlMarks.getNetweightKgs() != null
             && !numberFormat.format(fclBlMarks.getNetweightKgs())
             .equals(weightKgs)) {
             netwtkgs = Double.parseDouble(weightKgs);
             netwtlbs = netwtkgs * 2.205;
             netWeightLbs = netwtlbs.toString();
             fclBlMarks.setNetweightKgs(netwtkgs);
             if(netWeightLbs.contains(",")){
             netWeightLbs=netWeightLbs.replace(",", "");
             }
             fclBlMarks
             .setNetweightLbs(Double.parseDouble(netWeightLbs));
             } else {
             if(weightKgs.contains(",")){
             weightKgs=weightKgs.replace(",", "");
             }
             netwtkgs = Double.parseDouble(weightKgs);
             netwtlbs = netwtkgs * 2.205;
             String netWeightLbs1 = netwtlbs.toString();
             fclBlMarks.setNetweightKgs(netwtkgs);
             if(netWeightLbs1.contains(",")){
             netWeightLbs1=netWeightLbs1.replace(",", "");
             }
             fclBlMarks.setNetweightLbs(Double
             .parseDouble(netWeightLbs1));
             }
             }*/
            /*if (weightLbs != null && !weightLbs.equals("0.000")) {
             if (fclBlMarks.getNetweightLbs() != null
             && !numberFormat.format(fclBlMarks.getNetweightLbs())
             .equals(weightLbs)) {
             if(weightLbs.contains(",")){
             weightLbs=weightLbs.replace(",", "");
             }
             netwtlbs = Double.parseDouble(weightLbs);
             netwtkgs = netwtlbs * 0.4536;
             netWeightKgs = netwtkgs.toString();
             fclBlMarks.setNetweightLbs(netwtlbs);
             fclBlMarks
             .setNetweightKgs(Double.parseDouble(netWeightKgs));
             } else {
             netwtlbs = Double.parseDouble(weightLbs);
             netwtkgs = netwtlbs * 0.4536;
             String netWeightKgs1 = netwtkgs.toString();
             fclBlMarks.setNetweightLbs(netwtlbs);
             fclBlMarks.setNetweightKgs(Double
             .parseDouble(netWeightKgs1));
             }
             }*/

            /*Double mscbm;
             Double mscft;

             if (measureCbm != null && !measureCbm.equals("0.000")) {
             if (fclBlMarks.getMeasureCbm() != null
             && !numberFormat.format(fclBlMarks.getMeasureCbm())
             .equals(measureCbm)) {
             mscbm = Double.parseDouble(measureCbm);
             mscft = mscbm * 35.31;
             measureCft = mscft.toString();
             fclBlMarks.setMeasureCbm(mscbm);
             fclBlMarks.setMeasureCft(Double.parseDouble(measureCft));
             } else {
             mscbm = Double.parseDouble(measureCbm);
             mscft = mscbm * 35.31;
             String measureCft1 = mscft.toString();
             fclBlMarks.setMeasureCbm(mscbm);
             fclBlMarks.setMeasureCft(Double.parseDouble(measureCft1));
             }
             }
             if (measureCft != null && !measureCft.equals("0.000")) {
             if (fclBlMarks.getMeasureCft() != null
             && !numberFormat.format(fclBlMarks.getMeasureCft())
             .equals(measureCft)) {
             mscft = Double.parseDouble(measureCft);
             mscbm = mscft * 0.02832;
             measureCft = mscbm.toString();
             fclBlMarks.setMeasureCft(mscft);
             fclBlMarks.setMeasureCbm(Double.parseDouble(measureCft));
             } else {
             mscft = Double.parseDouble(measureCft);
             mscbm = mscft * 0.02832;
             String measureCft1 = mscbm.toString();
             fclBlMarks.setMeasureCft(mscft);
             fclBlMarks.setMeasureCbm(Double.parseDouble(measureCft1));
             }
             }*/
            Set<FclMastDesc> addMastDesc = new LinkedHashSet<FclMastDesc>();
            String temHouseHBL = "";
            String temMasterHBL = "";

            for (int i = 0; i < mastDescArray.length; i++) {
                FclMastDesc fclMastDesc = new FclMastDesc();
                fclMastDesc.setMastDesc(mastDescArray[i]);
                temMasterHBL += mastDescArray[i];
                addMastDesc.add(fclMastDesc);
            }
            Set<FclHouseDesc> addHouseDesc = new LinkedHashSet<FclHouseDesc>();
            for (int i = 0; i < houseDescArray.length; i++) {
                FclHouseDesc fclHouseDesc = new FclHouseDesc();
                fclHouseDesc.setMastDesc(houseDescArray[i]);
                addHouseDesc.add(fclHouseDesc);
                temHouseHBL += houseDescArray[i];

            }
            fclBlMarks.setHouseBlTempString(temHouseHBL);
            fclBlMarks.setMasterBlTempString(temMasterHBL);
            fclBlMarks.setFclHouseDescset(addHouseDesc);
            fclBlMarks.setFclMastDescset(addMastDesc);

            if (useHouseDescription != null && useHouseDescription.equals("on")) {
                fclBlMarks.setCopyDescription("Y");
            } else {
                fclBlMarks.setCopyDescription("N");
            }
            if (buttonValue.equals("save")) {
                request.setAttribute("closemarks", "closemarks");
            }
            Set fclBlMarksSet = new LinkedHashSet<FclBlMarks>();
            fclBlMarksList = new ArrayList();
//            for (Iterator iter = fclBlContainer.getFclBlMarks().iterator(); iter.hasNext();) {
//                FclBlMarks tempFclBlMarks = (FclBlMarks) iter.next();
//                fclBlMarksList.add(tempFclBlMarks);
//            }
            fclMarksList = fclBlContainerDAO.getPakagesDetails(fclBlContainer.getTrailerNoId());
            for (FclBlMarks fclMarksNewList : fclMarksList) {
                fclBlMarksList.add(fclMarksNewList);
            }
            if (buttonValue.equals("save")) {
                if (fclBlMarks.getNetweightKgs() == null) {
                } else {
                    fclBlMarksList.add(fclBlMarks);
                }
            } else {
                if (buttonValue.equals("update")) {
                    int i = 0;
                    fclMarksList = fclBlContainerDAO.getPakagesDetails(fclBlContainer.getTrailerNoId());
                    for (FclBlMarks fclMarksNewList : fclMarksList) {
                        if (fclMarksNewList.getId().toString().equals(index)) {
                            fclMarksNewList.setNoOfPkgs(fclBlMarks.getNoOfPkgs());
                            fclMarksNewList.setCopyDescription(fclBlMarks.getCopyDescription());
                            fclMarksNewList.setDescForMasterBl(fclBlMarks.getDescForMasterBl());
                            fclMarksNewList.setDescPckgs(fclBlMarks.getDescPckgs());
                            fclMarksNewList.setMeasureCbm(fclBlMarks.getMeasureCbm());
                            fclMarksNewList.setMeasureCft(fclBlMarks.getMeasureCft());
                            fclMarksNewList.setNetweightKgs(fclBlMarks.getNetweightKgs());
                            fclMarksNewList.setNetweightLbs(fclBlMarks.getNetweightLbs());
                            fclMarksNewList.setWeightKgs(fclBlMarks.getWeightKgs());
                            fclMarksNewList.setWeightLbs(fclBlMarks.getWeightLbs());
                            fclMarksNewList.setTareWeightKgs(fclBlMarks.getTareWeightKgs());
                            fclMarksNewList.setTareWeightLbs(fclBlMarks.getTareWeightLbs());
                            fclMarksNewList.setBottomLineVgmWeightKgs(fclBlMarks.getBottomLineVgmWeightKgs());
                            fclMarksNewList.setBottomLineVgmWeightLbs(fclBlMarks.getBottomLineVgmWeightLbs());
                            fclMarksNewList.setVerificationSignature(fclBlMarks.getVerificationSignature());
                            fclMarksNewList.setVerificationDate(fclBlMarks.getVerificationDate());
                            fclMarksNewList.setUom(fclBlMarks.getUom());
                            if (null != userName && !userName.equals("")) {
                                fclMarksNewList.setUpdateBy(userName);
                            } else {
                                fclMarksNewList.setUpdateBy("");
                            }
                        }
                        i++;
                    }
                } else {
                    fclBlMarksList.add(fclBlMarks);
                }
            }
            fclBlMarksSet.addAll(fclBlMarksList);
            if (fclBl.getFclcontainer() != null) {
                Iterator iter = (Iterator) fclBl.getFclcontainer().iterator();
                while (iter.hasNext()) {
                    FclBlContainer tempFclBlContainer = (FclBlContainer) iter.next();
                    if (tempFclBlContainer.getTrailerNoId().toString().equals(
                            fclBlContainer.getTrailerNoId().toString())) {
                        // tempFclBlContainer.setMarks(marksNo);
                        tempFclBlContainer.setFclBlMarks(fclBlMarksSet);
                        request.setAttribute("containerMarks", tempFclBlContainer.getMarks());
                        break;
                    }
                }
            }
            //request.setAttribute("fclBlMarksList", fclBlMarksList);
            fclBlDAO.update(fclBl);
            fclBlMarksList = new ArrayList();
            fclMarksList = fclBlContainerDAO.getPakagesDetails(fclBlContainer.getTrailerNoId());
            for (FclBlMarks fclMarksNewList : fclMarksList) {
                fclBlMarksList.add(fclMarksNewList);
            }
            request.setAttribute("fclBlMarksList", fclBlMarksList);
            session.setAttribute("mastStringArray", mastDescArray);
            //--request to display FileNo and UnitNo-----
            request.setAttribute("FileNo", request.getParameter("completeFileNo"));
            request.setAttribute("UnitNo", request.getParameter("UnitNumber"));

        } else if (buttonValue != null && buttonValue.equals("edit")) {
            fclBlMarksList = new ArrayList<FclBlMarks>();
            FclBlContainer fclBlContainer = (fclBlContainerDAO.findById(Integer.parseInt(containerId)));
            fclMarksList = fclBlContainerDAO.getPakagesDetails(fclBlContainer.getTrailerNoId());
            for (FclBlMarks fclMarksNewList : fclMarksList) {
                if (fclMarksNewList.getId().toString().equals(index)) {
                    request.setAttribute("fclBlMarks", fclMarksNewList);
                }
                fclBlMarksList.add(fclMarksNewList);
            }
//            for (Iterator iter = fclBlContainer.getFclBlMarks().iterator(); iter.hasNext();) {
//                FclBlMarks tempFclBlMarks = (FclBlMarks) iter.next();
//                if (tempFclBlMarks.getId().toString().equals(index)) {
//                    request.setAttribute("fclBlMarks", tempFclBlMarks);
//                }
//                fclBlMarksList.add(tempFclBlMarks);
//            }
            request.setAttribute("display", "display");
            request.setAttribute("fclBlMarksList", fclBlMarksList);
            //--request to display FileNo and UnitNo-----
            request.setAttribute("FileNo", request.getParameter("completeFileNo"));
            request.setAttribute("UnitNo", request.getParameter("UnitNumber"));

        } else if (buttonValue != null && buttonValue.equals("delete")) {
            FclBlContainer fclBlContainer = (fclBlContainerDAO.findById(Integer.parseInt(containerId)));
            FclBl fclBl = fclBlDAO.findById(Integer.parseInt(bol));
            for (Iterator iter = fclBlContainer.getFclBlMarks().iterator(); iter.hasNext();) {
                FclBlMarks tempFclBlMarks = (FclBlMarks) iter.next();
                if (tempFclBlMarks.getId().toString().equals(index)) {
                    fclBlContainer.getFclBlMarks().remove(tempFclBlMarks);
                    break;
                }
            }

            Set fclBlMarksSet = new LinkedHashSet<FclBlMarks>();
            fclBlMarksList = new ArrayList();
            fclMarksList = fclBlContainerDAO.getPakagesDetails(fclBlContainer.getTrailerNoId());
            for (FclBlMarks fclMarksNewList : fclMarksList) {
                fclBlMarksList.add(fclMarksNewList);
                fclBlMarksSet.add(fclMarksNewList);
            }
//            for (Iterator iter = fclBlContainer.getFclBlMarks().iterator(); iter.hasNext();) {
//                FclBlMarks tempFclBlMarks = (FclBlMarks) iter.next();
//                fclBlMarksList.add(tempFclBlMarks);
//                fclBlMarksSet.add(tempFclBlMarks);
//            }
            if (fclBl.getFclcontainer() != null) {
                Iterator iter = (Iterator) fclBl.getFclcontainer().iterator();
                while (iter.hasNext()) {
                    FclBlContainer tempFclBlContainer = (FclBlContainer) iter.next();
                    if (tempFclBlContainer.getTrailerNoId().equals(
                            fclBlContainer.getTrailerNoId())) {
                        tempFclBlContainer.setFclBlMarks(fclBlMarksSet);
                        break;
                    }
                }
            }
            // request.setAttribute("containerMarks",
            // fclmarksnumberForm.getMarksNo());
            //request.setAttribute("fclBlMarksList", sort(fclBlMarksList));
            request.setAttribute("fclBlMarksList", fclBlMarksList);
            fclBlDAO.update(fclBl);

            //------request to display fileno and unitno-------------
            request.setAttribute("FileNo", request.getParameter("completeFileNo"));
            request.setAttribute("UnitNo", request.getParameter("UnitNumber"));

        }/*else if(null!=buttonValue && buttonValue.equals("closeThePage")){
         request.setAttribute("closemarks", "closemarks");
         }*/

        request.setAttribute("manifest", request.getParameter("manifest"));
        return mapping.findForward("success");
    }
    //------METHOD TO SORT THE LIST--------------------------

//    public List sort(List fclBlMarksList) {
//        Map fclBlMarksmap = new LinkedHashMap();
//        List tempList = new ArrayList();
//        List marksList = new ArrayList();
//        if (fclBlMarksList != null && fclBlMarksList.size() > 0) {
//            Iterator iter = fclBlMarksList.iterator();
//            while (iter.hasNext()) {
//                FclBlMarks tempFclBlMarks = (FclBlMarks) iter.next();
//                if (null != tempFclBlMarks.getId()) {
//                    tempList.add(tempFclBlMarks.getId());
//                    fclBlMarksmap.put(tempFclBlMarks.getId(), tempFclBlMarks);
//                }
//            }
//        }
//        Collections.sort(tempList);
//        for (Iterator iterator = tempList.iterator(); iterator.hasNext();) {
//            Integer name = (Integer) iterator.next();
//            marksList.add((FclBlMarks) fclBlMarksmap.get(name));
//        }
//        return marksList;
//    }
}
