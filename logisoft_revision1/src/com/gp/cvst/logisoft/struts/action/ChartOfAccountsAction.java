/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import com.gp.cvst.logisoft.beans.AccountMaintenenceBean;
import com.gp.cvst.logisoft.beans.AccountStructureBean;
import com.gp.cvst.logisoft.beans.ChartOfAccountBean;
import com.gp.cvst.logisoft.bo.CChartCodeBO;
import com.gp.cvst.logisoft.domain.AccountDetails;
import com.gp.cvst.logisoft.domain.AccountGroup;
import com.gp.cvst.logisoft.domain.AcctStructure;
import com.gp.cvst.logisoft.domain.FiscalPeriod;
import com.gp.cvst.logisoft.domain.FiscalYear;
import com.gp.cvst.logisoft.domain.SubledgerAccts;
import com.gp.cvst.logisoft.hibernate.dao.AccountBalanceDAO;
import com.gp.cvst.logisoft.hibernate.dao.AccountDetailsDAO;
import com.gp.cvst.logisoft.hibernate.dao.AccountGroupDAO;
import com.gp.cvst.logisoft.hibernate.dao.AcctStructureDAO;
import com.gp.cvst.logisoft.hibernate.dao.BudgetDAO;
import com.gp.cvst.logisoft.hibernate.dao.FiscalPeriodDAO;
import com.gp.cvst.logisoft.hibernate.dao.LineItemDAO;
import com.gp.cvst.logisoft.hibernate.dao.SegmentDAO;
import com.gp.cvst.logisoft.hibernate.dao.SubledgerAcctsDAO;
import com.gp.cvst.logisoft.struts.form.ChartOfAccountsForm;
import com.gp.cvst.logisoft.util.DBUtil;
import com.logiware.accounting.dao.ChartOfAccountsDAO;
import com.logiware.accounting.model.AccountModel;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.regex.Pattern;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 * MyEclipse Struts Creation date: 02-08-2008
 *
 * XDoclet definition:
 *
 * @struts.action input="/jsps/Accounting/ChartOfAccounts.jsp" validate="true"
 */
public class ChartOfAccountsAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        final String ACCOUNT_STRUCTURE = "AccountStructure";
        ChartOfAccountsForm caf = (ChartOfAccountsForm) form;
        AccountMaintenenceBean acbean = new AccountMaintenenceBean();
        String acct = caf.getAcct();
        String desc = caf.getDesc();
        String status = caf.getAcctStatus();
        String type = caf.getAccttype();
        String normalbal = caf.getNormalbalance();
        String multicurr = caf.getMulticurrency();
        String acct1 = caf.getAcct1();
        String datecreated = caf.getDatecreated();
        String lastdatemodified = caf.getDatelastmodified();
        String controlacct = caf.getControlacct();
        String defaultcurrency = caf.getDefaultcurrency();
        String clacct = caf.getClosetoacct();
        String acctgroup = caf.getAcctGroup();
        String acctstructure = caf.getAcctstruct();
        String index = caf.getIndex();
        // String groupdesc=caf.getGroupdesc();
        String account = "";
        String account1 = "";
        List ChartofaccountsList = null;
        List subLedgeraddList = null;
        String forwardName = null;
        String buttonValue = caf.getButtonValue();
        HttpSession session = request.getSession(true);

        if (request.getParameter("paramid") != null) {

            String paramid = request.getParameter("paramid");
            AccountGroup editdesc = new AccountGroup();
            AccountGroupDAO acdao = new AccountGroupDAO();
            AccountDetailsDAO acdao1 = new AccountDetailsDAO();
            AccountDetails editdetails = new AccountDetails();
            editdetails = acdao1.findById(paramid);
            List editAccountdetailslist = new ArrayList();
            editAccountdetailslist.add(editdetails.getAccount());
            StringTokenizer st = new StringTokenizer(editdetails.getAccount(), "-");
            List actList = new ArrayList();
            while (st.hasMoreTokens()) {
                actList.add(st.nextToken());
            }
            AcctStructureDAO asdao = new AcctStructureDAO();
            AcctStructure as = new AcctStructure();
            if (CommonUtils.isNotEmpty(editdetails.getAcctStructure())) {
                if (Pattern.matches("^\\d*$", editdetails.getAcctStructure())) {
                    int asid = Integer.parseInt(editdetails.getAcctStructure());
                    as = asdao.findById(asid);
                } else {
                    String id = asdao.findByAcctStructureName(editdetails.getAcctStructure());
                    as = asdao.findById(Integer.parseInt(id));
                }
            } else {
                as = asdao.findById(1);
            }
            String AcctStruct = "";
            if (as != null) {
                AcctStruct = as.getAcctStructureName();
            }
            editAccountdetailslist.add(AcctStruct);
            // editAccountdetailslist.add(editdetails.getAcctStructure());
            editAccountdetailslist.add(editdetails.getAcctDesc());
            editAccountdetailslist.add(editdetails.getDateCreated());
            editAccountdetailslist.add(editdetails.getAcctType());
            editAccountdetailslist.add(editdetails.getAcctGroup());
            editdesc.setAcctGroup(editdetails.getAcctGroup());
            List acgrp = acdao.findByExample(editdesc);
            if (editdetails.getAcctGroup() != null && !acgrp.isEmpty()) {
                editAccountdetailslist.add(((AccountGroup) acgrp.get(0)).getGroupDesc());
            } else {
                editAccountdetailslist.add(editdetails.getAcctGroup());
            }
            editAccountdetailslist.add(editdetails.getAcctStatus());
            editAccountdetailslist.add(editdetails.getNormalBalance());
            editAccountdetailslist.add(editdetails.getControlAcct());
            editAccountdetailslist.add(editdetails.getCloseToAcct());
            editAccountdetailslist.add(editdetails.getMultiCurrency());
            editAccountdetailslist.add(editdetails.getDefaultCurrency());
            editAccountdetailslist.add(editdetails.getDateLastModified());

            session.setAttribute("actList", actList);
            session.setAttribute("editAccountdetailslist", editAccountdetailslist);
            session.setAttribute("reportCategory", editdetails.getReportCategory());
            DBUtil db = new DBUtil();
            session.setAttribute("AccountDetails", db.getAcctDetails());
            request.setAttribute("accountgroup", db.getAcctgroupByType(editdetails.getAcctType()));
            session.setAttribute("paramid", paramid);
            subLedgeraddList = db.getSubLedgeraddList(editdetails.getAccount());
            session.setAttribute("subLedgeraddList", subLedgeraddList);

            // To get segment list for an Account Structure
            SegmentDAO segDAO = new SegmentDAO();
            List segmentList = null;
            String astruct = "";
            if (editdetails.getAcctStructure().equals(ACCOUNT_STRUCTURE)) {
                astruct = "1";
            } else {
                astruct = asdao.findByAcctStructureName(editdetails.getAcctStructure());
            }
            if (null == astruct) {
                astruct = editdetails.getAcctStructure();
            }
            segmentList = segDAO.findForShow(astruct);

            AccountStructureBean asbean = null;
            int j = 0;
            List segidList = new ArrayList();
            while (j < segmentList.size()) {
                asbean = (AccountStructureBean) segmentList.get(j);
                int id = asbean.getId();
                segidList.add(id);
                asbean = null;
                j++;
            }
            session.setAttribute("eSegList", segidList);
            return mapping.findForward("editAccount");
        }
        if (buttonValue.equals("removeAcctValues")) {
            session.removeAttribute("acct");
            session.removeAttribute("EdAcct");
            session.removeAttribute("StAcct");
            session.removeAttribute("acct1");
            forwardName = "search";
        }

        if (buttonValue.equals("AcctHistory")) {
            String paramid = request.getParameter("paramidAH");
            AccountDetailsDAO acdao2 = new AccountDetailsDAO();
            AccountDetails editdetails = new AccountDetails();
            editdetails = acdao2.findById("paramid");
            List ChartOfAccountsList = (List) session.getAttribute("ChartofaccountsList");

            int in = Integer.parseInt(index);
            --in;

            ChartOfAccountBean coab = new ChartOfAccountBean();
            coab = (ChartOfAccountBean) ChartOfAccountsList.get(in);
            coab.getAcct();
            List aclist = new ArrayList();
            aclist.add(coab.getAcct());
            aclist.add(coab.getDesc());
            request.setAttribute("index", index);
            session.setAttribute("aclist", aclist);
            return mapping.findForward("acchistory");
        } else if (buttonValue.equals("Transactionhitory")) {
            AccountDetailsDAO acdao2 = new AccountDetailsDAO();
            AccountDetails editdetails = new AccountDetails();
            editdetails = acdao2.findById("paramid");
            List Abc = (List) session.getAttribute("ChartofaccountsList");

            int in = Integer.parseInt(index);
            --in;
            ChartOfAccountBean coab = new ChartOfAccountBean();
            coab = (ChartOfAccountBean) Abc.get(in);
            account = coab.getAcct();
            account1 = coab.getAccount();
            List aclist = new ArrayList();
            aclist.add(coab.getAcct());

            aclist.add(coab.getDesc());
            session.setAttribute("aclist", aclist);

            List itemdetails = null;
            LineItemDAO ldao = new LineItemDAO();

            FiscalPeriodDAO fpdao = new FiscalPeriodDAO();
            Calendar cal = Calendar.getInstance();
            int y = cal.get(Calendar.YEAR);
            double p = cal.get(Calendar.MONTH);
            p++;
            NumberFormat n = new DecimalFormat("00");
            Iterator itr = fpdao.getStartEndDate(String.valueOf(y), n.format(p));

            String sdate = "";
            String edate = "";
            if (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                Date std = (Date) row[0];
                Date ed = (Date) row[1];
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                sdate = sdf.format(std);
                edate = sdf.format(ed);
            }

            List fiscalPeriodList = fpdao.getAllFiscalPeriods1();
            FiscalPeriod currentFiscalPeriod = fpdao.getCurrentOpenPeriod();
            request.setAttribute("fiscalPeriods", fiscalPeriodList);
            request.setAttribute("toFiscalPeriod", currentFiscalPeriod);
            request.setAttribute("fromFiscalPeriod", currentFiscalPeriod);
            searchTransactions(account, account1, currentFiscalPeriod.getPeriodDis(), currentFiscalPeriod.getPeriodDis(), request);
            request.setAttribute("StartDate", sdate);
            request.setAttribute("EndDate", edate);
            session.removeAttribute("navigateTransHistory");
            return mapping.findForward("transhistory");

        } else if (buttonValue.equals("Fiscalcomparisonset")) {
            String paramid = request.getParameter("paramidAH");
            AccountDetailsDAO acdao2 = new AccountDetailsDAO();
            AccountDetails editdetails = new AccountDetails();
            editdetails = acdao2.findById("paramid");
            List Abc = (List) session.getAttribute("ChartofaccountsList");
            int in = Integer.parseInt(index);
            --in;
            ChartOfAccountBean coab = new ChartOfAccountBean();
            coab = (ChartOfAccountBean) Abc.get(in);
            coab.getAcct();
            List aclist = new ArrayList();
            aclist.add(coab.getAcct());
            aclist.add(coab.getDesc());
            session.setAttribute("aclist", aclist);
            BudgetDAO bdao = new BudgetDAO();
            List comparisondetails = null;
            Calendar calendar = Calendar.getInstance();
            int year = calendar.get(Calendar.YEAR);
            comparisondetails = bdao.findforBudgetforSet2(coab.getAcct(),
                    String.valueOf(year), String.valueOf(year), "1");
            request.setAttribute("comparisondetails", comparisondetails);
            request.setAttribute("fiscalset1", "Actuals");
            request.setAttribute("fiscalset2", "Budget");
            request.setAttribute("year1", String.valueOf(year));
            request.setAttribute("year2", String.valueOf(year));

            return mapping.findForward("fiscalcomparison");
        } else if (buttonValue.equals("search")) {
            AccountDetailsDAO acdao = new AccountDetailsDAO();
            ChartofaccountsList = acdao.findForSearch(acct, status, type, acct1, acctgroup);
            session.setAttribute("acct", acct);
            session.setAttribute("acct1", acct1);
            request.setAttribute("acctStatus", status);
            request.setAttribute("acctype", type);
            request.setAttribute("Acctgroup", acctgroup);
            session.setAttribute("ChartofaccountsList", ChartofaccountsList);
            forwardName = "search";
        } else if (buttonValue.equals("showall")) {
            CChartCodeBO objGenericBO = new CChartCodeBO();
            ChartofaccountsList = objGenericBO.getGenericCodesInfo();
            session.setAttribute("ChartofaccountsList", ChartofaccountsList);
            session.removeAttribute("acct");
            session.removeAttribute("EdAcct");
            session.removeAttribute("StAcct");
            session.removeAttribute("acct1");
            forwardName = "showall";
        } else if (buttonValue.equals("AccttypeSelected")) {
            String accttype = request.getParameter("accttype");
            DBUtil dbutil = new DBUtil();
            request.setAttribute("acctype", accttype);
            List accgroup = dbutil.getAcctgroupByType(accttype);
            session.setAttribute("AcctGroup", accgroup);
            request.setAttribute("acctStatus", status);
            session.setAttribute("acct", acct);
            session.setAttribute("acct1", acct1);
            forwardName = "success";
        } else if (buttonValue.equals("editaddSubledger")) {
            DBUtil dbutil = new DBUtil();
            String acctdesc = request.getParameter("acctdesc");
            request.setAttribute("acctdesc", acctdesc);
            String accttype = request.getParameter("accttype");
            if (accttype.equals("Income Statement")) {
                List closetoacct = dbutil.getClosetoAcctList();
                request.setAttribute("closetoacct", closetoacct);
            }
            SubledgerAccts subledgeraccts = new SubledgerAccts();
            String acctgroup1 = request.getParameter("acctgroup");
            String groupdesc = dbutil.getAcctgroupDesc(acctgroup1);
            request.setAttribute("Groupdesc", groupdesc);
            String subledger = request.getParameter("subledger");
            subledgeraccts.setSubLedgerId(new Integer(subledger));
            subledgeraccts.setControlAcct(acct);
            SubledgerAcctsDAO slaDAO = new SubledgerAcctsDAO();
            slaDAO.save(subledgeraccts);
            request.setAttribute("subledger", subledger);
            subLedgeraddList = dbutil.getSubLedgeraddList(acct);
            session.setAttribute("subLedgeraddList", subLedgeraddList);
            forwardName = "addsubledger";
        } else if (buttonValue.equals("Acctpopup")) {
            session.setAttribute("acct", acct);
            request.setAttribute("acctStatus", status);
            request.setAttribute("acctype", type);
            session.setAttribute("acct1", acct1);
            request.setAttribute("Acctgroup", acctgroup);
            forwardName = "success";
        } else if (buttonValue.equals("abc")) {
            forwardName = "abc";
        } else {
            CChartCodeBO objGenericBO = new CChartCodeBO();
            ChartofaccountsList = objGenericBO.getGenericCodesInfo();
            session.removeAttribute("ChartofaccountsList");
            session.setAttribute("ChartofaccountsList", ChartofaccountsList);
            session.removeAttribute("acct");
            session.removeAttribute("EdAcct");
            session.removeAttribute("StAcct");
            session.removeAttribute("acct1");
            forwardName = "showall";
        }
        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
    
    
    public void searchTransactions(String startAccount, String endAccount,String startPeriod, String endPeriod, HttpServletRequest request) {
        com.logiware.accounting.dao.FiscalPeriodDAO fiscalPeriodDAO = new com.logiware.accounting.dao.FiscalPeriodDAO();
        AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
        ChartOfAccountsDAO chartOfAccountsDAO = new ChartOfAccountsDAO();
        FiscalYear fiscalYear = fiscalPeriodDAO.getLastClosedYear(startPeriod);
        Integer sPeriod = Integer.parseInt(startPeriod);
        Integer ePeriod = Integer.parseInt(fiscalYear.getEndPeriod());
        List<String> periods = fiscalPeriodDAO.getPeriods(startPeriod, endPeriod, ePeriod <= sPeriod);
        FiscalPeriod previousPeriod = fiscalPeriodDAO.getPreviousPeriod(startPeriod);
        Map<String, Double> closingBalances = accountBalanceDAO.getClosingBalances(startAccount, endAccount, previousPeriod.getPeriodDis());
        request.setAttribute("closingBalances", closingBalances);
        String whereClause = chartOfAccountsDAO.buildTransactionsWhere(startAccount, endAccount, periods);
        List<AccountModel> transactions = chartOfAccountsDAO.getTransactions(whereClause);
        request.setAttribute("transactions", transactions);
    }
}
