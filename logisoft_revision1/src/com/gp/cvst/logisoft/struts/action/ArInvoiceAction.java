/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.DateUtils;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.accounting.ARInvoiceBC;
import com.gp.cong.logisoft.domain.EmailSchedulerVO;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.AccountingConstants;
import com.gp.cvst.logisoft.domain.ArInvoice;
import com.gp.cvst.logisoft.domain.Invoice;
import com.gp.cvst.logisoft.domain.InvoiceCharges;
import com.gp.cvst.logisoft.hibernate.dao.InvoiceChargesDAO;
import com.gp.cvst.logisoft.hibernate.dao.TransactionDAO;
import com.gp.cvst.logisoft.hibernate.dao.InvoiceDAO;
import com.gp.cvst.logisoft.struts.form.ARInvoiceForm;

/**
 * MyEclipse Struts Creation date: 06-09-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/arInvoice" name="arInvoiceform"
 *                input="/jsps/AccountsRecievable/ARInvoice.jsp" scope="request"
 *                validate="true"
 * @struts.action-forward name="success"
 *                        path="/jsps/AccountsRecievable/ARInvoice.jsp"
 */
public class ArInvoiceAction extends Action {
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		ARInvoiceForm arInvoiceform = (ARInvoiceForm) form;// TODO
															// Auto-generated
															// method stub
		HttpSession session = ((HttpServletRequest) request).getSession();
		String buttonValue = arInvoiceform.getButtonValue();
		String forward = null;
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		SimpleDateFormat dateFormat =  new SimpleDateFormat("MM/dd/yyyy hh:mm a");
		String customerName = arInvoiceform.getCusName();
		String invoiceNumber = arInvoiceform.getInvoiceNumber();
		String br_dlNumber = arInvoiceform.getBl_drNumber();
		String dueDate = arInvoiceform.getDueDate();
		String customerType = arInvoiceform.getArCustomertype();
		Date date = new Date();
		String chargecode = arInvoiceform.getChargeCode();
		Double amount = arInvoiceform.getAmount();
		InvoiceDAO invoiceDAO = new InvoiceDAO();
		String arInvoiceId = arInvoiceform.getArInvoiceId();
		String arInvoiceChargesId = arInvoiceform.getArInvoiceChargesId();
		TransactionDAO transactionDAO=new TransactionDAO();
		ARInvoiceBC aRInvoiceBC= null;
		InvoiceCharges invcharges = new InvoiceCharges();
		ArInvoice arInvoice=null;
		//the value comes from the ar inquiry screen
		if(request.getParameter("arInvoiceNumber")!=null && !request.getParameter("arInvoiceNumber").equals("")){
			aRInvoiceBC= new ARInvoiceBC();
			request.setAttribute("arInvoice",aRInvoiceBC.getInvoiceByNumber(request.getParameter("arInvoiceNumber")));
			request.setAttribute("goBackToInquiry", "arInquiry");
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			return mapping.findForward("arInvoiceGeneratorPage");
		}
		if(buttonValue==null || buttonValue.equals("")){
			aRInvoiceBC= new ARInvoiceBC();
			List<ArInvoice> arInvoicesList=aRInvoiceBC.getInvoices(arInvoiceform);
			request.setAttribute("arInvoiceList",arInvoicesList);
			request.setAttribute("arInvoiceform",arInvoiceform);
			return mapping.findForward("searchArInvoice");
		}
		if (buttonValue.equals("invoice")) {
			Invoice invoice = new Invoice();
				date = (Date) sdf.parse(dueDate);
			invoice.setCustName(customerName);
			invoice.setCustNo(arInvoiceform.getCusNumber());
			invoice.setInvoiceNo(invoiceNumber);
			invoice.setBillOfLadingNo(br_dlNumber);
			invoice.setCustType(customerType);
			invoice.setDueDate(date);
			invoiceDAO.save(invoice);
			forward = "success";
		}else if (buttonValue.equals("charge")) {
			InvoiceChargesDAO chargesDAO = new InvoiceChargesDAO();
			invcharges.setInvoiceNo(invoiceNumber);
			invcharges.setChargeCode(chargecode);
			invcharges.setTransactionAmount(amount);
			chargesDAO.save(invcharges);
			forward = "success";
		}else if (buttonValue.equals("go")) {
			List invoiceList = null;
			invoiceList = invoiceDAO.findforshowall(invoiceNumber);
			session.setAttribute("invoiceList", invoiceList);
			forward = "success";
		}else if(buttonValue.equals("save")){
			aRInvoiceBC= new ARInvoiceBC();
			if(arInvoiceId!=null && !arInvoiceId.equals("")){
				arInvoice= aRInvoiceBC.updateInvoice(arInvoiceform,"updateArInvoice");
			}else{
				arInvoice= aRInvoiceBC.saveInvoice(arInvoiceform);
			}
			//arInvoice.setCreditTermName(aRInvoiceBC.getCreditTermID(arInvoiceform));
			aRInvoiceBC.manifestWhileSaving(arInvoice);
			request.setAttribute("arInvoice",aRInvoiceBC.getInvoice(arInvoice.getId()));
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("deleteCharges")){
			aRInvoiceBC= new ARInvoiceBC();
			if(arInvoiceChargesId!=null && !arInvoiceChargesId.equals("")){
				aRInvoiceBC.deleteInvoiceCharge(new Integer(arInvoiceId),new Integer(arInvoiceChargesId));
			}
			request.setAttribute("arInvoice",aRInvoiceBC.getInvoice(new Integer(arInvoiceId)));
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("deleteInvoice")){
			aRInvoiceBC= new ARInvoiceBC();
			if(arInvoiceId!=null && !arInvoiceId.equals("")){
				aRInvoiceBC.deleteInvoice(new Integer(arInvoiceId));
			}
			forward = "searchArInvoice";
		}else if(buttonValue.equals("updateArInvoice")){
			aRInvoiceBC= new ARInvoiceBC();
			if(arInvoiceId!=null && !arInvoiceId.equals("")){
				arInvoice= aRInvoiceBC.updateInvoice(arInvoiceform,null);
			}
			aRInvoiceBC.manifestWhileSaving(arInvoice);
			request.setAttribute("arInvoice",aRInvoiceBC.getInvoice(arInvoice.getId()));
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			request.setAttribute("message", "Invoice No:"+arInvoice.getInvoiceNumber()+" "+AccountingConstants.SAVED_SUCESS);
			
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("customerInfo")){
			aRInvoiceBC= new ARInvoiceBC();
			arInvoice=aRInvoiceBC.getCustomerInfo(arInvoiceform);
			request.setAttribute("arInvoice",arInvoice);
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("editInvoice")){// This button value has set in Search Page(SearchArInvoice.jsp)
			aRInvoiceBC= new ARInvoiceBC();
			request.setAttribute("arInvoice",aRInvoiceBC.getInvoice(arInvoiceId));
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("viewInvoice")){// This button value has set in Search Page(SearchArInvoice.jsp)
			aRInvoiceBC= new ARInvoiceBC();
			request.setAttribute("arInvoice",aRInvoiceBC.getInvoice(arInvoiceId));
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			String view="3"; 
			request.setAttribute("view", view);
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("addArInvoice")){// This button value has set in Search Page(SearchArInvoice.jsp)
			aRInvoiceBC= new ARInvoiceBC();
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			forward = "arInvoiceGeneratorPage";
		}else if(buttonValue.equals("printArInvoice")){ // This button value has set in Search Page(SearchArInvoice.jsp)
			aRInvoiceBC= new ARInvoiceBC();
			List<ArInvoice> arInvoicesList=aRInvoiceBC.getInvoices(arInvoiceform);
			LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
                     String outputFileName = loadLogisoftProperties.getProperty("reportLocation") + "/Documents/ArInvoice/" + DateUtils.formatDate(new Date(), "yyyy/MM/dd") + "/";
		     File file = new File(outputFileName);
		     if(!file.exists()){
		    	 file.mkdirs();
		     }
                    outputFileName = outputFileName + arInvoiceId + ".pdf";
		    	 String realPath = this.getServlet().getServletContext().getRealPath("/");
		    	 aRInvoiceBC.createArInvoiceReport(arInvoiceId, outputFileName,realPath);
			request.setAttribute("arInvoiceList",arInvoicesList);
			request.setAttribute("fileName", outputFileName);
			forward="searchArInvoice";
		}else if(buttonValue.equals("emailArInvoice")){ // This button value has set in Search Page(SearchArInvoice.jsp)
			aRInvoiceBC= new ARInvoiceBC();
			LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
		     String outputFileName = loadLogisoftProperties.getProperty("reportLocation") + "/Documents/ArInvoice/" + DateUtils.formatDate(new Date(), "yyyy/MM/dd") + "/";
		     File file = new File(outputFileName);
		     if(!file.exists()){
		    	 file.mkdirs();
		     }
                    outputFileName = outputFileName + arInvoiceId + ".pdf";
		     //inserting in mail_transactions table
		     User user=(User)session.getAttribute("loginuser");
				String fromName = user.getFirstName();
				String fromAddress = user.getEmail();
				
				String toAddress = request.getParameter("mailToAddress");
				String ccAddress = request.getParameter("mailCcAddress");
				String bccAddress = request.getParameter("mailBccAddress");
				String subject = request.getParameter("mailSubject");
				String mailMessage = request.getParameter("mailBody");
			    Date today = new Date();
				EmailSchedulerVO emailSchedulerVO = new EmailSchedulerVO();
				emailSchedulerVO.setEmailData(null, toAddress, fromName, fromAddress, ccAddress, bccAddress, subject, mailMessage);
				emailSchedulerVO.setEmailInfo(arInvoiceId, outputFileName,"Email",0,today, "AR Invoice", arInvoiceId,user.getLoginName());
				aRInvoiceBC.save(emailSchedulerVO);
			    	 String realPath = this.getServlet().getServletContext().getRealPath("/");
			    	 aRInvoiceBC.createArInvoiceReport(arInvoiceId, outputFileName,realPath);
				forward="searchArInvoice";	
		}else if(buttonValue.equals("manifest")){
			aRInvoiceBC= new ARInvoiceBC();
			ArInvoice aRInvoice=aRInvoiceBC.getInvoice(arInvoiceId);
			aRInvoice.setManifest("M");
			request.setAttribute("arInvoice",aRInvoice);
			request.setAttribute("creditTermList",aRInvoiceBC.getCreditTermList());
			aRInvoiceBC.manifest(aRInvoice);
			forward = "arInvoiceGeneratorPage";
		}
		return mapping.findForward(forward);
	}
}