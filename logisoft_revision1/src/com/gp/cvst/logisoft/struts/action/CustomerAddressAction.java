/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.tradingpartner.ContactConfigurationBC;
import com.gp.cong.logisoft.bc.tradingpartner.TradingPartnerConstants;
import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.TradingPartner;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerContactDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.form.TradingPartnerForm;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cvst.logisoft.domain.CustAddress;
import com.gp.cvst.logisoft.struts.form.CustomerAddressForm;

/**
 * MyEclipse Struts
 * Creation date: 02-18-2009
 *
 * XDoclet definition:
 * @struts.action path="/customerAddress" name="customerAddressForm" input="/jsps/fclQuotes/CustomerAddress.jsp" scope="request" validate="true"
 */
public class CustomerAddressAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        CustomerAddressForm customerAddressForm = (CustomerAddressForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = customerAddressForm.getButtonValue();
        String custNameTemp = customerAddressForm.getCustNameTemp();
        String customerAcctNumber = customerAddressForm.getCustNo();
        String customerAcctName = customerAddressForm.getCustName();
        String[] selectedContacts = customerAddressForm.getSelectedCheckBox();

        List addressList = new ArrayList();
        String forwardName = "";
        String contactName = "";
        List customerList = new ArrayList();
        CustomerContactDAO customerContactDAO = new CustomerContactDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        ContactConfigurationBC contactConfigurationBC = null;
        TradingPartnerForm tradingPartnerForm = new TradingPartnerForm();
        boolean temp = false;
        if (request.getParameter("buttonValue") != null && (request.getParameter("buttonValue").equals("BookingShipper")
        		  || request.getParameter("buttonValue").equals("BookingForwarder")
                  ||request.getParameter("buttonValue").equals("Quotation")
                  ||request.getParameter("buttonValue").equals("CarrierQuotation")
                  || request.getParameter("buttonValue").equals("BookingConsignee"))) {

            if (CommonFunctions.isNotNull(customerAcctName)) {
             customerAcctName = customerAcctName.replace("amp;", "&");
             customerAddressForm.setCustName(customerAcctName);
            }
            contactName = request.getParameter("contactName");
            if (contactName != null) {
                // --if multiple contactName exists------
                String[] str = contactName.split(",");
                if (str != null && !str.equals("")) {
                    temp = true;
                }

                int i = contactName.indexOf(" ");
                if (i != -1) {
                    contactName = contactName.substring(0, i);
                }
            }
            if (contactName != null && contactName.equals("percent")) {
                contactName = "%";
            }
            if(CommonFunctions.isNotNull(customerAcctNumber) || CommonFunctions.isNotNull(contactName) ){
                  addressList = customerContactDAO.findByAccountNumber(customerAcctNumber);
            }
           /* for (Iterator iter = addressList.iterator(); iter.hasNext();) {
                CustomerContact customerContact = null;
                CustAddress custAddress = null;
                if (request.getParameter("buttonValue").equals("RoutedQuotation")) {
                    custAddress = (CustAddress) iter.next();
                    customerList.add(custAddress);
                } else {
                    customerContact = (CustomerContact) iter.next();
                    custAddress = new CustAddress();
                    custAddress.setPhone(customerContact.getPhone());
                    custAddress.setFax(customerContact.getFax());
                    custAddress.setEmail1(customerContact.getEmail());
                    custAddress.setAcctNo(customerContact.getAccountNo());
                    custAddress.setAcctName(customerAcctName);
                    custAddress.setContactName(customerContact.getFirstName() + " " + customerContact.getLastName());
                    custAddress.setPosition(customerContact.getPosition());
                    custAddress.setId(customerContact.getId());
                    customerList.add(custAddress);
                }
            }*/
            session.setAttribute("buttonValue", request.getParameter("buttonValue"));
            session.setAttribute("addressList", addressList);
            session.setAttribute("UpdatedContactList",null);
            forwardName = "customerAddress";
            session.setAttribute("customerAcctNumber", customerAcctNumber);
            session.setAttribute("customerAcctName", customerAcctName);

        } else if (request.getParameter("paramId") != null) {
            List searchList = new ArrayList();
            //--to get all contactNames for tht AcctNo-----
            if (request.getParameter("accountNo") != null) {
                customerAcctNumber = request.getParameter("accountNo");
            }
            if (request.getParameter("acctName") != null) {
                customerAcctName = request.getParameter("acctName");
            }
           // customerAcctName = customerAcctName.replace("amp", "&");
            customerList = customerContactDAO.findContactsByAcctNo(customerAcctNumber);
           /* for (Iterator iter = customerList.iterator(); iter.hasNext();) {
                CustAddress custAddress = new CustAddress();
                CustomerContact customerContact = (CustomerContact) iter.next();
                custAddress.setPhone(customerContact.getPhone());
                custAddress.setFax(customerContact.getFax());
                custAddress.setEmail1(customerContact.getEmail());
                custAddress.setAcctNo(customerContact.getAccountNo());
                custAddress.setAcctName(customerAcctName);
                custAddress.setContactName(customerContact.getFirstName() + " " + customerContact.getLastName());
                custAddress.setPosition(customerContact.getPosition());
                searchList.add(custAddress);
            }*/
            session.setAttribute("addressList", customerList);
            if (session.getAttribute("addressList") != null) {
                customerList = (List) session.getAttribute("addressList");
                CustAddress custAddress = (CustAddress) customerList.get(Integer.parseInt(request.getParameter("paramId")));
                List clientList = new ArrayList();
                clientList.add(customerAcctName);
                clientList.add(custAddress.getAcctNo());
                clientList.add(custAddress.getAcctType());
                clientList.add(custAddress.getContactName());
                clientList.add(custAddress.getPhone());
                clientList.add(custAddress.getFax());
                clientList.add(custAddress.getEmail1());
                clientList.add(custAddress.getAddress1());
                clientList.add(request.getParameter("button"));
                clientList.add(custAddress.getCity1());
                clientList.add(custAddress.getState());
                clientList.add(custAddress.getZip());
                if (custAddress.getCountry() != null) {
                    GenericCode genericCode = (GenericCode) genericCodeDAO.findById1(custAddress.getCountry());
                    clientList.add(genericCode.getCodedesc());
                }
                request.setAttribute("clientList", clientList);
                if (request.getParameter("button").equals("BookingShipper") || request.getParameter("button").equals("BookingForwarder")) {
                    request.setAttribute("buttonValue", "Booking");
                }
                if (request.getParameter("button").equals("Quotation")) {
                    request.setAttribute("buttonValue", "Quotation");
                }
                if (request.getParameter("button").equals("CarrierQuotation")) {
                    request.setAttribute("buttonValue", "CarrierQuotation");
                }
                if (request.getParameter("button").equals("RoutedQuotation")) {
                    request.setAttribute("buttonValue", "RoutedQuotation");
                }
                if (session.getAttribute("addressList") != null) {
                    session.removeAttribute("addressList");
                }
                if (session.getAttribute("buttonValue") != null) {
                    session.removeAttribute("buttonValue");
                }
            }
            forwardName = "customerAddress";
        }
        if (buttonValue != null && buttonValue.equals("SearchCustomer")) {
            contactName = customerAddressForm.getContactName();
            int i = contactName.indexOf(" ");
            if (i != -1) {
                contactName = contactName.substring(0, i);
            }
            custNameTemp = custNameTemp.replace("amp;", "&");
            addressList = customerContactDAO.findAccountNumber(customerAcctNumber, contactName);
//            for (Iterator iter = addressList.iterator(); iter.hasNext();) {
//                CustomerContact customerContact = null;
//                CustAddress custAddress = null;
//                customerContact = (CustomerContact) iter.next();
//                custAddress = new CustAddress();
//                custAddress.setPhone(customerContact.getPhone());
//                custAddress.setFax(customerContact.getFax());
//                custAddress.setEmail1(customerContact.getEmail());
//                custAddress.setAcctNo(customerContact.getAccountNo());
//                custAddress.setAcctName(customerAcctName);
//                custAddress.setContactName(customerContact.getFirstName() + " " + customerContact.getLastName());
//                custAddress.setPosition(customerContact.getPosition());
//                  custAddress.setId(customerContact.getId());
//                customerList.add(custAddress);
//            }
            session.setAttribute("addressList", addressList);
            session.setAttribute("UpdatedContactList",null);
            forwardName = "customerAddress";
        }
        if (buttonValue != null && buttonValue.equals("contactConfig")) {
            request.setAttribute("customerAcctNameFromQuotes", customerAcctName);
            request.setAttribute("customerAcctNoFromQuotes", customerAcctNumber);
            forwardName = "contactConfig";
        }
        if (buttonValue != null && buttonValue.equals("checkedContacts")) {
            String id = "", contact = "", email = "";
            List clientList = new ArrayList();
            List searchList = new ArrayList();
            //--to get all contactNames for tht AcctNo-----
            customerList = customerContactDAO.findContactsByAcctNo(customerAcctNumber);
            for (Iterator iter = customerList.iterator(); iter.hasNext();) {
                CustAddress custAddress = new CustAddress();
                CustomerContact customerContact = (CustomerContact) iter.next();
                custAddress.setPhone(customerContact.getPhone());
                custAddress.setFax(customerContact.getFax());
                custAddress.setEmail1(customerContact.getEmail());
                custAddress.setAcctNo(customerContact.getAccountNo());
                custAddress.setAcctName(customerAcctName);
                custAddress.setContactName(customerContact.getFirstName() + " " + customerContact.getLastName());
                custAddress.setPosition(customerContact.getPosition());
                custAddress.setId(customerContact.getId());
                searchList.add(custAddress);
            }
            String phone = "";
            String fax = "";
            if (searchList != null && searchList.size() > 0) {
                if (selectedContacts != null) {
                    for (int i = 0; i < selectedContacts.length; i++) {
                        id = selectedContacts[i];
                        CustAddress custAddress = (CustAddress) searchList.get(Integer.parseInt(id));
                        contact = contact + custAddress.getContactName() + ",";
                        email = email + custAddress.getEmail1() + ",";
                        if (i == 0) {
                            request.setAttribute("fclContactId", custAddress.getId());
                            request.setAttribute("fclAccountNo", custAddress.getAcctNo());
                        }
                        if (selectedContacts.length == 1) {
                            phone = custAddress.getPhone();
                            fax = custAddress.getFax();
                        }
                    }
                    contact = contact.substring(0, contact.length() - 1);
                    email = email.substring(0, email.length() - 1);
                }

                clientList.add(contact);
                clientList.add(email);
                if (selectedContacts != null && selectedContacts.length == 1) {
                    clientList.add(phone);
                    clientList.add(fax);
                }
                for (Iterator it = clientList.iterator(); it.hasNext();) {
                    String object = (String)it.next();
                    
                }

                request.setAttribute("clientList", clientList);
                if (customerAddressForm.getButtonParameter() != null &&
                		customerAddressForm.getButtonParameter().equalsIgnoreCase("Quotation")) {
                    request.setAttribute("buttonValue", "MultipleContactsForQuotationClient");
                }if (customerAddressForm.getButtonParameter() != null &&
                		customerAddressForm.getButtonParameter().equalsIgnoreCase("CarrierQuotation")) {
                    request.setAttribute("buttonValue", "MultipleContactsForQuotationCarrier");
                }

                if (session.getAttribute("addressList") != null) {
                    session.removeAttribute("addressList");
                }
                if (session.getAttribute("buttonValue") != null) {
                    session.removeAttribute("buttonValue");
                }
            }
            forwardName = "customerAddress";
        }
        if (buttonValue != null && buttonValue.equals("editContact")) {
            contactConfigurationBC = new ContactConfigurationBC();
            //--setting the record id to tradingpartnerform object------
            tradingPartnerForm.setIndex(customerAddressForm.getRecordId());
            TradingPartnerForm tradingPartnerFormNew = contactConfigurationBC.findCustomerRecordForSelect(tradingPartnerForm);
            request.setAttribute(TradingPartnerConstants.CUSTOMER_CONTACT_DETAILS, contactConfigurationBC.findEachCustomerRecord(tradingPartnerForm));
            request.setAttribute(TradingPartnerConstants.TRADINGPARTNER_FORM, tradingPartnerFormNew);
            request.setAttribute("customerAcctNoFromQuotes", customerAcctNumber);
            request.setAttribute("customerAcctNameFromQuotes", customerAcctName);
            forwardName = "contactConfig";
        }
        if (buttonValue != null && buttonValue.equals("deleteContact")) {
            contactConfigurationBC = new ContactConfigurationBC();
            List updatedList = new ArrayList();
            //--setting the record id  and customerAcctNo to tradingpartnerform object------
            tradingPartnerForm.setTradingPartnerId(customerAddressForm.getCustNo());
            tradingPartnerForm.setIndex(customerAddressForm.getRecordId());
            User loginUser = (User) request.getSession().getAttribute("loginuser");
            TradingPartner tradingPartner = contactConfigurationBC.deleteContactDetails(tradingPartnerForm, loginUser);

            if (tradingPartner.getCustomerContact() != null) {
                updatedList.addAll(tradingPartner.getCustomerContact());
//                Iterator iter = tradingPartner.getCustomerContact().iterator();
//                while (iter.hasNext()) {
//                    CustAddress custAddress = new CustAddress();
//                    CustomerContact customerContact = (CustomerContact) iter.next();
//                    custAddress.setPhone(customerContact.getPhone());
//                    custAddress.setFax(customerContact.getFax());
//                    custAddress.setEmail1(customerContact.getEmail());
//                    custAddress.setAcctNo(customerAcctNumber);
//                    custAddress.setAcctName(customerAcctName);
//                    custAddress.setContactName(customerContact.getFirstName() + " " + customerContact.getLastName());
//                    custAddress.setPosition(customerContact.getPosition());
//                    custAddress.setId(customerContact.getId());
//                    updatedList.add(custAddress);
//                }
            }
            session.setAttribute("UpdatedContactList", updatedList);
            session.setAttribute("custNo", customerAcctNumber);
            session.setAttribute("customerName", customerAcctName);
            forwardName = "customerAddress";




        }
        return mapping.findForward(forwardName);
    }
}
