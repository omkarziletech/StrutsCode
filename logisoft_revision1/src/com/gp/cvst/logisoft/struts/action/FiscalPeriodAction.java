/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.io.File;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.common.CommonConstants;
import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.DateUtils;
import com.gp.cong.common.NumberUtils;
import com.gp.cong.logisoft.bc.accounting.FiscalPeriodBC;
import com.gp.cong.logisoft.bc.accounting.ReportConstants;
import com.gp.cong.logisoft.bc.notes.NotesConstants;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.reports.FiscalExportToExcel;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.ChartOfAccountBean;
import com.gp.cvst.logisoft.beans.FiscalPeriodBean;
import com.gp.cvst.logisoft.domain.AccountBalance;
import com.gp.cvst.logisoft.domain.AccountDetails;
import com.gp.cvst.logisoft.domain.Batch;
import com.gp.cvst.logisoft.domain.Budget;
import com.gp.cvst.logisoft.domain.FiscalPeriod;
import com.gp.cvst.logisoft.domain.FiscalYear;
import com.gp.cvst.logisoft.domain.JournalEntry;
import com.gp.cvst.logisoft.domain.LineItem;
import com.gp.cvst.logisoft.domain.YearCloseAudit;
import com.gp.cvst.logisoft.hibernate.dao.AccountBalanceDAO;
import com.gp.cvst.logisoft.hibernate.dao.AccountDetailsDAO;
import com.gp.cvst.logisoft.hibernate.dao.AccountYearEndBalanceDAO;
import com.gp.cvst.logisoft.hibernate.dao.BatchDAO;
import com.gp.cvst.logisoft.hibernate.dao.BudgetDAO;
import com.gp.cvst.logisoft.hibernate.dao.FiscalPeriodDAO;
import com.gp.cvst.logisoft.hibernate.dao.FiscalYearDAO;
import com.gp.cvst.logisoft.hibernate.dao.JournalEntryDAO;
import com.gp.cvst.logisoft.hibernate.dao.LineItemDAO;
import com.gp.cvst.logisoft.hibernate.dao.YearCloseAuditDAO;
import com.gp.cvst.logisoft.struts.form.FiscalPeriodForm;
import com.logiware.excel.TrialBalanceExcelCreator;
import com.logiware.reports.TrialBalanceReportsCreator;
import com.logiware.utils.AuditNotesUtils;
import com.oreilly.servlet.ServletUtils;
import jxl.Cell;
import jxl.Sheet;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * MyEclipse Struts Creation date: 05-22-2008
 *
 * XDoclet definition:
 *
 * @struts.action path="/fiscalperiod" name="fiscalPeriodForm"
 * input="/jsps/Accounting/FiscalCalender.jsp" scope="request"
 * @struts.action-forward name="success"
 * path="/jsps/Accounting/FiscalCalender.jsp"
 */
public class FiscalPeriodAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     * @throws Exception
     * @throws ParseException
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        FiscalPeriodForm fiscalForm = (FiscalPeriodForm) form;// TODO Auto-generated method stub
        HttpSession session = request.getSession();
        User loginUser = (User) session.getAttribute("loginuser");

        String forwardName = "";
        String buttonValue = fiscalForm.getButtonValue();
        String year = fiscalForm.getYear();
        String[] startingdate = fiscalForm.getStartingdate();
        String[] endingdate = fiscalForm.getEndingdate();
        String fiscalPerid = fiscalForm.getFisperiod();
        String month = fiscalForm.getMonth();
        String adjperiodrate1 = fiscalForm.getAdjperiodrate1();
        String closperiodstatus1 = fiscalForm.getClosperiodstatus1();
        String active = fiscalForm.getActive();
        String copybudgetset = fiscalForm.getCopybudgetset();
        String status1 = "Open";
        DateFormat format = null;
        FiscalPeriod fisdomain = new FiscalPeriod();
        FiscalPeriodDAO fisDAO = new FiscalPeriodDAO();
        String perioddesc = "";
        String newyear = "";
        String periodStatus = "Open";
        Date date = null;
        Date date1 = null;
        int k1 = 0;
        int k = 0;
        List startdate = new ArrayList();
        List startdate1 = new ArrayList();
        List startdate2 = new ArrayList();
        List enddate = new ArrayList();
        List enddate1 = new ArrayList();
        List enddate2 = new ArrayList();
        List period1 = new ArrayList();
        List period3 = new ArrayList();
        String et1 = "";
        String et2 = "";
        String et3 = "";
        int year1 = 0;
        if (year != null && !year.equals("")) {
            year1 = Integer.parseInt(year);
        }
        int year2 = year1 + 1;
        List list = new ArrayList();
        list.add("01");
        list.add("02");
        list.add("03");
        list.add("04");
        list.add("05");
        list.add("06");
        list.add("07");
        list.add("08");
        list.add("09");
        list.add("10");
        list.add("11");
        list.add("12");
        List ye = null;
        String period[] = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13"};
        int fps = 0;
        int fps1 = 0;
        int fps2 = 0;
        int w = 0;
        List savalues1 = null;
        Date date2 = null;
        Date date3 = null;
        List savelist = null;

        if (fiscalForm.getSubmitValue() != null && fiscalForm.getSubmitValue().equals("Upload")) {
            Workbook workbook = Workbook.getWorkbook(fiscalForm.getMyFile().getInputStream());
            Sheet sheet = workbook.getSheet(0);
            if (null != sheet) {
                if (sheet.getRows() >= 4) {
                    for (int i = 4; i < sheet.getRows(); i++) {
                        Cell[] cells = sheet.getRow(i);
                        if (null != cells && cells.length > 0 && CommonUtils.isNotEmpty(cells[0].getContents())) {
                            String account = cells[0].getContents();
                            Integer fiscalYear = Integer.parseInt(cells[1].getContents());
                            String set = cells[2].getContents();
                            String currency = cells[3].getContents();
                            Cell[] periodAmounts = (Cell[]) ArrayUtils.subarray(cells, 4, 16);
                            String[] budgetSets = StringUtils.split(set.replaceAll("[^1-9,]", ""), ",");
                            for (String budgetSet : budgetSets) {
                                for (int fiscalPeriod = 0; fiscalPeriod < periodAmounts.length; fiscalPeriod++) {
                                    Double budgetAmount = Double.parseDouble(periodAmounts[fiscalPeriod].getContents().replaceAll(",", ""));
                                    List<Budget> budgetList = new BudgetDAO().getBudgetsByBudgetSet(account, fiscalYear, NumberUtils.formatNumber(fiscalPeriod + 1, "00"), budgetSet);
                                    if (CommonUtils.isNotEmpty(budgetList)) {
                                        Budget budget = (Budget) budgetList.get(0);
                                        budget.setAccount(account);
                                        budget.setPeriod(NumberUtils.formatNumber(fiscalPeriod + 1, "00"));
                                        budget.setBudgetAmount(budgetAmount);
                                        budget.setBudgetSet(budgetSet);
                                        budget.setYear(fiscalYear);
                                        new BudgetDAO().update(budget);
                                    } else {
                                        Budget budget = new Budget(account, NumberUtils.formatNumber(fiscalPeriod + 1, "00"), budgetAmount, budgetSet, fiscalYear);
                                        budget.setEndDate(new FiscalPeriodDAO().getEndDate(fiscalYear.toString(), budget.getPeriod()));
                                        budget.setId(null);
                                        new BudgetDAO().save(budget);
                                    }
                                }
                            }
                        }
                    }
                    request.setAttribute("message", "Budget is uploaded successfully");
                }
            }
            forwardName = "success1";
            return mapping.findForward(forwardName);
        }

        if (buttonValue.equals("closeYear")) {
            completeYearClose(year);
            forwardName = "success1";
        } else if (buttonValue.equals("go")) {
            List fislist = new ArrayList();
            while (k1 < 13) {
                FiscalPeriodBean fpbean = new FiscalPeriodBean();
                fpbean.setPeriod(period[0]);
                fislist.add(fpbean);
                fpbean = null;
                k1++;
            } //while(k1<13)
            session.removeAttribute("saveList");
            session.setAttribute("forcondition1", fislist);
            request.setAttribute("buttonValue", "completed");
            session.removeAttribute("abc");
            session.setAttribute("year", year);
            session.setAttribute("fiscalPerid", fiscalPerid);
            session.setAttribute("month", month);
            forwardName = "success";
        } else if (buttonValue.equals("go1")) {
            int fiscalPeriod = Integer.parseInt(fiscalPerid);
            int months = Integer.parseInt(month);
            if (fiscalPeriod == 12) {
                while (k < 12) {
                    int mn = Integer.parseInt(month);
                    if (month.equals(list.get(k))) {
                        String yy = (String) list.get(k);
                        String st2 = yy + "/" + "01" + "/" + year;
                        String st1 = period[k] + "/" + "01" + "/" + year;

                        period1.add(period[k]);
                        startdate.add(st1);
                        if (k == 1) {
                            if (year.equals("2004") || year.equals("2008") || year.equals("2012") || year.equals("2016") || year.equals("2020")) {
                                et1 = period[k] + "/" + "29" + "/" + year;
                            } else {
                                et1 = period[k] + "/" + "28" + "/" + year;
                            }
                            enddate.add(et1);
                        }//if(k==1)
                        else {
                            if (k == 3 || k == 5 || k == 8 || k == 10) {
                                et1 = period[k] + "/" + "30" + "/" + year;
                                enddate.add(et1);
                            } else {
                                et1 = period[k] + "/" + "31" + "/" + year;
                                enddate.add(et1);
                            }
                        }// else part of "if(k==1)"
                    } else {
                        String pp = (String) list.get(k);
                        int pp1 = Integer.parseInt(pp);
                        if (months > pp1) {
                            String st2 = period[k] + "/" + "01" + "/" + year2;
                            startdate1.add(st2);
                            if (k == 1) {
                                if (year.equals("2004") || year.equals("2008") || year.equals("2012") || year.equals("2016") || year.equals("2020")) {
                                    et2 = period[k] + "/" + "29" + "/" + year2;
                                } else {
                                    et2 = period[k] + "/" + "28" + "/" + year2;
                                }
                                enddate1.add(et2);
                            } else {
                                if (k == 3 || k == 5 || k == 8 || k == 10) {
                                    et2 = period[k] + "/" + "30" + "/" + year2;
                                    enddate1.add(et2);
                                } else {
                                    et2 = period[k] + "/" + "31" + "/" + year2;
                                    enddate1.add(et2);
                                }
                            }//else part of "if(k==1)"
                        } else {
                            String st3 = period[k] + "/" + "01" + "/" + year;

                            period3.add(period[k]);
                            startdate2.add(st3);
                            if (k == 1) {
                                if (year.equals("2004") || year.equals("2008") || year.equals("2012") || year.equals("2016") || year.equals("2020")) {
                                    et3 = period[k] + "/" + "29" + "/" + year;
                                } else {
                                    et3 = period[k] + "/" + "28" + "/" + year;
                                }
                                enddate2.add(et3);
                            } else {
                                if (k == 3 || k == 5 || k == 8 || k == 10) {
                                    et3 = period[k] + "/" + "30" + "/" + year;
                                    enddate2.add(et3);
                                } else {
                                    et3 = period[k] + "/" + "31" + "/" + year;
                                    enddate2.add(et3);
                                }
                            }
                        }//else part of "if(months>pp1)"
                    }//else part of "if(month.equals(list.get(k)))"
                    k++;
                }//while(k<12)
                FiscalPeriodBean objfiscalBean = null;
                java.util.List<FiscalPeriodBean> fpBeanList = new ArrayList<FiscalPeriodBean>();
                int fp = 0;
                int f = 0;
                fps = startdate.size();
                fps1 = startdate1.size();
                fps2 = startdate2.size();

                while (fp < fps) {
                    objfiscalBean = new FiscalPeriodBean();

                    objfiscalBean.setStaringdate(String.valueOf(startdate.get(fp)));
                    objfiscalBean.setEndingdate(String.valueOf(enddate.get(fp)));

                    String st = (String) startdate.get(fp);

                    StringTokenizer st1 = new StringTokenizer(st, "/");
                    String p1 = st1.nextToken();
                    objfiscalBean.setPeriod(p1);

                    fpBeanList.add(objfiscalBean);
                    objfiscalBean = null;
                    f++;
                    fp++;
                }//while(fp<fps)
                fp = 0;

                while (fp < fps2) {
                    objfiscalBean = new FiscalPeriodBean();
                    objfiscalBean.setStaringdate(String.valueOf(startdate2.get(fp)));
                    objfiscalBean.setEndingdate(String.valueOf(enddate2.get(fp)));
                    String st11 = (String) enddate2.get(fp);
                    StringTokenizer st2 = new StringTokenizer(st11, "/");
                    String p2 = st2.nextToken();
                    objfiscalBean.setPeriod(p2);
                    objfiscalBean.setStatus("Close");

                    fpBeanList.add(objfiscalBean);
                    objfiscalBean = null;
                    f++;
                    fp++;
                }// while(fp<fps2)

                fp = 0;
                while (fp < fps1) {
                    objfiscalBean = new FiscalPeriodBean();
                    objfiscalBean.setStaringdate(String.valueOf(startdate1.get(fp)));
                    objfiscalBean.setEndingdate(String.valueOf(enddate1.get(fp)));
                    String st111 = (String) startdate1.get(fp);
                    StringTokenizer st3 = new StringTokenizer(st111, "/");
                    String p3 = st3.nextToken();
                    objfiscalBean.setPeriod(p3);
                    objfiscalBean.setStatus("Close");
                    fpBeanList.add(objfiscalBean);
                    objfiscalBean = null;
                    f++;
                    fp++;
                }// while(fp<fps1)
                session.removeAttribute("saveList");
                session.setAttribute("abc", fpBeanList);
            }//if(fiscalPeriod==12)
            session.removeAttribute("forcondition1");
            session.removeAttribute("saveList");
            request.setAttribute("buttonValue", "completed");
            //session.setAttribute("year",year);
            session.setAttribute("year", year);
            session.setAttribute("fiscalPerid", fiscalPerid);
            session.setAttribute("month", month);
            //session.setAttribute("status1",status1);
            forwardName = "success";
        } else if (buttonValue.equals("save")) {
            int yee = 0;
            List forcondtion13 = new ArrayList();
            FiscalYear fiscalyeardomain = new FiscalYear();
            FiscalYearDAO fiscalyeardao = new FiscalYearDAO();
            int fiscalPeriod = Integer.parseInt(fiscalPerid);
            int months = Integer.parseInt(month);
            yee = Integer.parseInt(year);
            ye = (List) fisDAO.comparevalue(yee);

            if (ye.isEmpty()) {
                if (fiscalPeriod == 13) {
                    while (k1 < 13) {
                        fisdomain = new FiscalPeriod();
                        format = new SimpleDateFormat("MM/dd/yyyy");
                        date = (Date) format.parse(startingdate[k1]);
                        forcondtion13.add(date);
                        date1 = (Date) format.parse(endingdate[k1]);
                        forcondtion13.add(date1);
                        fisdomain.setEndDate(date1);
                        fisdomain.setStartDate(date);
                        fisdomain.setYear(Integer.parseInt(year));
                        fisdomain.setPeriod(period[k1]);
                        perioddesc = year + period[k1];
                        fisdomain.setPeriodDis(perioddesc);
                        fisdomain.setStatus(status1);
                        session.setAttribute("year", year);
                        fisDAO.save(fisdomain);
                        fiscalyeardomain.setYear(Integer.parseInt(year));
                        fiscalyeardomain.setClsPeriod(closperiodstatus1);
                        fiscalyeardomain.setAdjPeriod(adjperiodrate1);
                        fiscalyeardomain.setActive(active);
                        fiscalyeardao.save(fiscalyeardomain);
                        fiscalForm.reset(mapping, request);
                        fisdomain = null;
                        k1++;
                    }// while(k1<13)
                    session.setAttribute("fiscalPerid", fiscalPerid);
                    session.setAttribute("month", month);
                    session.setAttribute("status1", status1);
                    forwardName = "success1";
                } else {
                    savalues1 = (List) session.getAttribute("abc");
                    savalues1.get(0);
                    savalues1.get(1);
                    savalues1.get(2);
                    while (w < 12) {
                        fisdomain = new FiscalPeriod();
                        FiscalPeriodBean fisbean1 = new FiscalPeriodBean();
                        fisbean1 = (FiscalPeriodBean) savalues1.get(w);
                        String prd = fisbean1.getPeriod();
                        String std = fisbean1.getStaringdate();
                        String etd = fisbean1.getEndingdate();
                        format = new SimpleDateFormat("MM/dd/yyyy");
                        date2 = (Date) format.parse(std);
                        date3 = (Date) format.parse(etd);
                        fisdomain.setPeriod(prd);
                        fisdomain.setStartDate(date2);
                        fisdomain.setEndDate(date3);
                        fisdomain.setYear(Integer.parseInt(year));
                        perioddesc = year + prd;
                        fisdomain.setPeriodDis(perioddesc);
                        fisdomain.setStatus(status1);
                        fisDAO.save(fisdomain);
			//this is for saving fiscal_year
                        //this is for saving fiscalyear
                        fiscalyeardomain.setYear(Integer.parseInt(year));
                        fiscalyeardomain.setClsPeriod(closperiodstatus1);
                        fiscalyeardomain.setAdjPeriod(adjperiodrate1);
                        fiscalyeardomain.setActive(active);
                        fiscalyeardao.save(fiscalyeardomain);
                        //ending code for fiscalyear
                        session.setAttribute("year", year);
                        fisdomain = null;
                        w++;
                    }//while(w<12)
                    //for the year we need to add two periods AD & CL
                    Calendar calendar = Calendar.getInstance();
                    calendar.set(Integer.parseInt(year), 11, 31, 12, 0, 0);
                    FiscalPeriod adFiscalPeriod = new FiscalPeriod("AD", Integer.parseInt(year), calendar.getTime(), calendar.getTime(),
                            status1, year + "AD");
                    FiscalPeriod clFiscalPeriod = new FiscalPeriod("CL", Integer.parseInt(year), calendar.getTime(), calendar.getTime(),
                            status1, year + "CL");
                    fisDAO.save(adFiscalPeriod);
                    fisDAO.save(clFiscalPeriod);

		    //code added by vasan...
                    //once we enter the year we are creating the period.
                    //for for every account we will enter the periods.
                    AccountDetailsDAO accountDetailsDAO = new AccountDetailsDAO();
                    List<ChartOfAccountBean> chartOfAccountBeanList = accountDetailsDAO.findForShowAll();
                    FiscalPeriodDAO fiscalPeriodDAO = new FiscalPeriodDAO();
                    AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
                    List periodList = fiscalPeriodDAO.findByProperty("year", new Integer(year));

                    for (Iterator chartBeanIter = chartOfAccountBeanList.iterator(); chartBeanIter.hasNext();) {
                        ChartOfAccountBean chartOfAccountBeanObj = (ChartOfAccountBean) chartBeanIter.next();
                        for (Iterator iter = periodList.iterator(); iter.hasNext();) {
                            FiscalPeriod fiscalPeriodObj = (FiscalPeriod) iter.next();
                            AccountBalance accountBalance = new AccountBalance(chartOfAccountBeanObj.getAcct(), fiscalPeriodObj.getPeriod(), fiscalPeriodObj.getYear().toString(),
                                    new Double(0), new Double(0), new Double(0));
                            accountBalanceDAO.save(accountBalance);
                            Budget budget = new Budget(chartOfAccountBeanObj.getAcct(), fiscalPeriodObj.getPeriod(), 0d, "1", fiscalPeriodObj.getYear());
                            new BudgetDAO().save(budget);
                        }
                    }
                    //end of code added by vasan.
                    session.setAttribute("fiscalPerid", fiscalPerid);
                    session.setAttribute("month", month);
                    session.setAttribute("year", year);
                }//else of if(fiscalPeriod==13)
                forwardName = "success1";
            } else {
                String msg = "Please Enter Different Year, This  Year " + year + " Already Exists";
                request.setAttribute("message", msg);
                session.setAttribute("year", year);
                forwardName = "success";
            }
        } else if (buttonValue.equals("yearList")) {
            FiscalPeriodDAO fisDAO1 = new FiscalPeriodDAO();

            int fisyear = Integer.parseInt(year);
            savelist = (List) fisDAO1.findforsearch(fisyear);
            session.setAttribute("saveList", savelist);

	    //removing period12,13 conditions
            session.removeAttribute("abc");
            session.removeAttribute("forcondition1");
            session.setAttribute("year", year);
            session.setAttribute("fiscalPerid", fiscalPerid);

            forwardName = "success";
        } else if (buttonValue.equals("addnew")) {
            // newyear=year;
            session.removeAttribute("year");
            session.removeAttribute("searchlist");
            session.removeAttribute("abc");
            session.removeAttribute("forcondition1");
            session.removeAttribute("saveList");
            session.removeAttribute("fiscalPerid");
            session.removeAttribute("month");
            forwardName = "success";
        } else if (buttonValue.equals("getExcelReport")) {
            LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
            String filePath = loadLogisoftProperties.getProperty("reportLocation") + "/fiscalPeridBudget.xls";
            File excelFile = new File(filePath);
            WritableWorkbook writableWorkbook = Workbook.createWorkbook(excelFile);
            BudgetDAO budgetDAO = new BudgetDAO();
            FiscalExportToExcel fiscalExportToExcel = new FiscalExportToExcel();
            List budgetList = budgetDAO.getBatchDetailsForExcelFiscal(null, copybudgetset, year1);
            WritableSheet writableSheet = fiscalExportToExcel.getExcelData(writableWorkbook, budgetList, fiscalForm);
            writableWorkbook.write();
            writableWorkbook.close();
            request.setAttribute("exportToExcelFile", filePath);
            request.setAttribute("exportToExcelFileHeader", "Fiscal Period " + fiscalForm.getYear() + " - Budget " + fiscalForm.getCopybudgetset() + ".xls");
            forwardName = "success1";
        } else if (buttonValue.equals("searchyear")) {

            List searchlist = null;
            List li = null;
            int fisyearid = 0;
            List activevalue = null;
            List ye1 = null;
            int yee1 = 0;
            FiscalYearDAO fiscalyeardao = new FiscalYearDAO();

            List fiscallist = fiscalyeardao.findByProperty("year", new Integer(year));
            if (fiscallist != null && !fiscallist.isEmpty()) {
                session.setAttribute("fiscalYear", (FiscalYear) fiscallist.get(0));
            }

            FiscalYear fisyeardomain = new FiscalYear();
            newyear = year;
            session.removeAttribute("searchlist");
            int newyear1 = Integer.parseInt(newyear);

            li = (List) fisDAO.findYear(newyear1);
            if (!li.isEmpty()) {
                session.setAttribute("searchlist", li);
            } else {
                String msg = "This Year " + year + " Does Not Exists ";
                request.setAttribute("message", msg);
            }

            //this is for removing period 12,13 conditions
            session.removeAttribute("abc");
            session.removeAttribute("forcondition1");
            session.removeAttribute("saveList");
            session.setAttribute("year", year);
            forwardName = "success1";
        } else if (buttonValue.equals("openstatus")) {
            List searchlist = null;
            FiscalPeriod fis = new FiscalPeriod();
            if (session.getAttribute("searchlist") != null) {
                searchlist = (List) session.getAttribute("searchlist");
            }
            int index = fiscalForm.getIndex();
            fis = (FiscalPeriod) searchlist.get(index);
            fis.setStatus(periodStatus);
            fisDAO.update(fis);
            StringBuilder desc = new StringBuilder("Fiscal Period '").append(fis.getPeriodDis()).append("'");
            desc.append(" opened by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
            AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.FISCAL_PERIOD, fis.getPeriodDis(), NotesConstants.FISCAL_PERIOD, loginUser);
            session.removeAttribute("searchlist");
            session.setAttribute("searchlist", (List) fisDAO.findYear(Integer.parseInt(year)));
            forwardName = "success1";

        } else if (buttonValue.equals("closestatus")) {
            int index = fiscalForm.getIndex();
            List searchlist = null;

            FiscalPeriod fis = new FiscalPeriod();
            FiscalPeriod fis1 = new FiscalPeriod();
            if (session.getAttribute("searchlist") != null) {
                searchlist = (List) session.getAttribute("searchlist");
            }
            if (index == 0) {
                fis = (FiscalPeriod) searchlist.get(index);
                fis.setStatus("Close");
                fisDAO.update(fis);
                StringBuilder desc = new StringBuilder("Fiscal Period '").append(fis.getPeriodDis()).append("'");
                desc.append(" closed by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.FISCAL_PERIOD, fis.getPeriodDis(), NotesConstants.FISCAL_PERIOD, loginUser);

            }
            if (index > 0) {
                fis = (FiscalPeriod) searchlist.get(index - 1);
                if (fis.getStatus().equals("Close")) {
                    fis1 = (FiscalPeriod) searchlist.get(index);
                    fis1.setStatus("Close");
                    fisDAO.update(fis1);
                    StringBuilder desc = new StringBuilder("Fiscal Period '").append(fis.getPeriodDis()).append("'");
                    desc.append(" closed by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                    AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.FISCAL_PERIOD, fis.getPeriodDis(), NotesConstants.FISCAL_PERIOD, loginUser);
                } else {
                    String msg1 = "Period cannot be Closed because Prevoius Month Period Is Not Closed..";
                    request.setAttribute("msg1", msg1);
                }
            }
            forwardName = "success1";
        } else if (buttonValue.equals("fiscalperiodReport")) {
            FiscalPeriodBC fiscalPeriodBC = new FiscalPeriodBC();
            LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
            String outputFileName = loadLogisoftProperties.getProperty("reportLocation");
            File file = new File(outputFileName + "/" + ReportConstants.FISCALREPORT);
            String fileName = null;
            if (!file.exists()) {
                file.mkdir();
            }
            String realPath = this.getServlet().getServletContext().getRealPath("/");
            outputFileName = outputFileName + "/" + ReportConstants.FISCALREPORT + "/" + year + ".pdf";

            fiscalPeriodBC.createFiscalPeriodReport(year, outputFileName, realPath);
            request.setAttribute("fiscalPeriod", outputFileName);
            forwardName = "success1";
        } else if (buttonValue.equals("printTrialBalance")) {
            String selectedYear = null;
            String selectedPeriod = null;
            List<FiscalPeriod> searchlist = (List) session.getAttribute("searchlist");
            if (searchlist != null) {
                FiscalPeriod fiscalPeriod = (FiscalPeriod) searchlist.get(fiscalForm.getIndex());
                if (fiscalPeriod != null) {
                    selectedYear = fiscalPeriod.getYear().toString();
                    selectedPeriod = fiscalPeriod.getPeriod();
                    if (CommonUtils.isEqualIgnoreCase(selectedPeriod, "AD") || CommonUtils.isEqualIgnoreCase(selectedPeriod, "CL")) {
                        selectedPeriod = "12";
                    }
                }
            }
            if (selectedYear != null && selectedPeriod != null) {
                String contextPath = this.getServlet().getServletContext().getRealPath("/");
                String startAccount = fiscalForm.getStartingAccount();
                String endAccount = fiscalForm.getEndingAccount();
                boolean ecuReport = fiscalForm.isEcuReport();
                String fileName = new TrialBalanceReportsCreator(startAccount, endAccount, selectedYear, selectedPeriod, ecuReport, contextPath).create();
                request.setAttribute("fileName", fileName);
            }
            forwardName = "success1";
        } else if (buttonValue.equals("exportTrialBalance")) {
            String selectedYear = null;
            String selectedPeriod = null;
            List<FiscalPeriod> searchlist = (List) session.getAttribute("searchlist");
            if (searchlist != null) {
                FiscalPeriod fiscalPeriod = (FiscalPeriod) searchlist.get(fiscalForm.getIndex());
                if (fiscalPeriod != null) {
                    selectedYear = fiscalPeriod.getYear().toString();
                    selectedPeriod = fiscalPeriod.getPeriod();
                    if (CommonUtils.isEqualIgnoreCase(selectedPeriod, "AD") || CommonUtils.isEqualIgnoreCase(selectedPeriod, "CL")) {
                        selectedPeriod = "12";
                    }
                }
            }
            if (selectedYear != null && selectedPeriod != null) {
                String startAccount = fiscalForm.getStartingAccount();
                String endAccount = fiscalForm.getEndingAccount();
                boolean ecuReport = fiscalForm.isEcuReport();
                String fileName = new TrialBalanceExcelCreator(startAccount, endAccount, selectedYear, selectedPeriod, ecuReport).create();
                response.addHeader("Content-Disposition", "attachment; filename=" + FilenameUtils.getName(fileName));
                response.setContentType("application/vnd.ms-excel" + ";charset=utf-8");
                ServletUtils.returnFile(fileName, response.getOutputStream());
                return null;
            }
            forwardName = "success1";
        } else if (buttonValue.equals("IncomeStatementReport")) {
            String fileName = LoadLogisoftProperties.getProperty("reportLocation") + "/" + ReportConstants.INCOMESTATEMENT + "/";
            File file = new File(fileName);
            if (!file.exists()) {
                file.mkdirs();
            }
            fileName = fileName + year + "_" + fiscalForm.getFromPeriod() + "_" + fiscalForm.getToPeriod() + ".pdf";
            String realPath = this.getServlet().getServletContext().getRealPath("/");
            fileName = new FiscalPeriodBC().createIncomeStatement(fileName, realPath, fiscalForm.getFromPeriod(), fiscalForm.getToPeriod(), Integer.parseInt(year), fiscalForm.getCopybudgetset());
            request.setAttribute("fileName", fileName);
            return mapping.findForward("incomeStatement");
        } else if (buttonValue.equals("exportToExcel")) {
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-Disposition",
                    "attachment; filename=" + new Date() + "incomeReportInExcel.xls");
            WritableWorkbook writableWorkbook = Workbook.createWorkbook(response.getOutputStream());
            FiscalPeriodBC fiscalPeriodBC = new FiscalPeriodBC();
            fiscalPeriodBC.createIncomeStatement(new Integer(year), new Integer(fiscalForm.getFromPeriod()), new Integer(fiscalForm.getToPeriod()), "", "", buttonValue, writableWorkbook);
            writableWorkbook.write();
            writableWorkbook.close();
        } else if (buttonValue.equals("setBudget")) {

            FiscalPeriodBC fiscalPeriodBC = new FiscalPeriodBC();
            request.setAttribute("message", fiscalPeriodBC.setBudget(fiscalForm));
            forwardName = "success1";
        } else if ("postBatch".equals(buttonValue)) {
            forwardName = "success1";
        }
        return mapping.findForward(forwardName);
    }

    public void redirectToReport(HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.sendRedirect(request.getContextPath() + "/report");
    }

    private void completeYearCloseProcess(String year, HttpServletRequest request) throws Exception {
        FiscalPeriodDAO fiscalPeriodDAO = new FiscalPeriodDAO();
        FiscalYearDAO fiscalYearDAO = new FiscalYearDAO();
        AccountDetailsDAO accountDetailsDAO = new AccountDetailsDAO();
        AccountYearEndBalanceDAO accountYearEndBalanceDAO = new AccountYearEndBalanceDAO();
        YearCloseAuditDAO yearCloseAuditDAO = new YearCloseAuditDAO();
        BatchDAO batchDAO = new BatchDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        JournalEntryDAO journalEntryDAO = new JournalEntryDAO();
        AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
        LineItemDAO lineItemDAO = new LineItemDAO();
        User user = (User) request.getSession(false).getAttribute("loginuser");

        //-----Checking for Previous year open status--------
        Integer prevYear = 0;
        prevYear = new Integer(year) - 1;
        Integer countOfPreviousYearOpenStatus = fiscalPeriodDAO.getFiscalPeriodCountForStatus(prevYear.toString(), "Open");
        if (countOfPreviousYearOpenStatus > 0) {
            String mes = "Previous Year status are still open, Close all the previous year";
            request.setAttribute("message", mes);
            return;
        }

        Integer countOfOpenStatus = fiscalPeriodDAO.getFiscalPeriodCountForStatus(year, "Open");
        if (countOfOpenStatus > 0) {
            String msg = "There are some Open Status";
            YearCloseAudit yearCloseAudit = new YearCloseAudit(new Integer(year), user.getFirstName() + " " + user.getLastName(), new Date(), msg);
            yearCloseAuditDAO.save(yearCloseAudit);
            request.setAttribute("message", msg);
            request.getSession(false).setAttribute("year", year);
            return;
        }

        Integer accountDetailsCountForAcctType = accountDetailsDAO.getAccountDetailsCountForAcctType();

        if (accountDetailsCountForAcctType > 0) {
            String msg = "An income statment account does not have a close to account entry";
            YearCloseAudit yearCloseAudit = new YearCloseAudit(new Integer(year), user.getFirstName() + " " + user.getLastName(), new Date(), msg);
            yearCloseAuditDAO.save(yearCloseAudit);
            request.setAttribute("message", msg);
            request.getSession(false).setAttribute("year", year);
            return;
        }

        //deleting for current year.
        accountYearEndBalanceDAO.deleteForAnYear(year);

        String batchNo = batchDAO.getMaxBatchNumber();
        Batch batch = new Batch("Year closing for " + year, null, "auto", "0", "0", "yes", "Posted");
        batch = batchDAO.saveAndReturn(batch);

        JournalEntry journalEntry = new JournalEntry();
        String jeid = batchNo + "-" + "001";
        journalEntry.setJournalEntryId(jeid);
        journalEntry.setBatchId(batch.getBatchId());
        journalEntry.setJournalEntryDesc("Auto closing for " + year);
        journalEntry.setMemo("Year " + year + " closed on " + new Date());
        journalEntry.setCredit(0.0);
        journalEntry.setDebit(0.0);
        List fiscalPeriodList = fiscalPeriodDAO.findByProperty("periodDis", year + "CL");
        if (!fiscalPeriodList.isEmpty() && fiscalPeriodList.size() > 0) {
            FiscalPeriod fos = (FiscalPeriod) fiscalPeriodList.get(0);
            journalEntry.setPeriod(fos.getPeriodDis());
        }
        Calendar calendar = Calendar.getInstance();
        calendar.set(Integer.parseInt(year), 11, 31, 12, 0, 0);
        journalEntry.setJeDate(calendar.getTime());

        List genericCodeList = genericCodeDAO.findByProperty("code", "GL-JE");
        GenericCode genericCode = null;
        if (!genericCodeList.isEmpty() && genericCodeList.size() > 0) {
            genericCode = (GenericCode) genericCodeList.get(0);
            journalEntry.setSourceCode(genericCode);
            journalEntry.setSourceCodeDesc(genericCode.getCodedesc());
        }
        journalEntryDAO.save(journalEntry);

        List accountYearClosingAmountList = accountBalanceDAO.getYearClosingAmountAndAccount(Integer.parseInt(year) - 1);

        NumberFormat formatter = new DecimalFormat("#000");
        int count = 0;
        double debitTotalYearClosingAmt = 0;
        double creditTotalYearClosingAmt = 0;
        for (Iterator iter = accountYearClosingAmountList.iterator(); iter.hasNext();) {
            Object[] element = (Object[]) iter.next();
            double yearClosingAmt = new Double(element[0].toString()).doubleValue();

            String accountNo = element[1].toString();

            if (yearClosingAmt != 0) {
                AccountDetails accountDetails = accountDetailsDAO.findById(accountNo);
                LineItem lineItem = new LineItem();
                lineItem.setLineItemId(jeid + "-" + formatter.format(++count));
                lineItem.setJournalEntryId(jeid);
                lineItem.setReference(year + " Close");
                lineItem.setReferenceDesc("Year closing entry for " + year + " for account # " + accountNo);
                if (yearClosingAmt < 0) {
                    lineItem.setDebit(Math.abs(yearClosingAmt));
                    lineItem.setCredit(new Double(0));
                    debitTotalYearClosingAmt += yearClosingAmt;
                } else {
                    creditTotalYearClosingAmt += yearClosingAmt;
                    lineItem.setCredit(yearClosingAmt);
                    lineItem.setDebit(new Double(0));
                }

                lineItem.setDate(new Date());
                lineItem.setAccount(accountNo);
                String acctDesc = accountDetailsDAO.getDescforAccount(accountNo);
                lineItem.setAccountDesc(acctDesc);
                lineItem.setCurrency("USD");
                lineItemDAO.save(lineItem);

                AccountBalance accountBalance = new AccountBalance(accountNo, "CL", year, lineItem.getDebit(), lineItem.getCredit(), new Double(0));
                accountBalanceDAO.updateAcountBalanceForPeriodAndYear(accountBalance);

                if (accountDetails.getCloseToAcct() != null) {
                    accountDetails = accountDetailsDAO.findById(accountDetails.getCloseToAcct());
                    String closingAccountNo = "";
                    if (accountDetails != null && accountDetails.getAccount() != null) {
                        closingAccountNo = accountDetails.getAccount();
                    }

                    lineItem = new LineItem();
                    lineItem.setLineItemId(jeid + "-" + formatter.format(++count));
                    lineItem.setJournalEntryId(jeid);
                    lineItem.setReference(year + " Close");
                    lineItem.setReferenceDesc("Year closing entry for " + year + " for account # " + closingAccountNo);
                    if (yearClosingAmt < 0) {
                        creditTotalYearClosingAmt += yearClosingAmt;
                        lineItem.setCredit(Math.abs(yearClosingAmt));
                        lineItem.setDebit(new Double(0));
                    } else {
                        debitTotalYearClosingAmt += yearClosingAmt;
                        lineItem.setDebit(yearClosingAmt);
                        lineItem.setCredit(new Double(0));
                    }

                    lineItem.setDate(new Date());
                    lineItem.setAccount(closingAccountNo);
                    lineItem.setAccountDesc(accountDetailsDAO.getDescforAccount(closingAccountNo));
                    lineItem.setCurrency("USD");

                    lineItemDAO.save(lineItem);

                    accountBalance = new AccountBalance(closingAccountNo, "CL", year, lineItem.getDebit(), lineItem.getCredit(), new Double(0));
                    accountBalanceDAO.updateAcountBalanceForPeriodAndYear(accountBalance);
                }
            }

        }

        journalEntry.setDebit(debitTotalYearClosingAmt);
        batch.setTotalDebit((debitTotalYearClosingAmt));
        journalEntry.setCredit(creditTotalYearClosingAmt);
        batch.setTotalCredit((creditTotalYearClosingAmt));

        batchDAO.update(batch);
        journalEntryDAO.update(journalEntry);

        accountYearEndBalanceDAO.insertFromAccountBalance(year);

        List list = fiscalYearDAO.findByProperty("year", new Integer(year));
        if (list != null && !list.isEmpty()) {
            FiscalYear fiscalYear = (FiscalYear) list.get(0);
            fiscalYear.setActive("Close");
            fiscalYearDAO.update(fiscalYear);
        }

	//update all fiscal perod and set the loked as 'Y'
		    	  /*In other words we would be locking all the periods 
         * and NO MORE JE postings possible from that time onwards.
         */
        List<FiscalPeriod> fiscalPeriods = fiscalPeriodDAO.findByProperty("year", new Integer(year));

        if (null != fiscalPeriods) {

            for (FiscalPeriod fiscalPeriod : fiscalPeriods) {
                fiscalPeriod.setLocked(CommonConstants.YES);
                fiscalPeriodDAO.update(fiscalPeriod);
            }

        }
    }

    private void completeYearClose(String year) throws Exception {
        FiscalPeriodDAO fiscalPeriodDAO = new FiscalPeriodDAO();
        FiscalYearDAO fiscalYearDAO = new FiscalYearDAO();
        AccountDetailsDAO accountDetailsDAO = new AccountDetailsDAO();
        AccountYearEndBalanceDAO accountYearEndBalanceDAO = new AccountYearEndBalanceDAO();
        YearCloseAuditDAO yearCloseAuditDAO = new YearCloseAuditDAO();
        BatchDAO batchDAO = new BatchDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        JournalEntryDAO journalEntryDAO = new JournalEntryDAO();
        AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
        LineItemDAO lineItemDAO = new LineItemDAO();
        //User user=(User)request.getSession(false).getAttribute("loginuser");
        final String DESCREPTION = "Year Closing for the year " + year;

        //get all the accounts who have acct_type = "Income Statement"
        List accounts = fiscalPeriodDAO.getAllAccountAndBalancesByAccountTypeAndYear(new Integer(year), "Income Statement");

        //get the total sum accounts who have acct_type = "Income Statement"
        Double amount = fiscalPeriodDAO.getAllAccountBalancesByAccountTypeAndYear(new Integer(year), "Income Statement");

        //Create a JE Batch for the year closing
        Batch jeBatch = new Batch();
        jeBatch.setBatchDesc(DESCREPTION);
        List genericCodeList = genericCodeDAO.findByProperty("code", "GL-JE");
        GenericCode genericCode = null;
        String sourceCodeDesc = "";
        if (!genericCodeList.isEmpty() && genericCodeList.size() > 0) {
            genericCode = (GenericCode) genericCodeList.get(0);
            jeBatch.setSourceLedger(genericCode);
            sourceCodeDesc = genericCode.getCodedesc();
        }
        jeBatch.setType(NotesConstants.NOTES_TYPE_AUTO);
        jeBatch.setTotalCredit(amount);
        jeBatch.setTotalDebit(amount);
        jeBatch.setStatus(CommonConstants.STATUS_OPEN);
        jeBatch = batchDAO.saveAndReturn(jeBatch);

        //Create JE Journal Entry for the year closing
        String jeid = jeBatch.getBatchId() + "-" + "001";
        JournalEntry journalentry = new JournalEntry();
        journalentry.setJournalEntryId(jeid);
        journalentry.setJournalEntryDesc(DESCREPTION);
        journalentry.setBatchId(jeBatch.getBatchId());
        journalentry.setJeDate(new Date());
        String period = year + "CL";
        journalentry.setPeriod(period);
        journalentry.setCredit(amount);
        journalentry.setDebit(amount);
        journalentry.setMemo(DESCREPTION);
        if (null != genericCode) {
            journalentry.setSourceCode(genericCode);
            journalentry.setSourceCodeDesc(genericCode.getCodedesc());
        }
        journalEntryDAO.save(journalentry);

        //Create TWO line item entries for the each of the accounts
        int count = 0;
        NumberFormat formatter = new DecimalFormat("#000");
        LineItem lineItem = null;

        //get current fiscal period
        FiscalPeriod fos = null;
        List fiscalPeriodList = fiscalPeriodDAO.findByProperty("periodDis", year + "CL");
        if (!fiscalPeriodList.isEmpty() && fiscalPeriodList.size() > 0) {
            fos = (FiscalPeriod) fiscalPeriodList.get(0);
        }
        for (Object account : accounts) {
            Object[] jeAccount = (Object[]) account;
            Double amt = (Double) jeAccount[1];
            lineItem = new LineItem();
            lineItem.setLineItemId(jeid + "-" + formatter.format(++count));
            lineItem.setJournalEntryId(jeid);
            lineItem.setReferenceDesc(DESCREPTION);
            lineItem.setPeriod(fos);
            if (null != jeAccount[0]) {
                lineItem.setAccount(jeAccount[0].toString());
            }

            //If the amt had positive value then fill in DEBIT amount otherwise CREDIT amount
            if (amt >= 0) {
                lineItem.setDebit(amt);
                lineItem.setCredit(new Double(0));
            } else {
                lineItem.setCredit(-(amt));
                lineItem.setDebit(new Double(0));
            }
            lineItemDAO.save(lineItem);

            //Make an identical OPPOSITE entry to Close To Account for the ACCOUNT in the line_item table
            lineItem = new LineItem();
            lineItem.setLineItemId(jeid + "-" + formatter.format(++count));
            lineItem.setJournalEntryId(jeid);
            lineItem.setReferenceDesc(DESCREPTION);
            lineItem.setPeriod(fos);

            //get the close_to_acct for the ACCOUNT
            AccountDetails accountDetails = accountDetailsDAO.getClosetoAcctList(jeAccount[0].toString());
            String closingAccountNo = "";
            if (accountDetails != null && accountDetails.getAccount() != null) {
                closingAccountNo = accountDetails.getCloseToAcct();
                lineItem.setAccount(closingAccountNo);
            }

            lineItem.setAccount(closingAccountNo);

            //If the amt had positive value then fill in DEBIT amount otherwise CREDIT amount
            if (amt <= 0) {
                lineItem.setDebit(-(amt));
                lineItem.setCredit(new Double(0));
            } else {
                lineItem.setCredit(amt);
                lineItem.setDebit(new Double(0));
            }
            lineItemDAO.save(lineItem);
        }

        //close the status of fisical year
        List list = fiscalYearDAO.findByProperty("year", new Integer(year));
        if (list != null && !list.isEmpty()) {
            FiscalYear fiscalYear = (FiscalYear) list.get(0);
            fiscalYear.setActive("Close");
            fiscalYearDAO.update(fiscalYear);
        }

	//update all fiscal perod and set the loked as 'Y'
		    	  /*In other words we would be locking all the periods 
         * and NO MORE JE postings possible from that time onwards.
         */
        List<FiscalPeriod> fiscalPeriods = fiscalPeriodDAO.findByProperty("year", new Integer(year));

        if (null != fiscalPeriods) {

            for (FiscalPeriod fiscalPeriod : fiscalPeriods) {
                fiscalPeriod.setLocked(CommonConstants.YES);
                fiscalPeriodDAO.update(fiscalPeriod);
            }

        }
    }
}
