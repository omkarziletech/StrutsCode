/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.DateUtils;
import com.gp.cong.logisoft.bc.accounting.ReportConstants;
import com.gp.cong.logisoft.bc.fcl.BookingConstants;
import com.gp.cong.logisoft.bc.fcl.BookingDwrBC;
import com.gp.cong.logisoft.bc.fcl.BookingFclBC;
import com.gp.cong.logisoft.bc.fcl.FclBlConstants;
import com.gp.cong.logisoft.bc.fcl.FclBlUtil;
import com.gp.cong.logisoft.bc.fcl.ImportBc;
import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.bc.fcl.QuotationConstants;
import com.gp.cong.logisoft.bc.ratemanagement.PortsBC;
import com.gp.cong.logisoft.bc.scheduler.ProcessInfoBC;
import com.gp.cong.logisoft.domain.BookingInbondDetails;
import com.gp.cong.logisoft.domain.FclInbondDetails;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.lcl.Lcl3pRefNo;
import com.gp.cong.logisoft.domain.lcl.LclBookingHazmat;
import com.gp.cong.logisoft.domain.lcl.LclInbond;
import com.gp.cong.logisoft.hibernate.dao.BookingInbondDetailsDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GeneralInformationDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.NotesDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.lcl.Lcl3pRefNoDAO;
import com.gp.cong.logisoft.hibernate.dao.lcl.LclHazmatDAO;
import com.gp.cong.logisoft.hibernate.dao.lcl.LclInbondsDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.util.StringFormatter;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.Comparator;
import com.gp.cvst.logisoft.beans.FclCfclChargeBean;
import com.gp.cvst.logisoft.beans.TransactionBean;
import com.gp.cvst.logisoft.domain.BookingFcl;
import com.gp.cvst.logisoft.domain.BookingfclUnits;
import com.gp.cvst.logisoft.domain.CustAddress;
import com.gp.cvst.logisoft.domain.FclAESDetails;
import com.gp.cvst.logisoft.domain.FclBl;
import com.gp.cvst.logisoft.domain.FclBlCharges;
import com.gp.cvst.logisoft.domain.FclBlContainer;
import com.gp.cvst.logisoft.domain.FclBlCostCodes;
import com.gp.cvst.logisoft.domain.FclBlMarks;
import com.gp.cvst.logisoft.domain.FileNumberForQuotaionBLBooking;
import com.gp.cvst.logisoft.domain.HazmatMaterial;
import com.gp.cvst.logisoft.domain.Quotation;
import com.gp.cvst.logisoft.hibernate.dao.BookingFclDAO;
import com.gp.cvst.logisoft.hibernate.dao.BookingfclUnitsDAO;
import com.gp.cvst.logisoft.hibernate.dao.CustAddressDAO;
import com.gp.cvst.logisoft.hibernate.dao.FclBlContainerDAO;
import com.gp.cvst.logisoft.hibernate.dao.FclBlCostCodesDAO;
import com.gp.cvst.logisoft.hibernate.dao.FclBlDAO;
import com.gp.cvst.logisoft.hibernate.dao.HazmatMaterialDAO;
import com.gp.cvst.logisoft.hibernate.dao.QuotationDAO;
import com.gp.cvst.logisoft.hibernate.dao.SystemRulesDAO;
import com.gp.cvst.logisoft.struts.form.EditBookingsForm;
import com.logiware.accounting.dao.AccrualsDAO;
import com.logiware.action.EventAction;
import com.logiware.constants.ItemConstants;
import com.logiware.fcl.form.SessionForm;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

/**
 * MyEclipse Struts Creation date: 07-28-2008
 *
 * XDoclet definition:
 *
 * @struts.action path="/newBookings" name="NewBookingsForm"
 * input="/jsps/fclQuotes/newBookings.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/jsps/fclQuotes/newBookings.jsp"
 */
public class EditBookingAction extends EventAction {

    private static final Logger log = Logger.getLogger(EditBookingAction.class);
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     * @throws java.lang.Exception
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditBookingsForm NewBookingsForm = (EditBookingsForm) form;// TODO
        // Auto-generated
        // method
        // stub
        super.registerEvent(form, request, response);
        HttpSession session = request.getSession(true);
        BookingFclDAO bookingFclDAO = new BookingFclDAO();
        BookingFcl bookinFcl = bookingFclDAO.getFileNoObject(NewBookingsForm.getFileNo());
        boolean importFlag;
        if (null != bookinFcl) {
            importFlag = "I".equalsIgnoreCase(bookinFcl.getImportFlag());
        } else {
            importFlag = null != session.getAttribute(ImportBc.sessionName);
        }
        BookingFclBC bookingFclBC = new BookingFclBC();
        BookingfclUnitsDAO bookingFclUnitsDAO = new BookingfclUnitsDAO();
        String buttonValue = null != NewBookingsForm.getButtonValue() ? NewBookingsForm.getButtonValue() : "";
        String forwardName = "";
        BigInteger ssHeaderId = BigInteger.ZERO;
        // String alternateAganet = NewBookingsForm.getAlternateAgent();
        DBUtil dbUtil = new DBUtil();
        String action = NewBookingsForm.getAction();
        String billToCode = NewBookingsForm.getBillToCode();
        String bookingComplete = NewBookingsForm.getBookingComplete();
        String shipperflag = NewBookingsForm.getShippercheck();
        String forwarderflag = NewBookingsForm.getForwardercheck();
        String consigneeflag = NewBookingsForm.getConsigneecheck();
        String printGoods = NewBookingsForm.getPrintGoodsDescription();
        String routedAgentCheck = NewBookingsForm.getRoutedAgentCheck();
        String soc = NewBookingsForm.getSoc();
        List<Long> fileIdList = new ArrayList<Long>();
        if (null != bookinFcl && bookinFcl.getShipNo() != null) {
            request.setAttribute("shipperIcon", new NotesDAO().isCustomerNotes(bookinFcl.getShipNo()));
        }
        request.setAttribute("bulletRates", null != bookinFcl && null != bookinFcl.getFileNo() ? new QuotationDAO().isBulletRateByFileNo(bookinFcl.getFileNo()) : false);
        String carrierPrint = "";
        if (NewBookingsForm.getCarrierPrint() != null && NewBookingsForm.getCarrierPrint().equals("on")) {
            carrierPrint = NewBookingsForm.getCarrierPrint();
        } else {
            carrierPrint = "off";
        }
        User user = null;
        if (session.getAttribute("loginuser") != null) {
            user = (User) session.getAttribute("loginuser");
        }
        CustomerDAO customerDAO = new CustomerDAO();
        String specialequipment = NewBookingsForm.getSpecialequipment();
        String hazmat = NewBookingsForm.getHazmat();
        String outofgate = NewBookingsForm.getOutofgate();
        String localdryage = NewBookingsForm.getLocaldryage();
        String intermodel = NewBookingsForm.getIntermodel();
        String inland = NewBookingsForm.getInland();
        String insurance = NewBookingsForm.getInsurance();
        String prepaidToCollect = NewBookingsForm.getPrepaidToCollect();
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm a");

        //--String to maintain jquery tabs-----
        String selectedTab = NewBookingsForm.getSelectedTab();
        TransactionBean transactionBean = new TransactionBean();
        transactionBean.setBillToCode(billToCode);
        transactionBean.setBookingComplete(bookingComplete);
        transactionBean.setPrepaidToCollect(prepaidToCollect);
        if (prepaidToCollect.equals("C")) {
            transactionBean.setBillToCode("A");
        }

        transactionBean.setSpecialequipment(specialequipment);
        //transactionBean.setHazmat(hazmat);
        transactionBean.setOutofgate(outofgate);
        transactionBean.setInsurance(insurance);
        transactionBean.setLocaldryage(localdryage);
        transactionBean.setIntermodel(intermodel);
        transactionBean.setInland(NewBookingsForm.getInland());
        transactionBean.setDocCharge(NewBookingsForm.getDocCharge());
        transactionBean.setPierPass(NewBookingsForm.getPierPass());
        transactionBean.setChassisCharge(NewBookingsForm.getChassisCharge());
        transactionBean.setShippercheck(shipperflag);
        transactionBean.setForwardercheck(forwarderflag);
        transactionBean.setConsigneecheck(consigneeflag);
        transactionBean.setAlternateAgent(NewBookingsForm.getAlternateAgent());
        transactionBean.setPrintGoodsDescription(printGoods);
        transactionBean.setDeductFFcomm(NewBookingsForm.getDeductFFcomm());
        transactionBean.setDirectConsignmntCheck(NewBookingsForm.getDirectConsignmntCheck());
        transactionBean.setRoutedAgentCheck(routedAgentCheck);
        transactionBean.setSoc(soc);
        transactionBean.setDocumentsReceived(NewBookingsForm.getDocumentsReceived());
        transactionBean.setShipperTpCheck(NewBookingsForm.getShipperTpCheck());
        transactionBean.setSpottAddrTpCheck(NewBookingsForm.getSpottAddrTpCheck());
        transactionBean.setTimeCheckBox(NewBookingsForm.getTimeCheckBox());
        transactionBean.setConsigneeTpCheck(NewBookingsForm.getConsigneeTpCheck());
        transactionBean.setTruckerTpCheck(NewBookingsForm.getTruckerTpCheck());
        transactionBean.setCarrierPrint(carrierPrint);
        transactionBean.setBrand(NewBookingsForm.getBrand());
        MessageResources messageResources = getResources(request);
        GenericCodeDAO gcDAO = new GenericCodeDAO();
        GenericCode gen = new GenericCode();
        // getting hazmat value from table
        if (request.getParameter("popup") != null) {
            forwardName = "BlNumberJSP";
            return mapping.findForward(forwardName);
        }
        String originCode = null;
        String propRemarks = null;
        if (null != NewBookingsForm.getAction() && NewBookingsForm.getAction().equals("sendEdi")) {
            request.setAttribute("sendEdi", "true");
            NewBookingsForm.setAction("");
        } else {
            request.setAttribute("sendEdi", "false");
            NewBookingsForm.setAction("");
        }
        if (null != NewBookingsForm.getOriginTerminal() && NewBookingsForm.getOriginTerminal().lastIndexOf("(") != -1) {
            originCode = NewBookingsForm.getOriginTerminal().substring(NewBookingsForm.getOriginTerminal().lastIndexOf("(") + 1,
                    NewBookingsForm.getOriginTerminal().lastIndexOf(")"));
        }
        if (NewBookingsForm.getZip() != null && !NewBookingsForm.getZip().trim().equals("")) {
            propRemarks = new UnLocationDAO().getpropertyRemarks(originCode);
        }
        if (propRemarks != null) {
            request.setAttribute("remarks", propRemarks);
        }
        BookingFcl bookingFclMain = bookingFclBC.getBookingfcl(NewBookingsForm);
        if (!importFlag && bookingFclDAO.canWeCancelEdi(bookingFclMain.getFileNo())) {
            request.setAttribute("cancelEdi", true);
        } else {
            request.setAttribute("cancelEdi", false);
        }
        if (!importFlag && bookingFclMain.getFileNo() != null) {
            request.setAttribute("createOrChange", bookingFclDAO.createOrChangeXml(bookingFclMain.getFileNo()));
        } else {
            request.setAttribute("createOrChange", "");
        }
        String ssl = NewBookingsForm.getSslDescription();
        if (ssl != null && !ssl.isEmpty()) {
            String accountNumber = "";
            if (ssl.contains("//")) {
                accountNumber = ssl.substring(ssl.indexOf("//") + 2);
            } else {
                accountNumber = ssl.substring(ssl.indexOf("/") + 1);
            }
            List carrier = new CustAddressDAO().findBy1(null, accountNumber, null, null);
            if (carrier != null && carrier.size() > 0) {
                CustAddress c1 = (CustAddress) carrier.get(0);
                GeneralInformation generalInformation
                        = new GeneralInformationDAO().getGeneralInformationByAccountNumber(c1.getAcctNo());
                if (!importFlag && generalInformation != null && generalInformation.getShippingCode() != null && generalInformation.getShippingCode().equalsIgnoreCase("I")) {
                    request.setAttribute("shippingCodeInttra", true);
                } else {
                    request.setAttribute("shippingCodeInttra", false);
                }
            }
        }
        transactionBean.setRatesNonRates(null != bookingFclMain.getRatesNonRates() ? bookingFclMain.getRatesNonRates() : "R");
        transactionBean.setBreakBulk(bookingFclMain.getBreakBulk());
        transactionBean.setSpotRate(bookingFclMain.getSpotRate());
        transactionBean.setHazmat(NewBookingsForm.getHazmat());
        request.setAttribute(BookingConstants.TRANSACTIONBEAN, transactionBean);
        session.setAttribute("companyMnemonicCode", new SystemRulesDAO().getSystemRulesByCode("CompanyNameMnemonic"));
        request.setAttribute("enableIms", LoadLogisoftProperties.getProperty("ims.enable"));
        if (buttonValue != null && !"".equals(buttonValue) && buttonValue.equalsIgnoreCase("convertToQuotation")) {
            FclBlCostCodesDAO fclBlCostCodesDAO = new FclBlCostCodesDAO();
            BookingFcl bookingFcl = bookingFclDAO.getFileNoObject(NewBookingsForm.getFileNo());
            new AccrualsDAO().deleteAccrualsByBookingNo(Integer.parseInt(bookingFcl.getBookingNumber()));
            FclBlCostCodes fclBlCostCodes = fclBlCostCodesDAO.findByBookingId(bookingFcl.getBookingId());
            if (null != fclBlCostCodes) {
                fclBlCostCodesDAO.delete(fclBlCostCodes);
            }
            bookingFclDAO.delete(bookingFcl);
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            if (CommonFunctions.isNotNull(bookingFcl.getFileNo())) {
                Integer userId = (user != null) ? user.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockBookingModule"),
                        bookingFcl.getFileNo(), userId);
            }
            QuotationDAO quotationDAO = new QuotationDAO();
            NotesDAO notesDAO = new NotesDAO();

            Quotation quotation = quotationDAO.getFileNoObject(NewBookingsForm.getFileNo());
            quotation.setQuoteFlag("Open");
            quotation.setFinalized("off");
            quotation.setBookedBy("");
            quotation.setBookedDate(null);
            quotationDAO.update(quotation);

            setFileList1(session, quotation);
            session.setAttribute("selectedFileNumber", NewBookingsForm.getFileNo());
            session.setAttribute("screenName", "Quotes");
            forwardName = "closeSearch";
        } else if (buttonValue.equals("saveBooking")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            bookingFclDAO.save(bookingFcl);
        } else if ("addhazmat".equals(buttonValue)) {
            BookingFcl bookingFcl = bookingFclBC.getBookingfcl(NewBookingsForm);
            bookingFclBC.addHazmatRates(bookingFcl, session);
        } else if ("deletehazmat".equals(buttonValue)) {
            BookingFcl bookingFcl = bookingFclBC.getBookingfcl(NewBookingsForm);
            bookingFclDAO.deleteHazmatEntry(bookingFcl.getBookingId());
            bookingFclBC.deleteHazmatRates(bookingFcl, session);
        }
        if (buttonValue.equalsIgnoreCase("removedOldCFCLVoyageDetails")) {
            List<Long> oldCFCLChargeIdList = null;
            if (CommonUtils.isNotEmpty(NewBookingsForm.getVaoyageInternational())) {
                oldCFCLChargeIdList = bookingFclUnitsDAO.getOldCFCLChargeIdList(NewBookingsForm.getBookingId());
                if (!oldCFCLChargeIdList.isEmpty()) {
                    bookingFclUnitsDAO.deleteCFCLCharge(oldCFCLChargeIdList);
                }
                ssHeaderId = bookingFclDAO.getSsHeaderId(NewBookingsForm.getVaoyageInternational());
                List<FclCfclChargeBean> charge = bookingFclDAO.getCfclLinkedAllDrCharge(ssHeaderId);
                this.removedOldCFCLVoyageDetails(charge, NewBookingsForm.getBookingId());
            }
            fileIdList = bookingFclDAO.getFileId(ssHeaderId);
            if (fileIdList.size() > 0) {
                if (bookingFclDAO.getHazFlag(fileIdList)) {
                    NewBookingsForm.setHazmat("N");
                    transactionBean.setHazmat("N");
                }
            }
        }

        if (buttonValue.equals("recalc") || buttonValue.equals("acceptVidOnSpotRate") || buttonValue.equals("converttobl") || buttonValue.equals("update")
                || buttonValue.equals("goBackSave") || buttonValue.equals("hazmat") || buttonValue.equals("copy")
                || buttonValue.equals("RefenceReport") || buttonValue.equals("WorkOrderReport") || buttonValue.equals("CostBookingReport")
                || buttonValue.equals("BKGConfReport") || buttonValue.equals("insurance") || buttonValue.equals("FFCommssion")
                || buttonValue.equals("addLocalDrayage") || buttonValue.equals("deleteLocalDrayage")
                || buttonValue.equals("deleteinsurance") || buttonValue.equals("sendEmail") || buttonValue.equals("deleteFFCommssion")
                || buttonValue.equals("addInterModal") || buttonValue.equals("deleteInterModal") || buttonValue.equals("deleteInland") || buttonValue.equals("deleteIntermodalRamp")
                || "addSpecialEquipment".equalsIgnoreCase(buttonValue) || "updateSpecialEquipment".equalsIgnoreCase(buttonValue)
                || buttonValue.equals("deleteDocumentCharge") || buttonValue.equals("addDocumentCharge")
                || "deleteSpecialEquipment".equals(buttonValue) || "deleteSpecialEquipmentUnit".equals(buttonValue)
                || "addSpecialEquipmentComment".equals(buttonValue)
                || "adjustmentChargeComments".equals(buttonValue)
                || "addhazmat".equals(buttonValue) || buttonValue.equals("deleteBookingCostCode")
                || "deletehazmat".equals(buttonValue)
                || "onCarriageRemarks".equals(buttonValue)
                || "addPierPassCharge".equals(buttonValue)
                || "deletePierPassCharge".equals(buttonValue)
                || "addBrandValue".equals(buttonValue)
                || "removedOldCFCLVoyageDetails".equals(buttonValue)
                || "deleteChassisCharge".equals(buttonValue)
                || "addChassisCharge".equals(buttonValue)) {
            if (buttonValue.equals("acceptVidOnSpotRate")) {
                new BookingDwrBC().notesForSpotRates(NewBookingsForm.getFileNo(), user.getLoginName(), "Y");
            }
            if ("removedOldCFCLVoyageDetails".equals(buttonValue)) {
                NewBookingsForm.setEstimatedDate(null);
                NewBookingsForm.setEstimatedAtten(null);
                NewBookingsForm.setVoyage(null);
                NewBookingsForm.setVessel(null);
            }
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            if ("onCarriageRemarks".equals(buttonValue) && null != NewBookingsForm.getOverrideRemarks()) {
                //Remarks Format : Remarks Content(USERNAME-MM/dd/yyyy HH:mm a).
                GregorianCalendar now = new GregorianCalendar();
                SimpleDateFormat pattern = new SimpleDateFormat("MM/dd/yyyy h:mm a");
                StringBuilder remarks = new StringBuilder();
                remarks.append(NewBookingsForm.getOverrideRemarks().toUpperCase())
                        .append("(").append(user.getLoginName().toUpperCase())
                        .append("-").append(pattern.format(now.getTime()))
                        .append(").");
                bookingFcl.setOnCarriageRemarks(remarks.toString());
                bookingFcl.setOnCarriage(null != NewBookingsForm.getOnCarriage() ? NewBookingsForm.getOnCarriage() : null);
            }
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            List fclRates = new ArrayList();
            if ((bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equalsIgnoreCase("R"))
                    || (bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equals("N")
                    && bookingFcl.getBreakBulk() != null && bookingFcl.getBreakBulk().equals("N"))) {
                if ("addSpecialEquipment".equalsIgnoreCase(buttonValue) || "updateSpecialEquipment".equalsIgnoreCase(buttonValue)) {
                    addOrUpdateSpecialEquipmentCharges(NewBookingsForm.getSpecialEqpmtUnit(), NewBookingsForm.getSpecialEqpmtSelectBox(), bookingFcl.getBookingId(), buttonValue);
                } else if ("addSpecialEquipmentComment".equals(buttonValue)) {
                    addSpecialEquipmentComment(NewBookingsForm.getNumbIdx(), NewBookingsForm.getStandardChargeIndex(), NewBookingsForm.getOutOfGuageComment(), bookingFcl.getBookingId());
                }
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                if (fclRates.isEmpty()) {
                    fclRates = bookingFclUnitsDAO.getbookingfclWhenUnitIsNull(bookingFcl.getBookingNumber());
                }
                if ("deletehazmat".equals(buttonValue)) {
                    bookingFclDAO.deleteHazmatEntry(bookingFcl.getBookingId());
                }
                List otherChargesList = new ArrayList();
                List perkglbsList = new ArrayList();

                //----OTHERCHARGES("PER BL") EXISTS ONLY FOR RATED BOOKINGS------
                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                for (Object otherList1 : otherList) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList1;
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
                otherChargesList = bookingFclBC.setOtherMarkupValuesIntoChargesEditBookingForm(otherChargesList, NewBookingsForm);
                bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
                bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);

                if (bookingFcl.getAmount() != null && bookingFcl.getLocaldryage() != null && bookingFcl.getLocaldryage().equalsIgnoreCase("Y")) {
                    bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getAmount());
                }
                if (bookingFcl.getAmount1() != null && bookingFcl.getIntermodel() != null && bookingFcl.getIntermodel().equalsIgnoreCase("Y")) {
                    bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getAmount1());
                }
                bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getInsurancamt());
                if (buttonValue.equals("deleteLocalDrayage")) {
                    fclRates = bookingFclBC.deleteLocalDrayage(fclRates, bookingFcl);
                    bookingFcl.setAmount(0.00);
                }
                if (buttonValue.equalsIgnoreCase("addLocalDrayage")) {
                    if (bookingFcl.getLocaldryage() != null && bookingFcl.getLocaldryage().equals("Y")) {
                        fclRates = bookingFclBC.addLocalDrayage(fclRates, bookingFcl);
                    }
                }
                if (buttonValue.equals("deleteInterModal")) {
                    fclRates = bookingFclBC.deleteIntermodal(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                }
                if (buttonValue.equals("deleteInland") || buttonValue.equals("addhazmat")) {
                    fclRates = bookingFclBC.deleteInland(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                    bookingFcl.setDoorOrigin(null);
                    bookingFcl.setZip(null);
                    bookingFcl.setAmount(0.00);
                    bookingFcl.setInland("N");
                    if (CommonFunctions.isNotNullOrNotEmpty(otherChargesList)) {
                        otherChargesList = bookingFclBC.deleteInland(otherChargesList, bookingFcl);
                    }
                }
                if (buttonValue.equals("deleteIntermodalRamp")) {
                    fclRates = bookingFclBC.deleteIntermodalRamp(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                    bookingFcl.setDoorOrigin(null);
                    bookingFcl.setZip(null);
                    bookingFcl.setAmount(0.00);
                    bookingFcl.setInland("N");
                }
                if (buttonValue.equals("deleteDocumentCharge")) {
                    otherChargesList = bookingFclBC.deleteDocCharge(otherChargesList, bookingFcl);
                }
                if (buttonValue.equalsIgnoreCase("addDocumentCharge")) {
                    if (CommonUtils.isNotEmpty(NewBookingsForm.getDocChargeAmount())) {
                        otherChargesList = bookingFclBC.addDocumentCharge(otherChargesList, bookingFcl, NewBookingsForm.getDocChargeAmount());
                    }
                }
                if (buttonValue.equals("deletePierPassCharge")) {
                    fclRates = bookingFclBC.deletePierPassCharge(fclRates, bookingFcl);
                    bookingFcl.setPierPass("N");
                }
                if (buttonValue.equalsIgnoreCase("addPierPassCharge")) {
                    fclRates = bookingFclBC.deletePierPassCharge(fclRates, bookingFcl);
                    bookingFcl.setPierPass("N");
                    fclRates = bookingFclBC.addPierPassCharge(fclRates, bookingFcl);
                    bookingFcl.setPierPass("Y");
                }
                if (buttonValue.equalsIgnoreCase("addChassisCharge")) {
                    fclRates = bookingFclBC.deleteChassisCharge(fclRates, bookingFcl);
                    bookingFcl.setChassisCharge("N");
                    fclRates = bookingFclBC.addChassisCharge(fclRates, bookingFcl, NewBookingsForm.getVendorAccountName(), NewBookingsForm.getVendorAccountNo(), NewBookingsForm.getAmount(), NewBookingsForm.getMarkUp());
                    bookingFcl.setChassisCharge("Y");
                }
                if (buttonValue.equals("deleteChassisCharge")) {
                    fclRates = bookingFclBC.deleteChassisCharge(fclRates, bookingFcl);
                    bookingFcl.setChassisCharge("N");
                }
                if (buttonValue.equalsIgnoreCase("addInterModal")) {
                    if (bookingFcl.getIntermodel() != null && bookingFcl.getIntermodel().equals("Y")) {
                        fclRates = bookingFclBC.addIntermodal(fclRates, bookingFcl);
                    }
                }
                if (buttonValue.equals("deleteFFCommssion")) {
                    fclRates = bookingFclBC.deleteFFCommission(fclRates, bookingFcl);
                }
                if (buttonValue.equalsIgnoreCase("FFCommssion")) {
                    if (bookingFcl.getDeductFFcomm() != null && bookingFcl.getDeductFFcomm().equals("Y")) {
                        fclRates = bookingFclBC.addFFCommission(fclRates, bookingFcl, messageResources);
                    }
                }
                if (buttonValue.equals("deleteSpecialEquipment")) {
                    fclRates = bookingFclBC.deleteSpecialEquipmentCharges(fclRates);
                }
                if (buttonValue.equals("deleteSpecialEquipmentUnit")) {
                    fclRates = bookingFclBC.deleteSpecialEquipmentUnitCharges(fclRates, NewBookingsForm.getNumbIdx(), NewBookingsForm.getStandardChargeIndex());
                }
                if (buttonValue.equals("deleteinsurance")) {
                    fclRates = bookingFclBC.deleteInsurance(fclRates, bookingFcl);
                    bookingFcl.setCostofgoods(0.00);
                    bookingFcl.setInsurancamt(0.00);
                }
                if (buttonValue.equals("deleteBookingCostCode")) {
                    bookingFclBC.deleteCostDetails(NewBookingsForm, user.getLoginName().toUpperCase());
                    request.setAttribute("editBookingsForm", NewBookingsForm);
                    forwardName = "success1";
                }
                if (buttonValue.equalsIgnoreCase("insurance") || buttonValue.equalsIgnoreCase("adjustmentChargeComments")) {
                    if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("")) {
                        bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                        fclRates = bookingFclBC.getInsuranceCostofGoods(fclRates, bookingFcl);
                    }
                }
                if (null != buttonValue && buttonValue.equals("addBrandValue")) {
                    User userid = null;
                    if (session.getAttribute("loginuser") != null) {
                        userid = (User) session.getAttribute("loginuser");
                    }
                    bookingFcl.setUpdateBy(userid.getLoginName());
                    bookingFcl = bookingFclBC.update(NewBookingsForm, session);
                    bookingFclDAO.save(bookingFcl);
                }
                if (action != null && action.equalsIgnoreCase("deletePBACharges")) {
                    if (CommonFunctions.isNotNullOrNotEmpty(fclRates)) {
                        fclRates = bookingFclBC.deletePBACharges(fclRates, bookingFcl);
                    }
                    if (CommonFunctions.isNotNullOrNotEmpty(otherChargesList)) {
                        otherChargesList = bookingFclBC.deletePBACharges(otherChargesList, bookingFcl);
                    }
                }
                bookingFclBC.chargesSave(fclRates, bookingFcl, request);
                bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
                bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);

                fclRates = new ArrayList();
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                ///
                if (fclRates.size() == 0) {
                    fclRates = bookingFclUnitsDAO.getbookingfclWhenUnitIsNull(bookingFcl.getBookingNumber());
                }

                otherChargesList = new ArrayList();
                otherList = new ArrayList();
                perkglbsList = new ArrayList();
                otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                    request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
                } else {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                    List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                    request.setAttribute("consolidaorList", consolidaorList);
                }
            } else {
                fclRates = bookingFclUnitsDAO.getbookingfcl2(bookingFcl.getBookingNumber());
                fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
                Double amount = (null != bookingFcl.getTotalCharges() && null != bookingFcl.getInsurancamt()) ? (bookingFcl.getTotalCharges() + bookingFcl.getInsurancamt()) : null;
                bookingFcl.setTotalCharges(amount);
                List otherChargesList = new ArrayList();
                List perkglbsList = new ArrayList();
                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                otherChargesList = bookingFclBC.setOtherMarkupValuesIntoChargesEditBookingForm(otherChargesList, NewBookingsForm);

                bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);
                if (buttonValue.equalsIgnoreCase("addLocalDrayage")) {
                    if (bookingFcl.getLocaldryage() != null && bookingFcl.getLocaldryage().equals("Y")) {
                        fclRates = bookingFclBC.addLocalDrayage(fclRates, bookingFcl);
                    }
                }
                if (buttonValue.equalsIgnoreCase("addInterModal")) {
                    if (bookingFcl.getIntermodel() != null && bookingFcl.getIntermodel().equals("Y")) {
                        fclRates = bookingFclBC.addIntermodal(fclRates, bookingFcl);
                    }
                }
                if (buttonValue.equalsIgnoreCase("FFCommssion")) {
                    if (bookingFcl.getDeductFFcomm() != null && bookingFcl.getDeductFFcomm().equals("Y")) {
                        fclRates = bookingFclBC.addFFCommission(fclRates, bookingFcl, messageResources);
                    }
                }
                if (buttonValue.equals("deleteInland") || buttonValue.equals("addhazmat")) {
                    fclRates = bookingFclBC.deleteInland(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                    if (CommonFunctions.isNotNullOrNotEmpty(otherChargesList)) {
                        otherChargesList = bookingFclBC.deleteInland(otherChargesList, bookingFcl);
                    }
                }
                if (buttonValue.equals("deleteIntermodalRamp")) {
                    fclRates = bookingFclBC.deleteIntermodalRamp(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                }
                if (buttonValue.equalsIgnoreCase("insurance")) {
                    if (null != bookingFcl.getInsurance() && bookingFcl.getInsurance().equals("Y")
                            && null != bookingFcl.getCostofgoods() && !bookingFcl.getCostofgoods().equals("")) {
                        bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                        if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                            fclRates = bookingFclBC.getInsuranceCostofGoodsForNonRated(fclRates, bookingFcl);
                        } else {
                            fclRates = bookingFclBC.getInsuranceCostofGoods(fclRates, bookingFcl);
                        }
                    }
                }
                if (buttonValue.equals("deleteLocalDrayage")) {
                    fclRates = bookingFclBC.deleteLocalDrayage(fclRates, bookingFcl);
                    bookingFcl.setAmount(0.00);
                }
                if (buttonValue.equals("deleteInterModal")) {
                    fclRates = bookingFclBC.deleteIntermodal(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                }
                if (buttonValue.equals("deleteInland")) {
                    fclRates = bookingFclBC.deleteInland(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                }
                if (buttonValue.equals("deleteIntermodalRamp")) {
                    fclRates = bookingFclBC.deleteIntermodalRamp(fclRates, bookingFcl);
                    bookingFcl.setAmount1(0.00);
                }
                if (buttonValue.equals("deleteinsurance")) {
                    fclRates = bookingFclBC.deleteInsurance(fclRates, bookingFcl);
                    bookingFcl.setCostofgoods(0.00);
                    bookingFcl.setInsurancamt(0.00);
                }
                if (buttonValue.equals("deleteFFCommssion")) {
                    fclRates = bookingFclBC.deleteFFCommission(fclRates, bookingFcl);
                }
                bookingFclBC.chargesSave(fclRates, bookingFcl, request);
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                otherChargesList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                    request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
                } else {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                    List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                    request.setAttribute("consolidaorList", consolidaorList);
                }
            }
            bookingFcl.setOnCarriage(null != NewBookingsForm.getOnCarriage() ? NewBookingsForm.getOnCarriage() : null);
            bookingFclDAO.save(bookingFcl);

            //----to set quoteby and blby and creation dates----
            BookingFcl bookingFclNew = new BookingFcl();
            bookingFcl.setQuoteBy(NewBookingsForm.getQuoteBy());
            PropertyUtils.copyProperties(bookingFclNew, bookingFcl);
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFclNew.setQuoteDate(date);
            }
            Date date1 = null;
            bookingFcl.setBlBy(NewBookingsForm.getBlBy());
            if (NewBookingsForm.getBlDate() != null) {
                date1 = dateFormat.parse(NewBookingsForm.getBlDate());
                bookingFclNew.setBlDate(date1);
            }
            if (bookingFclNew.getHazmat() != null && bookingFclNew.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFclNew);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFclNew.getBookingId()));
            if (buttonValue.equals("update") || buttonValue.equals("goBackSave")) {
                bookingFcl.setContainerSize(new BookingfclUnitsDAO().getContainerSize("" + bookingFcl.getBookingId()));
                request.setAttribute("searchcollapse", "searchcollapse");
                List SearchingList = new ArrayList();
                SearchingList.add(bookingFclNew);
                request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFclNew);
                request.setAttribute(BookingConstants.SEARCHLIST, SearchingList);
                setRequest(session, request);
                if (importFlag) {
                    session.setAttribute("trade", "bookingForImport");
                } else {
                    session.setAttribute("trade", "booking");
                }
            } else {
                setRequest(session, request);
            }
            if (bookingFclNew.getHazmat() != null && bookingFclNew.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("message", msg);
            }
            if (importFlag) {
                request.setAttribute("comdesccode", bookingFclNew.getComdesc());
            }
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        } //---------------------action--------------       
        if (buttonValue != null && buttonValue.equals("BKGConfReportWithoutSave")) {
            forwardName = "success1";
        }
        if (buttonValue != null && buttonValue.equals("newgetRates")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFcl.setQuoteDate(date);
            }
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            //bookingFclBC.getRates(NewBookingsForm, bookingFcl,messageResources);
            List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            List otherChargesList = new ArrayList();
            List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    otherChargesList.add(c1);
                }
            }

            if (bookingFcl.getLocaldryage() != null && bookingFcl.getLocaldryage().equals("Y")) {
                fclRates = bookingFclBC.addLocalDrayage(fclRates, bookingFcl);
            }
            if (bookingFcl.getIntermodel() != null && bookingFcl.getIntermodel().equals("Y")) {
                fclRates = bookingFclBC.addIntermodal(fclRates, bookingFcl);
            }
            if (bookingFcl.getDeductFFcomm() != null && bookingFcl.getDeductFFcomm().equals("Y")) {
                fclRates = bookingFclBC.addFFCommission(fclRates, bookingFcl, messageResources);
            }
            if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("")) {
                //bookingFcl=bookingFclBC.calculateInsurance(bookingFcl,NewBookingsForm.getInsuranceAmount());
                bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                    otherChargesList = bookingFclBC.getInsuranceCostofGoodsForNonRated(otherChargesList, bookingFcl);
                }
            }
            fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
            bookingFclBC.chargesSave(fclRates, bookingFcl, request);
            bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
            bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
            if ((bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equals("Y"))
                    || (bookingFcl.getHazmatSet() != null && bookingFcl.getHazmatSet().size() > 0)) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }
            fclRates = new ArrayList();
            fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            otherChargesList = new ArrayList();
            otherList = new ArrayList();
            otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            perkglbsList = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    otherChargesList.add(c1);
                }
            }
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
            } else {
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidaorList", consolidaorList);
            }
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if ("deleteCharge".equalsIgnoreCase(buttonValue) || "changeToPerBl".equalsIgnoreCase(buttonValue)) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            bookingFcl.setQuoteBy(NewBookingsForm.getQuoteBy());
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFcl.setQuoteDate(date);
            }
            List fclRates = new ArrayList();
            List otherChargesList = new ArrayList();
            List perkglbsList = new ArrayList();
            if ("deleteCharge".equalsIgnoreCase(buttonValue)) {
                bookingFclBC.deleteCharge(NewBookingsForm.getNumbIdx(), null);
            } else {
                if (NewBookingsForm.getNumbIdx() != null && !NewBookingsForm.getNumbIdx().equals("")) {
                    BookingfclUnits newBookingfclUnits = new BookingfclUnits();
                    BookingfclUnits bookingfclUnits = new BookingfclUnitsDAO().findById(Integer.parseInt(NewBookingsForm.getNumbIdx()));
                    PropertyUtils.copyProperties(newBookingfclUnits, bookingfclUnits);
                    if ("DOCUMENT CHARGE".equalsIgnoreCase(bookingfclUnits.getChgCode())) {
                        newBookingfclUnits.setMarkUp(bookingfclUnits.getAmount());
                        newBookingfclUnits.setAmount(0d);
                    }
                    newBookingfclUnits.setCostType("PER BL CHARGES");
                    newBookingfclUnits.setUnitType(null);
                    newBookingfclUnits.setNumbers(null);
                    bookingFclUnitsDAO.save(newBookingfclUnits);
                    bookingFclBC.changeChargeToPerBl(NewBookingsForm.getNumbIdx(), NewBookingsForm.getChargeCode(), user.getLoginName(), bookingfclUnits.getBookingNumber());
                }
            }
            if ((bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equalsIgnoreCase("R")) || (bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equals("N")
                    && bookingFcl.getBreakBulk() != null && bookingFcl.getBreakBulk().equals("N"))) {
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                if (fclRates.isEmpty()) {
                    fclRates = bookingFclUnitsDAO.getbookingfclWhenUnitIsNull(bookingFcl.getBookingNumber());
                }

                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                List ffCommissionList = new ArrayList();
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                // fclRates = bookingFclBC.deleteCharge(NewBookingsForm.getNumbIdx(), fclRates);
            } else {
                fclRates = bookingFclUnitsDAO.getbookingfcl2(bookingFcl.getBookingNumber());
            }
            fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
            //otherChargesList=bookingFclBC.setOtherMarkupValuesIntoChargesEditBookingForm(otherChargesList, NewBookingsForm);
            if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("")) {
                //bookingFcl=bookingFclBC.calculateInsurance(bookingFcl,NewBookingsForm.getInsuranceAmount());
                bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                    otherChargesList = bookingFclBC.getInsuranceCostofGoodsForNonRated(otherChargesList, bookingFcl);
                } else {
                    fclRates = bookingFclBC.getInsuranceCostofGoods(fclRates, bookingFcl);
                }
            }
            bookingFclBC.chargesSave(fclRates, bookingFcl, request);
            bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
            fclRates = new ArrayList();
            fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            if (fclRates.isEmpty()) {
                fclRates = bookingFclUnitsDAO.getbookingfclWhenUnitIsNull(bookingFcl.getBookingNumber());
            }
            if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
            } else {
                List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidaorList", consolidaorList);
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
            }
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
            bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
            if (bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }

            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if (buttonValue.equals("deleteBLCharge")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            if (fclRates.size() == 0) {
                fclRates = bookingFclUnitsDAO.getbookingfcl2(bookingFcl.getBookingNumber());
                List tempList = new ArrayList();
                for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                    BookingfclUnits bookingfclUnits = (BookingfclUnits) iterator.next();
                    if (!bookingfclUnits.getCostType().equalsIgnoreCase("PER BL CHARGES")) {
                        tempList.add(bookingfclUnits);
                    }
                }
                fclRates.clear();
                fclRates.addAll(tempList);
            }
            List otherChargesList = new ArrayList();
            List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List perkglbsList = new ArrayList();
            List ffCommissionList = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    otherChargesList.add(c1);
                }
            }
            //otherChargesList=bookingFclBC.setOtherMarkupValuesIntoChargesEditBookingForm(otherChargesList, NewBookingsForm);
            otherChargesList = bookingFclBC.deleteCharge(NewBookingsForm.getNumbIdx(), otherChargesList);
            bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
            bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);
            fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
            otherChargesList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
            } else {
                List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidaorList", consolidaorList);
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
            }
            if (null != bookingFcl.getInsurance() && bookingFcl.getInsurance().equals("Y")
                    && null != bookingFcl.getCostofgoods() && !bookingFcl.getCostofgoods().equals("")) {
                bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                    otherChargesList = bookingFclBC.getInsuranceCostofGoodsForNonRated(otherChargesList, bookingFcl);
                }
            }
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            bookingFcl.setQuoteBy(NewBookingsForm.getQuoteBy());
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFcl.setQuoteDate(date);
            }
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
            if (bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }

            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if (buttonValue.equals("goBack") || buttonValue.equals("goBackSave")) {
            if (session.getAttribute("loginuser") != null) {
                user = (User) session.getAttribute("loginuser");
            }
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            if (CommonFunctions.isNotNull(NewBookingsForm.getFileNo())) {
                Integer userId = (user != null) ? user.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockBookingModule"),
                        NewBookingsForm.getFileNo(), userId);
                session.setAttribute("selectedFileNumber", NewBookingsForm.getFileNo());
                SessionForm oldSearchForm = (SessionForm) session.getAttribute("oldSearchForm");
                if (null == oldSearchForm) {
                    oldSearchForm = new SessionForm();
                    Calendar cal = Calendar.getInstance();
                    if (importFlag) {
                        oldSearchForm.setImportFile(true);
                        cal.add(Calendar.MONTH, -6);
                    } else {
                        cal.add(Calendar.MONTH, -1);
                    }
                    oldSearchForm.setFromDate(DateUtils.formatDate(cal.getTime(), "MM/dd/yyyy"));
                    oldSearchForm.setToDate(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                    oldSearchForm.setFileNumber(NewBookingsForm.getFileNo());
                    session.setAttribute("oldSearchForm", oldSearchForm);
                } else if (CommonUtils.isNotEqualIgnoreEmpty(oldSearchForm.getFileNumber(), NewBookingsForm.getFileNo())) {
                    oldSearchForm.setFileNumber(NewBookingsForm.getFileNo());
                    session.setAttribute("oldSearchForm", oldSearchForm);
                }
            }
            setRequest(session, request);
            setFileList(session, bookingFclMain);
            forwardName = "success";
        }
        if (buttonValue.equals("numbersChanged")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
            List otherChargesList = new ArrayList();
            List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    otherChargesList.add(c1);
                }
            }
            fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
            fclRates = bookingFclBC.doContainersChangedIntoEditBookignForm(fclRates, NewBookingsForm);
            otherChargesList = bookingFclBC.setOtherMarkupValuesIntoChargesEditBookingForm(otherChargesList, NewBookingsForm);
            bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
            bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);

            if (bookingFcl.getAmount() != null && bookingFcl.getLocaldryage() != null && bookingFcl.getLocaldryage().equalsIgnoreCase("Y")) {
                bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getAmount());
            }
            if (bookingFcl.getAmount1() != null && bookingFcl.getIntermodel() != null && bookingFcl.getIntermodel().equalsIgnoreCase("Y")) {
                bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getAmount1());
            }
            bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getInsurancamt());

            if (bookingFcl.getLocaldryage() != null && bookingFcl.getLocaldryage().equals("Y")) {
                fclRates = bookingFclBC.addLocalDrayage(fclRates, bookingFcl);
            }
            if (bookingFcl.getIntermodel() != null && bookingFcl.getIntermodel().equals("Y")) {
                fclRates = bookingFclBC.addIntermodal(fclRates, bookingFcl);
            }
            if (bookingFcl.getDeductFFcomm() != null && bookingFcl.getDeductFFcomm().equals("Y")) {
                fclRates = bookingFclBC.addFFCommission(fclRates, bookingFcl, messageResources);
            }
            if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("")) {
                //bookingFcl=bookingFclBC.calculateInsurance(bookingFcl,NewBookingsForm.getInsuranceAmount());
                bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                    otherChargesList = bookingFclBC.getInsuranceCostofGoodsForNonRated(otherChargesList, bookingFcl);
                } else {
                    fclRates = bookingFclBC.getInsuranceCostofGoods(fclRates, bookingFcl);
                }
            }
            bookingFclBC.chargesSave(fclRates, bookingFcl, request);
            bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
            bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
            } else {
                List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidaorList", consolidaorList);
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
            }
            bookingFclDAO.save(bookingFcl);
            //----to set quoteby and blby and their creation dates----
            bookingFcl.setQuoteBy(NewBookingsForm.getQuoteBy());
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFcl.setQuoteDate(date);
            }

            bookingFcl.setBlBy(NewBookingsForm.getBlBy());
            Date date1 = null;
            if (NewBookingsForm.getBlDate() != null) {
                date1 = dateFormat.parse(NewBookingsForm.getBlDate());
                bookingFcl.setBlDate(date1);
            }
            if (bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if ("searchPort".equals(buttonValue)) {
            PortsBC portsBC = new PortsBC();
            request.setAttribute("regions", portsBC.getAllRegion1());
            request.setAttribute("textName", request.getParameter("textName"));
            request.setAttribute("from", request.getParameter("from"));
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "portSearchPage";
        }
        //Bookings Reports
        if (buttonValue.equals("RefenceReport") || buttonValue.equals("RefenceReportwithoutsave")) {
            if (NewBookingsForm.getBookingId() != null && !NewBookingsForm.getBookingId().equals("")) {
                BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(NewBookingsForm.getBookingId()));
                FclBl fclBl = bookingFclBC.getBlByFileNo(bookingFcl.getFileNo());
                if (fclBl != null) {
                    bookingFcl.setBlBy(fclBl.getBlBy());
                    bookingFcl.setBlDate(fclBl.getBolDate());
                    bookingFcl.setBlFlag("on");
                }
                request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
                request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
                List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                List otherChargesList = new ArrayList();
                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                List bookingfclUnitsList1 = new ArrayList();
                List perkglbsList = new ArrayList();
                boolean flag1 = false;
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            }
            LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
            String outputFileName = loadLogisoftProperties.getProperty("reportLocation");
            File file = new File(outputFileName + "/" + ReportConstants.REFERENCEREPORTS);
            if (!file.exists()) {
                file.mkdir();
            }
            String realPath = this.getServlet().getServletContext().getRealPath("/");
            outputFileName = outputFileName + "/" + ReportConstants.REFERENCEREPORTS + "/" + NewBookingsForm.getSSBooking() + ".pdf";
            bookingFclBC.createReferenceReport(NewBookingsForm, outputFileName, realPath);
            request.setAttribute("Reference", outputFileName);
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        //THIS IS FOR REFERENCE REPORT
        if (buttonValue.equals("WorkOrderReport") || buttonValue.equals("WorkOrderReportwithoutsave")) {
            if (NewBookingsForm.getBookingId() != null && !NewBookingsForm.getBookingId().equals("")) {
                BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(NewBookingsForm.getBookingId()));
                FclBl fclBl = bookingFclBC.getBlByFileNo(bookingFcl.getFileNo());
                if (fclBl != null) {
                    bookingFcl.setBlBy(fclBl.getBlBy());
                    bookingFcl.setBlDate(fclBl.getBolDate());
                    bookingFcl.setBlFlag("on");
                }
                request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
                request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
                List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                List otherChargesList = new ArrayList();
                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                List bookingfclUnitsList1 = new ArrayList();
                List perkglbsList = new ArrayList();
                boolean flag1 = false;
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            }
            LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
            String outputFileName = loadLogisoftProperties.getProperty("reportLocation");
            File file = new File(outputFileName + "/" + ReportConstants.WORKORDER);
            if (!file.exists()) {
                file.mkdir();
            }
            String realPath = this.getServlet().getServletContext().getRealPath("/");
            outputFileName = outputFileName + "/" + ReportConstants.WORKORDER + "/" + NewBookingsForm.getSSBooking() + ".pdf";
            bookingFclBC.createWorkOrderReport(NewBookingsForm, outputFileName, realPath);
            request.setAttribute("WorkOrder", outputFileName);
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        //THIS IS FOR COSTSHEET
        if (buttonValue.equals("CostBookingReport") || buttonValue.equals("CostBookingReportWithoutSave")) {
            if (NewBookingsForm.getBookingId() != null && !NewBookingsForm.getBookingId().equals("")) {
                BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(NewBookingsForm.getBookingId()));
                FclBl fclBl = bookingFclBC.getBlByFileNo(bookingFcl.getFileNo());
                if (fclBl != null) {
                    bookingFcl.setBlBy(fclBl.getBlBy());
                    bookingFcl.setBlDate(fclBl.getBolDate());
                    bookingFcl.setBlFlag("on");
                }
                request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
                request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
                List fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                List otherChargesList = new ArrayList();
                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                List bookingfclUnitsList1 = new ArrayList();
                List perkglbsList = new ArrayList();
                boolean flag1 = false;
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                    request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
                } else {
                    List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                    request.setAttribute("consolidaorList", consolidaorList);
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                }
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
            }
            LoadLogisoftProperties loadLogisoftProperties = new LoadLogisoftProperties();
            String outputFileName = loadLogisoftProperties.getProperty("reportLocation");
            File file = new File(outputFileName + "/" + ReportConstants.COSTSHEET);
            if (!file.exists()) {
                file.mkdir();
            }
            String realPath = this.getServlet().getServletContext().getRealPath("/");
            outputFileName = outputFileName + "/" + ReportConstants.COSTSHEET + "/" + NewBookingsForm.getSSBooking() + ".pdf";
            bookingFclBC.createCostSheetReport(NewBookingsForm, outputFileName, realPath, messageResources);
            request.setAttribute("CostSheet", outputFileName);
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if (buttonValue.equals("converttobl") || buttonValue.equals("converttoblnew")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            bookingFcl.setBlFlag("on");
            BookingfclUnitsDAO bookingfclUnitsDAO = new BookingfclUnitsDAO();
            FclBlDAO fclBlDAO = new FclBlDAO();
            if (session.getAttribute("loginuser") != null) {
                user = (User) session.getAttribute("loginuser");
            }
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            if (CommonFunctions.isNotNull(NewBookingsForm.getFileNo())) {
                Integer userId = (user != null) ? user.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockBookingModule"),
                        NewBookingsForm.getFileNo(), userId);
            }
            FclBl fclBl = bookingFclBC.getConvertToBl(bookingFcl, NewBookingsForm, user);// getting fclBlObject
            fclBl.setImportFlag(importFlag ? "I" : null);
            List fclcontainerList = bookingFclBC.getConvertToContainerList(bookingFcl);
            List inbondDetailsList = bookingFclBC.getConvertToInbondList(bookingFcl);
            List bookingFclRatesList = bookingfclUnitsDAO.getbookingfcl(bookingFcl.getBookingId().toString());
            List otherChargesList = bookingfclUnitsDAO.getbookingfcl1(bookingFcl.getBookingId().toString());
            List newaddList1 = new ArrayList();
            List newaddList = new ArrayList();
            if (buttonValue.equals("converttoblnew")) {
                List newRatesList = bookingFclBC.getRates(NewBookingsForm, bookingFcl, messageResources, bookingFclRatesList, otherChargesList);
                newRatesList.addAll(otherChargesList);
                newaddList = bookingFclBC.getConvertToChargesList(bookingFcl, buttonValue, newRatesList);
                newaddList1 = bookingFclBC.getConvertToCostCodesList(bookingFcl, buttonValue, newRatesList, messageResources);
            } else {
                newaddList = bookingFclBC.getConvertToChargesList(bookingFcl, buttonValue, bookingFclRatesList);
                newaddList1 = bookingFclBC.getConvertToCostCodesList(bookingFcl, buttonValue, bookingFclRatesList, messageResources);

            }
            String finalDestination = bookingFcl.getPortofDischarge();
            String unlocCode = StringFormatter.orgDestStringFormatter(finalDestination);
            BookingDwrBC bookingDwrBC = new BookingDwrBC();
            if (bookingDwrBC.checkForTheRegion(finalDestination).equalsIgnoreCase("true") && (bookingFcl.getDeductFFcomm() != null && bookingFcl.getDeductFFcomm().equalsIgnoreCase("N"))) {
                if (bookingDwrBC.checkForCommodity(bookingFcl.getComcode()).equals("true")) {
                    if (bookingFcl.getForward() != null && !bookingFcl.getForward().
                            equalsIgnoreCase(FclBlConstants.FORWARDERNO) && !bookingFcl.getForward().
                            equalsIgnoreCase(FclBlConstants.FORWARDERNO2) && !bookingFcl.getForward().
                            equalsIgnoreCase(FclBlConstants.FORWARDERNO3)) {
                        newaddList1.add(bookingFclBC.multipleConatinerByInputValue(messageResources, bookingFclRatesList, bookingFcl));
                    }

                }
            }
            Collections.sort(newaddList, new Comparator());
            Double charge = 0.00;
            Double cost1 = 0.00;
            List bookingFclUnitList = bookingFclUnitsDAO.getbookingfcl2(String.valueOf(bookingFcl.getBookingId()));
            if (bookingFclUnitList.size() > 0) {
                for (Iterator iter = bookingFclUnitList.iterator(); iter.hasNext();) {
                    BookingfclUnits bookingFclUnits = (BookingfclUnits) iter.next();
                    if (bookingFclUnits.getSellRate() != null) {
                        charge = charge + bookingFclUnits.getSellRate();
                    }
                    if (bookingFclUnits.getAmount() != null) {
                        cost1 = bookingFclUnits.getAmount();
                    }
                }
            }
            fclBl.setTotal(charge);
            fclBl.setTotalCosts(cost1);
            String billOfLaddingNo = "";
            // we can replace with getIssuingTerminal method of StringFormatter
            if (bookingFcl.getIssuingTerminal() != null) {
                int i = bookingFcl.getIssuingTerminal().indexOf("-");
                if (i != -1) {
                    String issTerm[] = bookingFcl.getIssuingTerminal().split("-");
                    if (importFlag) {
                        billOfLaddingNo = billOfLaddingNo + issTerm[1] + "-";
                    } else {
                        String terminalLocation = new RefTerminalDAO().getReferenceLocation(issTerm[1]);
                        if (CommonUtils.isNotEmpty(terminalLocation) && terminalLocation.length() > 4) {
                            billOfLaddingNo = billOfLaddingNo + terminalLocation.substring(2) + "-";
                        } else {
                            billOfLaddingNo = billOfLaddingNo + issTerm[1] + "-";
                        }
                    }
                }
            }
            if (bookingFcl.getDestination() != null) {
                StringFormatter stringFormatter = new StringFormatter();
                billOfLaddingNo += stringFormatter.getDestinationCodeWithBracket(bookingFcl.getPortofDischarge()) + "-";
                billOfLaddingNo = billOfLaddingNo.replace("(", "");
                billOfLaddingNo = billOfLaddingNo.replace(")", "");
            }
            billOfLaddingNo += "04" + "-";

            billOfLaddingNo += bookingFcl.getFileNo();
            //09-(NLGKN)-04-100032-D
            fclBl.setBolId(billOfLaddingNo);
            List hazmatList = new ArrayList();
            if (session.getAttribute("bookinghazmat") != null) {
                session.removeAttribute("bookinghazmat");
            }
            if (bookingFcl.getHazmatSet() != null) {
                Iterator iter = bookingFcl.getHazmatSet().iterator();
                while (iter.hasNext()) {
                    HazmatMaterial hazmatMaterial = (HazmatMaterial) iter.next();
                    if (hazmatMaterial.getDocTypeCode() != null && hazmatMaterial.getDocTypeCode().equalsIgnoreCase("Booking")) {
                        HazmatMaterial haz = new HazmatMaterial();
                        PropertyUtils.copyProperties(haz, hazmatMaterial);
                        haz.setBolId(null);
                        haz.setDocTypeId("");
                        hazmatList.add(haz);
                    }
                }
            }
            session.setAttribute("bookinghazmat", hazmatList);
            if (session.getAttribute("transactionBean") != null) {
                session.removeAttribute("transactionBean");
            }
            TransactionBean transactionBean1 = new TransactionBean();
            transactionBean1.setStreamShipBL("P");
            transactionBean1.setHouseBL("P");
            transactionBean1.setBLPrinting("Yes");
            transactionBean1.setNPrinting("Yes");
            transactionBean1.setOPrinting("Yes");
            Set fclblCostSet = new LinkedHashSet();
            String msg = bookingFclBC.fclAutoCostCalculation(bookingFcl, fclBl, newaddList, newaddList1);
            session.setAttribute("autoCostmsg", msg);
            String fdUnLocCode = "";
            if (fclBl.getFinalDestination().lastIndexOf("(") != -1 && fclBl.getFinalDestination().lastIndexOf(")") != -1) {
                fdUnLocCode = fclBl.getFinalDestination().substring(fclBl.getFinalDestination().lastIndexOf("(") + 1, fclBl.getFinalDestination().lastIndexOf(")"));
            }
            String sslpc = CommonUtils.isNotEmpty(fdUnLocCode) ? new BookingDwrBC().getDestCode(fdUnLocCode) : "";
            String streamShipBl;
            if (CommonUtils.isEqualIgnoreCase(sslpc, "X")) {
                streamShipBl = "C";
            } else {
                streamShipBl = "P";
            }
            for (Iterator iter = newaddList1.iterator(); iter.hasNext();) {
                FclBlCostCodes fclBlCostCodes = (FclBlCostCodes) iter.next();
                if (CommonUtils.isEqualIgnoreCase(streamShipBl, "C") && CommonUtils.isEqualIgnoreCase(fclBl.getSslineNo(), fclBlCostCodes.getAccNo())
                        && CommonUtils.isNotEmpty(fclBl.getAgent()) && CommonUtils.isNotEmpty(fclBl.getAgentNo())) {
                    if ("DEFER".equalsIgnoreCase(fclBlCostCodes.getCostCode())) {
                        fclBlCostCodes.setAccName(fclBl.getSslineName());
                        fclBlCostCodes.setAccNo(fclBl.getSslineNo());
                    } else {
                        fclBlCostCodes.setAccName(fclBl.getAgent());
                        fclBlCostCodes.setAccNo(fclBl.getAgentNo());
                    }
                }
                fclBlCostCodes.setReadOnlyFlag("on");
                fclblCostSet.add(fclBlCostCodes);
            }
            fclBl.setFclblcostcodes(fclblCostSet);

            Set fclblCharges = new LinkedHashSet();
            for (Iterator iter = newaddList.iterator(); iter.hasNext();) {
                FclBlCharges fclBlCharegs = (FclBlCharges) iter.next();
                if (fclBlCharegs.getChargeCode() != null
                        && fclBlCharegs.getChargeCode().equalsIgnoreCase(FclBlConstants.ADVANCEFFCODE)
                        || fclBlCharegs.getChargeCode().equalsIgnoreCase(FclBlConstants.ADVANCESHIPPERCODE)) {
                    fclBlCharegs.setReadOnlyFlag(null);
                }
                fclblCharges.add(fclBlCharegs);

            }
            fclBl.setFclcharge(fclblCharges);
            Set fclblContainer = new LinkedHashSet();
            for (Iterator iter = fclcontainerList.iterator(); iter.hasNext();) {
                FclBlContainer fclBlContainer = (FclBlContainer) iter.next();
                fclblContainer.add(fclBlContainer);
            }
            fclBl.setFclcontainer(fclblContainer);
            Set fclblInbondSet = new LinkedHashSet();
            for (Iterator iter = inbondDetailsList.iterator(); iter.hasNext();) {
                FclInbondDetails fclInbondDetails = (FclInbondDetails) iter.next();
                fclblInbondSet.add(fclInbondDetails);
            }
            fclBl.setFclInbondDetails(fclblInbondSet);

            if (buttonValue.equalsIgnoreCase("converttobl") && (bookinFcl != null && CommonUtils.isNotEmpty(bookinFcl.getVoyageInternal()))) {
                Set fclAesDetails = this.saveAesItnDetails(bookinFcl.getVoyageInternal(), bookinFcl.getFileNo(), fclBl);
                if (CommonUtils.isNotEmpty(fclAesDetails)) {
                    fclBl.setFclAesDetails(fclAesDetails);
                }
            }
            fclBlDAO.save(fclBl);
            if (buttonValue.equalsIgnoreCase("converttobl") && (bookinFcl != null && CommonUtils.isNotEmpty(bookinFcl.getVoyageInternal()))) {
                this.savePkgsAndHaz(bookinFcl.getVoyageInternal(), fclcontainerList);
            }
            AccrualsDAO accrualsDAO = new AccrualsDAO();
            accrualsDAO.updateBookingBillladdingNo(fclBl.getBol(), bookingFcl.getBookingNumber());
            accrualsDAO.updateBillLaddingNoInTransactionLedger(fclBl.getBolId(), bookingFcl.getBookingNumber());
            request.setAttribute("editFCL", "editFCL");
            setRequest(session, request);
            if ("C".equals(bookingFcl.getPrepaidCollect())) {
                new FclBlUtil().calculateCAF(fclBl.getBol(), finalDestination);
            }
            bookingFcl.setConvertedToBlStatusFlag("on");
            setFileList(session, bookingFcl);
            if (null != fclBl) {
                session.setAttribute("selectedFileNumber", fclBl.getFileNo());
            }
            bookingFclBC.saveNotes(bookingFcl, request);
            session.setAttribute("screenName", "BL");
            forwardName = "closeSearch";
        }
        if (buttonValue.equals("addCharges") || buttonValue.equals("addChargesWithoutInsure")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            bookingFclDAO.save(bookingFcl);
            bookingFcl.setBookingNumber(bookingFcl.getBookingId().toString());
            List fclRates = new ArrayList();
            if ((bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equalsIgnoreCase("R")) || (bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equals("N")
                    && bookingFcl.getBreakBulk() != null && bookingFcl.getBreakBulk().equals("N"))) {
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                if (fclRates.isEmpty()) {
                    fclRates = bookingFclUnitsDAO.getbookingfclWhenUnitIsNull(bookingFcl.getBookingNumber());
                }
                List otherChargesList = new ArrayList();
                List bookingfclUnitsList1 = new ArrayList();
                List perkglbsList = new ArrayList();
                List otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                boolean flag1 = false;
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
                bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getInsurancamt());
                bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList, bookingFcl);
                if (bookingFcl.getInsurance().equals("Y") && !bookingFcl.getCostofgoods().equals("")) {
                    bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                    if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                        otherChargesList = bookingFclBC.getInsuranceCostofGoodsForNonRated(otherChargesList, bookingFcl);
                    } else if (buttonValue.equals("addCharges")) {
                        fclRates = bookingFclBC.getInsuranceCostofGoods(fclRates, bookingFcl);
                    }
                }
                bookingFclBC.chargesSave(fclRates, bookingFcl, request);
                bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
                bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);

                otherChargesList = new ArrayList();
                otherList = new ArrayList();
                fclRates = new ArrayList();
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                if (fclRates.size() == 0) {
                    fclRates = bookingFclUnitsDAO.getbookingfclWhenUnitIsNull(bookingFcl.getBookingNumber());
                }
                otherList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                bookingfclUnitsList1 = new ArrayList();
                perkglbsList = new ArrayList();
                flag1 = false;
                for (int i = 0; i < otherList.size(); i++) {
                    BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        otherChargesList.add(c1);
                    }
                }
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(BookingConstants.PERKGLBSLIST, perkglbsList);
                //---to print Hazardous Cargo message-----
                if (bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equals("Y")) {
                    String msg = "HAZARDOUS CARGO";
                    request.setAttribute("message", msg);
                }
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                    request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
                } else {
                    List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                    request.setAttribute("consolidaorList", consolidaorList);
                }
            } else {
                fclRates = bookingFclUnitsDAO.getbookingfcl2(bookingFcl.getBookingNumber());
                bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
                bookingFcl.setTotalCharges(bookingFcl.getTotalCharges() + bookingFcl.getInsurancamt());
                fclRates = bookingFclBC.setMarkupValuesIntoChargesEditBookingForm(fclRates, NewBookingsForm, user.getLoginName());
                if (null != bookingFcl.getInsurance() && bookingFcl.getInsurance().equals("Y")
                        && null != bookingFcl.getCostofgoods() && !bookingFcl.getCostofgoods().equals("")) {
                    bookingFcl.setInsurancamt(Double.parseDouble(dbUtil.removeComma(NewBookingsForm.getInsuranceAmount())));
                    if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && "Y".equalsIgnoreCase(bookingFcl.getBreakBulk())) {
                        fclRates = bookingFclBC.getInsuranceCostofGoodsForNonRated(fclRates, bookingFcl);
                    }
                }
                bookingFclBC.chargesSave(fclRates, bookingFcl, request);
                fclRates = bookingFclUnitsDAO.getbookingfcl(bookingFcl.getBookingNumber());
                List otherChargesList = bookingFclUnitsDAO.getbookingfcl1(bookingFcl.getBookingNumber());
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                if ("N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(fclRates));
                    request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(fclRates));
                } else {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(fclRates));
                    List consolidaorList = bookingFclBC.consolidateRates(fclRates, messageResources, importFlag);
                    request.setAttribute("consolidaorList", consolidaorList);
                }
            }

            bookingFclDAO.save(bookingFcl);
            //----to set quoteby & its creation dates----
            bookingFcl.setQuoteBy(NewBookingsForm.getQuoteBy());
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFcl.setQuoteDate(date);
            }
            //----to set Blby & its creation dates----
            bookingFcl.setBlBy(NewBookingsForm.getBlBy());
            Date date1 = null;
            if (NewBookingsForm.getBlDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getBlDate());
                bookingFcl.setBlDate(date1);
            }
            //---to print Hazardous Cargo message-----
            if (bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }

            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if (buttonValue.equals("copy")) {
            BookingFcl bookingFcl = (BookingFcl) request.getAttribute("bookingValues");
            BookingFcl newBookingFcl = new BookingFcl();
            PropertyUtils.copyProperties(newBookingFcl, bookingFcl);
            newBookingFcl.setBookingId(null);
            newBookingFcl.setBookingNumber(null);
            newBookingFcl.setQuoteNo(null);
            List fileNumberList = gcDAO.findByCodeTypeid(46);
            if (fileNumberList != null && !fileNumberList.isEmpty()) {
                gen = (GenericCode) fileNumberList.get(0);
                if (gen != null) {
                    int fileNo = Integer.parseInt(gen.getCode());
                    fileNo++;
                    newBookingFcl.setFileNo("" + fileNo);
                    gen.setCode(String.valueOf(fileNo));
                }
            }
            List fclRates = (List) request.getAttribute("fclRates");
            List otherChargesList = (List) request.getAttribute("otherChargesList");
            List perkglbsList = (List) request.getAttribute("perKgLbsList");
            Set bookingFclSet = new LinkedHashSet<BookingfclUnits>();
            bookingFclSet = bookingFclBC.copyCharges(fclRates, bookingFclSet);
            bookingFclSet = bookingFclBC.copyCharges(otherChargesList, bookingFclSet);
            bookingFclSet = bookingFclBC.copyCharges(perkglbsList, bookingFclSet);
            bookingFcl.setBookingFclUnit(bookingFclSet);
            Set hazmatSet = new LinkedHashSet<HazmatMaterial>();
            if (bookingFcl.getHazmatSet() != null && bookingFcl.getHazmatSet().size() > 0) {
                Iterator iter = bookingFcl.getHazmatSet().iterator();
                HazmatMaterial haz = (HazmatMaterial) iter.next();
                HazmatMaterial haz1 = new HazmatMaterial();
                PropertyUtils.copyProperties(haz1, haz);
                haz1.setBolId(null);
                haz1.setDocTypeCode("Booking");
                haz1.setId(null);
                hazmatSet.add(haz1);
            }
            bookingFclDAO.save(newBookingFcl);
            request.setAttribute("searchcollapse", "searchcollapse");
            List SearchingList = new ArrayList();
            SearchingList.add(newBookingFcl);
            //----to set quoteby and blby and their creation dates----
            bookingFcl.setQuoteBy(NewBookingsForm.getQuoteBy());
            Date date = null;
            if (NewBookingsForm.getQuoteDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getQuoteDate());
                bookingFcl.setQuoteDate(date);
            }
            bookingFcl.setBlBy(NewBookingsForm.getBlBy());
            Date date1 = null;
            if (NewBookingsForm.getBlDate() != null) {
                date = dateFormat.parse(NewBookingsForm.getBlDate());
                bookingFcl.setBlDate(date1);
            }
            request.setAttribute(BookingConstants.BOOKINGVALUES, newBookingFcl);
            request.setAttribute("specialEquipmentUnitList", bookingFclUnitsDAO.getGroupByUnitType("" + bookingFcl.getBookingId()));
            request.setAttribute(BookingConstants.SEARCHLIST, SearchingList);
            setRequest(session, request);
            session.setAttribute("selectedFileNumber", newBookingFcl.getFileNo());
            session.setAttribute("screenName", "Bookings");
            forwardName = "closeSearch";
        }
        if (buttonValue.equals("addBookingCost")) {
            new BookingFclBC().addCostDetailsForBooking(NewBookingsForm, request, user);
            request.setAttribute("editBookingsForm", NewBookingsForm);
            forwardName = "addBookingCost";
        }
        if (request.getParameter("button") != null && request.getParameter("button").equals("editBookingAccruals")) {
            new BookingFclBC().editCostDetailsForBooking(NewBookingsForm, request);
            buttonValue = request.getParameter("button");
            request.setAttribute("editBookingsForm", NewBookingsForm);
            forwardName = "addBookingCost";
        }
        if (buttonValue.equals("updateBookingCost")) {
            new BookingFclBC().updateBookingCostDetails(NewBookingsForm, user);
            request.setAttribute("editBookingsForm", NewBookingsForm);
            forwardName = "addBookingCost";
        }
        if (CommonUtils.in(buttonValue, "copyBooking", "copyBookingWithNewRates")) {
            new BookingFclBC().copyBooking(NewBookingsForm, session, messageResources, buttonValue);
            forwardName = "closeSearch";
        }
        if (buttonValue.equals("addBrandValue")) {
            BookingFcl bookingFcl = bookingFclBC.update(NewBookingsForm, session);
            bookingFclDAO.save(bookingFcl);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("selectedTab", selectedTab);
            forwardName = "success1";
        }
        if (buttonValue.equalsIgnoreCase("viewCFCLLinkedDrs") || buttonValue.equalsIgnoreCase("saveCFCLLinkedDrs")) {
            if (CommonUtils.isNotEmpty(NewBookingsForm.getVaoyageInternational())) {
                ssHeaderId = bookingFclDAO.getSsHeaderId(NewBookingsForm.getVaoyageInternational());
            }
            List<FclCfclChargeBean> cfclCharge = bookingFclDAO.getCfclCharge(ssHeaderId);
            request.setAttribute("cfclCharge", cfclCharge);
            forwardName = "displayFclCfclCharge";
        }
        if (buttonValue.equalsIgnoreCase("saveCFCLLinkedDrs")) {
            if (bookingFclDAO.checkVoyage(NewBookingsForm.getBookingId())) {
                List<FclCfclChargeBean> charge = bookingFclDAO.getCfclLinkedAllDrCharge(ssHeaderId);
                fileIdList = bookingFclDAO.getFileId(ssHeaderId);
                if (fileIdList.size() > 0) {
                    this.saveCfclVoyageLinkedAllDrCharge(NewBookingsForm.getBookingId(), charge, ssHeaderId, fileIdList);
                }
            }
        }
        request.setAttribute("buttonValue", buttonValue);
        request.setAttribute("selectedTab", selectedTab);
        request.setAttribute("importFlag", importFlag);
        return mapping.findForward(forwardName);
    }
    // set request Object to navigate file search page

    public void setRequest(HttpSession session, HttpServletRequest request) {
        if (null != session.getAttribute(ImportBc.sessionName)) {
            request.setAttribute("requestObjectVAlue", ItemConstants.FILE_SEARCH_IMPORT);
        } else {
            request.setAttribute("requestObjectVAlue", ItemConstants.FCL_SEARCH_EXPORT);
        }
    }

    public void setFileList(HttpSession session, BookingFcl bookingFcl) throws Exception {
        DBUtil dbUtil = new DBUtil();
        String status = "";
        BookingFclBC bookingFclBC = new BookingFclBC();
        boolean bookingFlag = true;
        if (session.getAttribute("SearchListByfileNumber") != null) {
            //QuotationDAO  quotationDAO = new QuotationDAO();
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            for (int i = 0; i < getFileList.size(); i++) {
                FileNumberForQuotaionBLBooking fileNumberForQuotaionBLBooking = (FileNumberForQuotaionBLBooking) getFileList.get(i);
                if (fileNumberForQuotaionBLBooking.getFileNo() != null && bookingFcl != null && bookingFcl.getFileNo() != null
                        && fileNumberForQuotaionBLBooking.getFileNo().equals(bookingFcl.getFileNo().toString())) {
                    //--updating the session along with all the status -------
                    bookingFclBC.updateBookingInSession(fileNumberForQuotaionBLBooking, bookingFcl);
                    getFileList.set(i, fileNumberForQuotaionBLBooking);
                    bookingFlag = false;
                    if (null != fileNumberForQuotaionBLBooking.getFclBlStatus()) {
                        status = fileNumberForQuotaionBLBooking.getFclBlStatus().replaceAll("null", "");
                    }
                    status = ("N".equals(bookingFcl.getRatesNonRates())) ? ((status.indexOf("NR") > -1) ? status
                            : status + "NR" + ",")
                            : (status.indexOf("NR") > -1) ? status.replace(",NR", ",") : status;
                    fileNumberForQuotaionBLBooking.setFclBlStatus(CommonFunctions.isNotNull(status) ? status.replaceAll(",,", ",") : "");
                    break;
                } else {
                    fileNumberForQuotaionBLBooking.setDisplayColor(null);
                }
            }
            if (bookingFlag) {
                setNewBookingFileList(session, bookingFcl);
            } else {
                session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
            }
        } else {
            setNewBookingFileList(session, bookingFcl);
        }
    }

    public void setNewBookingFileList(HttpSession session, BookingFcl bookingFcl) throws Exception {
        if (bookingFcl.getFileNo() != null) {
            List getFileList = (null != session.getAttribute("SearchListByfileNumber")) ? (List) session.getAttribute("SearchListByfileNumber") : new ArrayList();
            FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(null, bookingFcl, null);
            if (bookingFcl.getHazmat() != null && bookingFcl.getHazmat().equalsIgnoreCase("Y")) {
                fileNoObject.setHazmat("H");
            }
            BookingFclBC bookingFclBC = new BookingFclBC();
            bookingFclBC.updateBookingInSession(fileNoObject, bookingFcl);
            fileNoObject.setDisplayColor("RED");
            getFileList.add(0, fileNoObject);
            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void setFileList1(HttpSession session, Quotation q1) throws Exception {
        QuotationBC quotationBC = new QuotationBC();
        String status = "";
        if (session.getAttribute("SearchListByfileNumber") != null) {
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            for (int i = 0; i < getFileList.size(); i++) {
                FileNumberForQuotaionBLBooking fileNumberForQuotaionBLBooking = (FileNumberForQuotaionBLBooking) getFileList.get(i);
                if (fileNumberForQuotaionBLBooking.getQuotId() != null && q1 != null
                        && fileNumberForQuotaionBLBooking.getQuotId().toString().equals(q1.getQuoteId().toString())) {

                    BookingFclDAO bookingFclDAO = new BookingFclDAO();
                    QuotationDAO quote = new QuotationDAO();

                    fileNumberForQuotaionBLBooking.setFileNo(q1.getFileNo().toString());
                    Quotation quo = quote.getFileNoObject(fileNumberForQuotaionBLBooking.getFileNo());

                    FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(quo, null, null);
                    fileNoObject.setRatesNonRates(quo.getRatesNonRates());
                    if (quo.getHazmat() != null && quo.getHazmat().equalsIgnoreCase("Y")) {
                        fileNoObject.setHazmat("H");
                    }
                    if (null != fileNumberForQuotaionBLBooking.getFclBlStatus()) {
                        status = fileNumberForQuotaionBLBooking.getFclBlStatus().replaceAll("null", "");
                    }
                    status = ("N".equals(q1.getRatesNonRates())) ? ((status.contains("NR")) ? status
                            : status + "NR" + ",")
                            : (status.contains("NR")) ? status.replace(",NR", ",") : status;
                    fileNoObject.setFclBlStatus(CommonFunctions.isNotNull(status) ? status.replaceAll(",,", ",") : "");
                    BookingFcl bookingFcl = bookingFclDAO.getFileNoObject(q1.getFileNo());
                    if (bookingFcl != null) {
                        fileNoObject.setBookedBy(bookingFcl.getUsername());
                    }

                    if (bookingFcl != null && bookingFcl.getDocumentsReceived() != null && bookingFcl.getDocumentsReceived().equals("Y")) {
                        fileNoObject.setDocReceived(bookingFcl.getDocumentsReceived());
                    } else {
                        fileNoObject.setDocReceived("N");
                    }

                    FclBl fclBl = quotationBC.getfclby(q1.getFileNo());

                    if (fclBl != null) {
                        fileNoObject.setFclBlId(bookingFcl.getBookingId());
                        fileNoObject.setQuotId(null);
                        fileNoObject.setBookingId(null);
                    } else if (bookingFcl != null) {
                        fileNoObject.setBookingId(bookingFcl.getBookingId());
                        fileNoObject.setQuotId(null);
                    }
                    fileNoObject.setDisplayColor("RED");
                    getFileList.set(i, fileNoObject);
                    break;
                }
            }
            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void redirectToReport(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        response.sendRedirect(request.getContextPath() + "/report");
    }

    public void addSpecialEquipmentComment(String unit, String index, String comment, int id) throws Exception {
        if (CommonUtils.isNotEmpty(unit)) {
            List l = new BookingfclUnitsDAO().getChargeByEquipmentUnit("" + id, Integer.parseInt(unit), index);
            for (Iterator it = l.iterator(); it.hasNext();) {
                BookingfclUnits bookingfclUnits = (BookingfclUnits) it.next();
                bookingfclUnits.setOutOfGaugeComment(comment);
            }
        }
    }

    public void addOrUpdateSpecialEquipmentCharges(String unitType, String desc, int id, String buttonValue) throws Exception {
        GenericCode genericCode = new GenericCodeDAO().findByCodeDesc(unitType);
        if (null != genericCode) {
            if ("updateSpecialEquipment".equalsIgnoreCase(buttonValue)) {
                List chargesList = new BookingfclUnitsDAO().getStandardCharge("" + id, genericCode.getId());
                if (!chargesList.isEmpty()) {
                    for (Object object : chargesList) {
                        BookingfclUnits bookingfclUnits = (BookingfclUnits) object;
                        bookingfclUnits.setSpecialEquipment(desc);
                        bookingfclUnits.setSpecialEquipmentUnit(genericCode.getCode());
                    }
                }
            } else {
                int standardIndex = new BookingfclUnitsDAO().getStandardChargeIndex("" + id, genericCode.getCode(), desc);
                List chargesList = new BookingfclUnitsDAO().getEquipmentChargeToAdd("" + id, genericCode.getId(), standardIndex);
                standardIndex = standardIndex + 1;
                for (Object object : chargesList) {
                    BookingfclUnits bookingfclUnits = (BookingfclUnits) object;
                    BookingfclUnits splEqupBookingfclUnits = new BookingfclUnits();
                    try {
                        PropertyUtils.copyProperties(splEqupBookingfclUnits, bookingfclUnits);
                        splEqupBookingfclUnits.setId(null);
                        splEqupBookingfclUnits.setSpecialEquipment(desc);
                        splEqupBookingfclUnits.setSpecialEquipmentUnit(genericCode.getCode());
                        splEqupBookingfclUnits.setStandardCharge("" + standardIndex);
                        new BookingfclUnitsDAO().save(splEqupBookingfclUnits);
                    } catch (IllegalAccessException ex) {
                        log.info("addOrUpdateSpecialEquipmentCharges failed on " + new Date(), ex);
                    } catch (InvocationTargetException ex) {
                        log.info("addOrUpdateSpecialEquipmentCharges failed on " + new Date(), ex);
                    }
                }
            }
        }
    }

    public void saveCfclVoyageLinkedAllDrCharge(String bookingId, List<FclCfclChargeBean> charge, BigInteger ssHeaderId, List<Long> fileIdList) throws Exception {
        BookingfclUnitsDAO bookingfclUnitsDAO = new BookingfclUnitsDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        List<String> tempChargeCode = new ArrayList<String>();
        List custNoAndNameList = null;
        BookingfclUnits bookingfclUnitsAuto = null;
        Object[] custDetails = null;
        BookingfclUnits bookingfclUnitsManualCharge = null;
        Integer oldChargeId = null;
        custNoAndNameList = bookingfclUnitsDAO.getCustNoAndName(bookingId);
        if (!custNoAndNameList.isEmpty()) {
            custDetails = (Object[]) custNoAndNameList.get(0);
        }
        this.saveInbondDetails(fileIdList, bookingId);
        if (!charge.isEmpty()) {
            tempChargeCode = bookingfclUnitsDAO.getCFCLChargeCodeList(bookingId);
            for (FclCfclChargeBean cfclChargeBean : charge) {
                Boolean flag = bookingfclUnitsDAO.getBookingFclChargeFlag(bookingId, cfclChargeBean.getChargeCode());
                if (flag) {
                    Integer id = null;
                    if (CommonUtils.isNotEmpty(cfclChargeBean.getContainerSize())) {
                        Integer unitType = this.getUnitType(cfclChargeBean.getContainerSize());
                        id = bookingfclUnitsDAO.getBookingFclUnit(bookingId, cfclChargeBean.getChargeCode(), unitType);
                    }
                    if (CommonUtils.isNotEmpty(id)) {
                        bookingfclUnitsAuto = bookingfclUnitsDAO.findById(id);
                    } else {
                        Integer topContainerId = bookingfclUnitsDAO.getTopContainerId(bookingId, cfclChargeBean.getChargeCode());
                        bookingfclUnitsAuto = bookingfclUnitsDAO.findById(topContainerId);
                    }
                    bookingfclUnitsAuto.setMarkUp(bookingfclUnitsAuto.getMarkUp() + cfclChargeBean.getArAmount());
                    bookingfclUnitsAuto.setAmount(bookingfclUnitsAuto.getAmount() + cfclChargeBean.getApAmount());
                    bookingfclUnitsDAO.saveOrUpdate(bookingfclUnitsAuto);
                } else {
                    if (CommonUtils.isNotEmpty(cfclChargeBean.getChargeCode())) {
                        if (tempChargeCode.contains(cfclChargeBean.getChargeCode())) {
                            oldChargeId = bookingfclUnitsDAO.getOldChargeId(bookingId, cfclChargeBean.getChargeCode());
                            if (CommonUtils.isNotEmpty(oldChargeId)) {
                                BookingfclUnits bookingfclUnits = bookingfclUnitsDAO.findById(oldChargeId);
                                bookingfclUnits.setAmount(cfclChargeBean.getApAmount() + bookingfclUnits.getAmount());
                                bookingfclUnits.setMarkUp(cfclChargeBean.getArAmount() + bookingfclUnits.getMarkUp());
                                bookingfclUnits.setSellRate(bookingfclUnits.getAmount() + bookingfclUnits.getMarkUp());
                                bookingfclUnitsDAO.saveOrUpdate(bookingfclUnits);
                            }
                        } else {
                            bookingfclUnitsManualCharge = new BookingfclUnits();
                            GenericCode gen = genericCodeDAO.findById(Integer.parseInt(genericCodeDAO.findByChargeCode(cfclChargeBean.getChargeCode())));
                            bookingfclUnitsManualCharge.setBookingNumber(bookingId);
                            bookingfclUnitsManualCharge.setAmount(cfclChargeBean.getApAmount());
                            bookingfclUnitsManualCharge.setMarkUp(cfclChargeBean.getArAmount());
                            bookingfclUnitsManualCharge.setSellRate(cfclChargeBean.getApAmount() + cfclChargeBean.getArAmount());
                            bookingfclUnitsManualCharge.setProfit(bookingfclUnitsManualCharge.getSellRate());
                            if (CommonUtils.isNotEmpty(cfclChargeBean.getApAmount())) {
                                if (custDetails != null && (custDetails[0] != null && !custDetails[0].toString().equals(""))) {
                                    bookingfclUnitsManualCharge.setAccountName((String) custDetails[0]);
                                } else {
                                    bookingfclUnitsManualCharge.setAccountName(cfclChargeBean.getCustomerName());
                                }
                                if (custDetails != null && (custDetails[1] != null && !custDetails[1].toString().equals(""))) {
                                    bookingfclUnitsManualCharge.setAccountNo((String) custDetails[1]);
                                } else {
                                    bookingfclUnitsManualCharge.setAccountNo(cfclChargeBean.getCustomerAcct());
                                }
                            }
                            bookingfclUnitsManualCharge.setCostType("PER BL CHARGES");
                            bookingfclUnitsManualCharge.setChargeCodeDesc(cfclChargeBean.getChargeCode());
                            bookingfclUnitsManualCharge.setChargeCode(gen);
                            bookingfclUnitsManualCharge.setChgCode(cfclChargeBean.getChargeCode());
                            bookingfclUnitsManualCharge.setCurrency("USD");
                            bookingfclUnitsManualCharge.setManualCharges("M");
                            bookingfclUnitsManualCharge.setNewFlag("new");
                            bookingfclUnitsManualCharge.setStandardCharge("Y");
                            bookingfclUnitsManualCharge.setSpotRateChk("off");
                            bookingfclUnitsManualCharge.setStandardChk("off");
                            bookingfclUnitsManualCharge.setCfclFlag(Boolean.TRUE);
                            tempChargeCode.add(cfclChargeBean.getChargeCode());
                            bookingfclUnitsDAO.save(bookingfclUnitsManualCharge);
                        }
                    }
                }
            }
        }
    }

    private void savePkgsAndHaz(String voyNo, List<FclBlContainer> fclcontainerList) throws Exception {
        BookingFclDAO bookingFclDAO = new BookingFclDAO();
        BigInteger ssHeaderId = bookingFclDAO.getSsHeaderId(voyNo);
        Integer containerId = null;
        if (ssHeaderId != null) {
            List<Long> fileIdList = new ArrayList<Long>();
            FclBlContainerDAO fclBlContainerDAO = new FclBlContainerDAO();
            List<Integer> containerSizeList = new ArrayList<Integer>();
            Map<Integer, Integer> map = new HashMap<Integer, Integer>();
            fileIdList = new BookingFclDAO().getFileId(ssHeaderId);
            Map<Long, Integer> tempContainerId = new HashMap<Long, Integer>();
            List<FclCfclChargeBean> cfclChargeBeansList = fclBlContainerDAO.getAllUnitsPkgs(ssHeaderId);
            if (!fclcontainerList.isEmpty()) {
                for (FclBlContainer fclBlContainerDtls : fclcontainerList) {
                    if ((fclBlContainerDtls.getSizeLegend() != null && fclBlContainerDtls.getSizeLegend().getId() != null) && !containerSizeList.contains(fclBlContainerDtls.getSizeLegend().getId())) {
                        map.put(fclBlContainerDtls.getSizeLegend().getId(), fclBlContainerDtls.getTrailerNoId());
                        containerSizeList.add(fclBlContainerDtls.getSizeLegend().getId());
                    }
                }
            }

            if (!cfclChargeBeansList.isEmpty()) {
                for (FclCfclChargeBean fclCfclChargeBean : cfclChargeBeansList) {
                    Integer containerSize = this.getUnitType(fclCfclChargeBean.getContainerSize() != null ? fclCfclChargeBean.getContainerSize() : "");
                    if (CommonUtils.isNotEmpty(containerSize)) {
                        containerId = map.get(containerSize);
                    }
                    // save pkgs details
                    FclBlMarks fclBlMarks = new FclBlMarks();
                    StringBuilder sb = new StringBuilder();
                    String pkgs = "";
                    String hsCode = "";
                    String ncm = "";
                    if (containerId != null) {
                        fclBlMarks.setTrailerNoId(containerId);
                        tempContainerId.put(fclCfclChargeBean.getFileId(), containerId);
                    } else {
                        fclBlMarks.setTrailerNoId(fclcontainerList.get(0).getTrailerNoId());
                    }
                    fclBlMarks.setNoOfPkgs(fclCfclChargeBean.getTotalPieceCount());
                    if (fclCfclChargeBean.getTotalWeightImperial() != null) {
                        fclBlMarks.setNetweightLbs(fclCfclChargeBean.getTotalWeightImperial().doubleValue());
                        Double weightKgs = fclCfclChargeBean.getTotalWeightImperial().doubleValue() * 0.45359237;
                        fclBlMarks.setNetweightKgs(weightKgs);
                    }
                    if (fclCfclChargeBean.getTotalVolumeImperial() != null) {
                        fclBlMarks.setMeasureCft(fclCfclChargeBean.getTotalVolumeImperial().doubleValue());
                        Double measureCbm = fclCfclChargeBean.getTotalVolumeImperial().doubleValue() * 0.02832;
                        fclBlMarks.setMeasureCbm(measureCbm);
                    }
                    String newLine = System.getProperty("line.separator");
                    hsCode = fclCfclChargeBean.getHsCode() != null ? fclCfclChargeBean.getHsCode() : "";
                    ncm = fclCfclChargeBean.getNcm() != null ? fclCfclChargeBean.getNcm() : "";
                    pkgs = hsCode + "," + ncm;
                    if (CommonUtils.isNotEmpty(pkgs)) {
                        String[] pkgsDetails = pkgs.split(",");
                        for (String element : pkgsDetails) {
                            sb.append(element).append(newLine);
                        }
                    }
                    fclBlMarks.setDescPckgs(sb.toString());
                    fclBlContainerDAO.saveMark(fclBlMarks);
                }
            }
            if (fileIdList.size() > 0) {
                this.saveHazmatDetails(fileIdList, tempContainerId, fclcontainerList);
            }
        }
    }

    private void saveHazmatDetails(List<Long> fileIdList, Map<Long, Integer> tempContainerId, List<FclBlContainer> fclcontainerList) throws Exception {
        List<LclBookingHazmat> lclBookingHazmatsList = new LclHazmatDAO().findById(fileIdList);
        Integer containnerId = null;
        if (!lclBookingHazmatsList.isEmpty()) {
            for (LclBookingHazmat bookingHazmat : lclBookingHazmatsList) {
                HazmatMaterialDAO hazmatMaterialDAO = new HazmatMaterialDAO();
                HazmatMaterial hazmatMaterial = new HazmatMaterial();
                hazmatMaterial.setDocTypeCode("FclBl");
                containnerId = tempContainerId.get(bookingHazmat.getLclFileNumber().getId());
                if (CommonUtils.isNotEmpty(containnerId)) {
                    hazmatMaterial.setDocTypeId(String.valueOf(containnerId));
                    hazmatMaterial.setBolId(containnerId);
                } else {
                    hazmatMaterial.setDocTypeId(String.valueOf(fclcontainerList.get(0).getTrailerNoId()));
                    hazmatMaterial.setBolId(fclcontainerList.get(0).getTrailerNoId());
                }

                hazmatMaterial.setUnNumber(bookingHazmat.getUnHazmatNo());
                hazmatMaterial.setPropShipingNumber(bookingHazmat.getProperShippingName());
                hazmatMaterial.setImoClssCode(bookingHazmat.getImoPriClassCode());
                hazmatMaterial.setPackingGroupCode(bookingHazmat.getPackingGroupCode());
                hazmatMaterial.setFlashPoint(String.valueOf(bookingHazmat.getFlashPoint()));

                hazmatMaterial.setOuterPackingPieces(String.valueOf(bookingHazmat.getOuterPkgNoPieces()));
                hazmatMaterial.setOuterPackComposition(bookingHazmat.getOuterPkgComposition());
                hazmatMaterial.setOuterPackagingType(bookingHazmat.getOuterPkgType());

                if (bookingHazmat.getTotalNetWeight() != null) {
                    hazmatMaterial.setTotalNetWeight(bookingHazmat.getTotalNetWeight().doubleValue());
                }
                if (bookingHazmat.getTotalGrossWeight() != null) {
                    hazmatMaterial.setGrossWeight(bookingHazmat.getTotalGrossWeight().doubleValue());
                }
                if (bookingHazmat.getLiquidVolume() != null) {
                    hazmatMaterial.setVolume(bookingHazmat.getLiquidVolume().doubleValue());
                }

                hazmatMaterial.setTechnicalName(bookingHazmat.getTechnicalName());
                hazmatMaterial.setImoSubsidiaryClassCode(bookingHazmat.getImoPriSubClassCode());
                hazmatMaterial.setImoSecondarySubClass(bookingHazmat.getImoSecSubClassCode());

                hazmatMaterial.setInnerPackingPieces(String.valueOf(bookingHazmat.getInnerPkgNoPieces()));
                hazmatMaterial.setInnerPackComposition(bookingHazmat.getInnerPkgComposition());
                hazmatMaterial.setInnerPackagingType(bookingHazmat.getInnerPkgType());
                hazmatMaterial.setNetWeightUMO(bookingHazmat.getInnerPkgUom());
                if (bookingHazmat.getInnerPkgNwtPiece() != null) {
                    hazmatMaterial.setNetWeight(bookingHazmat.getInnerPkgNwtPiece().doubleValue());
                }

                if (bookingHazmat.getEmergencyContact() != null && bookingHazmat.getEmergencyContact().getContactName() != null) {
                    hazmatMaterial.setContactName(bookingHazmat.getEmergencyContact().getContactName());
                }
                if (bookingHazmat.getEmergencyContact() != null && bookingHazmat.getEmergencyContact().getPhone1() != null) {
                    hazmatMaterial.setEmerreprsNum(bookingHazmat.getEmergencyContact().getPhone1());
                }
                hazmatMaterial.setEmsCode(bookingHazmat.getEmsCode());

                hazmatMaterial.setReportableQuantity(bookingHazmat.getReportableQuantity() ? "Y" : "N");
                hazmatMaterial.setMarinePollutant(bookingHazmat.getMarinePollutant() ? "Y" : "N");
                hazmatMaterial.setExceptedQuantity(bookingHazmat.getExceptedQuantity() ? "Y" : "N");
                hazmatMaterial.setLimitedQuantity(bookingHazmat.getLimitedQuantity() ? "Y" : "N");
                hazmatMaterial.setInhalationHazard(bookingHazmat.getInhalationHazard() ? "Y" : "N");
                hazmatMaterial.setResidue(bookingHazmat.getResidue() ? "Y" : "N");

                hazmatMaterial.setDate(bookingHazmat.getEnteredDatetime());
                hazmatMaterialDAO.save(hazmatMaterial);
            }
        }
    }

    private Integer getUnitType(String containerSize) {
        Integer unitType = null;
        switch (containerSize) {
            case "A=20":
                unitType = 11307;
                break;
            case "B=40":
                unitType = 11308;
                break;
            case "C=40":
                unitType = 11309;
                break;
            case "D=45":
                unitType = 11310;
                break;
            case "E=48":
                unitType = 11311;
                break;
            case "F=40":
                unitType = 11312;
                break;
            case "E=45":
                unitType = 11313;
                break;
        }
        return unitType;
    }

    private void removedOldCFCLVoyageDetails(List<FclCfclChargeBean> charge, String bookingId) throws Exception {
        BookingfclUnitsDAO bookingfclUnitsDAO = new BookingfclUnitsDAO();
        BookingInbondDetailsDAO bookingInbondDetailsDAO = new BookingInbondDetailsDAO();
        BookingfclUnits bookingfclUnitsAuto = null;
        List<String> tempChargeCode = new ArrayList<String>();
        Integer oldChargeId = null;
        List<Long> inbondIdList = null;
        if (!charge.isEmpty()) {
            tempChargeCode = bookingfclUnitsDAO.getCFCLChargeCodeList(bookingId);
            for (FclCfclChargeBean cfclChargeBean : charge) {
                Boolean flag = bookingfclUnitsDAO.getBookingFclChargeFlag(bookingId, cfclChargeBean.getChargeCode());
                if (flag) {
                    Integer id = null;
                    if (CommonUtils.isNotEmpty(cfclChargeBean.getContainerSize())) {
                        Integer unitType = this.getUnitType(cfclChargeBean.getContainerSize());
                        id = bookingfclUnitsDAO.getBookingFclUnit(bookingId, cfclChargeBean.getChargeCode(), unitType);
                    }
                    if (CommonUtils.isNotEmpty(id)) {
                        bookingfclUnitsAuto = bookingfclUnitsDAO.findById(id);
                    } else {
                        Integer topContainerId = bookingfclUnitsDAO.getTopContainerId(bookingId, cfclChargeBean.getChargeCode());
                        bookingfclUnitsAuto = bookingfclUnitsDAO.findById(topContainerId);
                    }
                    bookingfclUnitsAuto.setMarkUp(bookingfclUnitsAuto.getMarkUp() - cfclChargeBean.getArAmount());
                    bookingfclUnitsAuto.setAmount(bookingfclUnitsAuto.getAmount() - cfclChargeBean.getApAmount());
                    bookingfclUnitsDAO.saveOrUpdate(bookingfclUnitsAuto);
                } else {
                    if (CommonUtils.isNotEmpty(cfclChargeBean.getChargeCode())) {
                        if (tempChargeCode.contains(cfclChargeBean.getChargeCode())) {
                            oldChargeId = bookingfclUnitsDAO.getOldChargeId(bookingId, cfclChargeBean.getChargeCode());
                            if (CommonUtils.isNotEmpty(oldChargeId)) {
                                BookingfclUnits bookingfclUnits = bookingfclUnitsDAO.findById(oldChargeId);
                                bookingfclUnits.setAmount(bookingfclUnits.getAmount() - cfclChargeBean.getApAmount());
                                bookingfclUnits.setMarkUp(bookingfclUnits.getMarkUp() - cfclChargeBean.getArAmount());
                                bookingfclUnits.setSellRate(bookingfclUnits.getMarkUp() - bookingfclUnits.getAmount());
                                bookingfclUnitsDAO.saveOrUpdate(bookingfclUnits);
                            }
                        }
                    }
                }
            }
        }
        inbondIdList = bookingInbondDetailsDAO.getCFCLInbondDetails(bookingId);
        if (!inbondIdList.isEmpty()) {
            bookingInbondDetailsDAO.deleteCFCLInbondDetails(inbondIdList);
        }
    }

    private void saveInbondDetails(List<Long> fileIdList, String bookingId) throws Exception {
        List<LclInbond> lclInbonds = new LclInbondsDAO().getInbondList(fileIdList);
        BookingInbondDetailsDAO bookingInbondDetailsDAO = new BookingInbondDetailsDAO();
        if (!lclInbonds.isEmpty()) {
            for (LclInbond lclInbond : lclInbonds) {
                BookingInbondDetails inbondDetails = new BookingInbondDetails();
                inbondDetails.setBolId(Integer.parseInt(bookingId));
                inbondDetails.setInbondNumber(lclInbond.getInbondNo());
                inbondDetails.setInbondDate(lclInbond.getInbondDatetime());
                if (null != lclInbond.getInbondPort()) {
                    inbondDetails.setInbondPort(String.valueOf(lclInbond.getInbondPort().getId()));
                }
                inbondDetails.setInbondType(lclInbond.getInbondType());
                inbondDetails.setCfclFlag(Boolean.TRUE);
                bookingInbondDetailsDAO.save(inbondDetails);
            }
        }
    }

    private Set saveAesItnDetails(String voyageNo, String fileNo, FclBl fclBl) throws Exception {
        BookingFclDAO bookingFclDAO = new BookingFclDAO();
        BigInteger ssHeaderId = bookingFclDAO.getSsHeaderId(voyageNo);
        Set fclAesDetails = fclBl.getFclAesDetails();
        if (CommonUtils.isEmpty(fclAesDetails) || null == fclAesDetails) {
            fclAesDetails = new HashSet();
        }
        if (ssHeaderId != null) {
            List<Long> fileIdList = new ArrayList<Long>();
            fileIdList = new BookingFclDAO().getFileId(ssHeaderId);
            if (CommonUtils.isNotEmpty(fileIdList)) {
                List<Lcl3pRefNo> lcl3pRefNo = new Lcl3pRefNoDAO().getAesTypeListByFileIdListAndType(fileIdList, "AES_ITNNUMBER");
                if (!lcl3pRefNo.isEmpty()) {
                    for (Lcl3pRefNo lcl3pRefNO : lcl3pRefNo) {
                        FclAESDetails fclAESDetails = new FclAESDetails();
                        fclAESDetails.setTrailerNoId(fclBl.getBol());
                        fclAESDetails.setFileNo(fileNo);
                        fclAESDetails.setAesDetails(lcl3pRefNO.getReference());
                        fclAESDetails.setException("");
                        fclAesDetails.add(fclAESDetails);
                    }
                }
            }
        }
        return fclAesDetails;
    }
}
