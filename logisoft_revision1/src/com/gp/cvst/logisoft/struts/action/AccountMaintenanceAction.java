/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.DateUtils;
import com.gp.cong.logisoft.bc.notes.NotesConstants;
import com.gp.cong.logisoft.domain.User;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cvst.logisoft.util.DBUtil;
import com.gp.cvst.logisoft.struts.form.AcctMaintenanceForm;
import com.gp.cvst.logisoft.beans.AccountMaintenenceBean;
import com.gp.cvst.logisoft.beans.AccountStructureBean;
import com.gp.cvst.logisoft.beans.ChartOfAccountBean;
import com.gp.cvst.logisoft.domain.AccountBalance;
import com.gp.cvst.logisoft.domain.AccountDetails;
import com.gp.cvst.logisoft.domain.AccountGroup;
import com.gp.cvst.logisoft.domain.Budget;
import com.gp.cvst.logisoft.domain.FiscalPeriod;
import com.gp.cvst.logisoft.domain.SubledgerAccts;
import com.gp.cvst.logisoft.hibernate.dao.*;
import com.logiware.utils.AuditNotesUtils;

import java.util.*;

/** 
 * MyEclipse Struts
 * Creation date: 02-06-2008
 * 
 * XDoclet definition:
 * @struts.action path="/acctMaintenance" name="accountMaintenance" input="/jsps/Accounting/AccountMaintenance.jsp" scope="request" validate="true"
 */
public class AccountMaintenanceAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AcctMaintenanceForm accountMaintenance = (AcctMaintenanceForm) form;
        AccountMaintenenceBean acbean = new AccountMaintenenceBean();
        User loginUser = (User) request.getSession().getAttribute("loginuser");
        String forwardName = "";
        String buttonValue = accountMaintenance.getButtonValue();

        List subLedgeraddList = null;
        List subLedgeradList = null;
        HttpSession session = request.getSession(true);
        String acctDesc = accountMaintenance.getAcctdesc();
        String acctGroup = accountMaintenance.getAcctgroup();
        String acctStatus = accountMaintenance.getAcctstatus();
        String acctType = accountMaintenance.getAccttype();
        String acctStructure = accountMaintenance.getAcctstructure();
        String closeToAcct = accountMaintenance.getClosetoacct();
        String controlAcct = accountMaintenance.getControlacct();
        String defaultCurrency = accountMaintenance.getDefaultcurrency();
        String multiCurrency = accountMaintenance.getMulticurrency();
        String normalBalance = accountMaintenance.getNormalbalance();

        String seg1 = accountMaintenance.getSeg1();
        String seg2 = accountMaintenance.getSeg2();
        String seg3 = accountMaintenance.getSeg3();
        String seg4 = accountMaintenance.getSeg4();
        String seg5 = accountMaintenance.getSeg5();
        String dateLastModified = accountMaintenance.getDatelastmodified();
        String dateCreated = accountMaintenance.getDatecreated();
        String reportCategory = accountMaintenance.getReportCategory();
        String account = "";
        if (seg4 == null && seg5 == null) {
            account = seg1 + "-" + seg2 + "-" + seg3;
        }
        if (seg4 != null && seg5 == null) {
            account = seg1 + "-" + seg2 + "-" + seg3 + "-" + seg4;
        }
        if (seg3 == null) {
            account = seg1 + "-" + seg2;
        }
        if (seg5 != null) {
            account = seg1 + "-" + seg2 + "-" + seg3 + "-" + seg4 + "-" + seg5;
        }


        AccountDetailsDAO acdDao = new AccountDetailsDAO();


        if (buttonValue.equals("save")) {
            DBUtil dbutil = new DBUtil();
            AccountDetails acctDetails = new AccountDetails();
            acctDetails.setAccount(account);
            acctDetails.setAcctDesc(acctDesc);

            if (acctGroup.equals("")) {
                acctGroup = null;
            }

            acctDetails.setAcctGroup(acctGroup);
            acctDetails.setAcctStatus(acctStatus);
            acctDetails.setAcctType(acctType);
            acctDetails.setAcctStructure(acctStructure);
            acctDetails.setCloseToAcct(closeToAcct);

            acctDetails.setControlAcct(controlAcct);
            acctDetails.setDefaultCurrency(defaultCurrency);

            List AccountNum = acdDao.findAccoutNo(account);

            if (AccountNum.size() > 0) {
                String msg = "Please enter different Account Number, This Account Number already exists";
                request.setAttribute("message", msg);
                request.setAttribute("acctdesc", acctDesc);
                request.setAttribute("Groupdesc", dbutil.getAcctgroupDesc(acctGroup));
                forwardName = "success";
            } else {
                if (multiCurrency == null) {
                    multiCurrency = "No";
                }

                acctDetails.setMultiCurrency(multiCurrency);
                acctDetails.setNormalBalance(normalBalance);

                acctDetails.setReportCategory(reportCategory);
                acctDetails.setDateCreated(dateCreated);
                acctDetails.setDateLastModified(dateLastModified);

                acdDao = new AccountDetailsDAO();
                acdDao.save(acctDetails);
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(new Date());
                FiscalPeriodDAO fiscalPeriodDAO = new FiscalPeriodDAO();
                AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
                List<Integer> years = fiscalPeriodDAO.getAllOpenFiscalYears();
                for (Integer year : years) {
                    List<FiscalPeriod> fiscalPeriods = fiscalPeriodDAO.findByProperty("year", year);
                    for (FiscalPeriod fiscalPeriod : fiscalPeriods) {
                        AccountBalance accountBalance = new AccountBalance(account, fiscalPeriod.getPeriod(), fiscalPeriod.getYear().toString(),
                                new Double(0), new Double(0), new Double(0));
                        accountBalanceDAO.save(accountBalance);
                        Budget budget = new Budget(account, fiscalPeriod.getPeriod(), 0d, "1", fiscalPeriod.getYear());
                        new BudgetDAO().save(budget);
                    }
                }
                StringBuilder desc = new StringBuilder("GL Account '").append(acctDetails.getAccount()).append("'");
                desc.append(" initially added by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.GL_ACCOUNT, acctDetails.getAccount(), NotesConstants.GL_ACCOUNT, loginUser);
                session.removeAttribute("SegList");
                forwardName = "savesuccess";
            }
        }


        if (buttonValue.equals("update")) {
            AccountDetailsDAO acdao = new AccountDetailsDAO();
            AccountDetails acctDetails = new AccountDetails();
            acctDetails = acdao.findById(account);
            if (acctDetails == null) {
                AccountDetails acctDes = new AccountDetails();
                acctDes.setAccount(account);
                acctDes.setAcctDesc(acctDesc);
                if (acctGroup.equals("")) {
                    acctGroup = null;
                }
                acctDes.setAcctGroup(acctGroup);
                acctDes.setAcctStatus(acctStatus);
                acctDes.setAcctType(acctType);
                acctDes.setAcctStructure(acctStructure);
                acctDes.setCloseToAcct(closeToAcct);

                acctDes.setControlAcct(controlAcct);
                acctDes.setDefaultCurrency(defaultCurrency);
                if (multiCurrency == null) {
                    multiCurrency = "No";
                }
                acctDes.setMultiCurrency(multiCurrency);
                acctDes.setNormalBalance(normalBalance);
                acctDes.setReportCategory(reportCategory);
                acctDes.setDateCreated(dateCreated);
                acctDes.setDateLastModified(dateLastModified);
                acctDetails = acctDes;
                acdDao.save(acctDetails);
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(new Date());
                FiscalPeriodDAO fiscalPeriodDAO = new FiscalPeriodDAO();
                AccountBalanceDAO accountBalanceDAO = new AccountBalanceDAO();
                List<Integer> years = fiscalPeriodDAO.getAllOpenFiscalYears();
                for (Integer year : years) {
                    List<FiscalPeriod> fiscalPeriods = fiscalPeriodDAO.findByProperty("year", year);
                    for (FiscalPeriod fiscalPeriod : fiscalPeriods) {
                        AccountBalance accountBalance = new AccountBalance(account, fiscalPeriod.getPeriod(), fiscalPeriod.getYear().toString(),
                                new Double(0), new Double(0), new Double(0));
                        accountBalanceDAO.save(accountBalance);
                        Budget budget = new Budget(account, fiscalPeriod.getPeriod(), 0d, "1", fiscalPeriod.getYear());
                        new BudgetDAO().save(budget);
                    }
                }
                StringBuilder desc = new StringBuilder("GL Account '").append(acctDetails.getAccount()).append("'");
                desc.append(" initially added by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.GL_ACCOUNT, acctDetails.getAccount(), NotesConstants.GL_ACCOUNT, loginUser);
            } else {
                AuditNotesUtils.insertAuditNotes(acctDetails.getAcctDesc(), acctDesc,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Description", loginUser);
                acctDetails.setAcctDesc(acctDesc);
                acctDetails.setReportCategory(reportCategory);
                acctDetails.setDateCreated(dateCreated);
                acctDetails.setDateLastModified(dateLastModified);
                AuditNotesUtils.insertAuditNotes(acctDetails.getAcctType(), acctType,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Account Type", loginUser);
                acctDetails.setAcctType(acctType);
                if (acctGroup.equals("")) {
                    acctGroup = null;
                }
                AuditNotesUtils.insertAuditNotes(acctDetails.getAcctGroup(), acctGroup,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Account Group", loginUser);
                acctDetails.setAcctGroup(acctGroup);
                AuditNotesUtils.insertAuditNotes(acctDetails.getAcctStatus(), acctStatus,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Account Status", loginUser);
                acctDetails.setAcctStatus(acctStatus);
                AuditNotesUtils.insertAuditNotes(acctDetails.getNormalBalance(), normalBalance,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Normal Balance", loginUser);
                acctDetails.setNormalBalance(normalBalance);
                AuditNotesUtils.insertAuditNotes(acctDetails.getControlAcct(), controlAcct,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Control Account", loginUser);
                acctDetails.setControlAcct(controlAcct);
                AuditNotesUtils.insertAuditNotes(acctDetails.getCloseToAcct(), closeToAcct,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Close to Account", loginUser);
                acctDetails.setCloseToAcct(closeToAcct);
                if (multiCurrency == null) {
                    multiCurrency = "No";
                }
                AuditNotesUtils.insertAuditNotes(acctDetails.getMultiCurrency(), multiCurrency,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Multi Currency", loginUser);
                acctDetails.setMultiCurrency(multiCurrency);
                AuditNotesUtils.insertAuditNotes(acctDetails.getDefaultCurrency(), defaultCurrency,NotesConstants.GL_ACCOUNT,acctDetails.getAccount(), "Default Currency", loginUser);
                acctDetails.setDefaultCurrency(defaultCurrency);
            }
            List acdetail = new ArrayList();
            acdetail = (List) session.getAttribute("ChartofaccountsList");
            int i = 0;
            while (acdetail != null && i < acdetail.size()) {
                ChartOfAccountBean cab = (ChartOfAccountBean) acdetail.get(i);
                if (cab.getAcct().equals(account)) {
                    cab.setAcct(account);
                    cab.setDesc(acctDesc);
                    cab.setGroup(acctGroup);
                    cab.setMulticurrency(multiCurrency);
                    cab.setNormalbalance(normalBalance);
                    cab.setStatus(acctStatus);
                }
                i++;
            }
            //Removing session set at chart of accounts action ,Edit list
            session.removeAttribute("eSegList");
            // Removing edit List after updation
            session.removeAttribute("editAccountdetailslist");
            forwardName = "updateaccount";
        }

        if (buttonValue.equals("AccttypeSelected")) {
            DBUtil dbutil = new DBUtil();
            String acctdesc = request.getParameter("acctdesc");
            String datelastmodified = request.getParameter("datelastmodified");
            request.setAttribute("acctdesc", acctdesc);
            request.setAttribute("datelastmodified", datelastmodified);

            String accttype = request.getParameter("accttype");

            if (accttype.equals("Income Statement")) {

                List closetoacct = dbutil.getClosetoAcctList();
                request.setAttribute("closetoacct", closetoacct);
            }
            request.setAttribute("acctype", accttype);
            List accgroup = dbutil.getAcctgroupByType(accttype);

            session.setAttribute("AcctGroup", accgroup);
            forwardName = "success";
        }
        if (buttonValue.equals("editAccttypeSelected")) {

            String accttype = request.getParameter("accttype");

            DBUtil dbutil = new DBUtil();
            request.setAttribute("acctype", accttype);
            List accgroup = dbutil.getAcctgroupByType(accttype);
            if (accttype.equals("Income Statement")) {

                List closetoacct = dbutil.getClosetoAcctList();

                request.setAttribute("closetoacct", closetoacct);


            }

            request.setAttribute("AcctGroup", accgroup);

            forwardName = "success";
        }

        if (buttonValue.equals("AcctgroupSelected")) {
            DBUtil dbutil = new DBUtil();
            String acctdesc = request.getParameter("acctdesc");

            request.setAttribute("acctdesc", acctdesc);
            String accttype = request.getParameter("accttype");
            if (accttype.equals("Income Statement")) {

                List closetoacct = dbutil.getClosetoAcctList();
                request.setAttribute("closetoacct", closetoacct);

            }


            String acctgroup = request.getParameter("acctgroup");
            //DBUtil dbutil=new DBUtil();

            String groupdesc = dbutil.getAcctgroupDesc(acctgroup);
            request.setAttribute("Groupdesc", groupdesc);
            forwardName = "success";
        }
        if (buttonValue.equals("editAcctgroupSelected")) {

            String accttype = request.getParameter("accttype");

            request.setAttribute("acctype", accttype);
            String acctgroup = request.getParameter("acctgroup");
            DBUtil dbutil = new DBUtil();
            List accgroup = dbutil.getAcctgroupByType(accttype);
            if (accttype.equals("Income Statement")) {

                List closetoacct = dbutil.getClosetoAcctList();

                request.setAttribute("closetoacct", closetoacct);


            } else {
                request.setAttribute("closetoacct", null);
            }

            request.setAttribute("AcctGroup", accgroup);

            String groupdesc = dbutil.getAcctgroupDescription(acctgroup);
            request.setAttribute("Groupdesc", groupdesc);
            request.setAttribute("acctgroup", acctgroup);
            forwardName = "success";
        }

        //by pradeep
        if (buttonValue.equals("addSubledger")) {
            DBUtil dbutil = new DBUtil();
            String acctdesc = request.getParameter("acctdesc");
            request.setAttribute("acctdesc", acctdesc);
            String accttype = request.getParameter("accttype");
            if (accttype.equals("Income Statement")) {
                List closetoacct = dbutil.getClosetoAcctList();
                request.setAttribute("closetoacct", closetoacct);
            }
            SubledgerAccts subledgeraccts = new SubledgerAccts();
            String acctgroup = request.getParameter("acctgroup");
            String groupdesc = dbutil.getAcctgroupDesc(acctgroup);
            request.setAttribute("Groupdesc", groupdesc);
            String subledger = request.getParameter("subledger");
            subledgeraccts.setSubLedgerId(new Integer(subledger));
            subledgeraccts.setControlAcct(account);
            SubledgerAcctsDAO slaDAO = new SubledgerAcctsDAO();
            List Subled = slaDAO.getSLlist(account);
            if (!Subled.contains(subledger)) {
                slaDAO.save(subledgeraccts);
            }

            request.setAttribute("subledger", subledger);
            subLedgeraddList = dbutil.getSubLedgeraddList(account);
            session.setAttribute("subLedgeraddList", subLedgeraddList);
            List editAccountList = null;//ControlAcct
            if (session.getAttribute("editAccountdetailslist") != null) {
                editAccountList = (List) session.getAttribute("editAccountdetailslist");
                if (editAccountList != null && editAccountList.size() > 9) {
                    editAccountList.set(9, accountMaintenance.getControlacct());
                }
            }
            forwardName = "success";
        }

        if (buttonValue.equals("delete")) {
            DBUtil dbutil = new DBUtil();
            String acctdesc = request.getParameter("acctdesc");
            request.setAttribute("acctdesc", acctdesc);
            String accttype = request.getParameter("accttype");
            if (accttype.equals("Income Statement")) {

                List closetoacct = dbutil.getClosetoAcctList();
                request.setAttribute("closetoacct", closetoacct);

            }
            String acctgroup = request.getParameter("acctgroup");
            String groupdesc = dbutil.getAcctgroupDesc(acctgroup);
            request.setAttribute("Groupdesc", groupdesc);
            if (session.getAttribute("subLedgeraddList") == null) {
                subLedgeradList = new ArrayList();
            } else {
                subLedgeradList = (List) session.getAttribute("subLedgeraddList");
            }
            int index = accountMaintenance.getIndex();
            AccountMaintenenceBean removesubledger = (AccountMaintenenceBean) subLedgeradList.get(index);
            String subledger = removesubledger.getSubledger();
            SubledgerAcctsDAO slaDAO = new SubledgerAcctsDAO();
            SubledgerAccts sla = new SubledgerAccts();
            sla.setControlAcct(account);
            SubledgerDAO slDAO = new SubledgerDAO();
            String sl = (slDAO.getid(subledger));

            sla.setSubLedgerId(new Integer(sl));
            List ex = slaDAO.findByExample(sla);


            for (int i = 0; i < ex.size(); i++) {
                slaDAO.delete((SubledgerAccts) ex.get(i));
            }
            subLedgeradList.remove(index);
            forwardName = "success";
        }
        if (buttonValue.equals("accountStructure")) {


            SegmentDAO segDAO = new SegmentDAO();
            List segmentList = null;
            segmentList = segDAO.findForShow(acctStructure);
            AccountStructureBean asbean = null;

            int j = 0;
            List segidList = new ArrayList();
            while (j < segmentList.size()) {
                asbean = (AccountStructureBean) segmentList.get(j);

                int id = asbean.getId();
                segidList.add(id);
                asbean = null;
                j++;
            }

            session.setAttribute("SegList", segidList);

            //segmentList
            forwardName = "success";
        }


        return mapping.findForward(forwardName);
    }
}
