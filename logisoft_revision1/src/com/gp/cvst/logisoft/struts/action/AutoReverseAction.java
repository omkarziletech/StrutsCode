/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Collections;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cvst.logisoft.domain.Batch;
import com.gp.cvst.logisoft.domain.JournalEntry;
import com.gp.cvst.logisoft.struts.form.AutoReverseForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-28-2008
 * 
 * XDoclet definition:
 * @struts.action path="/autoReverse" name="autoReverseForm" input="/jsps/Accounting/AutoReverse.jsp" scope="request" validate="true"
 */
public class AutoReverseAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {
        AutoReverseForm autoReverseForm = (AutoReverseForm) form;// TODO Auto-generated method stub
        HttpSession session = request.getSession(true);
        String buttonValue = autoReverseForm.getButtonValue();
        List batchList = new ArrayList();
        Batch batch = new Batch();
        List journalEntryList = new ArrayList();
        HashMap hashMap = new HashMap();
        List jList = new ArrayList();
        HashMap lmap = new HashMap();
        List lList = new ArrayList();
        String journalId = "";
        List lineItemList = new ArrayList();
        if (session.getAttribute("batch") != null) {
            batch = (Batch) session.getAttribute("batch");
        }
        if (session.getAttribute("batchList") != null) {
            batchList = (List) session.getAttribute("batchList");
            for (int i = 0; i < batchList.size(); i++) {
                Batch b1 = (Batch) batchList.get(i);
                if (b1.getBatchId().equals(batch.getBatchId())) {
                    if (b1.getJournalEntrySet() != null) {
                        Iterator iter = b1.getJournalEntrySet().iterator();
                        while (iter.hasNext()) {
                            JournalEntry journal = (JournalEntry) iter.next();
                            hashMap.put(journal.getJournalEntryId(), journal);
                            jList.add(journal.getJournalEntryId());
                        }
                        Collections.sort(jList);
                        for (int j = 0; j < jList.size(); j++) {
                            JournalEntry jEntry = (JournalEntry) hashMap.get(jList.get(i));
                            journalEntryList.add(jEntry);
                        }
                    }
                }
            }
            if (journalEntryList != null && journalEntryList.size() > 0) {

                JournalEntry j1 = (JournalEntry) journalEntryList.get(journalEntryList.size() - 1);
                journalId = j1.getJournalEntryId();
                JournalEntry j2 = new JournalEntry();
                journalId = journalId + 1;
                j2.setJournalEntryId(journalId);
                j2.setJournalEntryDesc(j1.getJournalEntryDesc());
                if (j1.getJeDate() != null) {
                    j2.setJeDate(j1.getJeDate());
                }

            }
        }
        return null;
    }
}