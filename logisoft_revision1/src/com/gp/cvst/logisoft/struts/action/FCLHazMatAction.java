/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.fcl.FclBlBC;
import com.gp.cong.logisoft.bc.fcl.FclBlConstants;
import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.bc.fcl.QuotationConstants;
import com.gp.cvst.logisoft.domain.HazmatMaterial;
import com.gp.cvst.logisoft.struts.form.FCLHazMatForm;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cvst.logisoft.domain.FclBl;
import com.gp.cvst.logisoft.hibernate.dao.FclBlDAO;
import java.util.LinkedList;

/**  
 * MyEclipse Struts
 * Creation date: 08-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/fCLHazMat" name="fCLHazMatForm" input="/jsps/FCL/FCLHazMat.jsp" scope="request"
 * @struts.action-forward name="success" path="/jsps/FCL/FCLHazMat.jsp"
 */
public class FCLHazMatAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        FCLHazMatForm fCLHazMatForm = (FCLHazMatForm) form;// TODO Auto-generated method stub
        String buttonValue = fCLHazMatForm.getButtonValue();
        QuotationBC quotationBC = new QuotationBC();
        List packageTypeList = quotationBC.getPackageTypeSingular(49);
        List packCompositionTypeList = quotationBC.getPackageCompositionType(50);
        List packingGroupCode = quotationBC.getPackingGroupCode();
        request.setAttribute("buttonValue", buttonValue);
        String fileNo = request.getParameter("fileNo");
        request.setAttribute("fileNo", request.getParameter("fileNo"));
        request.setAttribute("UnitNo", request.getParameter("unitNo"));
        request.setAttribute("fclBlNo", request.getParameter("bolId"));
        request.setAttribute("BlHazMat", request.getParameter("indexValue"));
        request.setAttribute("manifest", request.getParameter("manifest"));
        FclBlBC fclBlBC = new FclBlBC();
        if (request.getParameter("buttonValue") != null
                && request.getParameter("buttonValue").equals("Quotation")) {
            List hazmatList = quotationBC.getHazmatList(request.getParameter("name"), request.getParameter("number"));
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.QUOTATIONNO, request.getParameter("number"));
            request.setAttribute(QuotationConstants.QUOTATIONNAME, "Quote");
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        } else if (request.getParameter("buttonValue") != null
                && request.getParameter("buttonValue").equals("editQuotation")) {
            List hazmatList = quotationBC.getHazmatList(request.getParameter("name"), request.getParameter("number"));
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.QUOTATIONNO, request.getParameter("number"));
            request.setAttribute(QuotationConstants.QUOTATIONNAME, "Quote");
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        } else if (request.getParameter("buttonValue") != null
                && request.getParameter("buttonValue").equals("Booking")) {
            List hazmatList = quotationBC.getHazmatList(request.getParameter("name"), request.getParameter("number"));
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.QUOTATIONNO, request.getParameter("number"));
            request.setAttribute(QuotationConstants.QUOTATIONNAME, "Booking");
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        } else if (request.getParameter("buttonValue") != null
                && request.getParameter("buttonValue").equals("fclbl")) {

            String bolId = request.getParameter("bolid");
            String containerId = request.getParameter("containerId");
            List hazmatList = quotationBC.getHazmatList(request.getParameter("name"), containerId);
            List checkingBookingList = quotationBC.getHazmatList(request.getParameter("name"), null);
            List list = fclBlBC.listOfHasMateridalFromBooking(bolId, checkingBookingList);
            List unassignedHazmatList = new ArrayList();
            //---CHECKING FOR DELETED HAZMAT----
            if (CommonUtils.isNotEmpty(list)) {
                for (Iterator iter = list.iterator(); iter.hasNext();) {
                    HazmatMaterial hazmatMaterial = (HazmatMaterial) iter.next();
                    if ((null != hazmatMaterial.getDeletedFlag() && hazmatMaterial.getDeletedFlag().equals("YES"))) {
                        //--- do nothing--:)
                    } else {
                        if (!"Y".equalsIgnoreCase(hazmatMaterial.getFreeFormat())) {
                            String mandatory = getMandatoryFields(hazmatMaterial);
                            if (CommonUtils.isNotEmpty(mandatory)) {
                                mandatory = "Mandatory Fields Needed<br>" + mandatory;
                                hazmatMaterial.setMandatory(mandatory);
                            }
                        }
                        unassignedHazmatList.add(hazmatMaterial);
                    }
                }
            }//---
            request.setAttribute("bookingHazmatList", unassignedHazmatList);
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.QUOTATIONNO, containerId);
            request.setAttribute(QuotationConstants.QUOTATIONNAME, "FclBl");
            request.setAttribute(QuotationConstants.FCLBLNO, bolId);
            fCLHazMatForm.setBolId(bolId);
            fCLHazMatForm.setNumber(containerId);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        }
        if (request.getParameter("paramId") != null) {
            String id = request.getParameter("paramId");
            HazmatMaterial hazmatMaterial = quotationBC.findById(Integer.parseInt(id));
            request.setAttribute(QuotationConstants.HAZMATMATERIAL, hazmatMaterial);
            List hazmatList = quotationBC.getHazmatList(request.getParameter("name"), request.getParameter("number"));
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            List checkingBookingList = quotationBC.getHazmatList(request.getParameter("name"), null);
            if (request.getParameter("fclBolId") != null) {
                String bolId = request.getParameter("fclBolId");
                List list = fclBlBC.listOfHasMateridalFromBooking(bolId, checkingBookingList);
                request.setAttribute("bookingHazmatList", list);
                fCLHazMatForm.setBolId(bolId);
                request.setAttribute("UnitNo", fCLHazMatForm.getUnitNo());
            }
            if (CommonFunctions.isNotNull(hazmatMaterial.getOuterPackingPieces())
                    && Integer.parseInt(hazmatMaterial.getOuterPackingPieces().trim()) > 1) {
                packageTypeList = quotationBC.getPackageType(49);
            }
            request.setAttribute(QuotationConstants.QUOTATIONNO, request.getParameter("number"));
            request.setAttribute(QuotationConstants.QUOTATIONNAME, request.getParameter("name"));
            fCLHazMatForm.setPackingGroupCodeUom(hazmatMaterial.getPackingGroupCodeUom());
            fCLHazMatForm.setExceptedQuantity(hazmatMaterial.getExceptedQuantity());
            fCLHazMatForm.setMarinePollutant(hazmatMaterial.getMarinePollutant());
            fCLHazMatForm.setLimitedQuantity(hazmatMaterial.getLimitedQuantity());
            fCLHazMatForm.setInhalationHazard(hazmatMaterial.getInhalationHazard());
            fCLHazMatForm.setReportableQuantity(hazmatMaterial.getReportableQuantity());
            fCLHazMatForm.setResidue(hazmatMaterial.getResidue());
            fCLHazMatForm.setFlashPoint(hazmatMaterial.getFlashPoint());
            fCLHazMatForm.setFreeFormat(hazmatMaterial.getFreeFormat());
            fCLHazMatForm.setNetWeightUMO(hazmatMaterial.getNetWeightUMO());
            request.setAttribute("line", getFreeFormatLines(hazmatMaterial));
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
            request.setAttribute(QuotationConstants.HAZMATPRIMARYLIST, fclBlBC.getPrimaryClassForHazmatList());
        }
        if ("editUnassignedHazmat".equalsIgnoreCase(buttonValue)) {
            HazmatMaterial hazmatMaterial = quotationBC.findById(null != fCLHazMatForm.getId() ? Integer.parseInt(fCLHazMatForm.getId()) : 0);
            request.setAttribute(QuotationConstants.HAZMATMATERIAL, hazmatMaterial);
            if (null != hazmatMaterial) {
                List hazmatList = quotationBC.getHazmatList(hazmatMaterial.getDocTypeCode(), fCLHazMatForm.getNumber());
                request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
                List checkingBookingList = quotationBC.getHazmatList(hazmatMaterial.getDocTypeCode(), null);
                if (fCLHazMatForm.getFclBlNo() != null) {
                    String bolId = fCLHazMatForm.getFclBlNo();
                    List list = fclBlBC.listOfHasMateridalFromBooking(bolId, checkingBookingList);
                    request.setAttribute("bookingHazmatList", list);
                    fCLHazMatForm.setBolId(bolId);
                    request.setAttribute("UnitNo", fCLHazMatForm.getUnitNo());
                }
                if (CommonFunctions.isNotNull(hazmatMaterial.getOuterPackingPieces())
                        && Integer.parseInt(hazmatMaterial.getOuterPackingPieces().trim()) > 1) {
                    packageTypeList = quotationBC.getPackageType(49);
                }
                request.setAttribute(QuotationConstants.QUOTATIONNO, "" + hazmatMaterial.getBolId());
                request.setAttribute(QuotationConstants.QUOTATIONNAME, hazmatMaterial.getDocTypeCode());
                fCLHazMatForm.setPackingGroupCodeUom(hazmatMaterial.getPackingGroupCodeUom());
                fCLHazMatForm.setExceptedQuantity(hazmatMaterial.getExceptedQuantity());
                fCLHazMatForm.setMarinePollutant(hazmatMaterial.getMarinePollutant());
                fCLHazMatForm.setLimitedQuantity(hazmatMaterial.getLimitedQuantity());
                fCLHazMatForm.setInhalationHazard(hazmatMaterial.getInhalationHazard());
                fCLHazMatForm.setReportableQuantity(hazmatMaterial.getReportableQuantity());
                fCLHazMatForm.setResidue(hazmatMaterial.getResidue());
                fCLHazMatForm.setFlashPoint(hazmatMaterial.getFlashPoint());
                fCLHazMatForm.setFreeFormat(hazmatMaterial.getFreeFormat());
                fCLHazMatForm.setNetWeightUMO(hazmatMaterial.getNetWeightUMO());
                request.setAttribute("line", getFreeFormatLines(hazmatMaterial));
                request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
                request.setAttribute("unAssigned", "unAssigned");
                request.setAttribute(QuotationConstants.HAZMATPRIMARYLIST, fclBlBC.getPrimaryClassForHazmatList());
            }
        }
        if (buttonValue != null && buttonValue.equals("save")) {
            quotationBC.saveHazmat(fCLHazMatForm, null);
            List hazmatList = quotationBC.getHazmatList(fCLHazMatForm.getName(), fCLHazMatForm.getNumber());
            request.setAttribute(QuotationConstants.QUOTATIONNO, fCLHazMatForm.getNumber());
            request.setAttribute(QuotationConstants.QUOTATIONNAME, fCLHazMatForm.getName());
            if (fCLHazMatForm.getName() != null && fCLHazMatForm.getName().equalsIgnoreCase(FclBlConstants.HAZMATQUOTEFORBL)) {
                List checkingBookingList = quotationBC.getHazmatList(request.getParameter("name"), null);
                List list = fclBlBC.listOfHasMateridalFromBooking(fCLHazMatForm.getBolId(), checkingBookingList);
                List unassignedHazmatList = new ArrayList();
                //---CHECKING FOR DELETED HAZMAT----
                if (CommonUtils.isNotEmpty(list)) {
                    for (Iterator iter = list.iterator(); iter.hasNext();) {
                        HazmatMaterial hazmatMaterial = (HazmatMaterial) iter.next();
                        if (null != hazmatMaterial.getDeletedFlag() && hazmatMaterial.getDeletedFlag().equals("YES")) {
                            //--- do nothing--:)
                        } else {
                            if (!"Y".equalsIgnoreCase(hazmatMaterial.getFreeFormat())) {
                                String mandatory = getMandatoryFields(hazmatMaterial);
                                if (CommonUtils.isNotEmpty(mandatory)) {
                                    mandatory = "Mandatory Fields Needed<br>" + mandatory;
                                    hazmatMaterial.setMandatory(mandatory);
                                }
                            }
                            unassignedHazmatList.add(hazmatMaterial);
                        }
                    }
                }//---
                request.setAttribute("bookingHazmatList", unassignedHazmatList);
            }
            FclBl fclBl = new FclBlDAO().getFileNoObject(fileNo);
            if (null != fclBl) {
                if ("Y".equalsIgnoreCase(fclBl.getBreakBulk())) {
                    fclBl.setHazmat("Y");
                }
            }
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        }
        if (buttonValue != null && buttonValue.equals("update")) {
            HazmatMaterial hazmatMaterial = quotationBC.findById(Integer.parseInt(fCLHazMatForm.getIndex()));
            quotationBC.saveHazmat(fCLHazMatForm, hazmatMaterial);
            List hazmatList = quotationBC.getHazmatList(fCLHazMatForm.getName(), fCLHazMatForm.getNumber());
            request.setAttribute(QuotationConstants.QUOTATIONNO, fCLHazMatForm.getNumber());
            request.setAttribute(QuotationConstants.QUOTATIONNAME, fCLHazMatForm.getName());
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
            if (fCLHazMatForm.getName() != null && fCLHazMatForm.getName().equalsIgnoreCase(FclBlConstants.HAZMATQUOTEFORBL)) {
                List checkingBookingList = quotationBC.getHazmatList(request.getParameter("name"), null);
                List list = fclBlBC.listOfHasMateridalFromBooking(fCLHazMatForm.getBolId(), checkingBookingList);
                List unassignedHazmatList = new ArrayList();
                //---CHECKING FOR DELETED HAZMAT----
                if (CommonUtils.isNotEmpty(list)) {
                    for (Iterator iter = list.iterator(); iter.hasNext();) {
                        HazmatMaterial hazmatMaterialNew = (HazmatMaterial) iter.next();
                        if (null != hazmatMaterialNew.getDeletedFlag() && hazmatMaterialNew.getDeletedFlag().equals("YES")) {
                            //--- do nothing--:)
                        } else {
                            if (!"Y".equalsIgnoreCase(hazmatMaterial.getFreeFormat())) {
                                String mandatory = getMandatoryFields(hazmatMaterial);
                                if (CommonUtils.isNotEmpty(mandatory)) {
                                    mandatory = "Mandatory Fields Needed<br>" + mandatory;
                                    hazmatMaterial.setMandatory(mandatory);
                                }
                            }
                            unassignedHazmatList.add(hazmatMaterialNew);
                        }
                    }
                }//---
                request.setAttribute("bookingHazmatList", unassignedHazmatList);
            }
        }
        if (buttonValue != null && buttonValue.equals("add")) {
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
            request.setAttribute(QuotationConstants.QUOTATIONNO, fCLHazMatForm.getNumber());
            request.setAttribute(QuotationConstants.QUOTATIONNAME, fCLHazMatForm.getName());
            List hazmatList = quotationBC.getHazmatList(fCLHazMatForm.getName(), fCLHazMatForm.getNumber());
            if (fCLHazMatForm.getName() != null && fCLHazMatForm.getName().equalsIgnoreCase(FclBlConstants.HAZMATQUOTEFORBL)) {
                List checkingBookingList = quotationBC.getHazmatList(request.getParameter("name"), null);
                List list = fclBlBC.listOfHasMateridalFromBooking(fCLHazMatForm.getBolId(), checkingBookingList);
                request.setAttribute("bookingHazmatList", list);
            }
            HazmatMaterial hazmatMaterial = new HazmatMaterial();
            hazmatMaterial.setContactName("CHEMTREC");
            hazmatMaterial.setEmerreprsNum("703-527-3887");
            request.setAttribute(QuotationConstants.HAZMATMATERIAL, hazmatMaterial);
            request.setAttribute(QuotationConstants.HAZMAT, hazmatList);
            request.setAttribute(QuotationConstants.HAZMATPRIMARYLIST, fclBlBC.getPrimaryClassForHazmatList());
        }
        if (buttonValue != null && buttonValue.equals("convertToBlHazMat")) {
            fclBlBC.convertHazMatTOBl(fCLHazMatForm, request);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        }
        if (buttonValue != null && buttonValue.equals("deleteHazMat")) {
            fclBlBC.deleteHazMat(fCLHazMatForm, request);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        }
        if (buttonValue != null && buttonValue.equals("deleteHazMatForQuotesAndBooking")) {
            fclBlBC.deleteHazMatFroQuoteAndBooking(fCLHazMatForm, request);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
            request.setAttribute(QuotationConstants.FCLBLNO, fCLHazMatForm.getBolId());
        }
        if (buttonValue != null && buttonValue.equals("deleteUnassignedHazmat")) {
            fclBlBC.deleteUnassignedHazmat(fCLHazMatForm, request);
            request.setAttribute(QuotationConstants.HAZMATMATERIALForm, fCLHazMatForm);
        }
        request.setAttribute("packageTypeList", packageTypeList);
        request.setAttribute("packCompositionTypeList", packCompositionTypeList);
        // request.setAttribute("InnerPkgUOM", hazmatMaterial);
        request.setAttribute("packingGroupCode", packingGroupCode);
        request.setAttribute("manifest", request.getParameter("manifest"));
        return mapping.findForward("success");
    }

    public String getMandatoryFields(HazmatMaterial hazmatMaterial) {
        String mandatory = "";
        int i = 1;
        if (CommonUtils.isEmpty(hazmatMaterial.getPropShipingNumber())) {
            mandatory = mandatory + i + ") Proper Shipping Name<br>";
            i++;
        }
        if (CommonUtils.isEmpty(hazmatMaterial.getImoClssCode())) {
            mandatory = mandatory + i + ") IMO ClassCode(Primary)<br>";
            i++;
        }
        if (CommonUtils.isEmpty(hazmatMaterial.getOuterPackingPieces())) {
            mandatory = mandatory + i + ") Outer Packing Pieces<br>";
            i++;
        }
        if (CommonUtils.isEmpty(hazmatMaterial.getOuterPackComposition())) {
            mandatory = mandatory + i + ") Outer Pack Composition<br>";
            i++;
        }
        if (CommonUtils.isEmpty(hazmatMaterial.getOuterPackagingType())) {
            mandatory = mandatory + i + ") Outer Packaging Type<br>";
            i++;
        }
        if (CommonUtils.isEmpty(hazmatMaterial.getGrossWeight())) {
            mandatory = mandatory + i + ") Gross Weight<br>";
            i++;
        }
        return mandatory;
    }

    public String[] getFreeFormatLines(HazmatMaterial hazmatMaterial) {
        List list = new LinkedList();
        if (CommonUtils.isNotEmpty(hazmatMaterial.getLine1())) {
            list.add(hazmatMaterial.getLine1());
            list.add(hazmatMaterial.getLine2());
            list.add(hazmatMaterial.getLine3());
            list.add(hazmatMaterial.getLine4());
            list.add(hazmatMaterial.getLine5());
            list.add(hazmatMaterial.getLine6());
            list.add(hazmatMaterial.getLine7());
        }
        return (String[]) list.toArray(new String[list.size()]);
    }
}
