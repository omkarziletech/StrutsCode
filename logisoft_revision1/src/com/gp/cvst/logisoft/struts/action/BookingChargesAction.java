/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.NumberUtils;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import com.gp.cong.logisoft.bc.fcl.BookingFclBC;
import com.gp.cong.logisoft.bc.fcl.FclBlConstants;
import com.gp.cong.logisoft.bc.notes.NotesBC;
import com.gp.cong.logisoft.bc.notes.NotesConstants;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Notes;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cvst.logisoft.domain.BookingFcl;
import com.gp.cvst.logisoft.domain.BookingfclUnits;
import com.gp.cvst.logisoft.domain.Charges;
import com.gp.cvst.logisoft.hibernate.dao.BookingFclDAO;
import com.gp.cvst.logisoft.hibernate.dao.BookingfclUnitsDAO;
import com.gp.cvst.logisoft.hibernate.dao.ChargesDAO;
import com.gp.cvst.logisoft.struts.form.BookingChargesForm;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.struts.util.LabelValueBean;

/**
 * MyEclipse Struts Creation date: 10-13-2008
 *
 * XDoclet definition:
 *
 * @struts.action path="/bookingCharges" name="bookingChargesForm"
 * input="/jsp/fclQuotes/BookingCharges.jsp" scope="request" validate="true"
 */
public class BookingChargesAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        BookingChargesForm bookingChargesForm = (BookingChargesForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String unitType = bookingChargesForm.getUnitSelect();
        String chargeCodeDesc = bookingChargesForm.getChargeCodeDesc();
        String costType = bookingChargesForm.getCostType();
        String currency = bookingChargesForm.getCurrency();
        String chargeCode = bookingChargesForm.getChargeCode();
        String amounts = bookingChargesForm.getAmount();
        String hazmat = bookingChargesForm.getHazmat();
        String tempButton = bookingChargesForm.getTempButton();
        String newFlag = "";
        User user = new User();
        Charges charges = new Charges();
        ChargesDAO chargesDAO = new ChargesDAO();
        boolean hasUpdated = false;
        String userName = "";
        String noteDesc = "";
        if (session.getAttribute("loginuser") != null) {
            user = (User) session.getAttribute("loginuser");
            userName = user.getLoginName();
        }


        /*if(tempButton!=null && tempButton.equalsIgnoreCaseIgnoreCase("closePopUp")){
         request.setAttribute("closePopUp","closePopUp");
         }*/
        if (request.getParameter("hazmat") != null) {
            hazmat = request.getParameter("hazmat");
        }
        if (request.getParameter("ratedOption") != null) {
            request.setAttribute("ratedOption", request.getParameter("ratedOption"));
        }
        request.setAttribute("hazmat", hazmat);
        String soc = bookingChargesForm.getSoc();
        /*if(request.getParameter("soc")!=null){
         soc=request.getParameter("soc");
         }
         request.setAttribute("soc", soc);*/
        String spcleqpmt = bookingChargesForm.getSpcleqpmt();
        if (request.getParameter("spcleqpmt") != null) {
            spcleqpmt = request.getParameter("spcleqpmt");
        }
        request.setAttribute("spcleqpmt", spcleqpmt);
        if (request.getParameter("provisions") != null) {
            request.setAttribute("provisions", request.getParameter("provisions"));
        }
        GenericCodeDAO genDAO = new GenericCodeDAO();
        BookingfclUnits b1 = new BookingfclUnits();
        String bookingNo = bookingChargesForm.getBookingNo();
        String markUp = bookingChargesForm.getMarkUp();

        if (request.getParameter("bkgNo") != null) {
            bookingNo = request.getParameter("bkgNo");
        }
        request.setAttribute("bkgNo", bookingNo);
        String breakBulk = request.getParameter("breakBulk");
        request.setAttribute("breakBulk", breakBulk);
        // To set on-carriage charge code
        String provisions = null != request.getAttribute("provisions") ? (String) request.getAttribute("provisions") : "";
        com.gp.cvst.logisoft.util.DBUtil util = new com.gp.cvst.logisoft.util.DBUtil();
        if ("onCarriage".equalsIgnoreCase(provisions)) {
            request.setAttribute("costtypelist", util.getGenericCodeCostListForQuoteChargeForLocalDrayage(new Integer(37), "yes", "Select Cost type"));
            request.setAttribute("costcodelist", util.getChargeCodes(new Integer(36), "yes", "Select Cost Code", "ONCARRIAGE"));
            request.setAttribute("SpecialProvision", "onCarriage");
            List chgList = util.getChargeCodes(new Integer(36), "yes", "Select Cost Code", "ONCARRIAGE");
            LabelValueBean labelValueBean = (LabelValueBean) chgList.get(0);
            request.setAttribute("chargeCode", util.getCostCodeForDrayage(labelValueBean.getValue()));
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy hh:mm a");
        MessageResources messageResources = getResources(request);
        String buttonValue = bookingChargesForm.getButtonValue();
        BookingfclUnitsDAO bookingfclUnitsDAO = new BookingfclUnitsDAO();
        BookingFclBC bookingFclBC = new BookingFclBC();
        BookingFclDAO bookingFclDAO = new BookingFclDAO();
        DBUtil dbUtil = new DBUtil();
        if (unitType != null && !unitType.equalsIgnoreCase("0")) {
            GenericCode gen = genDAO.findById(Integer.parseInt(unitType));
            b1.setUnitType(gen);
            b1.setUnitName(gen.getCodedesc());
        }
        b1.setNumbers("1");
        if (chargeCodeDesc != null && !chargeCodeDesc.equalsIgnoreCase("0")) {
            GenericCode gen = genDAO.findById(Integer.parseInt(chargeCodeDesc));
            b1.setChgCode(gen.getCodedesc());
            b1.setChargeCodeDesc(gen.getCode());
            b1.setChargeCode(gen);
            if ((b1.getChargeCodeDesc().equalsIgnoreCase("INTMDL") || b1.getChargeCodeDesc().equalsIgnoreCase("INLAND")) && markUp != null && markUp.equalsIgnoreCase("0.00")) {
                markUp = "50.00";
            }
        }
        if (costType != null && !costType.equalsIgnoreCase("0")) {
            GenericCode gen1 = genDAO.findById(Integer.parseInt(costType));
            b1.setCostType(gen1.getCodedesc());
            b1.setCosttype(gen1);
        }
        if (amounts != null && amounts != "") {
            b1.setAmount(Double.parseDouble(dbUtil.removeComma(amounts)));
        } else {
            b1.setAmount(0.00);
        }

        if (markUp != null) {
            b1.setMarkUp(Double.parseDouble(dbUtil.removeComma(markUp)));
        }
        if (currency != null && !currency.equalsIgnoreCase("0")) {
            GenericCode gen = genDAO.findById(Integer.parseInt(currency));
            b1.setCurrency(gen.getCode());
            b1.setCurrency1(gen);
        }
        if(null!=b1.getSpotRateAmt() && b1.getSpotRateMarkUp() != null){
            b1.setSellRate(b1.getSpotRateAmt() + b1.getSpotRateMarkUp());
        }else if (b1.getMarkUp() != null) {
            b1.setSellRate(b1.getAmount() + b1.getMarkUp());
        }
        
        b1.setBuyRate(0.00);
        if (b1.getSellRate() != null) {
            b1.setProfit(b1.getSellRate() - b1.getBuyRate());
        }
        if (bookingChargesForm.getVendorName() != null) {
            b1.setAccountName(bookingChargesForm.getVendorName());
        }
        if (bookingChargesForm.getVendorNumber() != null) {
            b1.setAccountNo(bookingChargesForm.getVendorNumber());
        }
        if (bookingChargesForm.getInvoiceNumber() != null) {
            b1.setInvoiceNumber(bookingChargesForm.getInvoiceNumber());
        }
        b1.setManualCharges("M");
        b1.setNewFlag("new");
        if (bookingChargesForm.getComment() != null) {
            b1.setComment(CommonFunctions.isNotNull(bookingChargesForm.getComment())
                    ? bookingChargesForm.getComment().toUpperCase() : bookingChargesForm.getComment());

        }
        b1.setVendorCheckBox(CommonUtils.isNotEmpty(bookingChargesForm.getVendorCheckBox()) ? bookingChargesForm.getVendorCheckBox() : "");
        session.setAttribute("newBooking", b1);
        List tempfclRates = bookingfclUnitsDAO.getbookingfcl(bookingNo);
        HashMap hashMap = new HashMap();
        if (session.getAttribute("hashMap") == null) {
            if (tempfclRates != null && tempfclRates.size() > 0) {
                for (Iterator iterator = tempfclRates.iterator(); iterator.hasNext();) {
                    BookingfclUnits tempBookingfclUnits = (BookingfclUnits) iterator.next();
                    if (hashMap.size() > 0 && hashMap.containsKey(tempBookingfclUnits.getUnitType().getId().toString())) {
                    } else {
                        hashMap.put(tempBookingfclUnits.getUnitType().getId().toString(), tempBookingfclUnits.getUnitType().getId().toString());
                    }
                }
            }
            session.setAttribute("hashMap", hashMap);
        }

        if (request.getParameter("buttonValue") != null && request.getParameter("buttonValue").equalsIgnoreCase("edit")) {
            String bookingId = request.getParameter("bookingId");
            String id = request.getParameter("id");
            request.setAttribute("id", id);
            BookingfclUnits bookingfclUnits = bookingfclUnitsDAO.findById(Integer.parseInt(id));
            if (bookingfclUnits != null) {
                GenericCode genericCode = genDAO.findByCodeDescName(bookingfclUnits.getCostType(), 37);
                bookingfclUnits.setCosttype(genericCode);
                genericCode = genDAO.findByCodeName(bookingfclUnits.getChargeCodeDesc(), 36);
                bookingfclUnits.setChargeCode(genericCode);
                request.setAttribute("SpecialProvision", bookingfclUnits.getChgCode());
            }
            if ("true".equalsIgnoreCase(request.getParameter("isCollapsed"))) {//only for collapse rates table
                Double collapseMarkupAmount = 0d;
                Double collapseAmount = 0d;
                String collapseSellAmount = request.getParameter("sellRate");
                String collapseCostAmount = request.getParameter("costRate");
                if (null != bookingfclUnits.getChargeCode().getCode()) {
                    String chgCode = bookingfclUnits.getChargeCode().getCode();
                    if ("INTRAMP".equalsIgnoreCase(chgCode)
                            || "INTFS".equalsIgnoreCase(chgCode)
                            || "OCNFRT".equalsIgnoreCase(chgCode)) { // only for intermodal rates and ocean frieght
                        List<BookingfclUnits> consolidatedList = bookingfclUnitsDAO.getConsolidatedCharges(bookingId,
                                chgCode, bookingfclUnits.getUnitType().getId());
                        if ("OCNFRT".equalsIgnoreCase(chgCode)) { // ocean fright charges
                            BookingfclUnits ocnfrtUnits = bookingfclUnitsDAO.findById(Integer.parseInt(id));
                            consolidatedList.add(ocnfrtUnits);
                        }
                        for (BookingfclUnits consolidatedCharge : consolidatedList) {
                            collapseMarkupAmount += consolidatedCharge.getMarkUp();
                            collapseAmount += consolidatedCharge.getAmount();
                            
                        }
                        Double collapseSellAmt = collapseAmount + collapseMarkupAmount;
                        collapseSellAmount = NumberUtils.convertToTwoDecimal(collapseSellAmt);
                        collapseCostAmount = NumberUtils.convertToTwoDecimal(collapseAmount);
                    }
                }

                request.setAttribute("collapseSellAmount", collapseSellAmount);
                request.setAttribute("collapseCostAmount", collapseCostAmount);
            }
            session.setAttribute("newBooking", bookingfclUnits);
            request.setAttribute("buttonValue", "edit");
            if (CommonUtils.notIn(bookingfclUnits.getNewFlag(), "new","D","IN","FF")) {
                request.setAttribute("nonManualChargesBooking", "nonManualChargesBooking");
            }else{
                request.setAttribute("nonManualCharges", "");
            }
        }
        if (buttonValue != null && buttonValue.equalsIgnoreCase("accept")) {
            boolean flag1 = false;
            List displayBookingList = new ArrayList();
            if (session.getAttribute("displayBookingList") != null) {
                displayBookingList = (List) session.getAttribute("displayBookingList");
            }
            BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(bookingNo));
            List fclRates = new ArrayList();
            if ((bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equalsIgnoreCase("R"))
                    || (bookingFcl.getRatesNonRates() != null && bookingFcl.getRatesNonRates().equalsIgnoreCase("N")
                    && bookingFcl.getBreakBulk() != null && bookingFcl.getBreakBulk().equalsIgnoreCase("N"))) {
                fclRates = bookingfclUnitsDAO.getbookingfcl(bookingNo);
            } else {
                fclRates = bookingfclUnitsDAO.getbookingfcl(bookingNo);
            }
            List otherChargesList = new ArrayList();
            List otherList = bookingfclUnitsDAO.getbookingfcl1(bookingNo);
            List perkglbsList = new ArrayList();
            List bookingfclUnitsList1 = new ArrayList();
            for (int i = 0; i < otherList.size(); i++) {
                BookingfclUnits c1 = (BookingfclUnits) otherList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))
                        || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    otherChargesList.add(c1);
                }
            }
            boolean flag3 = false;
            if ((b1.getCostType() != null && (b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))
                    || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))
                    || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))))) {
                unitType = "0";
            }
            if ((b1.getCostType() != null && (b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize")) || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))) && unitType.equalsIgnoreCase("0"))) {
                String msg = "Please select Unit Type";
                flag3 = true;
            }
            if (hazmat != null && hazmat.equalsIgnoreCase("N") && (b1.getChgCode() != null && b1.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE")) || (b1.getChgCode() != null && b1.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE- LAND")) || (b1.getChgCode() != null && b1.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE- SEA"))) {
                String msg = "Please select Hazmat = yes, for selecting the Hazardous charge code";
                request.setAttribute("msg", msg);
                flag3 = true;
            }
            if (spcleqpmt != null && spcleqpmt.equalsIgnoreCase("N")
                    && b1.getChgCode() != null && b1.getChgCode().trim().equalsIgnoreCase("SPECIAL EQUIPMENT SURCHARGE")) {
                String msg = "Please select Special Equipment, for selecting the Special Equipment Charge Code";
                request.setAttribute("msg", msg);
                flag3 = true;
            }
            /*if(soc!=null && b1.getChgCode()!=null && soc.equalsIgnoreCase("N") && b1.getChargeCodeDesc().trim().equalsIgnoreCase("SOC")){
             String msg="Please select SOC, for selecting the SOC Charge Code";
             request.setAttribute("msg", msg);
             flag3=true;
             }*/
            if (!flag3) {
                if (!"N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && b1.getCostType() != null && (b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")))) {
                    for (int i = 0; i < otherChargesList.size(); i++) {
                        BookingfclUnits bookingFcl1 = (BookingfclUnits) otherChargesList.get(i);
                        if (bookingFcl1.getChgCode().equalsIgnoreCase(b1.getChgCode())) {
                            if (null != b1.getUnitType() && null != bookingFcl1.getUnitType() && bookingFcl1.getUnitType().getId().toString().equalsIgnoreCase(b1.getUnitType().getId().toString())) {
                                String msg = bookingFcl1.getChgCode() + " For " + bookingFcl1.getCostType() + "  already exists";
                                request.setAttribute("msg", msg);
                                flag1 = true;
                                break;
                            }
                        }
                    }
                }
                //---FOR PERKB LIST------
                if (!"N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && b1.getCostType() != null && (b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl")))) {
                    for (int i = 0; i < perkglbsList.size(); i++) {
                        BookingfclUnits bookingFcl2 = (BookingfclUnits) perkglbsList.get(i);
                        if (bookingFcl2.getChgCode().equalsIgnoreCase(b1.getChgCode())) {
                            String msg = bookingFcl2.getChgCode() + " For " + bookingFcl2.getCostType() + "  already exists";
                            request.setAttribute("msg", msg);
                            flag1 = true;
                            break;
                        }
                    }
                }
                if (!"N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))
                        || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                    for (int i = 0; i < fclRates.size(); i++) {
                        BookingfclUnits bookingFcl1 = (BookingfclUnits) fclRates.get(i);
                        if (bookingFcl1.getChgCode().equalsIgnoreCase(b1.getChgCode())) {
                            String msg = bookingFcl1.getChgCode() + " For " + bookingFcl1.getCostType() + "  already exists";
                            request.setAttribute("msg", msg);
                            flag1 = true;
                            break;
                        }
                    }
                }
                if (!flag1) {
                    if (b1.getCostType() != null && b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))) {
                        boolean perFlag = false;
                        boolean perFlag1 = false;
                        for (Object fclRate : fclRates) {
                            BookingfclUnits booking1 = (BookingfclUnits) fclRate;
                            bookingfclUnitsList1.add(booking1);
                            if (booking1.getUnitType().getId().toString().equalsIgnoreCase(unitType)) {
                                perFlag = true;
                                if (booking1.getChgCode().trim().equalsIgnoreCase("OCEAN FREIGHT")) {
                                    perFlag1 = true;
                                    b1.setAmount(b1.getAmount() * Double.parseDouble(booking1.getNumbers()));
                                    b1.setAmount(b1.getAmount() * booking1.getAmount() / 100);
                                    b1.setNumbers(booking1.getNumbers());
                                    if(null!=b1.getSpotRateAmt() && b1.getSpotRateMarkUp() != null){
                                        b1.setSellRate(b1.getSpotRateAmt()+ b1.getSpotRateMarkUp());
                                    }else{
                                        b1.setSellRate(b1.getAmount() + b1.getMarkUp());
                                    }
                                    bookingfclUnitsList1.add(b1);
                                    displayBookingList.add(b1);
                                }
                            }
                        }
                        if (!perFlag || !perFlag1) {
                            String msg = "Please Select Ocean Freight before selecting Percent OFR";
                            request.setAttribute("msg", msg);
                        }
                    }
                    if (b1.getCostType() != null && (b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize"))
                            || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer")) || b1.getCostType().trim().equalsIgnoreCase("PER TEU"))) {
                        boolean insFlag = false;
                        for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                            BookingfclUnits bookingfclUnits = (BookingfclUnits) iter.next();
                            if (bookingfclUnits.getUnitType() != null && !bookingfclUnits.getUnitType().getId().equals(unitType)) {
                                insFlag = true;
                                break;
                            }
                        }
                        if (fclRates.size() > 0) {
                            boolean flag = false;
                            boolean flag2 = false;
                            int a = 0;
                            if (!unitType.equalsIgnoreCase("0")) {
                                for (int i = 0; i < fclRates.size(); i++) {
                                    BookingfclUnits bookingFcl2 = (BookingfclUnits) fclRates.get(i);
                                    if (!flag) {
                                        if (bookingFcl2.getUnitType() != null && bookingFcl2.getUnitType().getId().toString().equalsIgnoreCase(unitType)) {
                                            flag2 = true;
                                            a = a + 1;
                                            if (!"N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && bookingFcl2.getChgCode().trim().equalsIgnoreCase(b1.getChgCode().trim()) && bookingFcl2.getUnitType().getId().toString().equalsIgnoreCase(b1.getUnitType().getId().toString())) {
                                                flag = true;
                                                String msg = bookingFcl2.getChgCode() + " For " + bookingFcl2.getCostType() + "  already exists";
                                                request.setAttribute("msg", msg);
                                                for (int j = i + 1; j < fclRates.size(); j++) {
                                                    BookingfclUnits bookingFcl3 = (BookingfclUnits) fclRates.get(j);
                                                    bookingfclUnitsList1.add(bookingFcl3);
                                                }
                                                break;
                                            }
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                if (!flag2) {
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        BookingfclUnits bookingFcl4 = (BookingfclUnits) fclRates.get(i);
                                        bookingfclUnitsList1.add(bookingFcl4);
                                    }
                                    boolean flag6 = false;
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        BookingfclUnits bookingFcl5 = (BookingfclUnits) fclRates.get(i);
                                        if (!"N".equalsIgnoreCase(bookingFcl.getRatesNonRates()) && bookingFcl5.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer"))) {
                                            if (bookingFcl5.getChgCode() != null && b1.getChgCode() != null && bookingFcl5.getChgCode().equalsIgnoreCase(b1.getChgCode())
                                                    && bookingFcl5.getUnitType().getId().toString().equalsIgnoreCase(b1.getUnitType().getId().toString())) {
                                                flag6 = false;
                                                String msg = bookingFcl5.getChgCode() + " For " + bookingFcl5.getCostType() + "  already exists";
                                                request.setAttribute("msg", msg);
                                                break;
                                            }
                                        }
                                    }
                                    if (!flag6) {
                                        bookingfclUnitsList1.add(b1);
                                        displayBookingList.add(b1);
                                    }
                                } else {
                                    if (!flag) {
                                        boolean flag4 = false;
                                        for (int j = 0; j < fclRates.size(); j++) {
                                            BookingfclUnits bookingFcl6 = (BookingfclUnits) fclRates.get(j);
                                            bookingfclUnitsList1.add(bookingFcl6);
                                            if (!flag4) {
                                                if (bookingFcl6.getUnitType() != null && bookingFcl6.getUnitType().getId().toString().equalsIgnoreCase(unitType)) {
                                                    flag4 = true;
                                                    b1.setAmount(b1.getAmount() * Double.parseDouble("1"));
                                                    b1.setNumbers(bookingFcl6.getNumbers());
                                                    if (null == b1.getMarkUp()) {
                                                        b1.setMarkUp(0.00);
                                                    }
                                                    if (null == b1.getAmount()) {
                                                        b1.setAmount(0.00);
                                                    }
                                                    if(null!=b1.getSpotRateAmt() && b1.getSpotRateMarkUp() != null){
                                                        b1.setSellRate(b1.getSpotRateAmt() + b1.getSpotRateMarkUp());
                                                    }else{
                                                        b1.setSellRate(b1.getAmount() + b1.getMarkUp());
                                                    }
                                                    bookingfclUnitsList1.add(b1);
                                                    displayBookingList.add(b1);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                boolean flag4 = false;
                                if (!"N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        BookingfclUnits bookingFcl8 = (BookingfclUnits) fclRates.get(i);
                                        if (b1.getUnitType() != null && bookingFcl8.getChgCode().equalsIgnoreCase(b1.getChgCode()) && bookingFcl8.getUnitType().getId().toString().equalsIgnoreCase(b1.getUnitType().getId().toString())) {
                                            String msg = bookingFcl8.getChgCode() + " For " + bookingFcl8.getCostType() + "  already exists";
                                            request.setAttribute("msg", msg);
                                            flag4 = true;
                                            break;
                                        }
                                    }
                                }
                                if (!flag4) {
                                    boolean testFlag = false;
                                    for (int k = 0; k < fclRates.size(); k++) {
                                        BookingfclUnits bookingFcl9 = (BookingfclUnits) fclRates.get(k);
                                        if (bookingFcl9.getUnitType() != null && !bookingFcl9.getUnitType().getId().toString().equalsIgnoreCase(unitType)) {
                                            unitType = bookingFcl9.getUnitType().getId().toString();
                                            testFlag = true;
                                            b1.setAmount(b1.getAmount() * Double.parseDouble(bookingFcl9.getNumbers()));
                                            b1.setNumbers(bookingFcl9.getNumbers());
                                            if (null == b1.getMarkUp()) {
                                                b1.setMarkUp(0.00);
                                            }
                                            if (null == b1.getAmount()) {
                                                b1.setAmount(0.00);
                                            }
                                            b1.setSellRate(b1.getAmount() + b1.getMarkUp());
                                            b1.setUnitType(bookingFcl9.getUnitType());
                                            BookingfclUnits saveBookingfclUnits = new BookingfclUnits();
                                            PropertyUtils.copyProperties(saveBookingfclUnits, b1);
                                            bookingfclUnitsList1.add(saveBookingfclUnits);
                                            if ("PER TEU".equalsIgnoreCase(b1.getCostType()) && !"A=20".equalsIgnoreCase(saveBookingfclUnits.getUnitType().getCodedesc())) {
                                                saveBookingfclUnits.setAmount(saveBookingfclUnits.getAmount() * 2.00);
                                                saveBookingfclUnits.setMarkUp(saveBookingfclUnits.getMarkUp() * 2.00);
                                            }
                                            displayBookingList.add(saveBookingfclUnits);
                                            bookingfclUnitsList1.add(bookingFcl9);
                                        } else {
                                            bookingfclUnitsList1.add(bookingFcl9);
                                        }
                                    }
                                    if (!testFlag) {
                                        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
                                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(unitType));
                                        b1.setUnitType(genericCode);
                                        bookingfclUnitsList1.add(b1);
                                        displayBookingList.add(b1);
                                    }
                                }
                            }
                        } else {
                            bookingfclUnitsList1.add(b1);
                            displayBookingList.add(b1);
                            if (insFlag) {
                            }
                        }
                        if (request.getAttribute("msg") == null) {
                        } else {
                        }
                    } else if (b1.getCostType() != null && (b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) || b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")))) {
                        boolean flag = false;
                        if (perkglbsList.size() > 0 && !"N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                            for (int i = 0; i < perkglbsList.size(); i++) {
                                BookingfclUnits bookingFcl1 = (BookingfclUnits) perkglbsList.get(i);
                                if (bookingFcl1.getChgCode().equalsIgnoreCase(b1.getChgCode())) {
                                    flag = true;
                                    String msg = bookingFcl1.getChgCode() + " For " + bookingFcl1.getCostType() + "  already exists";
                                    request.setAttribute("msg", msg);
                                    break;
                                }
                            }
                        } else {
                            perkglbsList = new ArrayList();
                        }
                        if (!flag || perkglbsList.size() == 0) {
                            b1.setUnitType(null);
                            perkglbsList.add(b1);
                            displayBookingList.add(b1);
                        }
                    } else if (b1.getCostType() != null && b1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                        boolean flag = false;
                        if (otherChargesList.size() > 0 && !"N".equalsIgnoreCase(bookingFcl.getRatesNonRates())) {
                            for (int i = 0; i < otherChargesList.size(); i++) {
                                BookingfclUnits bookingFcl12 = (BookingfclUnits) otherChargesList.get(i);
                                if (bookingFcl12.getChgCode().equalsIgnoreCase(b1.getChgCode())) {
                                    flag = true;
                                    String msg = bookingFcl12.getChgCode() + " For " + bookingFcl12.getCostType() + "  already exists";
                                    request.setAttribute("msg", msg);
                                    break;
                                }
                            }
                            if (!flag) {
                                b1.setUnitType(null);
                                otherChargesList.add(b1);
                                displayBookingList.add(b1);
                            }
                        } else {
                            b1.setUnitType(null);
                            otherChargesList.add(b1);
                            displayBookingList.add(b1);
                        }
                    }
                }
            }
            if (request.getAttribute("msg") == null) {

                if (bookingfclUnitsList1.size() > 0) {
                   // bookingFclBC.chargesSave(bookingfclUnitsList1, bookingFcl);
                    // bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
                    // bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
                    /// bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(bookingfclUnitsList1, bookingFcl);
                } else {
                   // bookingFclBC.chargesSave(fclRates, bookingFcl);
                    // bookingFclBC.otherChargesSave(perkglbsList, bookingFcl);
                    // bookingFclBC.otherChargesSave(otherChargesList, bookingFcl);
                    // bookingFcl = bookingFclBC.saveCurrenciesIntoNewBookingFcl(fclRates, bookingFcl);
                }
              // bookingFcl = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargesList,bookingFcl);
                // bookingFclDAO.save(bookingFcl);

                if (chargeCode != null && (chargeCode.equalsIgnoreCase(FclBlConstants.ADVANCEFFCODE)
                        || chargeCode.equalsIgnoreCase(FclBlConstants.ADVANCESHIPPERCODE))) {
                    //bookingFclBC.calculatePBACharge(bookingFcl.getBookingId());
                }
                session.setAttribute("displayBookingList", displayBookingList);
                request.setAttribute("changeButtonName", "changeButtonName");

                if (tempButton.equalsIgnoreCase("closePopUp")) {//--not removing the session for Intermodal & LocalDrayage
                    //--do nothing---
                } else if (tempButton.equalsIgnoreCase("dontClose")) {
                    if (session.getAttribute("newBooking") != null) {
                        session.removeAttribute("newBooking");
                    }
                }
            }
        } else if (buttonValue != null && (buttonValue.equalsIgnoreCase("update") || buttonValue.equalsIgnoreCase("updateWithOutInsure"))) {
            String id = request.getParameter("id");
            StringBuilder message = new StringBuilder();
            BookingfclUnits bookingfclUnits = bookingfclUnitsDAO.findById(Integer.parseInt(id));
            BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(bookingfclUnits.getBookingNumber()));
                if (bookingfclUnits.getNewFlag() != null) {
                    newFlag = bookingfclUnits.getNewFlag();
                    bookingfclUnits.setNewFlag(newFlag);
                } else {
                    newFlag = "";
                }
             if (null != bookingfclUnits.getManualCharges() && !bookingfclUnits.getManualCharges().isEmpty()) {
                if (CommonUtils.isNotEmpty(amounts) && !newFlag.equals("IN")) {
                    bookingfclUnits.setAmount(Double.parseDouble(dbUtil.removeComma(amounts)));
                } else {
                    bookingfclUnits.setAmount(0.00);
                }
                if (CommonUtils.isNotEmpty(markUp)) {
                    bookingfclUnits.setMarkUp(Double.parseDouble(dbUtil.removeComma(markUp)));
                } else {
                    bookingfclUnits.setMarkUp(0.00);
                }
                amounts = null != amounts && !amounts.equals("") ? amounts : "0.00";
                markUp = null != markUp && !markUp.equals("") ? markUp : "0.00";
                bookingfclUnits.setSellRate(Double.parseDouble(dbUtil.removeComma(amounts)) + Double.parseDouble(dbUtil.removeComma(markUp)));
                bookingfclUnits.setProfit(bookingfclUnits.getSellRate() - bookingfclUnits.getBuyRate());
            } else if (bookingFcl.getSpotRate().equals("Y") && CommonUtils.notIn(bookingfclUnits.getNewFlag(), "new","D","IN","FF","PP")) {
                //0003101: Spot Rate Field Starts
                
                if (bookingFcl.getSpotRate().equals("Y") && CommonUtils.notIn(bookingfclUnits.getChargeFlag(), "M","D","I","F","P","CH")) {
                    if(bookingfclUnits.getChargeCodeDesc().equals("OCNFRT") && bookingChargesForm.getSpotRateChk().equals("off")
                            && bookingChargesForm.getStandardChk().equals("off")){
                        
                        bookingfclUnitsDAO.updateOfrSpotrate(bookingChargesForm, bookingfclUnits);
                        
                    }else if(bookingChargesForm.getSpotRateChk().equals("on")){
                        bookingfclUnits.setSpotRateAmt(0d);
                        bookingfclUnits.setSpotRateChk("on");
                        bookingfclUnits.setStandardChk("off");
                        Double sell=bookingfclUnits.getAmount()+ (null!=bookingfclUnits.getMarkUp()?bookingfclUnits.getMarkUp():0d);
                        bookingfclUnits.setSpotRateMarkUp(sell);
                        bookingfclUnits.setSellRate(bookingfclUnits.getSpotRateAmt() + bookingfclUnits.getSpotRateMarkUp());
                        bookingfclUnits.setProfit(bookingfclUnits.getSellRate() - bookingfclUnits.getBuyRate());
                    }else if(bookingChargesForm.getStandardChk().equals("on")){
                        bookingfclUnits.setStandardChk("on");
                        bookingfclUnits.setSpotRateChk("off");
                        bookingfclUnits.setSpotRateAmt(bookingfclUnits.getAmount());
                        bookingfclUnits.setSpotRateMarkUp(bookingfclUnits.getMarkUp());
                        bookingfclUnits.setSellRate(bookingfclUnits.getSpotRateAmt() + bookingfclUnits.getSpotRateMarkUp());
                        bookingfclUnits.setProfit(bookingfclUnits.getSellRate() - bookingfclUnits.getBuyRate());
                    }else if(null!=bookingChargesForm.getSpotRateAmt()){
                        bookingfclUnits.setSpotRateAmt(bookingChargesForm.getSpotRateAmt());
                        Double sell=bookingfclUnits.getAmount()+ (null!=bookingfclUnits.getMarkUp()?bookingfclUnits.getMarkUp():0d);
                        Double spotMarkUp=sell- (null!=bookingfclUnits.getSpotRateAmt()?bookingfclUnits.getSpotRateAmt():0d);
                        bookingfclUnits.setSpotRateMarkUp(spotMarkUp);
                        bookingfclUnits.setSellRate(bookingfclUnits.getSpotRateAmt() + bookingfclUnits.getSpotRateMarkUp());
                        bookingfclUnits.setProfit(bookingfclUnits.getSellRate() - bookingfclUnits.getBuyRate());
                    }
                }
                //0003101: Spot Rate Field Ends
            }
            if (bookingChargesForm.getVendorName() != null) {
                    bookingfclUnits.setAccountName(bookingChargesForm.getVendorName());
                }
                if (bookingChargesForm.getVendorNumber() != null) {
                    bookingfclUnits.setAccountNo(bookingChargesForm.getVendorNumber());
                }
                bookingfclUnits.setInvoiceNumber(bookingChargesForm.getInvoiceNumber());
                GenericCode genericCode = genDAO.findById(Integer.parseInt(currency));
                bookingfclUnits.setCurrency(genericCode.getCode());
                bookingfclUnits.setCurrency1(genericCode);

            bookingfclUnits.setVendorCheckBox(CommonUtils.isNotEmpty(bookingChargesForm.getVendorCheckBox()) ? bookingChargesForm.getVendorCheckBox() : "");
            bookingfclUnits.setComment(CommonFunctions.isNotNull(bookingChargesForm.getComment())
                    ? bookingChargesForm.getComment().toUpperCase() : bookingChargesForm.getComment());
            
            bookingfclUnitsDAO.save(bookingfclUnits);
            if (null != bookingChargesForm.getOldCost() && !bookingChargesForm.getOldCost().equals(amounts)) {
                double oldAmount = !"".equals(bookingChargesForm.getOldCost()) ? Double.parseDouble(dbUtil.removeComma(bookingChargesForm.getOldCost())) : 0.00;
                message.append(" Cost - ").append(oldAmount).append(" to ").append(bookingfclUnits.getAmount());
                hasUpdated = true;
            }
            if (null != bookingChargesForm.getOldSell() && !bookingChargesForm.getOldSell().equals(markUp)) {
                double oldMarkUp = !"".equals(bookingChargesForm.getOldSell()) ? Double.parseDouble(dbUtil.removeComma(bookingChargesForm.getOldSell())) : 0.00;
                message.append(" Sell - ").append(oldMarkUp).append(" to ").append(bookingfclUnits.getMarkUp());
                hasUpdated = true;
            }
            if (null != bookingChargesForm.getOldVendor() && !bookingChargesForm.getOldVendor().equals(bookingfclUnits.getAccountNo())) {
                message.append(" Vendor Name - ").append(bookingChargesForm.getOldVendor()).append(" to ").append(bookingfclUnits.getAccountNo());
                message.append(" Vendor Name - ").append(bookingChargesForm.getOldVendorName()).append(" to ").append(bookingfclUnits.getAccountName());
                hasUpdated = true;
            }
            if (CommonFunctions.isNotNull(bookingfclUnits.getComment()) && !bookingfclUnits.getComment().equals(bookingChargesForm.getOldComment())) {
                message.append(" Comment -").append(bookingfclUnits.getComment());
                hasUpdated = true;
            }
            noteDesc = "";
            if (hasUpdated) {
                if (bookingfclUnits.getUnitType() != null) {
                    message.append(" Unit Type -").append(bookingfclUnits.getUnitType().getCodedesc());
                }
                noteDesc = "UPDATED -> Charge Code - " + bookingfclUnits.getChargeCodeDesc() + " Cost Type - " + bookingfclUnits.getCostType();
                noteDesc += " " + message.toString();
            }
            if (!"".equals(noteDesc)) {
                Notes note = new Notes();
                note.setModuleId(NotesConstants.FILE);
                note.setModuleRefId("" + bookingFcl.getFileNo());
                note.setNoteType(NotesConstants.NOTES_TYPE_EVENT);
                note.setUpdateDate(new Date());
                note.setUpdatedBy(user.getLoginName());
                note.setNoteDesc(noteDesc);
                new NotesBC().saveNotes(note);
            }

            if (bookingfclUnits.getChargeCodeDesc() != null && (bookingfclUnits.getChargeCodeDesc().equalsIgnoreCase(FclBlConstants.ADVANCEFFCODE)
                    || bookingfclUnits.getChargeCodeDesc().equalsIgnoreCase(FclBlConstants.ADVANCESHIPPERCODE))) {
                bookingFclBC.calculatePBACharge(new Integer(bookingfclUnits.getBookingNumber()));
            }
            if (null != newFlag && newFlag.equals("IN") || (buttonValue.equalsIgnoreCase("updateWithOutInsure"))) {
                request.setAttribute("buttonvalue", "dontAddInsure");
            } else {
                request.setAttribute("buttonvalue", "completed");
            }
            request.setAttribute("bkgNo", bookingfclUnits.getBookingNumber());

        }
        if (buttonValue != null && (buttonValue.equalsIgnoreCase("updateAll") || buttonValue.equalsIgnoreCase("updateAllWithOutInsure"))) {
            String id = request.getParameter("id");
            BookingfclUnits bookingfclUnits = bookingfclUnitsDAO.findById(Integer.parseInt(id));
            List tempUnitList = bookingfclUnitsDAO.getbookingFclToUpdate(bookingfclUnits.getBookingNumber(), bookingfclUnits.getChgCode());
            for (Iterator iter = tempUnitList.iterator(); iter.hasNext();) {
                BookingfclUnits tempBookingfclUnits = (BookingfclUnits) iter.next();
                BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(tempBookingfclUnits.getBookingNumber()));
                StringBuilder message = new StringBuilder();
                hasUpdated = false;
                if (bookingfclUnits.getNewFlag() != null) {
                    newFlag = bookingfclUnits.getNewFlag();
                    tempBookingfclUnits.setNewFlag(newFlag);
                } else {
                    newFlag = "";
                }
                if (null != bookingfclUnits.getManualCharges() && !bookingfclUnits.getManualCharges().isEmpty()) {
                    if (CommonUtils.isNotEmpty(amounts) && !newFlag.equals("IN")) {
                        tempBookingfclUnits.setAmount(Double.parseDouble(dbUtil.removeComma(amounts)));
                    } else {
                        tempBookingfclUnits.setAmount(0.00);
                    }
                    if (newFlag != null && !newFlag.equals("") && !newFlag.equals("D")) {
                        tempBookingfclUnits.setMarkUp(CommonFunctions.isNotNull(markUp) ? Double.parseDouble(dbUtil.removeComma(markUp)) : 0.00);
                    }
                    amounts = null != amounts && !amounts.equals("") ? amounts : "0.00";
                    markUp = null != markUp && !markUp.equals("") ? markUp : "0.00";
                    tempBookingfclUnits.setSellRate(Double.parseDouble(dbUtil.removeComma(amounts)) + Double.parseDouble(dbUtil.removeComma(markUp)));
                    tempBookingfclUnits.setProfit(tempBookingfclUnits.getSellRate() - tempBookingfclUnits.getBuyRate());
                }
                if (bookingChargesForm.getVendorName() != null) {
                    tempBookingfclUnits.setAccountName(bookingChargesForm.getVendorName());
                }
                if (bookingChargesForm.getVendorNumber() != null) {
                    tempBookingfclUnits.setAccountNo(bookingChargesForm.getVendorNumber());
                }
                tempBookingfclUnits.setComment(CommonFunctions.isNotNull(bookingChargesForm.getComment())
                        ? bookingChargesForm.getComment().toUpperCase() : bookingChargesForm.getComment());
                tempBookingfclUnits.setVendorCheckBox(CommonUtils.isNotEmpty(bookingChargesForm.getVendorCheckBox()) ? bookingChargesForm.getVendorCheckBox() : "");
                tempBookingfclUnits.setInvoiceNumber(bookingChargesForm.getInvoiceNumber());
                GenericCode genericCode = genDAO.findById(Integer.parseInt(currency));
                tempBookingfclUnits.setCurrency(genericCode.getCode());
                tempBookingfclUnits.setCurrency1(genericCode);
                bookingfclUnitsDAO.update(tempBookingfclUnits);
                if (null != bookingChargesForm.getOldCost() && !bookingChargesForm.getOldCost().equals(amounts)) {
                    double oldAmount = !"".equals(bookingChargesForm.getOldCost()) ? Double.parseDouble(dbUtil.removeComma(bookingChargesForm.getOldCost())) : 0.00;
                    message.append(" Cost - ").append(oldAmount).append(" to ").append(tempBookingfclUnits.getAmount());
                    hasUpdated = true;
                }
                if (null != bookingChargesForm.getOldSell() && !bookingChargesForm.getOldSell().equals(markUp)) {
                    double oldMarkUp = !"".equals(bookingChargesForm.getOldSell()) ? Double.parseDouble(dbUtil.removeComma(bookingChargesForm.getOldSell())) : 0.00;
                    message.append(" Sell - ").append(oldMarkUp).append(" to ").append(tempBookingfclUnits.getMarkUp());
                    hasUpdated = true;
                }
                if (null != bookingChargesForm.getOldVendor() && !bookingChargesForm.getOldVendor().equals(tempBookingfclUnits.getAccountNo())) {
                    message.append(" Vendor Name - ").append(bookingChargesForm.getOldVendor()).append(" to ").append(tempBookingfclUnits.getAccountNo());
                    message.append(" Vendor Name - ").append(bookingChargesForm.getOldVendorName()).append(" to ").append(tempBookingfclUnits.getAccountName());
                    hasUpdated = true;
                }
                if (CommonFunctions.isNotNull(tempBookingfclUnits.getComment()) && !tempBookingfclUnits.getComment().equals(bookingChargesForm.getOldComment())) {
                    message.append(" Comment -").append(tempBookingfclUnits.getComment());
                    hasUpdated = true;
                }
                noteDesc = "";
                if (hasUpdated) {
                    if (tempBookingfclUnits.getUnitType() != null) {
                        message.append(" Unit Type -").append(tempBookingfclUnits.getUnitType().getCodedesc());
                    }
                    noteDesc = "UPDATED -> Charge Code - " + tempBookingfclUnits.getChargeCodeDesc() + " Cost Type - " + tempBookingfclUnits.getCostType();
                    noteDesc += " " + message.toString();
                }
                if (!"".equals(noteDesc)) {
                    Notes note = new Notes();
                    note.setModuleId(NotesConstants.FILE);
                    note.setModuleRefId("" + bookingFcl.getFileNo());
                    note.setNoteType(NotesConstants.NOTES_TYPE_EVENT);
                    note.setUpdateDate(new Date());
                    note.setUpdatedBy(user.getLoginName());
                    note.setNoteDesc(noteDesc);
                    new NotesBC().saveNotes(note);
                }
                if (bookingfclUnits.getChargeCodeDesc() != null && (bookingfclUnits.getChargeCodeDesc().equalsIgnoreCase(FclBlConstants.ADVANCEFFCODE)
                        || bookingfclUnits.getChargeCodeDesc().equalsIgnoreCase(FclBlConstants.ADVANCESHIPPERCODE))) {
                    bookingFclBC.calculatePBACharge(new Integer(bookingfclUnits.getBookingNumber()));
                }
            }
            if (null != newFlag && newFlag.equals("IN") || ((buttonValue.equalsIgnoreCase("updateAllWithOutInsure")))) {
                request.setAttribute("buttonvalue", "dontAddInsure");
            } else {
                request.setAttribute("buttonvalue", "completed");
            }
            request.setAttribute("bkgNo", bookingfclUnits.getBookingNumber());
        } else if (buttonValue != null && buttonValue.equalsIgnoreCase("close")) {
            if (session.getAttribute("displayBookingList") != null) {
                session.removeAttribute("displayBookingList");
            }
            if (session.getAttribute("newBooking") != null) {
                session.removeAttribute("newBooking");
            }
            if (session.getAttribute("hashMap") != null) {
                session.removeAttribute("hashMap");
            }
            request.setAttribute("buttonvalue", "dontAddInsure");
        } else if (buttonValue != null && buttonValue.equalsIgnoreCase("SaveInTobooking")) {
            BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(bookingNo));
            if (session.getAttribute("displayBookingList") != null && bookingFcl.getBookingId() != null) {
                List chargesList = (List) session.getAttribute("displayBookingList");
                for (Iterator iter = chargesList.iterator(); iter.hasNext();) {
                    BookingfclUnits bookingfclUnits = (BookingfclUnits) iter.next();
                    bookingfclUnits.setBookingNumber(bookingFcl.getBookingId().toString());
                    bookingfclUnits.setStandardCharge("Y");
                    if (null != bookingfclUnits.getUnitType()) {
                        List l = bookingfclUnitsDAO.getStandardCharge(bookingfclUnits.getBookingNumber(), bookingfclUnits.getUnitType().getId());
                        if (!l.isEmpty()) {
                            BookingfclUnits bfu = (BookingfclUnits) l.get(0);
                            bookingfclUnits.setSpecialEquipment(bfu.getSpecialEquipment());
                            bookingfclUnits.setSpecialEquipmentUnit(bfu.getSpecialEquipmentUnit());
                        }
                    }
                    bookingfclUnitsDAO.save(bookingfclUnits);
                    if (null != bookingfclUnits.getUnitType()) {
                        if ("N".equals(bookingFcl.getRatesNonRates())) {
                            if (CommonUtils.isNotEmpty(bookingFcl.getSelectedUnits())) {
                                if (!bookingFcl.getSelectedUnits().contains(bookingfclUnits.getUnitType().getCodedesc())) {
                                    bookingFcl.setSelectedUnits(bookingFcl.getSelectedUnits() + "," + bookingfclUnits.getUnitType().getCodedesc());
                                }
                            } else {
                                bookingFcl.setSelectedUnits(bookingfclUnits.getUnitType().getCodedesc());
                            }
                        }
                        bookingfclUnitsDAO.saveManualSpecialEquipmentCharges(bookingfclUnits, bookingfclUnits.getUnitType().getCode());
                    }
                    new NotesBC().saveNotesWhileAddingCharges(NotesConstants.QUOTE, bookingFcl.getFileNo().toString(), userName, bookingfclUnits);

                    if (bookingfclUnits.getChargeCodeDesc() != null && (bookingfclUnits.getChargeCodeDesc().equalsIgnoreCase(FclBlConstants.ADVANCEFFCODE)
                            || bookingfclUnits.getChargeCodeDesc().equalsIgnoreCase(FclBlConstants.ADVANCESHIPPERCODE))) {
                        BookingfclUnits bookingfclUnits2 = bookingFclBC.calculatePBACharge(bookingFcl.getBookingId());
                        new NotesBC().saveNotesWhileAddingCharges(NotesConstants.QUOTE, bookingFcl.getFileNo().toString(), userName, bookingfclUnits2);
                    }

                }
            }
            if (bookingChargesForm.getRampCheck() != null && bookingChargesForm.getRampCheck().equalsIgnoreCase("on")) {
                bookingFcl.setRampCheck("on");
            }
            if (session.getAttribute("displayBookingList") != null) {
                session.removeAttribute("displayBookingList");
            }
            if (session.getAttribute("newBooking") != null) {
                session.removeAttribute("newBooking");
            }
            if (session.getAttribute("hashMap") != null) {
                session.removeAttribute("hashMap");
            }
            request.setAttribute("buttonvalue", "completed");
        } else if (buttonValue != null && buttonValue.equalsIgnoreCase("closeSave")) {
            BookingFcl bookingFcl = bookingFclDAO.findById(Integer.parseInt(bookingNo));

            if (session.getAttribute("displayBookingList") != null) {
                session.removeAttribute("displayBookingList");
            }
            if (session.getAttribute("newBooking") != null) {
                session.removeAttribute("newBooking");
            }
            if (session.getAttribute("hashMap") != null) {
                session.removeAttribute("hashMap");
            }
            request.setAttribute("buttonvalue", "completed");
        }
        return mapping.findForward("charges");
    }
}
