/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.accounting.APBankAccountBC;
import com.gp.cong.logisoft.domain.User;
import com.gp.cvst.logisoft.struts.form.BankAccountForm;
import java.awt.print.PrinterJob;
import java.util.ArrayList;
import javax.print.PrintService;
import org.apache.struts.util.LabelValueBean;

/** 
 * MyEclipse Struts
 * Creation date: 02-11-2009
 * 
 * XDoclet definition:
 * @struts.action path="/bankAccount" name="bankAccountForm" input="/jsps/AccountsPayables/bankAccount.jsp" scope="request"
 */
public class BankAccountAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        BankAccountForm bankAccountForm = (BankAccountForm) form;// TODO Auto-generated method stub
        String buttonAction = bankAccountForm.getButton();
        APBankAccountBC aPBankAccountBC = new APBankAccountBC();
        String forward = null;
        HttpSession session = request.getSession();
        if (buttonAction != null && buttonAction.equals("saveBankAccount")) {
            User loginUser = (User) session.getAttribute("loginuser");
            bankAccountForm.setLoginName(loginUser.getLoginName());
            request.setAttribute("bankAccountList", aPBankAccountBC.saveBackAccount(bankAccountForm, loginUser));
            request.setAttribute("bankAccount", "bankAccount");
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("addBankDetails")) {
            request.setAttribute("addBankDetails", "addBankDetails");
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("searchBank")) {
            request.setAttribute("bankAccountDetails", bankAccountForm);
            request.setAttribute("bankAccountList", aPBankAccountBC.getackAccountList(bankAccountForm));
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("getBankDetails")) {
            request.setAttribute("bankAccountDetails", bankAccountForm);
            request.setAttribute("bankAccountList", aPBankAccountBC.getackAccountList(bankAccountForm));
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("editBankDetails")) {
            bankAccountForm = aPBankAccountBC.getBankDetail(bankAccountForm);
            request.setAttribute("bankAccountForm", bankAccountForm);
            request.setAttribute("addBankDetails", "addBankDetails");
            if (null != bankAccountForm && null != bankAccountForm.getUserName()) {
                String[] userNameArray = bankAccountForm.getUserName().split(",");
                Arrays.sort(userNameArray);
                request.setAttribute("userNameArray", userNameArray);
            }
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("clearBankDetails")) {
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("updateBankAccount")) {
            User loginUser = (User) session.getAttribute("loginuser");
            bankAccountForm.setLoginName(loginUser.getLoginName());
            request.setAttribute("bankAccountList", aPBankAccountBC.updateBackAccount(bankAccountForm,loginUser));
            request.setAttribute("bankAccountForm", new BankAccountForm());
            request.setAttribute("bankAccount", "bankAccount");
            forward = "bankAccountPage";
        } else if (buttonAction != null && buttonAction.equals("deleteBankDetails")) {
            aPBankAccountBC.deleteBankDetails(bankAccountForm);
            request.setAttribute("message", "BankDetail has deleted");
            forward = "bankAccountPage";
        }

        PrintService[] printServices = PrinterJob.lookupPrintServices();
        List<LabelValueBean> printersList = new ArrayList<LabelValueBean>();
        printersList.add(new LabelValueBean("Select One", ""));
        for (PrintService printService : printServices) {
            printersList.add(new LabelValueBean(printService.getName(), printService.getName()));
        }
        request.setAttribute("printersList", printersList);
        return mapping.findForward(forward);
    }
}
