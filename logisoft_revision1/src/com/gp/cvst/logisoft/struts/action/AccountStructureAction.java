   /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cvst.logisoft.reports.dto.ReportDTO;
import com.gp.cvst.logisoft.beans.AccountStructureBean;
import com.gp.cvst.logisoft.beans.SegmentvalueBean;
import com.gp.cvst.logisoft.domain.AcctStructure;
import com.gp.cvst.logisoft.domain.Segment;
import com.gp.cvst.logisoft.domain.SegmentValues;
import com.gp.cvst.logisoft.hibernate.dao.AccountDetailsDAO;
import com.gp.cvst.logisoft.hibernate.dao.AcctStructureDAO;
import com.gp.cvst.logisoft.hibernate.dao.SegmentDAO;
import com.gp.cvst.logisoft.hibernate.dao.SegmentValuesDAO;
import com.gp.cvst.logisoft.reports.data.EconoHelper;
import com.gp.cvst.logisoft.reports.dto.AccountStructureDTO;
import com.gp.cvst.logisoft.struts.form.AccountStructureForm;
import com.gp.cvst.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 04-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/accountingStructureAction" name="AccountingstructureForm" input="/jsps/Accounting/AccountStructure.jsp" scope="request" validate="true"
 */
public class AccountStructureAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {

        HttpSession session = ((HttpServletRequest) request).getSession();
        AccountStructureForm accountStructureform = (AccountStructureForm) form;
        AcctStructure acct = new AcctStructure();
        AccountStructureBean ASB = new AccountStructureBean();
        DBUtil dbutil = new DBUtil();
        AcctStructureDAO AsDAO = new AcctStructureDAO();
        SegmentDAO segDAO = new SegmentDAO();
        Segment segdomain = new Segment();
        AccountStructureBean coab = new AccountStructureBean();
        SegmentvalueBean svb = new SegmentvalueBean();

        String acctStruct = accountStructureform.getAcctstructure();
        String groupDesc = accountStructureform.getGroupdesc();
        String segmentCode = accountStructureform.getSegmentcode();
        String segmentlength = accountStructureform.getSegmentlength();
        String divsion = accountStructureform.getDivision();
        String editdesc = accountStructureform.getEditdesc();
        String editcode = accountStructureform.getScode();
        String index = accountStructureform.getIndex();
        int acctid = accountStructureform.getId();
        int editlen = accountStructureform.getEditlen();

        String forwardName = "";
        String buttonval = "";
        String row = "";
        String buttonValue = accountStructureform.getButtonValue();
        String ABC = accountStructureform.getAbc();
        String acct1 = acctStruct;
        String segCodeBean = "";
        String scode = "";
        String svalue = "";

        List deleteacctstruct = null;

        int acctstructid = 0;

        if (ABC.length() > 0) {
            int n = ABC.indexOf(';');
            buttonval = ABC.substring(0, n);
            row = ABC.substring(n + 1, ABC.length());
        }
        if (buttonValue.equals("AcctStructureSelected")) {
            String acctstructdesc = "";
            if (!acctStruct.equals(" ")) {
                acctstructdesc = AsDAO.getAcctStructDesc1(acctStruct);
            }
            request.setAttribute("AcctStruct", acctStruct);
            request.setAttribute("acctStructDesc", acctstructdesc);
            int acctStruct1 = Integer.parseInt(acctStruct);
            //to remove values seglist,segvaluelist
            session.removeAttribute("AcctSturct");
            session.removeAttribute("valuelist");
            // to remove vales in Add value Popup of a Segment
            session.removeAttribute("addvaluelist");
            // to remove vales in Add Segment Popup of a Structure
            session.removeAttribute("addseglist");

            // Code to show all the Segments for an AccountStructure.
            List AcctStruct = (List) segDAO.findForShow(acctStruct);
            session.setAttribute("AcctSturct", AcctStruct);
            request.setAttribute("AcctStruct", acctStruct);

            //To get List Values of First Segment by Default
            if (!AcctStruct.isEmpty()) {
                coab = (AccountStructureBean) AcctStruct.get(0);
                segCodeBean = coab.getSeg_code();
                SegmentValues segmentDomain = new SegmentValues();
                String valueid = (String) segDAO.selectsegid(acctStruct, segCodeBean);
                SegmentValuesDAO segvaluesDAO = new SegmentValuesDAO();
                Segment segment = new Segment();
                List segvalueid = (List) segvaluesDAO.segListValue(valueid);

                session.setAttribute("valuelist", segvalueid);
                request.setAttribute("vsegcode", segCodeBean);
            }


            forwardName = "success";
        } else if (buttonValue.equals("updateAS")) {
            Integer id = 0;
            if (!acctStruct.equals(" ")) {
                id = Integer.parseInt(acctStruct);
            }
            acct = AsDAO.findById(id);

            if (acct != null) {
                acct.setAcctStructureDesc(groupDesc);
                AsDAO.update(acct);
                request.setAttribute("acctStructDesc", groupDesc);
            }
            request.setAttribute("AcctStruct", acctStruct);

            forwardName = "success";
        } else if (buttonValue.equals("editshow1")) {
            ArrayList Abc = (ArrayList) session.getAttribute("AcctSturct");
            int in = Integer.parseInt(index);
            String acctid1 = String.valueOf(acctid);
            String acctid2 = String.valueOf(coab.getId());
            coab = (AccountStructureBean) Abc.get(in);
            coab.getAcct_Struct_id();
            segCodeBean = coab.getSeg_code();
            coab.getAcct_Struct_id();
            coab.getSeg_desc();
            coab.getSeg_leng();
            request.setAttribute("segmentcode1", coab.getSeg_code());
            accountStructureform.setSegmentcode(coab.getSeg_code());
            accountStructureform.setSegmentlength(String.valueOf((coab.getSeg_leng())));
            accountStructureform.setSegmentdesc(coab.getSeg_desc());
            session.setAttribute("segmentcode", coab.getSeg_code());
            session.setAttribute("segmentDesc", coab.getSeg_desc());
            session.setAttribute("segmentLength", String.valueOf((coab.getSeg_leng())));
            session.setAttribute("acctid1", String.valueOf(coab.getId()));
            request.setAttribute("vsegcode", editcode);
            request.setAttribute("aclist", coab);
            request.setAttribute("AcctStruct", acctStruct);
            request.setAttribute("acctStructDesc", groupDesc);
            forwardName = "success";
        } else if (buttonValue.equals("editdesc")) {
            forwardName = "success";
        } else if (buttonValue.equals("showvalues")) {
            List addvalue = (List) session.getAttribute("AcctSturct");
            int in1 = Integer.parseInt(index);
            --in1;
            coab = (AccountStructureBean) addvalue.get(in1);
            segCodeBean = coab.getSeg_code();
            SegmentValues segmentDomain = new SegmentValues();
            String valueid = (String) segDAO.selectsegid(acctStruct, segCodeBean);
            SegmentValuesDAO segvaluesDAO = new SegmentValuesDAO();
            Segment segment = new Segment();
            List segvalueid = (List) segvaluesDAO.segListValue(valueid);
            session.setAttribute("valuelist", segvalueid);
            request.setAttribute("vsegcode", segCodeBean);
            if ((List) session.getAttribute("valuelist") != null) {

                List seg = (List) session.getAttribute("AcctSturct");
                coab = (AccountStructureBean) seg.get(in1);
                int id = coab.getId();
                session.setAttribute("id", id);
            }
            request.setAttribute("AcctStruct", acctStruct);
            request.setAttribute("acctStructDesc", groupDesc);
            forwardName = "success";
        } else if (buttonValue.equals("deleteSegment")) {
            int index1 = Integer.parseInt(index);
            --index1;

            if ((List) session.getAttribute("AcctSturct") != null) {
                List deleteseg = (List) session.getAttribute("AcctSturct");
                coab = (AccountStructureBean) deleteseg.get(index1);
                int id = coab.getId();
                coab.getSeg_code();
                coab.getSeg_desc();
                coab.getSeg_leng();
                boolean flag = segDAO.deleteseg(coab);
                deleteseg.get(index1);
                if (flag == true) {
                    deleteseg.remove(index1);
                }
                session.setAttribute("AcctSturct", deleteseg);
                request.setAttribute("AcctStruct", acctStruct);
                request.setAttribute("acctStructDesc", groupDesc);
                forwardName = "success";

            }
        } else if (buttonValue.equals("deleteSegmentValue")) {
            int index1 = Integer.parseInt(index);
            if (session.getAttribute("valuelist") != null) {
                List dltSegValues = (List) session.getAttribute("valuelist");
                svb = (SegmentvalueBean) dltSegValues.get(index1);

                if (svb != null) {
                    SegmentValuesDAO svDAO = new SegmentValuesDAO();
                    SegmentValues sv = new SegmentValues();
                    sv = svDAO.findById(svb.getId());
                    if (sv != null) {
                        svDAO.delete(sv);
                        dltSegValues.remove(svb);
                        session.setAttribute("valuelist", dltSegValues);
                    }
                }

            }
            request.setAttribute("vsegcode", editcode);
            request.setAttribute("AcctStruct", acctStruct);
            request.setAttribute("acctStructDesc", groupDesc);
            forwardName = "success";
        } else if (buttonValue.equals("deleteacct")) {
            int acctStruct1 = 0;
            if (acctStruct != null && !acctStruct.equals("")) {
                acctStruct1 = Integer.parseInt(acctStruct);
            }
            List deleteseg = null;
            AcctStructureDAO acctStructureDAO = new AcctStructureDAO();
            AcctStructure accStruct = new AcctStructure();
            accStruct = acctStructureDAO.findById(acctStruct1);
            AccountDetailsDAO adDAO = new AccountDetailsDAO();

            String accstructure = "acctStructure";
            deleteseg = adDAO.findByProperty(accstructure, acctStruct);

            if (!deleteseg.isEmpty()) {

                request.setAttribute("msg", "Can not Delete this Account Structure,It is being used by an Account");
            } else {

                if (accStruct != null) {
                    boolean flag = AsDAO.deleteacctstructure(accStruct);
                    //After Deleting an Account Structure Removing Session Values
                    session.removeAttribute("AcctSturct");
                    session.removeAttribute("valuelist");
                }
            }
            request.setAttribute("AcctStruct", acctStruct);
            request.setAttribute("acctStructDesc", groupDesc);
            forwardName = "success";
        } else if (buttonValue.equals("print")) {
            //added by Bhanu
            List acctList = null;
            AccountStructureDTO acctStructureDTO = new AccountStructureDTO();
            AcctStructureDAO acctStructureDAO = new AcctStructureDAO();
            acctList = (List) acctStructureDAO.ForPrint(acctStruct);
            int aa = acctList.size();
            if (aa > 0) {
                acctStructureDTO = (AccountStructureDTO) acctList.get(0);
                //String segmentDesc=(String)acctStructureDTO.getSeg_desc();

                HashMap hm = new HashMap();
                String reqReportName = "AccountStructure";
                String ReportName = reqReportName + acctStruct;


                ReportDTO rdto = EconoHelper.sendToReport(hm, true, reqReportName + ".jasper", true, ReportName, acctList);
                session.setAttribute(EconoHelper.REPORT_DTO_SESSION_KEY, rdto);
                redirectToReport(request, response);
                forwardName = null;
            } else {
                // String message2="This AccountStructure Is Not Having Any Segment Values";
                //request.setAttribute("message2",message2);
                forwardName = "success";
            }
        }
        request.setAttribute("buttonValue", buttonValue);
        // ends buttonvalue cancel
        //return mapping.findForward(forwardName);
        return mapping.findForward(forwardName);
    }

    public void redirectToReport(HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.sendRedirect(request.getContextPath() + "/report");
    }
}
