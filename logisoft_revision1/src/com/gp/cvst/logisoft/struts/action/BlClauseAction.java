/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cvst.logisoft.domain.BlClauses;
import com.gp.cvst.logisoft.domain.FclBl;
import com.gp.cvst.logisoft.hibernate.dao.FclBlDAO;
import com.gp.cvst.logisoft.struts.form.BlClauseForm;

/** 
 * MyEclipse Struts
 * Creation date: 11-05-2008
 * 
 * XDoclet definition:
 * @struts.action path="/blClause" name="blClauseForm" input="/jsps/fclQuotes/BlClause.jsp" scope="request" validate="true"
 */
public class BlClauseAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BlClauseForm blClauseForm = (BlClauseForm) form;// TODO Auto-generated method stub
		HttpSession session = (request).getSession(true);
		String buttonValue=blClauseForm.getButtonValue();
		String descirption[]=blClauseForm.getDescription();
		String text[]=blClauseForm.getText();
		List addclauseslist=new ArrayList();
		String bol=blClauseForm.getBol();
		request.setAttribute("bol", bol);
		GenericCodeDAO batchDAO=new GenericCodeDAO();
		FclBlDAO fclBlDAO=new FclBlDAO();
		 if(request.getParameter("button")!=null && request.getParameter("button").equals("NewFCLBL")){
			 String bol1=request.getParameter("bol");
			 FclBl fclBl=fclBlDAO.findById(Integer.parseInt(bol1));
			 if(fclBl.getFclBlClauses()!=null){
				 Iterator iter=fclBl.getFclBlClauses().iterator();
				 while(iter.hasNext()){
					 BlClauses blClauses=(BlClauses)iter.next();
					 addclauseslist.add(blClauses);
				 }
			 }
			 request.setAttribute("addclauseslist", addclauseslist);
			 request.setAttribute("bol", bol1);
		 }
		 else{
			 FclBl fclBl=fclBlDAO.findById(Integer.parseInt(bol));
			 if(fclBl.getFclBlClauses()!=null){
				 Iterator iter=fclBl.getFclBlClauses().iterator();
				 while(iter.hasNext()){
					 BlClauses blClauses=(BlClauses)iter.next();
					 addclauseslist.add(blClauses);
				 }
			 }
			 request.setAttribute("addclauseslist", addclauseslist);
		for(int i=0;i<addclauseslist.size();i++)
		{
			BlClauses blClauses=(BlClauses)addclauseslist.get(i);
			if(request.getParameter("clause"+i)!=null)
			{
			if(blClauses.getCode()!=null && !blClauses.getCode().equals(request.getParameter("clause"+i)))
			{
			if(request.getParameter("clause"+i)!=null && !request.getParameter("clause"+i).equals(""))
			{
				String Clause=request.getParameter("clause"+i);
				List accountList = batchDAO.findForGenericAction(21,Clause,null);
				if(accountList!=null && accountList.size()>0)
				{
				GenericCode gen=(GenericCode)accountList.get(0);
				blClauses.setCode(gen.getCode());
				blClauses.setDesciption(gen.getCodedesc());
				blClauses.setText(gen.getField1());
				}
				else
				{
					blClauses.setCode(request.getParameter("clause"+i));
					blClauses.setDesciption(descirption[i]);
					blClauses.setText(text[i]);
				}
			}
			}
			else if(!request.getParameter("clause"+i).equals(""))
			{
				String Clause=request.getParameter("clause"+i);
				List accountList = batchDAO.findForGenericAction(21,Clause,null);
				if(accountList!=null && accountList.size()>0)
				{
				GenericCode gen=(GenericCode)accountList.get(0);
				blClauses.setCode(gen.getCode());
				blClauses.setDesciption(gen.getCodedesc());
				if(gen.getField1()!=null && !gen.getField1().equals(""))
				{
				blClauses.setText(gen.getField1());
				}
				else
				{
					blClauses.setText(text[i]);
				}
				}
			}
			}
			else
			{
				blClauses.setCode(request.getParameter("clause"+i));
				blClauses.setDesciption(descirption[i]);
				blClauses.setText(text[i]);
			}
		}
		if(buttonValue.equals("popup"))
		{
			
		}
		if(buttonValue.equals("previous"))
		{
			request.setAttribute("buttonValue", "completed");
		}
		if(buttonValue.equals("add"))
		{
			
			addclauseslist.add(new BlClauses());
			Set fclBlClausesSet=new LinkedHashSet<BlClauses>();
			for (Iterator iter = addclauseslist.iterator(); iter.hasNext();) {
				BlClauses blClauses = (BlClauses) iter.next();
				fclBlClausesSet.add(blClauses);
			}
			fclBl.setFclBlClauses(fclBlClausesSet);
			fclBlDAO.update(fclBl);
			request.setAttribute("addclauseslist", addclauseslist);
		}
		 }
		return mapping.findForward("back");
	}
}