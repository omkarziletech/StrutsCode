/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonConstants;
import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.DateUtils;
import com.gp.cong.common.GenerateFileNumber;
import com.gp.cong.logisoft.bc.accounting.ReportConstants;
import com.gp.cong.logisoft.bc.fcl.FclBlConstants;
import com.gp.cong.logisoft.bc.fcl.FclBlUtil;
import com.gp.cong.logisoft.bc.fcl.ImportBc;
import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.bc.fcl.QuotationConstants;
import com.gp.cong.logisoft.bc.fcl.QuotationDTO;
import com.gp.cong.logisoft.bc.fcl.QuotationReportBC;
import com.gp.cong.logisoft.bc.fcl.QuoteDwrBC;
import com.gp.cong.logisoft.bc.scheduler.ProcessInfoBC;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Notes;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.TradingPartnerTemp;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.NotesDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.util.StringFormatter;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.TransactionBean;
import com.gp.cvst.logisoft.domain.BookingFcl;
import com.gp.cvst.logisoft.domain.Charges;
import com.gp.cvst.logisoft.domain.FclBl;
import com.gp.cvst.logisoft.domain.FclBlCharges;
import com.gp.cvst.logisoft.domain.FclBlContainer;
import com.gp.cvst.logisoft.domain.FclBlCostCodes;
import com.gp.cvst.logisoft.domain.FileNumberForQuotaionBLBooking;
import com.gp.cvst.logisoft.domain.HazmatMaterial;
import com.gp.cvst.logisoft.domain.Quotation;
import com.gp.cvst.logisoft.hibernate.dao.BookingFclDAO;
import com.gp.cvst.logisoft.hibernate.dao.ChargesDAO;
import com.gp.cvst.logisoft.hibernate.dao.FclBlDAO;
import com.gp.cvst.logisoft.hibernate.dao.QuotationDAO;
import com.gp.cvst.logisoft.struts.form.QuotesForm;
import com.gp.cvst.logisoft.struts.form.SearchQuotationForm;
import com.logiware.action.EventAction;
import com.logiware.fcl.form.SessionForm;
import com.logiware.hibernate.dao.CustomerDefaultChargesDAO;
import com.logiware.hibernate.domain.CustomerDefaultCharges;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

/**
 * MyEclipse Strutssystem Creation date: 07-28-2008
 *
 * XDoclet definition:
 *
 * @struts.action path="/editQuotes" name="editQuotesform"
 * input="/jsps/fclQuotes/EditQuote.jsp" scope="request"
 * @struts.action-forward name="success" path="/jsps/fclQuotes/EditQuote.jsp"
 */
public class EditQuotesAction extends EventAction {
    /*
     * Generated Methods
     */

    /**
     *
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        super.registerEvent(form, request, response);
        SearchQuotationForm editQuotesform = (SearchQuotationForm) form;// TODO Auto-generated method stub
        HttpSession session = request.getSession(true);
        MessageResources messageResources = getResources(request);
        String forwardName = "";
        String importantDisclosures = "off";
        String docsInquiry = "off";
        String buttonValue = editQuotesform.getButtonValue();
        request.setAttribute("buttonValue", buttonValue);
        String defaultAgent = editQuotesform.getDefaultAgent();
        String soc = editQuotesform.getSoc();
        String hazmat = editQuotesform.getHazmat();
        String localdryage = editQuotesform.getLocaldryage();
        String insurance = editQuotesform.getInsurance();
        String spclEquipment = editQuotesform.getSpecialequipment();
        String carrierPrint = editQuotesform.getCarrierPrint();
        String printDesc = editQuotesform.getPrintDesc();
        String commodityPrint = editQuotesform.getCommodityPrint();
        ChargesDAO cDao = new ChargesDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        String outofgate = editQuotesform.getOutofgate();
        String deductFFcomm = editQuotesform.getDeductFFcomm();
        String customertoprovideSED = editQuotesform.getCustomertoprovideSED();
        String intermodel = editQuotesform.getIntermodel();
        String inland = editQuotesform.getInland();
        String originCheck = editQuotesform.getOriginCheck();
        String polCheck = editQuotesform.getPolCheck();
        String podCheck = editQuotesform.getPodCheck();
        String rampCheck = editQuotesform.getRampCheck();
        String destinationCheck = editQuotesform.getDestinationCheck();
        String finalized = editQuotesform.getFinalized();
        String from = editQuotesform.getFrom();
        String ssline = editQuotesform.getSsline();
        String newClient = editQuotesform.getNewClient();
        String bookedDate = editQuotesform.getBookedDate();
        String brand = editQuotesform.getBrand();
        CustomerDAO customerDAO = new CustomerDAO();
        QuotationDAO quotationDAO = new QuotationDAO();
        ChargesDAO chargesDAO = new ChargesDAO();
        QuotationBC quotationBC = new QuotationBC();
        NotesDAO notesDAO = new NotesDAO();
        Notes notes = new Notes();
        String rateFlag = "false";
        if (editQuotesform.getImportantDisclosures() != null && editQuotesform.getImportantDisclosures().equals("on")) {
            importantDisclosures = editQuotesform.getImportantDisclosures();
        } else {
            editQuotesform.setImportantDisclosures("off");
            importantDisclosures = editQuotesform.getImportantDisclosures();
        }
        if (editQuotesform.getDocsInquiries() != null && editQuotesform.getDocsInquiries().equals("on")) {
            docsInquiry = editQuotesform.getDocsInquiries();
        } else {
            editQuotesform.setDocsInquiries("off");
            docsInquiry = editQuotesform.getDocsInquiries();
        }
        // getting hazmat value from table
        String hazmatValue = new QuotationDAO().getHazmat(null != editQuotesform.getModuleRefId() ? editQuotesform.getModuleRefId() : "");
        TransactionBean transactionBean = new TransactionBean();
        request.setAttribute("focusValue", editQuotesform.getFocusValue());
        StringFormatter stringFormatter = new StringFormatter();
        transactionBean.setHazmat(hazmat);
        transactionBean.setDirectConsignmntCheck(editQuotesform.getDirectConsignmntCheck());
        transactionBean.setAlternateAgent(editQuotesform.getDefaultAgent());
        transactionBean.setBulletRatesCheck(editQuotesform.getBulletRatesCheck());
        transactionBean.setOutofgate(outofgate);
        transactionBean.setDeductFFcomm(deductFFcomm);
        transactionBean.setCustomertoprovideSED(customertoprovideSED);
        transactionBean.setLocaldryage(localdryage);
        transactionBean.setIntermodel(intermodel);
        transactionBean.setInland(editQuotesform.getDocCharge());
        transactionBean.setDocCharge(podCheck);
        transactionBean.setInsurance(insurance);
        transactionBean.setSpecialequipment(spclEquipment);
        transactionBean.setCommodityPrint(commodityPrint);
        transactionBean.setCarrierPrint(carrierPrint);
        transactionBean.setRampCheck(rampCheck);
        transactionBean.setImportantDisclosures(importantDisclosures);
        transactionBean.setDocsInquiries(docsInquiry);
        transactionBean.setChangeIssuingTerminal(editQuotesform.getChangeIssuingTerminal());
        transactionBean.setFinalized(finalized);
        transactionBean.setOriginCheck(originCheck);
        transactionBean.setPolCheck(polCheck);
        transactionBean.setPodCheck(podCheck);
        transactionBean.setDestinationCheck(destinationCheck);
        transactionBean.setSoc(soc);
        transactionBean.setNewClient(newClient);
        transactionBean.setClientConsigneeCheck(editQuotesform.getClientConsigneeCheck());
        transactionBean.setDefaultAgent(defaultAgent);
        transactionBean.setPrintRemarks(editQuotesform.getPrintRemarks());
        transactionBean.setCcEmail(editQuotesform.getCcEmail());
        transactionBean.setSpotRate(editQuotesform.getSpotRate());
        transactionBean.setBrand(editQuotesform.getBrand());
        User user1 = new User();
        String originCode = null;
        String propRemarks = null;
        if (null != editQuotesform.getIsTerminal() && editQuotesform.getIsTerminal().lastIndexOf("(") != -1) {
            originCode = editQuotesform.getIsTerminal().substring(editQuotesform.getIsTerminal().lastIndexOf("(") + 1,
                    editQuotesform.getIsTerminal().lastIndexOf(")"));
        }
        if (editQuotesform.getZip() != null && !editQuotesform.getZip().trim().equals("")) {
            propRemarks = new UnLocationDAO().getpropertyRemarks(originCode);
        }
        if (propRemarks != null) {
            request.setAttribute("remarks", propRemarks);
        }
        Quotation quotes = quotationBC.getQuotationObj(editQuotesform);
        boolean importFlag;
        if (null != quotes) {
            importFlag = "I".equalsIgnoreCase(quotes.getFileType());
        } else {
            importFlag = (null != session.getAttribute(ImportBc.sessionName));
        }
        String userName = "";
        if (session.getAttribute("loginuser") != null) {
            user1 = (User) session.getAttribute("loginuser");
            userName = user1.getLoginName();
            from = user1.getLoginName();
        }
        if (printDesc != null) {
            transactionBean.setPrintDesc(printDesc);
        } else {
            transactionBean.setPrintDesc("off");
        }
        transactionBean.setRoutedAgentCheck(editQuotesform.getRoutedAgentCheck());
        transactionBean.setFileType(editQuotesform.getFileType());
        request.setAttribute("transactionbean", transactionBean);
        Double totalCharges = 0.00;
        DBUtil dbUtil = new DBUtil();
        String requestObjectVAlue = null;
        request.setAttribute("buttonValue", buttonValue);
        request.setAttribute("enableIms", LoadLogisoftProperties.getProperty("ims.enable"));
        // getting session value to navigate fileseacrh page
        if (session.getAttribute(CommonConstants.QUOTE_CODE) != null) {
            Map addUniqueCode = (Map) session.getAttribute(CommonConstants.QUOTE_CODE);
            Set set = addUniqueCode.entrySet();
            for (Iterator it = set.iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();
                if (entry.getKey() != null && entry.getKey().equals(CommonConstants.SEARCH_FILE_NUMBER)) {
                    String quoteFolderId = (String) entry.getValue();//QOT
                    String quoteLinkId = quoteFolderId.substring(quoteFolderId.lastIndexOf("=") + 1);//link id
                    String folderid = quoteFolderId.substring(quoteFolderId.indexOf("=") + 1, quoteFolderId.lastIndexOf("&"));
                    requestObjectVAlue = "folderId=" + folderid + "&linkid=" + quoteLinkId;
                }
            }
        }
        //--------------END

        //This is for validating when GoBack button is clicked
        if (buttonValue != null && buttonValue.equalsIgnoreCase("validate")) {
            try {
                //setting request values
                Quotation quotation = quotationBC.getFormData(editQuotesform);
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                List otherChargesList = new ArrayList();
                List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                List perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                if ("N".equalsIgnoreCase(quotationBC.getFormData(editQuotesform).getRatesNonRates())) {
                    request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                    request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
                } else {
                    List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                    request.setAttribute("consolidatorList", consolidatorList);
                    request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
                }
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                request.setAttribute(QuotationConstants.QUOTEVALUES, quotationBC.getFormData(editQuotesform));
                request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotationBC.getFormData(editQuotesform).getQuoteId()));
                //end of setting request values
                //call validate method to validate the quotation objects
                Quotation quotation1 = (Quotation) session.getAttribute(QuotationConstants.QUOTATIONOLD);
                boolean isMatched = validate(editQuotesform, quotation1);
                ///check the file number---
                if (null == quotation1 || null == quotation1.getFileNo()) {
                    isMatched = false;
                } else if (null == quotation.getBookedBy() || (null != quotation.getBookedBy() && quotation.getBookedBy().equals(""))) {
                    setFileList(session, quotation);
                }
                if (isMatched) {
                    ProcessInfoBC processInfoBC = new ProcessInfoBC();
                    if (CommonFunctions.isNotNull(quotation1.getFileNo())) {
                        Integer userId = (user1 != null) ? user1.getUserId() : 0;
                        processInfoBC.releaseLoack(messageResources.getMessage("lockQuoteModule"),
                                quotation1.getFileNo(), userId);
                        session.setAttribute("selectedFileNumber", quotation1.getFileNo());
                        SessionForm oldSearchForm = (SessionForm) session.getAttribute("oldSearchForm");
                        if (null == oldSearchForm) {
                            oldSearchForm = new SessionForm();
                            Calendar cal = Calendar.getInstance();
                            if (importFlag) {
                                oldSearchForm.setImportFile(true);
                                cal.add(Calendar.MONTH, -6);
                            } else {
                                cal.add(Calendar.MONTH, -1);
                            }
                            oldSearchForm.setFromDate(DateUtils.formatDate(cal.getTime(), "MM/dd/yyyy"));
                            oldSearchForm.setToDate(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                            oldSearchForm.setFileNumber(quotation1.getFileNo());
                            session.setAttribute("oldSearchForm", oldSearchForm);
                        } else if (CommonUtils.isNotEqualIgnoreEmpty(oldSearchForm.getFileNumber(), quotation1.getFileNo())) {
                            oldSearchForm.setFileNumber(quotation1.getFileNo());
                            session.setAttribute("oldSearchForm", oldSearchForm);
                        }
                    }
                    session.setAttribute("screenName", "fileSearch");
                    forwardName = "closeSearch";
                } else {
                    //11111
                    request.setAttribute(QuotationConstants.VALIDATERESULT, "resultFalse");
                    forwardName = "editsuccess";
                }
            } catch (Exception e) {
                throw e;
            } finally {
                session.removeAttribute(QuotationConstants.QUOTATIONOLD);
                request.setAttribute("quoteOldNotSet", "quoteOldNotSet");
            }
        }
        //end of validating

        if (buttonValue != null && (buttonValue.equals("addCharges") || buttonValue.equals("addChargesWithoutInsure"))) {
            Quotation quotation = quotationBC.getFormData(editQuotesform);
            totalCharges = 0.00;
            if (editQuotesform.getIdinclude() != null && editQuotesform.getIdinclude().equals("on")) {
                totalCharges += Double.parseDouble(dbUtil.removeComma(editQuotesform.getAmount1()));
            }
            totalCharges += Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsuranceCharge()));
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (Object fclRate : fclRates) {
                Charges charges = (Charges) fclRate;
                if (charges.getUnitType() != null && !charges.getUnitType().equals("") && !charges.getUnitType().equals("0.00")) {
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    if (genericCode != null) {
                        charges.setUnitName(genericCode.getCodedesc());
                    }
                }
            }
            List otherChargesList = new ArrayList();
            List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            //---------------------------------
            for (Object otherChargesLIst1 : otherChargesLIst) {
                Charges c1 = (Charges) otherChargesLIst1;
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))
                        || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {

                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }

            quotation = quotationBC.getCurrencyForQuotation(fclRates, quotation, messageResources);

            quotation = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotation, messageResources);

            String check1 = editQuotesform.getCheck1();
            String print[] = StringUtils.split(check1, ",");
            if (!"undefined".equalsIgnoreCase(check1)) {
                for (int i = 0; i < print.length; i++) {
                    String tempChargeCode = "";
                    String tempUnitType = "";
                    String standarCode = "";
                    if (editQuotesform.getCollapseid().equals("collapse")) {
                        tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                        tempUnitType = editQuotesform.getHiddenunitType()[i];
                        standarCode = editQuotesform.getStandardChargeCollapse()[i];
                    } else {
                        tempChargeCode = editQuotesform.getChargeCodes()[i];
                        tempUnitType = editQuotesform.getUnitType()[i];
                        standarCode = editQuotesform.getStandardCharge()[i];
                    }
                    for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                        Charges charges = (Charges) iterator.next();
                        if (charges.getChgCode() != null && charges.getUnitName() != null
                                && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                                && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                            String bundleInToOFR = print[i];
                            if (bundleInToOFR.equalsIgnoreCase("1")) {
                                charges.setPrint("on");
                            } else {
                                charges.setPrint("off");
                            }
                        }
                    }
                }
            }
            String check3 = editQuotesform.getCheck3();
            String otherPrint[] = StringUtils.split(check3, ",");
            int j = 0;

            for (Iterator iterator = otherChargesList.iterator(); iterator.hasNext();) {
                Charges charges = (Charges) iterator.next();
                if (otherPrint.length > j) {
                    String bundleInToOFR = otherPrint[j];
                    if (bundleInToOFR.equalsIgnoreCase("1")) {
                        charges.setOtherprint("on");
                    } else {
                        charges.setOtherprint("off");
                    }
                }
                j++;
            }
            quotationDAO.update(quotation);
            if (quotation.getInsurance().equals("Y") && null != quotation.getCostofgoods()) {
                quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && "Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotation, messageResources);
                } else if (buttonValue.equals("addCharges")) {
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                }
            }
            if (CommonFunctions.isNotNullOrNotEmpty(quotationBC.cheackChargeCode("chgCode",
                    "INSURANCE", "qouteId", quotation.getQuoteId()))) {
                quotation.setInsurance("Y");
            } else {
                quotation.setInsurance("N");
            }
            quotationBC.getCharges(fclRates, messageResources, quotation, request);
            // linkedlist
            quotationBC.getOtherCharges(otherChargesList, quotation);
            quotationBC.getOtherChargesforKG(perkglbsList, quotation);
            fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            perkglbsList = new ArrayList();
            otherChargesList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            //--to display BlBy and Bl on date-----
            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quotation.setBlBy(editQuotesform.getBlBy());
                quotation.setBlDate(editQuotesform.getBlDate());
            }
            if (editQuotesform.getRampCheck() != null && !editQuotesform.getRampCheck().equals("") && editQuotesform.getRampCheck().equalsIgnoreCase("on")) {
                if (CommonFunctions.isNotNullOrNotEmpty(quotationBC.cheackChargeCode("chgCode",
                        "INTERMODAL RAMP", "qouteId", quotation.getQuoteId()))) {
                    quotation.setInland("Y");
                } else {
                    quotation.setInland("N");
                }
            } else {
                if (CommonFunctions.isNotNullOrNotEmpty(quotationBC.cheackChargeCode("chgCode",
                        "INLAND", "qouteId", quotation.getQuoteId()))) {
                    quotation.setInland("Y");
                } else {
                    quotation.setInland("N");
                }
            }
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            forwardName = "editsuccess";
        }

        if (buttonValue != null && (buttonValue.equals("newgetRates") || buttonValue.equals("hazmat")
                || buttonValue.equalsIgnoreCase("hazmatWithIntrModel") || buttonValue.equalsIgnoreCase("hazmatWithInland"))) {
            Quotation quotation = quotationBC.getFormData(editQuotesform);
            BookingFclDAO bookingFclDAO = new BookingFclDAO();
            if (buttonValue.equals("hazmat")) {
                bookingFclDAO.deleteHazmatEntry(quotation.getQuoteId());
            }
            QuotationDTO quotationDTO = new QuotationDTO(editQuotesform);
            quotationDTO.setOriginCheck(editQuotesform.getOriginCheck());
            quotationDTO.setDestinationCheck(editQuotesform.getDestinationCheck());
            quotationDTO.setPolCheck(editQuotesform.getPolCheck());
            quotationDTO.setPodCheck(editQuotesform.getPodCheck());
            quotationDTO.setCommcode(editQuotesform.getCommcode());
            quotationDTO.setIsTerminal(editQuotesform.getIsTerminal());
            quotationDTO.setRampCity(editQuotesform.getRampCity());
            quotationDTO.setPortofDischarge(editQuotesform.getPortofDischarge());
            quotationDTO.setPlaceofReceipt(editQuotesform.getPlaceofReceipt());
            quotationDTO.setFinalDestination(editQuotesform.getFinalDestination());
            quotationDTO.setButtonValue(editQuotesform.getButtonValue());
            quotationDTO.setTypeOfMove(editQuotesform.getTypeofMove());
            CustomerDAO colDAO = new CustomerDAO();
            String code = "";
            String desc = "";
            String sscode = null;
            if (buttonValue.equals("newgetRates")) {
                ssline = editQuotesform.getSslDescription();
                rateFlag = "true";
            }
            quotation.setLocaldryage(editQuotesform.getLocaldryage());
            if (quotation.getRatesNonRates() != null && quotation.getRatesNonRates().equals("R")) {
                if (ssline != null) {
                    int i = ssline.indexOf("//");
                    if (i != -1) {
                        String destinationPort[] = ssline.split("//");
                        if (destinationPort.length > 1) {
                            desc = destinationPort[0];
                            code = destinationPort[1];
                        }
                        List list = colDAO.findForAgenttNo1(code, desc);
                        if (list != null && list.size() > 0) {
                            TradingPartnerTemp customerTemp = (TradingPartnerTemp) list.get(0);
                            ssline = customerTemp.getAccountName();
                            sscode = customerTemp.getAccountno();
                        }
                    }
                }
                quotationDTO.setSscode(sscode);
                quotationDTO.setSsline(ssline);
                quotationDTO.setHazmat(editQuotesform.getHazmat());
                quotationDTO.setSoc(editQuotesform.getSoc());
                quotationDTO.setSpclEqpmt(editQuotesform.getSpecialequipment());
                quotationDTO.setSelectedOrigin(editQuotesform.getSelectedOrigin());
                quotationDTO.setSelectedDestination(editQuotesform.getSelectedDestination());
                quotationDTO.setSelectedComCode(editQuotesform.getSelectedComCode());
                String temp = "";
                String container = null;
                if (CommonFunctions.isNotNull(editQuotesform.getSelectedCheck())) {
                    container = editQuotesform.getSelectedCheck();
                    quotationDTO.setSelectedCheck(container);
                } else if (CommonFunctions.isNotNull(editQuotesform.getUnitSelect())) {
                    container = editQuotesform.getUnitSelect();
                    quotationDTO.setSelectedCheck(container);
                } else {
                    List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                    for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                        Charges charges = (Charges) iterator.next();
                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                        if (genericCode != null) {
                            charges.setUnitName(genericCode.getCodedesc());
                        }
                        if (charges.getUnitName() != null && !temp.contains(charges.getUnitName())) {
                            temp += charges.getUnitName() + ",";
                        }
                    }
                    quotationDTO.setSelectedCheck(temp);
                }
                session.setAttribute("quotationDTO", quotationDTO);
                //---getting rateslist------
                boolean isImsQuote = false;
                if (null != editQuotesform.getIsTerminal() && editQuotesform.getIsTerminal().trim().equalsIgnoreCase(editQuotesform.getImsOrigin())) {
                    isImsQuote = true;
                }
                quotationBC.getQuotationRates1(quotationDTO, messageResources, request, quotation, buttonValue, isImsQuote);
                editQuotesform.setSelectedDestination(editQuotesform.getSelectedDestination().replace("&&", "'"));
                quotation = stringFormatter.findForManagementForDestination(editQuotesform.getSelectedOrigin(), editQuotesform.getSelectedDestination(), quotation);
                quotation.setSsline(sscode);
                quotation.setSslname(ssline);
                // hazmat change notes goes here
//                if (null != hazmatValue && null != editQuotesform.getHazmat()
//                        && !editQuotesform.getHazmat().equalsIgnoreCase(hazmatValue)) {
//                    String previousHazmat = "Y".equalsIgnoreCase(hazmatValue) ? "Yes" : "No";
//                    String newHazmat = "Y".equalsIgnoreCase(editQuotesform.getHazmat()) ? "Yes" : "No";
//                    StringBuilder notesMsg = new StringBuilder();
//                    notesMsg.append("Hazmat changed from ").append(previousHazmat).append(" to ").append(newHazmat);
//                    quotationBC.saveAutoNotes(quotation, request, notesMsg.toString());
//                }
                // hazmat change notes

                // adding afrfee for japan destinations here
                String destination = quotation.getDestination_port();
                String afrFees = LoadLogisoftProperties.getProperty("afrfee.rate.japan");
                Double afrFee = !afrFees.equals("") ? Double.parseDouble(afrFees) : 0d;
                if (null != destination && destination.substring(destination.lastIndexOf("(") + 1, destination.length() - 1).startsWith("JP") && afrFee > 0d) {
                    chargesDAO.addAfrfeeForJapan(quotation.getQuoteId(), afrFee);
                }
                // adding afrfee for japan destinations here
            } else {
                quotation.setSsline(editQuotesform.getSslcode());
                if (ssline != null) {
                    if (ssline.contains("//")) {
                        String[] car = ssline.split("//");
                        if (null != car && car.length > 1) {
                            quotation.setSslname(car[0]);
                            code = car[1];
                        }
                    } else {
                        if (!ssline.equals("//")) {
                            quotation.setSslname(ssline);
                        } else {
                            quotation.setSslname("");
                        }
                    }
                }
            }

            //-----TO GET POLCODE AND PODCODES AND SET IT TO POL AND POD-----
            if (request.getAttribute("QuotationCodes") != null) {
                Quotation newQuotation = new Quotation();
                newQuotation = (Quotation) request.getAttribute("QuotationCodes");
                quotation.setPlor(newQuotation.getPlor());
                quotation.setFinaldestination(newQuotation.getFinaldestination());
                quotation.setDestination_port(newQuotation.getDestination_port());
            }
            if (!editQuotesform.getSelectedOrigin().equals("")) {
                request.setAttribute("ratesbasicsmessage", "Rates Basis----------->" + editQuotesform.getSelectedOrigin() + " to " + editQuotesform.getSelectedDestination());
            }

            QuotesForm quotesForm = new QuotesForm(editQuotesform);
            quotesForm.setSslcode(editQuotesform.getSslcode());
            quotesForm.setSslDescription(ssline);
            quotation = quotationBC.getRemarksandTransitDaysFromFclSellratesForEdit(quotation);
            // quotation=quotationBC.getRatesandSave(quotesForm, messageResources, ratesList,quotation,editQuotes);
              /*if(quotation.getLdinclude()!=null && quotation.getLdinclude().equals("on")){
            totalCharges+=quotation.getAmount();
            }*/
            if (quotation.getIdinclude() != null && quotation.getIdinclude().equals("on")) {
                totalCharges += quotation.getAmount1();
            }
            totalCharges += quotation.getInsuranceCharge();
            // totalCharges+=quotation.getCostofgoods();

            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }

            if ("R".equalsIgnoreCase(quotation.getRatesNonRates())) {
                fclRates = quotationBC.setMarkUp(fclRates, editQuotesform, messageResources, userName);
            }
            quotation = quotationBC.getCurrencyForQuotation(fclRates, quotation, messageResources);

            List otherChargesList = new ArrayList();
            List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }

            quotation = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotation, messageResources);
            if (quotation.getInsurance().equals("Y") && null != quotation.getCostofgoods()) {
                quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && "Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotation, messageResources);
                } else {
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                }
            }
            if (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y")) {
                fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
            }
            //--getting all the charges-----
            quotationBC.getCharges(fclRates, messageResources, quotation, request);
            for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }

            quotationBC.getOtherCharges(otherChargesList, quotation);
            for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getOtherChargesforKG(perkglbsList, quotation);
            fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            perkglbsList = new ArrayList();
            otherChargesList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            //--to display BlBy and Bl on date-----
            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quotation.setBlBy(editQuotesform.getBlBy());
                quotation.setBlDate(editQuotesform.getBlDate());
            }

            boolean flag = false;
            boolean commentsFlag = false;
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            if (buttonValue.equalsIgnoreCase("hazmatWithIntrModel")) {
                quotationDAO.deleteInlandOrIntmodRamp(quotation.getQuoteId().toString(), "INTRAMP");
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                quotation.setAmount(0.00);
                quotation.setInland("N");
                quotationDAO.update(quotation);
            }
            if (buttonValue.equalsIgnoreCase("hazmatWithInland")) {
                quotationDAO.deleteInlandOrIntmodRamp(quotation.getQuoteId().toString(), importFlag ? "DELIV" : "INLAND");
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                quotation.setAmount(0.00);
                quotation.setInland("N");
                quotationDAO.update(quotation);
            }
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            forwardName = "editsuccess";
        }
        request.setAttribute("rateFlag", rateFlag);
        if (null != buttonValue && (buttonValue.equals("recalc") || buttonValue.equals("insurance")
                || buttonValue.equals("addLocalDrayageToBl") || buttonValue.equals("addIntermodelToBl")
                || buttonValue.equals("addInsuranceToBl") || buttonValue.equals("FFCommssion")
                || buttonValue.equals("deleteLocalDrayageToBl") || buttonValue.equals("deleteIntermodelToBl")
                || buttonValue.equals("deleteInsuranceToBl") || buttonValue.equals("deleteFFCommssion")
                || buttonValue.equals("deleteInlandToBl") || buttonValue.equals("addDocumentCharge") || buttonValue.equals("addChassisCharge")
                || buttonValue.equals("deleteDocumentCharge") || "deleteSpecialEquipment".equals(buttonValue)
                || "deleteSpecialEquipmentUnit".equals(buttonValue)
                || "deleteIntermodelRampToBl".equals(buttonValue)
                || "shortCutCharge".equals(buttonValue)
                || "adjustmentChargeComments".equals(buttonValue)
                || "addPierPassCharge".equals(buttonValue)
                || "deletePierPassCharge".equals(buttonValue)
                || "onCarriageRemarks".equals(buttonValue)
                || "addBrandValue".equals(buttonValue)
                || "deleteChassisCharge".equals(buttonValue))) {

            Quotation quotation = quotationBC.getFormData(editQuotesform);
            if ("onCarriageRemarks".equals(buttonValue) && null != editQuotesform.getOverrideRemarks()) {
                //Remarks Format : Remarks Content(USERNAME-MM/dd/yyyy HH:mm a).
                GregorianCalendar now = new GregorianCalendar();
                SimpleDateFormat pattern = new SimpleDateFormat("MM/dd/yyyy h:mm a");
                StringBuilder remarks = new StringBuilder();
                remarks.append(editQuotesform.getOverrideRemarks().toUpperCase()).append("(").append(userName.toUpperCase()).append("-").append(pattern.format(now.getTime())).append(").");
                quotation.setOnCarriageRemarks(remarks.toString());
                quotation.setOnCarriage(null != editQuotesform.getOnCarriage() ? editQuotesform.getOnCarriage() : null);
            }
            totalCharges = 0.00;
            if (editQuotesform.getIdinclude() != null && editQuotesform.getIdinclude().equals("on")) {
                totalCharges += Double.parseDouble(dbUtil.removeComma(editQuotesform.getAmount1()));
            }
            totalCharges += Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsuranceCharge()));
            if (editQuotesform.getCostofgoods() != null && !editQuotesform.getCostofgoods().equals("")) {
            }
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (Object fclRate : fclRates) {
                Charges charges = (Charges) fclRate;
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            if ("R".equalsIgnoreCase(quotation.getRatesNonRates())) {
                fclRates = quotationBC.setMarkUp(fclRates, editQuotesform, messageResources, userName);
            }
            if (buttonValue.equals("deleteInsuranceToBl")) {
                if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && "Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    chargesDAO.deletePerblCharges(quotation.getQuoteId(), "INSURE");
                }

            }
            List otherChargesList = new ArrayList();
            List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            for (Object otherChargesLIst1 : otherChargesLIst) {
                Charges c1 = (Charges) otherChargesLIst1;
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            if (buttonValue.equals("deleteLocalDrayageToBl")) {
                fclRates = quotationBC.deleteLocalDrayage(fclRates);
                quotationBC.deleteChargeFromOtherCharges(otherChargesList, QuotationConstants.DRAYCODE);
                quotation.setDoorOrigin(null);
                quotation.setZip(null);
                quotation.setAmount(0.00);
                quotation.setLocaldryage("N");
            }
            if (buttonValue.equals("FFCommssion")
                    || (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y"))) {
                fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
                quotation.setDeductFfcomm("Y");
            }
            if (buttonValue.equals("deleteSpecialEquipment")) {
                fclRates = quotationBC.deleteSpecialEquipmentCharges(fclRates);
            }
            if (buttonValue.equals("deleteSpecialEquipmentUnit")) {
                fclRates = quotationBC.deleteSpecialEquipmentUnitCharges(fclRates, editQuotesform.getNumbIdx(), editQuotesform.getStandardChargeIndex());
            }
            if (buttonValue.equals("deleteInlandToBl")) {
                quotationDAO.deleteInlandOrIntmodRamp(quotation.getQuoteId().toString(), importFlag ? "DELIV" : "INLAND");
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                quotation.setDoorOrigin(null);
                quotation.setZip(null);
                quotation.setAmount(0.00);
                quotation.setInland("N");
            }
            if (buttonValue.equals("deleteIntermodelRampToBl")) {
                quotationDAO.deleteInlandOrIntmodRamp(quotation.getQuoteId().toString(), "INTRAMP");
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                quotation.setDoorOrigin(null);
                quotation.setZip(null);
                quotation.setAmount(0.00);
                quotation.setInland("N");
            }
            if (buttonValue.equals("deleteDocumentCharge")) {
                chargesDAO.deleteDocumentCharges(quotation.getQuoteId());
                fclRates = quotationBC.deleteDocumentCharge(fclRates);
                otherChargesList = quotationBC.deleteDocumentCharge(otherChargesList);
                quotation.setDocCharge("N");
                quotation.setDocumentAmount(0d);
            }
            if (buttonValue.equals("shortCutCharge")) {
                quotation.setGreendollarSignClickCount(quotation.getGreendollarSignClickCount() + 1);
                double ocfAdj = null != editQuotesform.getReducedOceanFreight() && !editQuotesform.getReducedOceanFreight().isEmpty() ? Double.parseDouble(editQuotesform.getReducedOceanFreight()) : 0d;
                double admAdj = null != editQuotesform.getAdminCharge() && !editQuotesform.getAdminCharge().isEmpty() ? Double.parseDouble(editQuotesform.getAdminCharge()) : 0d;
                quotation.setOceanFreightAdjustment(ocfAdj);
                quotation.setAdminAdjustment(admAdj);
                if (CommonUtils.isEmpty(editQuotesform.getDocumentCharge()) || editQuotesform.getDocumentCharge().equals("0.00")) {
                    chargesDAO.deleteDocumentCharges(quotation.getQuoteId());
                    fclRates = quotationBC.deleteDocumentCharge(fclRates);
                    otherChargesList = quotationBC.deleteChargeFromOtherCharges(otherChargesList, "DOCUM");
                    quotation.setDocCharge("N");
                    quotation.setDocumentAmount(0d);
                } else {
                    chargesDAO.deleteDocumentCharges(quotation.getQuoteId());
                    otherChargesList = quotationBC.deleteDocumentCharge(otherChargesList);
                    otherChargesList = quotationBC.deleteChargeFromOtherCharges(otherChargesList, "DOCUM");
                    quotation.setDocCharge("Y");
                    otherChargesList = null != otherChargesList ? otherChargesList : new ArrayList();
                    Charges charges = new Charges();
                    charges.setMarkUp(Double.parseDouble(editQuotesform.getDocumentCharge()));
                    charges.setChgCode("DOCUMENT CHARGE");
                    charges.setCostType("PER BL CHARGES");
                    charges.setOtherinclude("off");
                    charges.setOtherprint("off");
                    charges.setChargeCodeDesc("DOCUM");
                    charges.setCurrecny("USD");
                    charges.setChargeFlag("M");
                    charges.setNewFlag("new");
                    charges.setStandardCharge("Y");
                    charges.setAmount(0d);
                    charges.setQouteId(quotation.getQuoteId());
                    otherChargesList.add(charges);
                    new ChargesDAO().save(charges);
                }
                if (null != editQuotesform.getGreenDollarUseTrueCost() && editQuotesform.getGreenDollarUseTrueCost().equals("Y")) {
                    editQuotesform.setReducedOceanFreight("0.00");
                    quotationBC.useTrueCost(quotation);

                }
                fclRates = quotationBC.addAdminToBl(fclRates, quotation, editQuotesform.getAdminCharge(), editQuotesform.getReducedOceanFreight(), editQuotesform.getDocumentCharge(), messageResources, userName);
            }
            if (buttonValue.equals("addLocalDrayageToBl")) {
                fclRates = quotationBC.addLocalDrayageToBl(fclRates, quotation, messageResources);

            }
            if (buttonValue.equals("deleteIntermodelToBl")) {
                fclRates = quotationBC.deleteIntermodelToBl(fclRates);
                quotationBC.deleteChargeFromOtherCharges(otherChargesList, QuotationConstants.INTMDLCODE);
                quotation.setDoorOrigin(null);
                quotation.setZip(null);
                quotation.setAmount(0.00);
            }
            if (buttonValue.equals("addIntermodelToBl")) {
                fclRates = quotationBC.addIntermodelToBl(fclRates, quotation, messageResources);
            }
            if (buttonValue.equals("deleteInsuranceToBl")) {
                fclRates = quotationBC.deleteInsuranceToBl(fclRates);
                quotation.setCostofgoods(0.00);
                quotation.setInsuranceCharge(0.00);
                quotation.setInsurancamt(0.00);
            }
            if (buttonValue.equals("deleteFFCommssion")) {
                fclRates = quotationBC.deleteFFCommission(fclRates);
                quotation.setDeductFfcomm("N");
            }
            if (buttonValue.equals("addDocumentCharge") && CommonUtils.isNotEmpty(editQuotesform.getDocChargeAmount())) {
                chargesDAO.deleteDocumentCharges(quotation.getQuoteId());
                otherChargesList = quotationBC.deleteDocumentCharge(otherChargesList);
                otherChargesList = quotationBC.deleteChargeFromOtherCharges(otherChargesList, "DOCUM");
                quotation.setDocCharge("Y");
                otherChargesList = quotationBC.addDocChargeToBl(otherChargesList, quotation, editQuotesform.getDocChargeAmount());
            }
            if (buttonValue.equals("addChassisCharge") && CommonUtils.isNotEmpty(editQuotesform.getChassisCharge())) {
                chargesDAO.deleteChassisCharges(quotation.getQuoteId());
                fclRates = quotationBC.deleteChassisCharge(fclRates);
                quotation.setChassisCharge("Y");
                fclRates = quotationBC.addChassisChargeToBl(fclRates, quotation, editQuotesform.getVendorName(), editQuotesform.getAccountNo(), editQuotesform.getAmount(), editQuotesform.getMarkUp());
            }
            if (buttonValue.equals("deleteChassisCharge")) {
                chargesDAO.deleteChassisCharges(quotation.getQuoteId());
                fclRates = quotationBC.deleteChassisCharge(fclRates);
//                otherChargesList = quotationBC.deletePierPassCharge(otherChargesList);
                quotation.setChassisCharge("N");
            }
            if (buttonValue.equals("addPierPassCharge")) {
                chargesDAO.deletePierPassCharges(quotation.getQuoteId());
//                otherChargesList = quotationBC.deleteDocumentCharge(otherChargesList);
//                otherChargesList = quotationBC.deleteChargeFromOtherCharges(otherChargesList, "PIERPASS");
                fclRates = quotationBC.deletePierPassCharge(fclRates);
                quotation.setPierPass("Y");
                fclRates = quotationBC.addPierPassChargeToBl(fclRates, quotation);
            }
            if (buttonValue.equals("deletePierPassCharge")) {
                chargesDAO.deletePierPassCharges(quotation.getQuoteId());
                fclRates = quotationBC.deletePierPassCharge(fclRates);
//                otherChargesList = quotationBC.deletePierPassCharge(otherChargesList);
                quotation.setPierPass("N");
            }
            if (buttonValue != null && buttonValue.equals("addBrandValue")) {
                String quotationNo = editQuotesform.getQuotationNo();
                quotation = quotationBC.getFormData(editQuotesform);
                quotation.setBrand(editQuotesform.getBrand());
                quotation.setUpdateBy(user1.getLoginName());

            }
            quotation = quotationBC.getCurrencyForQuotation(fclRates, quotation, messageResources);
            quotation = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotation, messageResources);
            if (quotation.getInsurance().equals("Y")) {
                quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && "Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotation, messageResources);
                } else {
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                }
            }
            for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                Charges charges = (Charges) iter.next();
                charges.setNewFlag(null);
            }
            if (null != editQuotesform.getCheck1()) {
                String check1 = editQuotesform.getCheck1();
                String print[] = StringUtils.split(check1, ",");
                for (int i = 0; i < print.length; i++) {
                    String tempChargeCode = "";
                    String tempUnitType = "";
                    String standarCode = "";
                    if (null != editQuotesform.getCollapseid() && editQuotesform.getCollapseid().equals("collapse") && editQuotesform.getHiddenchargeCodes().length > i) {
                        tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                        tempUnitType = editQuotesform.getHiddenunitType()[i];
                        standarCode = editQuotesform.getStandardChargeCollapse()[i];
                    } else if (null != editQuotesform.getChargeCodes() && editQuotesform.getChargeCodes().length > i) {
                        tempChargeCode = editQuotesform.getChargeCodes()[i];
                        tempUnitType = editQuotesform.getUnitType()[i];
                        standarCode = editQuotesform.getStandardCharge()[i];
                    }
                    for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                        Charges charges = (Charges) iterator.next();
                        if (charges.getChgCode() != null && charges.getUnitName() != null
                                && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                                && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                            String bundleInToOFR = print[i];
                            if (bundleInToOFR.equalsIgnoreCase("1")) {
                                charges.setPrint("on");
                            } else {
                                charges.setPrint("off");
                            }
                        }
                    }
                }
            }
            quotationBC.getCharges(fclRates, messageResources, quotation, request);
            for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            String check3 = editQuotesform.getCheck3();
            String otherPrint[] = StringUtils.split(check3, ",");
            int j = 0;

            for (Iterator iterator = otherChargesList.iterator(); iterator.hasNext();) {
                Charges charges = (Charges) iterator.next();
                if (null != otherPrint && otherPrint.length > j) {
                    String bundleInToOFR = otherPrint[j];
                    if (bundleInToOFR.equalsIgnoreCase("1")) {
                        charges.setOtherprint("on");
                    } else {
                        charges.setOtherprint("off");
                    }
                }
                j++;
            }
            quotationBC.getOtherCharges(otherChargesList, quotation);
            for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getOtherChargesforKG(perkglbsList, quotation);
            fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (Object fclRate : fclRates) {
                Charges charges = (Charges) fclRate;
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }

            //--to display BlBy and Bl on date-----
            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quotation.setBlBy(editQuotesform.getBlBy());
                quotation.setBlDate(editQuotesform.getBlDate());
            }
            boolean flag = false;
            boolean commentsFlag = false;
            if (buttonValue.equals("deleteLocalDrayageToBl") || buttonValue.equals("deleteIntermodelToBl") || buttonValue.equals("deleteInlandToBl")) {
                if (!commentsFlag) {
                    quotation.setIntermodelComments(null);
                    editQuotesform.setIntermodelComments(null);
                }
            }
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            quotationDAO.update(quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            forwardName = "editsuccess";
        }
        if (buttonValue.equals("numberChanged")) {
            Quotation quotationdomain = quotationBC.getFormData(editQuotesform);
            totalCharges = 0.00;
            if (editQuotesform.getIdinclude() != null && editQuotesform.getIdinclude().equals("on")) {
                totalCharges += Double.parseDouble(dbUtil.removeComma(editQuotesform.getAmount1()));
            }

            totalCharges += Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsuranceCharge()));
            if (editQuotesform.getCostofgoods() != null && !editQuotesform.getCostofgoods().equals("")) {
            }
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotationdomain.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                charges.setUnitName(genericCode.getCodedesc());
            }
            List otherChargesLIst = (List) cDao.getChargesforQuotation8(quotationdomain.getQuoteId());
            List otherChargesList = new ArrayList();
            List perkgList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                Charges c2 = new Charges();
                PropertyUtils.copyProperties(c2, c1);
                if (c1.getCostType().trim().equalsIgnoreCase("Per 1000KG") || c1.getCostType().trim().equalsIgnoreCase("PER 2000 LBS")) {
                    perkgList.add(c2);
                } else {
                    otherChargesList.add(c2);
                }
            }
            QuotesForm quotesForm = new QuotesForm(editQuotesform);
            List changedfclRates = quotationBC.getNumbersChanged(fclRates, quotesForm, userName);
            for (Iterator iter = changedfclRates.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getCharges(changedfclRates, messageResources, quotationdomain, request);
            if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(changedfclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(changedfclRates));
            }
            quotationdomain = quotationBC.getCurrencyForQuotation(changedfclRates, quotationdomain, messageResources);
            for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            String check3 = editQuotesform.getCheck3();
            String otherPrint[] = StringUtils.split(check3, ",");
            int j = 0;

            for (Iterator iterator = otherChargesList.iterator(); iterator.hasNext();) {
                Charges charges = (Charges) iterator.next();
                if (otherPrint.length > j) {
                    String bundleInToOFR = otherPrint[j];
                    if (bundleInToOFR.equalsIgnoreCase("1")) {
                        charges.setOtherprint("on");
                    } else {
                        charges.setOtherprint("off");
                    }
                }
                j++;
            }
            quotationBC.getOtherCharges(otherChargesList, quotationdomain);
            for (Iterator iter = perkgList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getOtherChargesforKG(perkgList, quotationdomain);
            quotationdomain = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotationdomain, messageResources);

            if (quotationdomain.getDeductFfcomm() != null && quotationdomain.getDeductFfcomm().equals("Y")) {
                changedfclRates = quotationBC.addFFCommission(changedfclRates, messageResources, quotationdomain);
            }
            if (quotationdomain.getInsurance().equals("Y") && !quotationdomain.getCostofgoods().equals("")) {
                quotationdomain.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates()) && "Y".equalsIgnoreCase(quotationdomain.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotationdomain, messageResources);
                } else {
                    changedfclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotationdomain, messageResources);
                }
            }
            quotationDAO.update(quotationdomain);
            for (Iterator iter = changedfclRates.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getCharges(changedfclRates, messageResources, quotationdomain, request);
            for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }

            quotationBC.getOtherCharges(otherChargesList, quotationdomain);
            for (Iterator iter = perkgList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getOtherChargesforKG(perkgList, quotationdomain);
            fclRates = (List) chargesDAO.getChargesforQuotation1(quotationdomain.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                charges.setUnitName(genericCode.getCodedesc());
            }
            if (null != editQuotesform.getCheck1()) {
                String check1 = editQuotesform.getCheck1();
                String print[] = StringUtils.split(check1, ",");
                for (int i = 0; i < print.length; i++) {
                    String tempChargeCode = "";
                    String tempUnitType = "";
                    String standarCode = "";
                    if (editQuotesform.getCollapseid().equals("collapse")) {
                        tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                        tempUnitType = editQuotesform.getHiddenunitType()[i];
                        standarCode = editQuotesform.getStandardChargeCollapse()[i];
                    } else {
                        tempChargeCode = editQuotesform.getChargeCodes()[i];
                        tempUnitType = editQuotesform.getUnitType()[i];
                        standarCode = editQuotesform.getStandardCharge()[i];
                    }
                    for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                        Charges charges = (Charges) iterator.next();
                        if (charges.getChgCode() != null && charges.getUnitName() != null
                                && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                                && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                            String bundleInToOFR = print[i];
                            if (bundleInToOFR.equalsIgnoreCase("1")) {
                                charges.setPrint("on");
                            } else {
                                charges.setPrint("off");
                            }
                        }
                    }
                }
            }
            if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotationdomain.getQuoteId());
            List perkglbsList = new ArrayList();
            otherChargesList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }

            //--to display BlBy and Bl on date-----
            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quotationdomain.setBlBy(editQuotesform.getBlBy());
                quotationdomain.setBlDate(editQuotesform.getBlDate());
            }
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkgList);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotationdomain);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotationdomain.getQuoteId()));
            forwardName = "editsuccess";
        }
        if (buttonValue.equals("quotupdation") || buttonValue.equals("acceptVidOnSpotRate") || buttonValue.equals("assignRemarks")
                || buttonValue.equals("converttobook") || buttonValue.equals("copy")
                || buttonValue.equals("quoteDetails") || buttonValue.equals("confirmSave")
                || buttonValue.equals("sendEmail") || buttonValue.equals("converttobooknew") || buttonValue.equals("addBrandValue")) {
            Quotation quotationdomain = quotationBC.getFormData(editQuotesform);

            if (buttonValue.equals("acceptVidOnSpotRate")) {
                new QuoteDwrBC().notesForSpotRates(quotationdomain.getFileNo(), userName, "Y");
            }
            if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates()) && editQuotesform.getPortofDischarge() != null) {
                String Destination = editQuotesform.getPortofDischarge();
                int j = Destination.indexOf("/");
                if (j != -1) {
                    String a[] = Destination.split("/");
                    Destination = a[0];
                }

                boolean isBaseBullet = false;
                if (null != quotationdomain.getCommcode() && null != quotationdomain.getCommcode().getCode()) {
                    isBaseBullet = genericCodeDAO.displayBulletRatesRemarks(quotationdomain.getCommcode().getCode());
                }
                if (CommonUtils.isEqualIgnoreCase(quotationdomain.getBulletRatesCheck(), "on") || isBaseBullet) {
                    quotationdomain.setFclGRIRemarks("");
                } else {
                    quotationdomain.setFclGRIRemarks(new UnLocationDAO().getDestinationGRIRemarks(Destination));
                }
            }
            if (quotationdomain.getIdinclude() != null && quotationdomain.getIdinclude().equals("on")) {
                totalCharges += quotationdomain.getAmount1();
            }
            if (quotationdomain.getInsuranceCharge() != null) {
                totalCharges += quotationdomain.getInsuranceCharge();
            }
            if (quotationdomain.getCostofgoods() == null || quotationdomain.getCostofgoods().equals("")) {
                quotationdomain.setCostofgoods(0.00);
            }
            quotationdomain.setAesFilling(editQuotesform.isAesFilling());
            User userid = null;
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            quotationdomain.setUpdateBy(userid.getLoginName());
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotationdomain.getQuoteId());
            for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                Charges charges = (Charges) iterator.next();
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            if (null != editQuotesform.getCheck1()) {
                String check1 = editQuotesform.getCheck1();
                String print[] = StringUtils.split(check1, ",");
                if (!"undefined".equalsIgnoreCase(check1)) {
                    for (int i = 0; i < print.length; i++) {
                        String tempChargeCode = "";
                        String tempUnitType = "";
                        String standarCode = "";
                        if (editQuotesform.getCollapseid().equals("collapse")) {
                            tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                            tempUnitType = editQuotesform.getHiddenunitType()[i];
                            standarCode = editQuotesform.getStandardChargeCollapse()[i];
                        } else {
                            tempChargeCode = editQuotesform.getChargeCodes()[i];
                            tempUnitType = editQuotesform.getUnitType()[i];
                            standarCode = editQuotesform.getStandardCharge()[i];
                        }
                        for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                            Charges charges = (Charges) iterator.next();
                            if (charges.getChgCode() != null && charges.getUnitName() != null
                                    && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                                    && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                                String bundleInToOFR = print[i];
                                if (bundleInToOFR.equalsIgnoreCase("1")) {
                                    charges.setPrint("on");
                                } else {
                                    charges.setPrint("off");
                                }
                            }
                        }
                    }
                }
            }
            if ("R".equalsIgnoreCase(quotationdomain.getRatesNonRates())) {
                fclRates = quotationBC.setMarkUp(fclRates, editQuotesform, messageResources, userName);
            }
            quotationdomain = quotationBC.getCurrencyForQuotation(fclRates, quotationdomain, messageResources);

            List otherChargesList = new ArrayList();
            List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotationdomain.getQuoteId());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                String check2 = editQuotesform.getCheck3();
                String print2[] = StringUtils.split(check2, ",");
                if (print2.length > i) {
                    String bundleInToOFR = print2[i];
                    if (bundleInToOFR.equalsIgnoreCase("1")) {
                        c1.setOtherprint("on");
                    } else {
                        c1.setOtherprint("off");
                    }
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
            }
            quotationdomain = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotationdomain, messageResources);
            quotationdomain.setQuoteNo(quotationdomain.getQuoteId().toString());

            if (quotationdomain.getInsurance().equals("Y") && null != quotationdomain.getCostofgoods()) {
                quotationdomain.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates()) && "Y".equalsIgnoreCase(quotationdomain.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotationdomain, messageResources);
                }
            }
            for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getCharges(fclRates, messageResources, quotationdomain, request);
            for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            quotationBC.getOtherChargesforKG(perkglbsList, quotationdomain);
            for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                Charges Charges = (Charges) iter.next();
                Charges.setNewFlag(null);
            }
            String check3 = editQuotesform.getCheck3();
            String otherPrint[] = StringUtils.split(check3, ",");
            int j = 0;

            for (Iterator iterator = otherChargesList.iterator(); iterator.hasNext();) {
                Charges charges = (Charges) iterator.next();
                if (otherPrint.length > j) {
                    String bundleInToOFR = otherPrint[j];
                    if (bundleInToOFR.equalsIgnoreCase("1")) {
                        charges.setOtherprint("on");
                    } else {
                        charges.setOtherprint("off");
                    }
                }
                j++;
            }
            quotationBC.getOtherCharges(otherChargesList, quotationdomain);
            fclRates = new ArrayList();
            fclRates = (List) chargesDAO.getChargesforQuotation1(quotationdomain.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotationdomain.getQuoteId());
            perkglbsList = new ArrayList();
            otherChargesList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            if (buttonValue.equals("quotupdation") || buttonValue.equals("confirmSave")) {
                if (quotationdomain.getFileNo() == null) {
                    GenerateFileNumber generateFileNumber = new GenerateFileNumber();// wil generate file number
                    generateFileNumber.join();// it wil force thread to complete the task before move to next step
                    quotationdomain.setFileNo("" + generateFileNumber.getFileNumber());
                    quotationdomain.setOnCarriage(null != editQuotesform.getOnCarriage() ? editQuotesform.getOnCarriage() : null);
                    quotationDAO.update(quotationdomain);

                    setFileList(session, quotationdomain);
                    ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
                    ProcessInfo pi = new ProcessInfo();
                    String programid = "";
                    programid = (String) session.getAttribute("processinfoforquotation");
                    String recordid = quotationdomain.getFileNo();
                    String editstatus = "startedited";
                    String deletestatus = "startdeleted";
                    int progId = 0;
                    if (programid != null && !programid.equals("")) {
                        progId = Integer.parseInt(programid);
                    }
                    UserDAO userDAO = new UserDAO();
                    ProcessInfo processinfoobj = processinfoDAO.findById(progId, recordid, deletestatus, editstatus);
                    if (processinfoobj != null && !processinfoobj.getUserid().equals(userid.getUserId())) {
                        String view = "3";
                        User loginuser = userDAO.findById(processinfoobj.getUserid());
                        String loginName = loginuser.getLoginName();
                        String msg = "This record is being used by ";
                        String message = msg + loginName;
                        request.setAttribute("msg", message);
                        session.setAttribute("view", view);
                    } else {
                        pi.setUserid(userid.getUserId());
                        if (programid != null && !programid.equals("")) {
                            pi.setProgramid(Integer.parseInt(programid));
                        }
                        java.util.Date currdate = new java.util.Date();
                        pi.setProcessinfodate(currdate);
                        pi.setEditstatus(editstatus);
                        pi.setRecordid(recordid);
                        processinfoDAO.save(pi);
                        if (session.getAttribute("view") != null) {
                            session.removeAttribute("view");
                        }
                    }
                } else {
                    quotationdomain.setOnCarriage(null != editQuotesform.getOnCarriage() ? editQuotesform.getOnCarriage() : null);
                    quotationDAO.update(quotationdomain);
                    if (null != quotationdomain.getFileNo()) {
                        setFileList(session, quotationdomain);
                    }
                }
                request.setAttribute("inputRatesManually", editQuotesform.getAction());
            } else {
                quotationDAO.update(quotationdomain);
                if (null != quotationdomain.getFileNo() && CommonUtils.isEmpty(quotationdomain.getQuoteFlag())) {
                    setFileList(session, quotationdomain);
                }
            }

            Quotation newQuote = quotationDAO.findById(quotationdomain.getQuoteId());
            Quotation quote = new Quotation();
            PropertyUtils.copyProperties(quote, newQuote);

            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quote.setBlBy(editQuotesform.getBlBy());
                quote.setBlDate(editQuotesform.getBlDate());
            }
            boolean flag = false;
            boolean commentsFlag = false;
            if ("N".equalsIgnoreCase(quotationdomain.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotationdomain);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotationdomain.getQuoteId()));
            if (session.getAttribute(QuotationConstants.QUOTATIONOLD) != null) {
                session.removeAttribute(QuotationConstants.QUOTATIONOLD);
                session.setAttribute(QuotationConstants.QUOTATIONOLD, quotationdomain);
            }
            request.setAttribute("requestObjectVAlue", requestObjectVAlue);
            request.setAttribute("buttonValue", buttonValue);

            forwardName = "editsuccess";
            //setFileList(session,quotationdomain);

        }
        if (buttonValue.equals("previous") || buttonValue.equals("confirmSave")) {
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            Quotation quotationdomain = new Quotation();
            if (buttonValue.equals("confirmSave")) {
                quotationdomain = quotationBC.getFormData(editQuotesform);
            }
            if (buttonValue.equals("previous")) {
                quotationdomain = quotationDAO.findById(new Integer(editQuotesform.getQuotationNo()));
            }
            String recordid = "";
            if (quotationdomain != null && quotationdomain.getFileNo() != null) {
                recordid = quotationdomain.getFileNo();
            }
            if (quotationdomain.getFileNo() == null) {
                List chargesList = chargesDAO.getQuoteId(quotationdomain.getQuoteId());
                for (Iterator iterator = chargesList.iterator(); iterator.hasNext();) {
                    Charges charges = (Charges) iterator.next();
                    chargesDAO.delete(charges);
                }
                removeFileList(session, quotationdomain);
                quotationDAO.delete(quotationdomain);
            } else {
                if (null != quotationdomain.getFileNo()) {
                    setFileList(session, quotationdomain);
                }
            }
            if (CommonFunctions.isNotNull(quotationdomain.getFileNo())) {
                Integer userId = (user1 != null) ? user1.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockQuoteModule"),
                        quotationdomain.getFileNo(), userId);
                session.setAttribute("selectedFileNumber", quotationdomain.getFileNo());
            }
            session.setAttribute("screenName", "fileSearch");
            forwardName = "closeSearch";
        } else if (buttonValue.equals("viewprevious")) {
            Quotation quotation = quotationDAO.findById(new Integer(editQuotesform.getQuotationNo()));
            if (quotation.getFileNo() == null) {
                List chargesList = chargesDAO.getQuoteId(quotation.getQuoteId());
                for (Iterator iterator = chargesList.iterator(); iterator.hasNext();) {
                    Charges charges = (Charges) iterator.next();
                    chargesDAO.delete(charges);
                }
                removeFileList(session, quotation);
                quotationDAO.delete(quotation);
            } else {
                ProcessInfoBC processInfoBC = new ProcessInfoBC();
                if (quotation.getFileNo() != null) {
                    if (CommonFunctions.isNotNull(quotation.getFileNo())) {
                        Integer userId = (user1 != null) ? user1.getUserId() : 0;
                        processInfoBC.releaseLoack(messageResources.getMessage("lockQuoteModule"),
                                quotation.getFileNo(), userId);
                        session.setAttribute("selectedFileNumber", quotation.getFileNo());
                    }
                }
            }
            session.setAttribute("screenName", "fileSearch");
            forwardName = "closeSearch";
        } else if (buttonValue.equals("converttobook") || buttonValue.equals("converttobooknew")) {
            Quotation quotation = quotationDAO.findById(new Integer(editQuotesform.getQuotationNo()));
            String programid = null;
            programid = (String) session.getAttribute("processinfoforquotation");
            String recordid = "";
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            if (CommonFunctions.isNotNull(quotation.getFileNo())) {
                Integer userId = (user1 != null) ? user1.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockQuoteModule"),
                        quotation.getFileNo(), userId);

            }
            if (quotation != null && quotation.getFileNo() != null) {
                recordid = quotation.getFileNo();
            }
            dbUtil.getProcessInfo(programid, recordid, "editcancelled", null);
            if (quotation.getQuoteFlag() != null && quotation.getQuoteFlag().equalsIgnoreCase("Book")) {
                String msg = "This Quote is already Converted into Booking";
                request.setAttribute("msg", msg);
                forwardName = "editsuccess";
            } else {
                quotation.setQuoteFlag("Book");
                quotation.setFinalized("on");
                String msg = quotationBC.doConvertToBooking(quotation, userName, messageResources, bookedDate, editQuotesform, request.getParameter("bkgAlert"));
                quotationBC.saveNotes(quotation, request);
                request.setAttribute("msg", msg);
                if (null != quotation && null != quotation.getFileNo()) {
                    session.setAttribute("selectedFileNumber", quotation.getFileNo());
                }
                session.setAttribute("screenName", "Bookings");
                forwardName = "closeSearch";
            }
            if (quotation.getFileNo() != null) {
                setFileList(session, quotation);
            }

        } else if ("convertToArrivalNotice".equals(buttonValue)) {
            String message = "";
            if (session.getAttribute("loginuser") != null) {
                user1 = (User) session.getAttribute("loginuser");
            }
            Quotation quotation = quotationBC.getFormData(editQuotesform);
            quotation.setFinalized("on"); //-- To make Quote page disabled after converted to Arrival Notice
            Integer quoteId = quotation.getQuoteId();
            quotationDAO.save(quotation);
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            if (CommonFunctions.isNotNull(quotation.getFileNo())) {
                Integer userId = (user1 != null) ? user1.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockQuoteModule"),
                        quotation.getFileNo(), userId);
            }
            FclBl fclBl = quotationBC.convertToArrivalNotice(quotation, editQuotesform, user1);
            List<FclBlContainer> fclBlContainerList = quotationBC.getContainerList(quotation);
            List<Charges> chargesList = quotationBC.getChargesList(quoteId);
            List<FclBlCharges> fclBlChargesList = quotationBC.convertToChargesList(quotation, chargesList);
            List<FclBlCostCodes> fclBlCostCodesList = quotationBC.convertToCostCodesList(quotation, chargesList, messageResources);
            String finalDestination = quotation.getDestination_port();
            QuoteDwrBC quoteDwrBC = new QuoteDwrBC();
            if ("true".equalsIgnoreCase(quoteDwrBC.checkForTheRegion(finalDestination))
                    && (null != quotation.getDeductFfcomm() && "N".equalsIgnoreCase(quotation.getDeductFfcomm()))) {
                if ("true".equals(quoteDwrBC.checkForCommodity(quotation.getCommcode().getCode()))) {
                    if (null != quotation.getClienttype() && FclBlConstants.VENDOR_FORWARDER.equalsIgnoreCase(quotation.getClienttype())
                            && null != quotation.getClientname() && !quotation.getClientname().equalsIgnoreCase(FclBlConstants.FORWARDERNO)
                            && !quotation.getClientname().equalsIgnoreCase(FclBlConstants.FORWARDERNO2)
                            && !quotation.getClientname().equalsIgnoreCase(FclBlConstants.FORWARDERNO3)) {
                        fclBlCostCodesList.add(quotationBC.getFFCommissionCostCodes(messageResources, chargesList, quotation));
                    }

                }
            }
            //-- Cost and Sell Calculation --//
            Double sellAmount = 0.00;
            Double costAmount = 0.00;
            Map<String, String> selectedUnitIds = quotationBC.getSelectedUnitTypeIds(quotation.getSelectedUnits());
            List<Charges> allChargesList = new ArrayList<Charges>();
            if (CommonUtils.isNotEmpty(selectedUnitIds)) {
                for (Map.Entry<String, String> entry : selectedUnitIds.entrySet()) {
                    if (entry.getKey().contains("Y")) {
                        allChargesList.addAll(chargesDAO.getChargesByUnitType(quotation.getQuoteId(), entry.getValue(), "Y"));
                    } else {
                        allChargesList.addAll(chargesDAO.getChargesByUnitType(quotation.getQuoteId(), entry.getValue(), entry.getKey()));
                    }
                }
            }
            allChargesList.addAll(chargesDAO.getOtherCharges(quotation.getQuoteId()));
            if (!allChargesList.isEmpty()) {
                for (Charges charges : allChargesList) {
                    if (null != charges.getAmount()) {
                        costAmount += charges.getAmount();
                        if (null != charges.getChargeFlag() && !("M".equalsIgnoreCase(charges.getChargeFlag()))) {
                            sellAmount += charges.getAmount();
                        }
                    }
                    if (null != charges.getMarkUp()) {
                        sellAmount += charges.getMarkUp();
                    }
                }
            }
            fclBl.setTotal(sellAmount);
            fclBl.setTotalCosts(costAmount);
            //-- Generating Bill of Ladding number --//
            String bolNo = "";
            StringBuilder billOfLaddingNo = new StringBuilder();
            if (quotation.getIssuingTerminal() != null) {
                String issuingTerminal = quotation.getIssuingTerminal();
                if (issuingTerminal.contains("-")) {
                    if (importFlag) {
                        billOfLaddingNo.append(issuingTerminal.split("-")[1]).append("-");
                    } else {
                        String terminalLocation = new RefTerminalDAO().getReferenceLocation(issuingTerminal.split("-")[1]);
                        if (CommonUtils.isNotEmpty(terminalLocation) && terminalLocation.length() > 4) {
                            billOfLaddingNo.append(terminalLocation.substring(2)).append("-");
                        } else {
                            billOfLaddingNo.append(issuingTerminal.split("-")[1]).append("-");
                        }
                    }
                }
            }
            if (quotation.getDestination_port() != null) {
                billOfLaddingNo.append(stringFormatter.getDestinationCodeWithBracket(quotation.getFinaldestination())).append("-");
                bolNo = billOfLaddingNo.toString().replace("(", "").replace(")", "");
            }
            billOfLaddingNo = new StringBuilder();
            billOfLaddingNo.append(bolNo).append("04-").append(quotation.getFileNo());
            fclBl.setBolId(billOfLaddingNo.toString());
            //-- Hazmat details --//
            List<HazmatMaterial> hazmatMaterialList = new ArrayList<HazmatMaterial>();
            if (null != quotation.getHazmatSet() && !quotation.getHazmatSet().isEmpty()) {
                Set<HazmatMaterial> hazmatMaterialSet = quotation.getHazmatSet();
                for (HazmatMaterial hazmatMaterial : hazmatMaterialSet) {
                    if (hazmatMaterial.getDocTypeCode() != null && "Quote".equalsIgnoreCase(hazmatMaterial.getDocTypeCode())) {
                        if (null != hazmatMaterial) {
                            hazmatMaterial.setBolId(null);
                            hazmatMaterial.setDocTypeId("");
                            hazmatMaterialList.add(hazmatMaterial);
                        }
                    }
                }
            }
            session.setAttribute("bookinghazmat", hazmatMaterialList);
            if (null != session.getAttribute("transactionBean")) {
                session.removeAttribute("transactionBean");
            }
            TransactionBean txnBean = new TransactionBean();
            txnBean.setStreamShipBL("P");
            txnBean.setHouseBL("P");
            txnBean.setBLPrinting("Yes");
            txnBean.setNPrinting("Yes");
            txnBean.setOPrinting("Yes");
            message = quotationBC.fclAutoCostCalculation(quotation, fclBl, fclBlChargesList, fclBlCostCodesList);
            session.setAttribute("autoCostmsg", message);
            fclBl.setFclblcostcodes(new LinkedHashSet(fclBlCostCodesList));
            for (FclBlCharges fclBlCharegs : fclBlChargesList) {
                if (fclBlCharegs.getChargeCode() != null
                        && fclBlCharegs.getChargeCode().equalsIgnoreCase(FclBlConstants.ADVANCEFFCODE)
                        || fclBlCharegs.getChargeCode().equalsIgnoreCase(FclBlConstants.ADVANCESHIPPERCODE)) { //-- Set readonly null
                    fclBlCharegs.setReadOnlyFlag(null);
                }
            }
            fclBl.setFclcharge(new LinkedHashSet(fclBlChargesList));
            fclBl.setFclcontainer(new LinkedHashSet(fclBlContainerList));
            new FclBlDAO().save(fclBl);
            request.setAttribute("editFCL", "editFCL");
            quotationBC.setRequest(session, request);
            if (null != fclBl && fclBl.getBol() != null) {
                String idOfNewFileNo = fclBl.getBol().toString();
                request.setAttribute("FileNo", idOfNewFileNo);
            }
            new FclBlUtil().calculateCAF(fclBl.getBol(), finalDestination);
            setFileList(session, quotation);
            if (null != fclBl) {
                session.setAttribute("selectedFileNumber", fclBl.getFileNo());
            }
            session.setAttribute("screenName", "BL");
            forwardName = "closeSearch";
            return mapping.findForward(forwardName);
        } else if ("copyQuoteWithRate".equalsIgnoreCase(buttonValue) || "copyQuoteWithoutRate".equalsIgnoreCase(buttonValue)) {
            Quotation originalQuote = quotationDAO.findById(new Integer(editQuotesform.getQuotationNo()));
            String originalSsline = originalQuote.getSsline();
            Quotation newQuote = new Quotation();
            String programid = null;
            programid = (String) session.getAttribute("processinfoforquotation");
            String recordid = "";
            if (null != originalQuote && originalQuote.getFileNo() != null) {
                recordid = originalQuote.getFileNo();
            }
            dbUtil.getProcessInfo(programid, recordid, "editcancelled", "editcancelled");
            PropertyUtils.copyProperties(newQuote, originalQuote);
            if (CommonUtils.isNotEmpty(editQuotesform.getSelectedOrigin())) {
                newQuote.setOrigin_terminal(editQuotesform.getSelectedOrigin());
                newQuote.setPlor(editQuotesform.getSelectedOrigin());
            }
            if (CommonUtils.isNotEmpty(newQuote.getFileType()) && "I".equalsIgnoreCase(newQuote.getFileType())) {
                newQuote.setSelectedUnits(""); //-- Make selected units empty to uncheck the check boxes, for copied import file types--//
            }
            newQuote.setLocaldryage(editQuotesform.getLocaldryage());
            newQuote.setQuoteId(null);
            newQuote.setQuoteNo("");
            newQuote.setInland("N");
            newQuote.setFinalized("off");
            newQuote.setBookingNo(null);
            newQuote.setQuoteFlag(null);
            newQuote.setBookedBy(null);
            newQuote.setQuoteDate(new Date());
            newQuote.setFrom(from);
            newQuote.setQuoteBy(from);
            newQuote.setSpotRate("N");
            newQuote.setIntermodelComments(null);
            newQuote.setDeliveryChargeComments(null);
            List hazmatList = new ArrayList();
            Set hazmatSet = new LinkedHashSet<HazmatMaterial>();
            if (originalQuote.getHazmatSet() != null) {
                Iterator iter = (Iterator) originalQuote.getHazmatSet().iterator();
                while (iter.hasNext()) {
                    HazmatMaterial haz = (HazmatMaterial) iter.next();
                    if (haz.getDocTypeCode() != null && haz.getDocTypeCode().equals("Quote")) {
                        HazmatMaterial hazmat1 = new HazmatMaterial();
                        PropertyUtils.copyProperties(hazmat1, haz);
                        hazmat1.setBolId(null);
                        hazmat1.setId(null);
                        hazmatSet.add(hazmat1);
                    }
                }
            }
            User userid = null;
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            GenerateFileNumber generateFileNumber = new GenerateFileNumber();// wil generate file number
            generateFileNumber.join();// it wil force thread to complete the task before move to next step
            newQuote.setFileNo("" + generateFileNumber.getFileNumber());
            newQuote.setTypeofMove(originalQuote.getTypeofMove());
            newQuote.setHazmatSet(hazmatSet);
            quotationDAO.save(newQuote);

            String noteDesc = "";
            if (newQuote.getRatesNonRates() != null && newQuote.getRatesNonRates().equals("R")) {
                QuotationDTO quotationDTO = new QuotationDTO(editQuotesform);
                quotationDTO.setOriginCheck(editQuotesform.getOriginCheck());
                quotationDTO.setDestinationCheck(editQuotesform.getDestinationCheck());
                quotationDTO.setPolCheck(editQuotesform.getPolCheck());
                quotationDTO.setPodCheck(editQuotesform.getPodCheck());
                quotationDTO.setCommcode(editQuotesform.getCommcode());
                quotationDTO.setIsTerminal(editQuotesform.getIsTerminal());
                quotationDTO.setRampCity(editQuotesform.getRampCity());
                quotationDTO.setPortofDischarge(editQuotesform.getPortofDischarge());
                quotationDTO.setPlaceofReceipt(editQuotesform.getPlaceofReceipt());
                quotationDTO.setFinalDestination(editQuotesform.getFinalDestination());
                quotationDTO.setButtonValue(editQuotesform.getButtonValue());
                quotationDTO.setTypeOfMove(editQuotesform.getTypeofMove());
                CustomerDAO colDAO = new CustomerDAO();
                String code = "";
                String desc = "";
                String sscode = null;
                ssline = editQuotesform.getSslDescription();
                if (ssline != null) {
                    int i = ssline.indexOf("//");
                    if (i != -1) {
                        String destinationPort[] = ssline.split("//");
                        if (destinationPort.length > 1) {
                            desc = destinationPort[0];
                            code = destinationPort[1];
                        }
                        List list = colDAO.findForAgenttNo1(code, desc);
                        if (list != null && list.size() > 0) {
                            TradingPartnerTemp customerTemp = (TradingPartnerTemp) list.get(0);
                            ssline = customerTemp.getAccountName();
                            sscode = customerTemp.getAccountno();
                        }
                    }
                }
                quotationDTO.setSscode(sscode);
                quotationDTO.setSsline(ssline);
                newQuote.setSsline(sscode);
                newQuote.setSslname(ssline);
                newQuote.setCarrier(ssline);
                newQuote.setDestination_port(editQuotesform.getSelectedDestination());
                new QuotationBC().getRemarksandTransitDaysFromFclSellratesForEdit(newQuote);
                quotationDTO.setHazmat(editQuotesform.getHazmat());
                quotationDTO.setSoc(editQuotesform.getSoc());
                quotationDTO.setSpclEqpmt(editQuotesform.getSpecialequipment());
                quotationDTO.setSelectedOrigin(editQuotesform.getSelectedOrigin());
                quotationDTO.setSelectedDestination(editQuotesform.getSelectedDestination());
                quotationDTO.setSelectedComCode(editQuotesform.getSelectedComCode());
                String temp = "";
                String container = null;
                if (CommonFunctions.isNotNull(editQuotesform.getSelectedCheck())) {
                    container = editQuotesform.getSelectedCheck();
                    quotationDTO.setSelectedCheck(container);
                } else if (CommonFunctions.isNotNull(editQuotesform.getUnitSelect())) {
                    container = editQuotesform.getUnitSelect();
                    quotationDTO.setSelectedCheck(container);
                } else {
                    List fclRates = (List) chargesDAO.getChargesforQuotation1(newQuote.getQuoteId());
                    for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                        Charges charges = (Charges) iterator.next();
                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                        if (genericCode != null) {
                            charges.setUnitName(genericCode.getCodedesc());
                        }
                        if (charges.getUnitName() != null && !temp.contains(charges.getUnitName())) {
                            temp += charges.getUnitName() + ",";
                        }
                    }
                    quotationDTO.setSelectedCheck(temp);
                }
                if (editQuotesform.getIsTerminal().equals(editQuotesform.getCopyOrigin())) {
                    newQuote.setInland("Y");
                } else {
                    newQuote.setInland("N");
                }
                quotationBC.getQuotationRates1(quotationDTO, messageResources, request, newQuote, buttonValue, false);
                List fclRates = (List) cDao.getOtherChargesforCopyQuote(originalQuote.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges originalCharge = (Charges) fclRates.get(i);
                    Charges copyCharge = new Charges();
                    boolean canCopy = false;
                    if (CommonUtils.isEqualIgnoreCase(editQuotesform.getIsTerminal(), editQuotesform.getCopyOrigin())
                            || CommonUtils.isNotEqualIgnoreCase(originalCharge.getChargeCodeDesc(), "INLAND")) {
                        if (CommonUtils.isNotEmpty(originalCharge.getUnitType())
                                && CommonUtils.isNotEqualIgnoreCase(originalCharge.getCostType(), "PER BL CHARGES")) {
                            GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(originalCharge.getUnitType()));
                            if (null != genericCode && null != quotationDTO.getSelectedCheck() && quotationDTO.getSelectedCheck().contains(genericCode.getCodedesc())) {
                                canCopy = true;
                            }
                        }
                        if (canCopy || "PER BL CHARGES".equalsIgnoreCase(originalCharge.getCostType())) {
                            PropertyUtils.copyProperties(copyCharge, originalCharge);
                            copyCharge.setId(null);
                            copyCharge.setQouteId(newQuote.getQuoteId());
                            if (null != copyCharge.getChgCode() && !"INSURANCE".equalsIgnoreCase(copyCharge.getChgCode())
                                    && !"DOCUMENT CHARGE".equalsIgnoreCase(copyCharge.getChgCode()) && null != originalSsline
                                    && originalSsline.equalsIgnoreCase(copyCharge.getAccountNo())) {
                                copyCharge.setAccountName(ssline);
                                copyCharge.setAccountNo(sscode);
                            }
                            cDao.save(copyCharge);
                        }
                    }
                }
            } else {
                if ("copyQuoteWithoutRate".equalsIgnoreCase(buttonValue)) {
                    List fclRates = (List) cDao.getQuoteId(originalQuote.getQuoteId());
                    for (int i = 0; i < fclRates.size(); i++) {
                        Charges c1 = (Charges) fclRates.get(i);
                        Charges c2 = new Charges();
                        PropertyUtils.copyProperties(c2, c1);
                        c2.setId(null);
                        c2.setQouteId(newQuote.getQuoteId());
                        cDao.save(c2);
                    }
                }
            }
            if (null != newQuote.getFileNo()) {
                setFileListCopyQuote(session, newQuote, "" + originalQuote.getFileNo());
            }
//This logic is use to set inland value N if Copied quote (i.e new quote) doesn't contain any Inland rates but original quotes selected with inland Y
//Begin
            List<Charges> copiedFclOtherRates = cDao.getOtherChargesforCopyQuote(newQuote.getQuoteId());
            boolean _hasInlandChargeCode = false;
            for (Charges charges : copiedFclOtherRates) {
                if (("INLAND").equalsIgnoreCase(charges.getChargeCodeDesc())) {
                    _hasInlandChargeCode = true;
                }
            }
            if (_hasInlandChargeCode) {
                newQuote.setInland("Y");
            } else {
                newQuote.setInland("N");
            }
//End
            quotationDAO.updateCopyQuoteAdjustment(originalQuote.getQuoteId(), newQuote.getQuoteId());
            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            if (CommonFunctions.isNotNull(originalQuote.getFileNo())) {
                Integer userId = (user1 != null) ? user1.getUserId() : 0;
                processInfoBC.releaseLoack(messageResources.getMessage("lockQuoteModule"),
                        originalQuote.getFileNo(), userId);

            }
            notes.setModuleId("FILE");
            notes.setUpdateDate(new Date());
            notes.setNoteTpye("auto");
            notes.setNoteDesc("Quotes is copied from file " + originalQuote.getFileNo() + ". " + noteDesc);
            notes.setUpdatedBy(user1.getLoginName());
            notes.setModuleRefId(newQuote.getFileNo());
            new NotesDAO().save(notes);
            session.setAttribute("selectedFileNumber", generateFileNumber.getFileNumber());
            session.setAttribute("screenName", "copyQuote");
            forwardName = "closeSearch";
        } else if (buttonValue.equals("quoteDetails") || buttonValue.equals("quoteReport")) {
            String printRemarks = editQuotesform.getPrintRemarks();
            String regionRemarks = "";
            String outputFileName = LoadLogisoftProperties.getProperty("reportLocation");
            QuotationReportBC quotationReportBC = new QuotationReportBC();
            File file = new File(outputFileName + "/" + ReportConstants.FCL_QUOTATION);
            if (!file.exists()) {
                file.mkdir();
            }
            User user = new User();
            if (session.getAttribute("loginuser") != null) {
                user = (com.gp.cong.logisoft.domain.User) session.getAttribute("loginuser");
            }

            String realPath = this.getServlet().getServletContext().getRealPath("/");
            if (editQuotesform.getQuotationNo() != null && !editQuotesform.getQuotationNo().trim().equals("")) {
                outputFileName = outputFileName + "/" + ReportConstants.FCL_QUOTATION + "/" + editQuotesform.getQuotationNo() + ".pdf";
                quotationReportBC.createQuotationPDF(editQuotesform.getQuotationNo(), outputFileName, realPath,
                        messageResources, user, printRemarks, regionRemarks, "", "", request);
            }
            request.setAttribute("fileName", outputFileName);
            Quotation quotation = quotationDAO.findById(Integer.parseInt(editQuotesform.getQuotationNo()));
            if (quotation.getMyr() == null || quotation.getMyr().equals("")) {
                quotation.setMyr(0.00);
            }
            if (quotation.getNht() == null || quotation.getNht().equals("")) {
                quotation.setNht(0.00);
            }
            if (quotation.getPkr() == null || quotation.getPkr().equals("")) {
                quotation.setPkr(0.00);
            }
            if (quotation.getRm() == null || quotation.getRm().equals("")) {
                quotation.setRm(0.00);
            }
            if (quotation.getSpo() == null || quotation.getSpo().equals("")) {
                quotation.setSpo(0.00);
            }
            if (quotation.getVnd() == null || quotation.getVnd().equals("")) {
                quotation.setVnd(0.00);
            }
            if (quotation.getInr() == null || quotation.getInr().equals("")) {
                quotation.setInr(0.00);
            }

            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());

            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            String check1 = editQuotesform.getCheck1();
            String print[] = StringUtils.split(check1, ",");
            for (int i = 0; i < print.length; i++) {
                String tempChargeCode = "";
                String tempUnitType = "";
                String standarCode = "";
                if (editQuotesform.getCollapseid().equals("collapse")) {
                    tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                    tempUnitType = editQuotesform.getHiddenunitType()[i];
                    standarCode = editQuotesform.getStandardChargeCollapse()[i];
                } else {
                    tempChargeCode = editQuotesform.getChargeCodes()[i];
                    tempUnitType = editQuotesform.getUnitType()[i];
                    standarCode = editQuotesform.getStandardCharge()[i];
                }
                for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                    Charges charges = (Charges) iterator.next();
                    if (charges.getChgCode() != null && charges.getUnitName() != null
                            && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                            && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                        String bundleInToOFR = print[i];
                        if (bundleInToOFR.equalsIgnoreCase("1")) {
                            charges.setPrint("on");
                        } else {
                            charges.setPrint("off");
                        }
                    }
                }
            }
//            for (int i = 0; i < fclRates.size(); i++) {
//                Charges c1 = (Charges) fclRates.get(i);
//                if (c1.getAccountNo() != null) {
//                    if (!c1.getAccountNo().equals(
//                            request.getParameter("accountno" + i))) {
//                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
//                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
//                            if (list != null && list.size() > 0) {
//                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
//                                c1.setAccountNo(customer1.getAccountNo());
//                                c1.setAccountName(customer1.getAccountName());
//                            }
//                        }
//                    }
//                } else {
//                    if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
//                        List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
//                        if (list != null && list.size() > 0) {
//                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
//                            c1.setAccountNo(customer1.getAccountNo());
//                            c1.setAccountName(customer1.getAccountName());
//                        }
//                    }
//                }
//                String accountName = "";
//                if (request.getParameter("accountname" + i) != null) {
//                    accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
//                }
//                if (c1.getAccountName() != null) {
//                    if (!c1.getAccountName().equals(accountName)) {
//                        if (accountName != null && !accountName.equals("")) {
//                            List list = customerDAO.findForAgenttNo(null, accountName);
//                            if (list != null && list.size() > 0) {
//                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
//                                c1.setAccountNo(customer1.getAccountNo());
//                                c1.setAccountName(customer1.getAccountName());
//                            }
//                        }
//                    }
//                } else {
//                    if (accountName != null && !accountName.equals("")) {
//                        List list = customerDAO.findForAgenttNo(null, accountName);
//                        if (list != null && list.size() > 0) {
//                            CustomerTemp customer1 = (CustomerTemp) list.get(0);
//                            c1.setAccountNo(customer1.getAccountNo());
//                            c1.setAccountName(customer1.getAccountName());
//                        }
//                    }
//                }
//            }
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            List otherChargesList = new ArrayList();
            List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            forwardName = "editsuccess";
        } else if (buttonValue != null && (buttonValue.equals("quotePrint") || buttonValue.equals("quotePrintwithoutsave"))) {

            String fileNo = editQuotesform.getFileNumber();

            Quotation quotation = new Quotation();
            if (buttonValue.equals("quotePrintwithoutsave")) {
                quotation = quotationDAO.findById(Integer.parseInt(editQuotesform.getQuotationNo()));
            } else {
                quotation = quotationBC.getFormData(editQuotesform);
            }
            quotation.setRemarks(editQuotesform.getRemarks());
            quotation.setOnCarriage(null != editQuotesform.getOnCarriage() ? editQuotesform.getOnCarriage() : null);
            if (quotation.getMyr() == null) {
                quotation.setMyr(0.00);
            }
            if (quotation.getNht() == null) {
                quotation.setNht(0.00);
            }
            if (quotation.getPkr() == null) {
                quotation.setPkr(0.00);
            }
            if (quotation.getRm() == null) {
                quotation.setRm(0.00);
            }
            if (quotation.getSpo() == null) {
                quotation.setSpo(0.00);
            }
            if (quotation.getVnd() == null) {
                quotation.setVnd(0.00);
            }
            if (quotation.getInr() == null) {
                quotation.setInr(0.00);
            }
            quotationDAO.save(quotation);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            String check1 = editQuotesform.getCheck1();
            String print[] = StringUtils.split(check1, ",");
            for (int i = 0; i < print.length; i++) {
                String tempChargeCode = "";
                String tempUnitType = "";
                String standarCode = "";
                if (editQuotesform.getCollapseid().equals("collapse")) {
                    tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                    tempUnitType = editQuotesform.getHiddenunitType()[i];
                    standarCode = editQuotesform.getStandardChargeCollapse()[i];
                } else {
                    tempChargeCode = editQuotesform.getChargeCodes()[i];
                    tempUnitType = editQuotesform.getUnitType()[i];
                    standarCode = editQuotesform.getStandardCharge()[i];
                }
                for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                    Charges charges = (Charges) iterator.next();
                    if (charges.getChgCode() != null && charges.getUnitName() != null
                            && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                            && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                        String bundleInToOFR = print[i];
                        if (bundleInToOFR.equalsIgnoreCase("1")) {
                            charges.setPrint("on");
                        } else {
                            charges.setPrint("off");
                        }
                    }
                }
            }
            quotationBC.getCharges(fclRates, messageResources, quotation, request);
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            List otherChargesList = new ArrayList();
            List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherChargesLIst.size(); i++) {
                Charges c1 = (Charges) otherChargesLIst.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otherChargesList.add(c1);
                }
            }
            String check3 = editQuotesform.getCheck3();
            String otherPrint[] = StringUtils.split(check3, ",");
            int j = 0;

            for (Iterator iterator = otherChargesList.iterator(); iterator.hasNext();) {
                Charges charges = (Charges) iterator.next();
                if (otherPrint.length > j) {
                    String bundleInToOFR = otherPrint[j];
                    if (bundleInToOFR.equalsIgnoreCase("1")) {
                        charges.setOtherprint("on");
                    } else {
                        charges.setOtherprint("off");
                    }
                }
                j++;
            }
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            forwardName = "editsuccess";
        } else if (buttonValue != null && buttonValue.equals("deleteCharge")) {
            QuotationReportBC quotationReportBC = new QuotationReportBC();
            // deleting charge code:-----
            Charges docCharge = new ChargesDAO().findById(new Integer(editQuotesform.getNumbIdx()));
            Quotation quotation = quotationReportBC.getQuotation(editQuotesform.getQuotationNo());
            if (null != docCharge.getChargeCodeDesc() && docCharge.getChargeCodeDesc().equals("DOCUM")) {
                quotation.setDocCharge("N");
                quotation.setDocumentAmount(0d);
            } else if (null != docCharge.getChargeCodeDesc() && docCharge.getChargeCodeDesc().equals("DOCUM")) {
                quotation.setCostofgoods(0.00);
                quotation.setInsuranceCharge(0.00);
                quotation.setInsurancamt(0.00);
                quotation.setInsurance("N");
            }
            quotationBC.deleteCharge(editQuotesform.getNumbIdx());
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            String check1 = editQuotesform.getCheck1();
            String print[] = StringUtils.split(check1, ",");
            for (int i = 0; i < print.length; i++) {
                String tempChargeCode = "";
                String tempUnitType = "";
                String standarCode = "";
                if (editQuotesform.getCollapseid().equals("collapse")) {
                    tempChargeCode = editQuotesform.getHiddenchargeCodes()[i];
                    tempUnitType = editQuotesform.getHiddenunitType()[i];
                    standarCode = editQuotesform.getStandardChargeCollapse()[i];
                } else {
                    tempChargeCode = editQuotesform.getChargeCodes()[i];
                    tempUnitType = editQuotesform.getUnitType()[i];
                    standarCode = editQuotesform.getStandardCharge()[i];
                }
                for (Iterator iterator = fclRates.iterator(); iterator.hasNext();) {
                    Charges charges = (Charges) iterator.next();
                    if (charges.getChgCode() != null && charges.getUnitName() != null
                            && charges.getChgCode().equals(tempChargeCode) && charges.getUnitName().equals(tempUnitType)
                            && null != charges.getStandardCharge() && charges.getStandardCharge().equals(standarCode)) {
                        String bundleInToOFR = print[i];
                        if (bundleInToOFR.equalsIgnoreCase("1")) {
                            charges.setPrint("on");
                        } else {
                            charges.setPrint("off");
                        }
                    }
                }
            }
            if ("R".equalsIgnoreCase(quotation.getRatesNonRates())) {
                fclRates = quotationBC.setMarkUp(fclRates, editQuotesform, messageResources, userName);
            }
            quotation = quotationBC.getCurrencyForQuotation(fclRates, quotation, messageResources);

            List otherChargesList = new ArrayList();
            List otehrChargesList1 = new ArrayList();
            otherChargesList = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherChargesList.size(); i++) {
                Charges c1 = (Charges) otherChargesList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otehrChargesList1.add(c1);
                }
            }
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);

            quotation = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotation, messageResources);
            // quotation.setTotalCharges(quotation.getTotalCharges()+totalCharges);
            if (quotation.getInsurance().equals("Y")) {
                quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && "Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotation, messageResources);
                } else {
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                }
            }
            quotationBC.getCharges(fclRates, messageResources, quotation, request);
            //--to display BlBy and Bl on date-----
            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quotation.setBlBy(editQuotesform.getBlBy());
                quotation.setBlDate(editQuotesform.getBlDate());
            }
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otehrChargesList1);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            forwardName = "editsuccess";
        } else if ("addSpecialEquipment".equalsIgnoreCase(buttonValue) || "updateSpecialEquipment".equalsIgnoreCase(buttonValue) || "addSpecialEquipmentComment".equals(buttonValue)) {
            Quotation quotation = quotationBC.getFormData(editQuotesform);
//            quotation.setSpecialEquipmentUnittype(editQuotesform.getSpecialEqpmtUnit());
            if ("addSpecialEquipmentComment".equals(buttonValue)) {
                addSpecialEquipmentComment(editQuotesform.getNumbIdx(), editQuotesform.getStandardChargeIndex(), editQuotesform.getOutOfGuageComment(), quotation.getQuoteId());
            } else {
                addOrUpdateSpecialEquipmentCharges(editQuotesform.getSpecialEqpmtUnit(), editQuotesform.getSpecialEqpmt(), quotation.getQuoteId(), buttonValue);
            }
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            for (int i = 0; i < fclRates.size(); i++) {
                Charges charges = (Charges) fclRates.get(i);
                GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                if (genericCode != null) {
                    charges.setUnitName(genericCode.getCodedesc());
                }
            }
            quotation = quotationBC.getCurrencyForQuotation(fclRates, quotation, messageResources);
            List otherChargesList = new ArrayList();
            List otehrChargesList1 = new ArrayList();
            otherChargesList = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
            List perkglbsList = new ArrayList();
            for (int i = 0; i < otherChargesList.size(); i++) {
                Charges c1 = (Charges) otherChargesList.get(i);
                if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkglbsList.add(c1);
                } else {
                    otehrChargesList1.add(c1);
                }
            }
            request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);

            quotation = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotation, messageResources);
            // quotation.setTotalCharges(quotation.getTotalCharges()+totalCharges);
            if (quotation.getInsurance().equals("Y")) {
                quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(editQuotesform.getInsurancamt())));
                if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && "Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    otherChargesList = quotationBC.getInsuranceCostofGoodsForNonRated(otherChargesList, quotation, messageResources);
                } else {
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                }
            }
            quotationBC.getCharges(fclRates, messageResources, quotation, request);
            //--to display BlBy and Bl on date-----
            if (editQuotesform.getBlBy() != null && editQuotesform.getBlDate() != null) {
                quotation.setBlBy(editQuotesform.getBlBy());
                quotation.setBlDate(editQuotesform.getBlDate());
            }
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
            } else {
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources, importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, orderExpandList(fclRates));
            }
            request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otehrChargesList1);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            forwardName = "editsuccess";
        } else if (buttonValue != null && buttonValue.equals("changeOriginDestination")) {
            String quotationNo = editQuotesform.getQuotationNo();
            Quotation quotation = quotationBC.getFormData(editQuotesform);
            quotation.setLocaldryage("N");
            quotation.setInland("N");
            quotation.setDocCharge("N");
            quotation.setIntermodel("N");
            quotation.setInsurance("N");
            quotation.setDeductFfcomm("N");
            quotation.setHazmat("N");
            quotation.setPlor("");
            quotation.setNoOfDays("");
            quotation.setSslname("");
            quotation.setSsline("");
            quotation.setDestination_port("");
            quotation.setRemarks("");
            quotation.setRatesRemarks("");
            quotation.setFclTempRemarks("");
            quotation.setFclGRIRemarks("");
            quotation.setRegionRemarks("");
            quotation.setRoutedAgentCheck("");
            quotation.setRoutedbymsg("");
            quotation.setAgent("");
            quotation.setAgentNo("");
            quotation.setSpotRate("N");
            quotation.setBulletRatesCheck(null);
            quotation.setGreendollarSignClickCount(0);
            quotation.setOceanFreightAdjustment(0d);
            quotation.setAdminAdjustment(0d);
            quotationDAO.update(quotation);
            quotationDAO.clearSpotCost(quotation.getFileNo());

            //-----REMOVE ALL THE EXISTING CHARGES & HAZMAT DETAILS-------
            String msg = quotationBC.deleteAllExistingChargesAndHazmatDetails(quotationNo);
            request.setAttribute("msg", msg);
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            forwardName = "editsuccess";
        } else if (buttonValue != null && buttonValue.equals("applyDefaultValues")) {
            String quotationNo = editQuotesform.getQuotationNo();
            Quotation quotation = quotationBC.getFormData(editQuotesform);
            quotation.setLocaldryage("N");
            quotation.setInland("N");
            quotation.setIntermodel("N");
            quotation.setInsurance("N");
            quotation.setHazmat("N");
            quotation.setNoOfDays("");
            quotation.setSslname("");
            quotation.setSsline("");
            quotationDAO.update(quotation);
            notes.setModuleId("FILE");
            notes.setUpdateDate(new Date());
            notes.setNoteTpye("auto");
            notes.setNoteDesc("Important Notes ---> '" + editQuotesform.getImportantNotes() + "' ");
            notes.setUpdatedBy(user1.getLoginName());
            notes.setModuleRefId(quotation.getFileNo());
            notesDAO.save(notes);
            //-----REMOVE ALL THE EXISTING CHARGES & HAZMAT DETAILS-------
            quotationBC.deleteAllExistingChargesAndHazmatDetails(quotationNo);
            if ("N".equalsIgnoreCase(quotation.getRatesNonRates()) && CommonUtils.isNotEmpty(quotation.getDestination_port()) && CommonUtils.isNotEmpty(quotation.getOrigin_terminal())) {
                if ("Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                    saveDefaultCharges(quotation.getClientnumber(), quotation.getQuoteId(), "PER BL CHARGES");
                } else {
                    saveDefaultCharges(quotation.getClientnumber(), quotation.getQuoteId(), "PER CONTAINER SIZE");
                }
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    if (genericCode != null) {
                        charges.setUnitName(genericCode.getCodedesc());
                    }
                }
                request.setAttribute("consolidatorList", orderNonRatedList(fclRates));
                request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(fclRates));
                List otherChargesList = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
            }
            request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
            request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
            forwardName = "editsuccess";
        }
        //This is for setting hazardous message inside quotation if it contains any hazardous
        if (null != buttonValue && !buttonValue.equals("")) {
            Quotation quotation = quotationBC.getQuotationObj(editQuotesform);
            //In quotation right now if the hazmat radio button is clicked to yes then we will consider it as hazardous
            //so no need to check in the database for hazmat material's
            if (null != quotation && null != quotation.getHazmat() && quotation.getHazmat().equalsIgnoreCase("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }
        }
        return mapping.findForward(forwardName);
    }

    public void setFileList(HttpSession session, Quotation q1) throws Exception {
        QuotationBC quotationBC = new QuotationBC();
        String status = "";
        if (session.getAttribute("SearchListByfileNumber") != null && q1.getFileNo() != null) {
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            boolean flag = true;
            for (int i = 0; i < getFileList.size(); i++) {
                FileNumberForQuotaionBLBooking fileNumberForQuotaionBLBooking = (FileNumberForQuotaionBLBooking) getFileList.get(i);
                if (fileNumberForQuotaionBLBooking.getQuotId() != null && q1 != null
                        && fileNumberForQuotaionBLBooking.getQuotId().toString().equals(q1.getQuoteId().toString())) {
                    BookingFclDAO bookingFclDAO = new BookingFclDAO();
                    QuotationDAO quote = new QuotationDAO();
                    fileNumberForQuotaionBLBooking.setFileNo(q1.getFileNo());
                    Quotation quo = quote.getFileNoObject(fileNumberForQuotaionBLBooking.getFileNo());
                    FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(quo, null, null);
                    if (null != quo && null != fileNoObject) {
                        fileNoObject.setRatesNonRates(quo.getRatesNonRates());
                        fileNoObject.setDoorOrigin(quo.getDoorOrigin());
                        if (quo.getHazmat() != null && quo.getHazmat().equalsIgnoreCase("Y")) {
                            fileNoObject.setHazmat("H");
                        }
                        if (null != fileNumberForQuotaionBLBooking.getFclBlStatus()) {
                            status = fileNumberForQuotaionBLBooking.getFclBlStatus().replaceAll("null", "");
                        }
                        status = ("P".equals(q1.getFileType())) ? ((status.contains("P")) ? status
                                : status + "P" + ",")
                                : (status.contains("P")) ? status.replace(",P", ",") : status;
                        status = ("N".equals(q1.getRatesNonRates())) ? ((status.contains("NR")) ? status
                                : status + "NR" + ",")
                                : (status.contains("NR")) ? status.replace(",NR", ",") : status;
                        BookingFcl bookingFcl = bookingFclDAO.getFileNoObject(q1.getFileNo());
                        fileNoObject.setFclBlStatus(CommonFunctions.isNotNull(status) ? status.replaceAll(",,", ",") : "");
                        if (bookingFcl != null) {
                            fileNoObject.setBookedBy(bookingFcl.getUsername());
                        }
                        FclBl fclBl = quotationBC.getfclby(q1.getFileNo());
                        if (fclBl != null) {
                            if (null != bookingFcl && null != bookingFcl.getBookingId()) {
                                fileNoObject.setFclBlId(bookingFcl.getBookingId());
                                fileNoObject.setQuotId(null);
                            } else {
                                fileNoObject.setFclBlId(fclBl.getBol());
                            }
                            fileNoObject.setBookingId(null);
                        } else if (bookingFcl != null) {
                            fileNoObject.setBookingId(bookingFcl.getBookingId());
                            //fileNoObject.setQuotId(null);
                        }
                        fileNoObject.setDisplayColor("RED");
                        getFileList.set(i, fileNoObject);
                        flag = false;
                    }
                    break;
                }
            }
            if (flag) {
                setFileList1(session, q1);
            } else {
                session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
            }

        } else {
            BookingFclDAO bookingFclDAO = new BookingFclDAO();
            QuotationDAO quote = new QuotationDAO();
            List getFileList = new ArrayList();
            Quotation quo = q1;
            FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(quo, null, null);
            fileNoObject.setRatesNonRates(quo.getRatesNonRates());
            fileNoObject.setDoorOrigin(quo.getDoorOrigin());
            if (quo.getHazmat() != null && quo.getHazmat().equalsIgnoreCase("Y")) {
                fileNoObject.setHazmat("H");
            }
            BookingFcl bookingFcl = bookingFclDAO.getFileNoObject(q1.getFileNo());
            if (bookingFcl != null) {
                fileNoObject.setBookedBy(bookingFcl.getUsername());
            }
            FclBl fclBl = quotationBC.getfclby(q1.getFileNo());
            if (fclBl != null) {
                if (null != bookingFcl && null != bookingFcl.getBookingId()) {
                    fileNoObject.setFclBlId(bookingFcl.getBookingId());
                    fileNoObject.setQuotId(null);
                } else {
                    fileNoObject.setFclBlId(fclBl.getBol());
                }
                fileNoObject.setBookingId(null);
            } else if (bookingFcl != null) {
                fileNoObject.setBookingId(bookingFcl.getBookingId());
                //fileNoObject.setQuotId(null);
            }
            fileNoObject.setDisplayColor("RED");
            getFileList.add(fileNoObject);
            //getFileList.set(0, fileNoObject);
            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void removeFileList(HttpSession session, Quotation q1) {
        if (session.getAttribute("SearchListByfileNumber") != null && q1.getFileNo() != null) {
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            for (int i = 0; i < getFileList.size(); i++) {
                FileNumberForQuotaionBLBooking fileNumberForQuotaionBLBooking = (FileNumberForQuotaionBLBooking) getFileList.get(i);
                if (fileNumberForQuotaionBLBooking.getQuotId() != null && q1 != null
                        && fileNumberForQuotaionBLBooking.getQuotId().equals(q1.getQuoteId())) {
                    getFileList.remove(fileNumberForQuotaionBLBooking);
                    break;

                }
            }

            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void setFileListCopyQuote(HttpSession session, Quotation q1, String fileNumber) {
        String status = "";
        if (session.getAttribute("SearchListByfileNumber") != null && q1.getFileNo() != null) {
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            for (Iterator it = getFileList.iterator(); it.hasNext();) {
                FileNumberForQuotaionBLBooking fileNumberForQuotaionBLBooking = (FileNumberForQuotaionBLBooking) it.next();
                if (null != fileNumber && fileNumber.equals(fileNumberForQuotaionBLBooking.getFileNo())) {
                    fileNumberForQuotaionBLBooking.setDisplayColor(null);
                    break;
                }
            }
            FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(q1, null, null);
            if (q1.getHazmat() != null && q1.getHazmat().equalsIgnoreCase("Y")) {
                fileNoObject.setHazmat("H");
            }
            status = ("N".equals(q1.getRatesNonRates())) ? ((status.contains("NR")) ? status
                    : status + "NR" + ",")
                    : (status.contains("NR")) ? status.replace(",NR", ",") : status;
            fileNoObject.setFclBlStatus(CommonFunctions.isNotNull(status) ? status.replaceAll(",,", ",") : "");
            fileNoObject.setDisplayColor("RED");
            fileNoObject.setRatesNonRates(q1.getRatesNonRates());
            getFileList.add(0, fileNoObject);
            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void setFileList1(HttpSession session, Quotation q1) {
        if (session.getAttribute("SearchListByfileNumber") != null && q1.getFileNo() != null) {
            String status = "";
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(q1, null, null);
            if (q1.getHazmat() != null && q1.getHazmat().equalsIgnoreCase("Y")) {
                fileNoObject.setHazmat("H");
            }
            if (null != fileNoObject.getFclBlStatus()) {
                status = fileNoObject.getFclBlStatus().replaceAll("null", "");
            }
            status = ("P".equals(q1.getFileType())) ? ((status.contains("P")) ? status
                    : status + "P" + ",")
                    : (status.contains("P")) ? status.replace(",P", ",") : status;
            fileNoObject.setFclBlStatus(CommonFunctions.isNotNull(status) ? status.replaceAll(",,", ",") : "");
            fileNoObject.setDisplayColor("RED");
            fileNoObject.setRatesNonRates(q1.getRatesNonRates());
            getFileList.add(0, fileNoObject);
            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void redirectToReport(HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.sendRedirect(request.getContextPath() + "/report");
    }

    public boolean validate(SearchQuotationForm form, Quotation quotation1) throws Exception {
        QuotationBC quotationBC = new QuotationBC();
        Quotation quotation2 = quotationBC.getFormData(form);
        return quotation2.equals(quotation1);
    }

    /**
     * @param editQuotesform
     * @param messageResources
     * @param request
     */
    public void setRequestsForQuotation(SearchQuotationForm editQuotesform, MessageResources messageResources, HttpServletRequest request) throws Exception {
        QuotationBC quotationBC = new QuotationBC();
        ChargesDAO chargesDAO = new ChargesDAO();
        Quotation quotation = quotationBC.getFormData(editQuotesform);
        List chargesList = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
        List otherChargesList = new ArrayList();
        List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
        boolean importFlag = quotation.getFileType().equalsIgnoreCase("I");
        List perkglbsList = new ArrayList();
        for (int i = 0; i < otherChargesLIst.size(); i++) {
            Charges c1 = (Charges) otherChargesLIst.get(i);
            if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                perkglbsList.add(c1);
            } else {
                otherChargesList.add(c1);
            }
        }
        List consolidatorList = quotationBC.consolidateRates(chargesList, messageResources, importFlag);
        if ("N".equalsIgnoreCase(quotation.getRatesNonRates())) {
            request.setAttribute("consolidatorList", orderNonRatedList(chargesList));
            request.setAttribute(QuotationConstants.FCLRATES, orderNonRatedList(chargesList));
        } else {
            request.setAttribute("consolidatorList", consolidatorList);
            request.setAttribute(QuotationConstants.FCLRATES, chargesList);
        }
        request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
        request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
        request.setAttribute(QuotationConstants.QUOTEVALUES, quotationBC.getFormData(editQuotesform));
        request.setAttribute("specialEquipmentUnitList", chargesDAO.getGroupByUnitType(quotation.getQuoteId()));
    }

    public void addOrUpdateSpecialEquipmentCharges(String unitType, String desc, int id, String buttonValue) throws Exception {
        GenericCode genericCode = new GenericCodeDAO().findByCodeDesc(unitType);
        if (null != genericCode) {
            if ("updateSpecialEquipment".equalsIgnoreCase(buttonValue)) {
                List chargesList = new ChargesDAO().getStandardCharge(id, "" + genericCode.getId());
                if (!chargesList.isEmpty()) {
                    for (Object object : chargesList) {
                        Charges charges = (Charges) object;
                        charges.setSpecialEquipment(desc);
                        charges.setSpecialEquipmentUnit(genericCode.getCode());
                    }
                }
            } else {
                int standardIndex = new ChargesDAO().getStandardChargeIndex(id, genericCode.getCode(), desc);
                List chargesList = new ChargesDAO().getEquipmentChargeToAdd(id, "" + genericCode.getId(), standardIndex);
                standardIndex = standardIndex + 1;
                for (Object object : chargesList) {
                    Charges charges = (Charges) object;
                    Charges newCharges = new Charges();
                    newCharges.setQouteId(charges.getQouteId());
                    newCharges.setUnitType(charges.getUnitType());
                    newCharges.setAccountName(charges.getAccountName());
                    newCharges.setAccountNo(charges.getAccountNo());
                    newCharges.setChargeCodeDesc(charges.getChargeCodeDesc());
                    newCharges.setChgCode(charges.getChgCode());
                    newCharges.setCommcode(charges.getCommcode());
                    newCharges.setAdjestment(charges.getAdjestment());
                    newCharges.setAmount(charges.getAmount());
                    newCharges.setMarkUp(charges.getMarkUp());
                    newCharges.setCurrecny(charges.getCurrecny());
                    newCharges.setCostType(charges.getCostType());
                    newCharges.setNumber(charges.getNumber());
                    newCharges.setChargeFlag(charges.getChargeFlag());
                    newCharges.setSpecialEquipment(desc);
                    newCharges.setSpecialEquipmentUnit(genericCode.getCode());
                    newCharges.setEfectiveDate(charges.getEfectiveDate());
                    newCharges.setStandardCharge("" + standardIndex);
                    new ChargesDAO().save(newCharges);
                }
            }
        }
    }

    public void addSpecialEquipmentComment(String unit, String index, String comment, int quoteId) throws Exception {
        List l = new ChargesDAO().getChargeByEquipmentUnit(quoteId, unit, index);
        for (Iterator it = l.iterator(); it.hasNext();) {
            Charges charges = (Charges) it.next();
            charges.setOutOfGaugeComment(comment);
        }
    }

    public List orderExpandList(List ratesList) throws Exception {
        TreeMap<String, Charges> map = new TreeMap<String, Charges>();
        List resultList = new ArrayList();
        for (Iterator it = ratesList.iterator(); it.hasNext();) {
            Charges charges = (Charges) it.next();
            String flag = "";
            String unitFlag = "";
            String standardFlag = "";
            GenericCode genericCode = new GenericCodeDAO().findById(Integer.parseInt(charges.getUnitType()));
            if (CommonUtils.isNotEmpty(charges.getSpecialEquipmentUnit())) {
                unitFlag = charges.getSpecialEquipmentUnit();
                if ("Y".equalsIgnoreCase(charges.getStandardCharge())) {
                    standardFlag = "0";
                } else {
                    if (null != charges.getStandardCharge()) {
                        standardFlag = charges.getStandardCharge();
                    } else {
                        standardFlag = "9";
                    }
                }
                if ("OCNFRT".equals(charges.getChargeCodeDesc())) {
                    flag = "BAAA";
                } else if (CommonUtils.isNotEmpty(charges.getChargeFlag())) {
                    flag = "B" + charges.getChargeFlag();
                } else if (charges.getChargeCodeDesc().startsWith("INT")) {
                    if (charges.getChargeCodeDesc().equals("INTRAMP")) {
                        flag = "BAZ";
                    } else if (charges.getChargeCodeDesc().startsWith("INT")) {
                        flag = "BAZZ";
                    }
                } else {
                    flag = "BA";
                }
            } else {
                if (null != genericCode) {
                    unitFlag = genericCode.getCode() + genericCode.getCode();
                }
                if ("Y".equalsIgnoreCase(charges.getStandardCharge())) {
                    standardFlag = "0";
                } else {
                    if (null != charges.getStandardCharge()) {
                        standardFlag = charges.getStandardCharge();
                    } else {
                        standardFlag = "9";
                    }
                }
                if ("OCNFRT".equals(charges.getChargeCodeDesc())) {
                    flag = "AAAA";
                } else if (CommonUtils.isNotEmpty(charges.getChargeFlag())) {
                    flag = "A" + charges.getChargeFlag();
                } else if (charges.getChargeCodeDesc().startsWith("INT")) {
                    if (charges.getChargeCodeDesc().equals("INTRAMP")) {
                        flag = "AAZ";
                    } else if (charges.getChargeCodeDesc().startsWith("INT")) {
                        flag = "AAZZ";
                    }
                } else {
                    flag = "AA";
                }
            }
            map.put(charges.getUnitType() + standardFlag + flag + unitFlag + charges.getChargeCodeDesc(), charges);
        }
        Set keySet = map.keySet();
        for (Iterator it = keySet.iterator(); it.hasNext();) {
            String key = (String) it.next();
            resultList.add(map.get(key));
        }
        return resultList;
    }

    public List orderNonRatedList(List ratesList) throws Exception {
        TreeMap<String, Charges> map = new TreeMap<String, Charges>();
        List resultList = new ArrayList();
        for (Iterator it = ratesList.iterator(); it.hasNext();) {
            Charges charges = (Charges) it.next();
            String flag = "";
            String unitFlag = "";
            String standardFlag = "";
            GenericCode genericCode = new GenericCodeDAO().findById(Integer.parseInt(charges.getUnitType()));
            if ("Y".equalsIgnoreCase(charges.getStandardCharge())) {
                standardFlag = "0";
            } else {
                if (null != charges.getStandardCharge()) {
                    standardFlag = charges.getStandardCharge();
                } else {
                    standardFlag = "9";
                }
            }
            if (CommonUtils.isNotEmpty(charges.getSpecialEquipmentUnit())) {
                unitFlag = charges.getSpecialEquipmentUnit();
                if ("OCNFRT".equals(charges.getChargeCodeDesc())) {
                    flag = "BAAA";
                } else if (CommonUtils.isNotEmpty(charges.getChargeFlag())) {
                    flag = "B" + charges.getChargeFlag();
                } else {
                    flag = "BA";
                }
            } else {
                if (null != genericCode) {
                    unitFlag = genericCode.getCode() + genericCode.getCode();
                }
                if ("OCNFRT".equals(charges.getChargeCodeDesc())) {
                    flag = "AAAA";
                } else if (CommonUtils.isNotEmpty(charges.getChargeFlag())) {
                    flag = "A" + charges.getChargeFlag();
                } else {
                    flag = "AA";
                }
            }
            map.put(charges.getUnitType() + standardFlag + flag + unitFlag + charges.getChargeCodeDesc() + "" + charges.getId(), charges);
        }
        Set keySet = map.keySet();
        for (Iterator it = keySet.iterator(); it.hasNext();) {
            String key = (String) it.next();
            resultList.add(map.get(key));
        }
        return resultList;
    }

    public void saveDefaultCharges(String clientNumber, Integer quoteId, String costType) throws Exception {
        if (CommonUtils.isNotEmpty(clientNumber)) {
            List l = new CustomerDefaultChargesDAO().findByProperty("acctNo", clientNumber);
            if (!l.isEmpty()) {
                for (Object object : l) {
                    CustomerDefaultCharges customerDefaultCharges = (CustomerDefaultCharges) object;
                    if (costType.equalsIgnoreCase(customerDefaultCharges.getCostType().getCodedesc())) {
                        Charges charges = new Charges();
                        charges.setCurrecny(customerDefaultCharges.getCurrency());
                        charges.setEfectiveDate(new Date());
                        charges.setAccountName(customerDefaultCharges.getVendorName());
                        charges.setAccountNo(customerDefaultCharges.getVendorNumber());
                        charges.setChgCode(customerDefaultCharges.getChargeCodeDesc().getCodedesc());
                        charges.setChargeCodeDesc(customerDefaultCharges.getChargeCodeDesc().getCode());
                        charges.setUnitType(null != customerDefaultCharges.getUnitType() ? "" + customerDefaultCharges.getUnitType().getId() : null);
                        charges.setAmount(customerDefaultCharges.getCost());
                        charges.setMarkUp(customerDefaultCharges.getSell());
                        charges.setAdjestment(0d);
                        charges.setCostType(customerDefaultCharges.getCostType().getCodedesc());
                        charges.setChargeFlag("M");
                        charges.setNewFlag("new");
                        charges.setComment(customerDefaultCharges.getComment());
                        charges.setDefaultCarrier(customerDefaultCharges.getDefaultCarrier());
                        charges.setOutOfGauge("N");
                        charges.setStandardCharge("Y");
                        charges.setNumber("1");
                        charges.setQouteId(quoteId);
                        new ChargesDAO().save(charges);
                    }
                }
            }
        }
    }
}
