/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cvst.logisoft.domain.Zipcode;
import com.gp.cvst.logisoft.hibernate.dao.ZipCodeDAO;
import com.gp.cvst.logisoft.struts.form.SearchZipCodeForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-07-2009
 * 
 * XDoclet definition:
 * @struts.action path="/searchZipCode" name="searchZipCodeForm" input="/jsps/fclQuotes/SearchZipCode.jsp" scope="request" validate="true"
 */
public class SearchZipCodeAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        SearchZipCodeForm searchZipCodeForm = (SearchZipCodeForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String city = searchZipCodeForm.getCity();
        String buttonValue = searchZipCodeForm.getButtonValue();
        ZipCodeDAO zipCodeDAO = new ZipCodeDAO();
        String zip = "";
        if (request.getParameter("zip") != null) {
            zip = (String) request.getParameter("zip");
        }
        if (request.getParameter("paramId") != null) {
            String paramId = request.getParameter("paramId");
            if (session.getAttribute("zipCodeList") != null) {
                List zipCodeList = (List) session.getAttribute("zipCodeList");
                Zipcode zipCode = (Zipcode) zipCodeList.get(Integer.parseInt(paramId));
                request.setAttribute("zipCode", zipCode.getZip() + "-" + zipCode.getState() + "," + zipCode.getCity());
                session.removeAttribute("zipCodeList");
            }
        } else {
            if (buttonValue != null && buttonValue.equals("search")) {
                List zipCodeList = zipCodeDAO.findZipCode(city, searchZipCodeForm.getZipCode());
                session.setAttribute("zipCodeList", zipCodeList);
            } else if (zip != null && !zip.equals("")) {
                List zipCodeList = zipCodeDAO.findZipCode(zip, null);
                session.setAttribute("zipCodeList", zipCodeList);
                searchZipCodeForm.setCity(zip);
            }
        }

        return mapping.findForward("zip");
    }
}