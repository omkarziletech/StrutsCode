/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.bc.fcl.FclBlBC;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cvst.logisoft.domain.FclBl;
import com.gp.cvst.logisoft.domain.FclBlCharges;
import com.gp.cvst.logisoft.domain.FclBlCostCodes;
import com.gp.cvst.logisoft.hibernate.dao.FclBlChargesDAO;
import com.gp.cvst.logisoft.hibernate.dao.FclBlDAO;
import com.gp.cvst.logisoft.struts.form.FclblchargesForm;

public class FclblchargesAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception {
        FclblchargesForm fclblchargesForm = (FclblchargesForm) form;// TODO Auto-generated method stub
        String forward = "";
        HttpSession session = request.getSession(true);
        String[] amount = fclblchargesForm.getAmount();
        String[] billTo = fclblchargesForm.getBillTo();
        String[] printBl = fclblchargesForm.getPrintBl();
        String readyToPost = fclblchargesForm.getReadyToPostCheck();
        String readyToPostCost = fclblchargesForm.getReadyToPostCostCheck();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        String comments[] = fclblchargesForm.getComments();
        String buttonValue = fclblchargesForm.getButtonValue();
        String currency[] = fclblchargesForm.getCurrency();
        String datePaid[] = fclblchargesForm.getDatePaid();
        String camount[] = fclblchargesForm.getCamount();
        String billTrePty = request.getParameter("billTrePty");
        String thirdPartyName = request.getParameter("accountname");
        String costCurrency[] = fclblchargesForm.getCostcurrency();
        String index = fclblchargesForm.getIndex();
        String index1 = fclblchargesForm.getIndex1();
        String billThirdParty = fclblchargesForm.getBillThirdParty();
        GenericCodeDAO genericDAO = new GenericCodeDAO();
        Double total = 0.00;
        Double totalCostCode = 0.00;
        List addchargeslist = new ArrayList();
        String bol = fclblchargesForm.getBol();
        request.setAttribute("bol", bol);
        FclBlBC fclBlBC = new FclBlBC();
        FclBl fclBl = new FclBl();
        request.setAttribute("button", buttonValue);
        List addcostcodeslist = new ArrayList();
        CustomerDAO customerDAO = new CustomerDAO();
        FclBlDAO fclBlDAO = new FclBlDAO();
        FclBlChargesDAO fclBlChargesDAO = new FclBlChargesDAO();
        if (request.getParameter("button") != null && request.getParameter("button").equals("NewFCLBL")) {
            String bol1 = request.getParameter("bol");
            HashMap hashMap = new HashMap();
            FclBl tempFclBl = fclBlDAO.findById(Integer.parseInt(bol1));
            if (tempFclBl.getFclcharge() != null) {
                Iterator iter = tempFclBl.getFclcharge().iterator();
                while (iter.hasNext()) {
                    FclBlCharges fclBlCharges = (FclBlCharges) iter.next();
                    hashMap.put(fclBlCharges.getChargesId(), fclBlCharges);
                    addchargeslist.add(fclBlCharges.getChargesId());
                }
            }
            List chargesList = new ArrayList();
            Collections.sort(addchargeslist);
            for (int i = 0; i < addchargeslist.size(); i++) {
                FclBlCharges fclBlCharges = (FclBlCharges) hashMap.get(addchargeslist.get(i));
                chargesList.add(fclBlCharges);
            }
            hashMap = new HashMap();
            if (tempFclBl.getFclblcostcodes() != null) {
                Iterator iter = tempFclBl.getFclblcostcodes().iterator();
                while (iter.hasNext()) {
                    FclBlCostCodes fclBlCostCodes = (FclBlCostCodes) iter.next();
                    hashMap.put(fclBlCostCodes.getCodeId(), fclBlCostCodes);
                    addcostcodeslist.add(fclBlCostCodes.getCodeId());
                }
            }
            Collections.sort(addcostcodeslist);
            List costCodesList = new ArrayList();
            for (int i = 0; i < addcostcodeslist.size(); i++) {
                FclBlCostCodes fclBlCostCodes = (FclBlCostCodes) hashMap.get(addcostcodeslist.get(i));
                costCodesList.add(fclBlCostCodes);
            }
            request.setAttribute("addchargeslist", chargesList);
            request.setAttribute("addcostcodeslist", costCodesList);
            request.setAttribute("fclbl", tempFclBl);
            request.setAttribute("bol", bol1);
            forward = "success";
        } else {
            if (session.getAttribute("autoCostmsg") != null) {
                session.removeAttribute("autoCostmsg");
            }
            FclBl tempFclBl = fclBlDAO.findById(Integer.parseInt(bol));
            request.setAttribute("fclbl", tempFclBl);
            HashMap hashMap = new HashMap();
            if (tempFclBl.getFclcharge() != null) {
                Iterator iter = tempFclBl.getFclcharge().iterator();
                while (iter.hasNext()) {
                    FclBlCharges fclBlCharges = (FclBlCharges) iter.next();
                    hashMap.put(fclBlCharges.getChargesId(), fclBlCharges);
                    addchargeslist.add(fclBlCharges.getChargesId());
                }
            }
            List chargesList = new ArrayList();
            Collections.sort(addchargeslist);
            for (int i = 0; i < addchargeslist.size(); i++) {
                FclBlCharges fclBlCharges = (FclBlCharges) hashMap.get(addchargeslist.get(i));
                chargesList.add(fclBlCharges);
            }
            hashMap = new HashMap();
            if (tempFclBl.getFclblcostcodes() != null) {
                Iterator iter = tempFclBl.getFclblcostcodes().iterator();
                while (iter.hasNext()) {
                    FclBlCostCodes fclBlCostCodes = (FclBlCostCodes) iter.next();
                    hashMap.put(fclBlCostCodes.getCodeId(), fclBlCostCodes);
                    addcostcodeslist.add(fclBlCostCodes.getCodeId());
                }
            }
            Collections.sort(addcostcodeslist);
            List costCodesList = new ArrayList();
            for (int i = 0; i < addcostcodeslist.size(); i++) {
                FclBlCostCodes fclBlCostCodes = (FclBlCostCodes) hashMap.get(addcostcodeslist.get(i));
                costCodesList.add(fclBlCostCodes);
            }
            request.setAttribute("addchargeslist", chargesList);
            request.setAttribute("addcostcodeslist", costCodesList);
            for (int i = 0; i < chargesList.size(); i++) {
                FclBlCharges fclBlCharges = (FclBlCharges) chargesList.get(i);
                String chargeCodeDesc = "";
                if (request.getParameter("charge" + i) != null) {
                    chargeCodeDesc = request.getParameter("charge" + i);
                }

                String chargeCode = request.getParameter("chargeCode" + i);

                /*if(readyToPostForCheck[i].equals("1")){
                fclBlCharges.setReadyToPost("on");
                }else{
                fclBlCharges.setReadyToPost("off");
                }*/
                if (fclBlCharges.getCharges() != null) {
                    if (!fclBlCharges.getCharges().equals(chargeCodeDesc)) {

                        if (request.getParameter("charge" + i) != null && !request.getParameter("charge" + i).equals("")) {
                            fclBlCharges.setCharges(request.getParameter("charge" + i));
                            List codeList = genericDAO.findForChargeCodesForAirRates(null, fclBlCharges.getCharges(), "36");
                            if (codeList != null && codeList.size() > 0) {
                                GenericCode gen = (GenericCode) codeList.get(0);
                                fclBlCharges.setChargeCode(gen.getCode());
                                chargeCode = fclBlCharges.getChargeCode();
                                fclBlCharges.setCharges(gen.getCodedesc());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("charge" + i) != null && !request.getParameter("charge" + i).equals("")) {
                        fclBlCharges.setCharges(request.getParameter("charge" + i));
                        List codeList = genericDAO.findForChargeCodesForAirRates(null, fclBlCharges.getCharges(), "36");
                        if (codeList != null && codeList.size() > 0) {
                            GenericCode gen = (GenericCode) codeList.get(0);
                            fclBlCharges.setChargeCode(gen.getCode());
                            fclBlCharges.setCharges(gen.getCodedesc());
                        }
                    }
                }
                if (fclBlCharges.getCharges() != null) {

                    if (chargeCode != null && !fclBlCharges.getChargeCode().equals(chargeCode)) {
                        if (request.getParameter("chargeCode" + i) != null && !request.getParameter("chargeCode" + i).equals("")) {
                            fclBlCharges.setChargeCode(request.getParameter("chargeCode" + i));
                            List codeList = genericDAO.findForChargeCodesForAirRates(fclBlCharges.getChargeCode(), null, "36");
                            if (codeList != null && codeList.size() > 0) {
                                GenericCode gen = (GenericCode) codeList.get(0);
                                fclBlCharges.setCharges(gen.getCodedesc());
                                fclBlCharges.setChargeCode(gen.getCode());
                            }
                        }
                    }
                } else {
                    if (request.getParameter("chargeCode" + i) != null && !request.getParameter("chargeCode" + i).equals("")) {
                        fclBlCharges.setChargeCode(request.getParameter("chargeCode" + i));
                        List codeList = genericDAO.findForChargeCodesForAirRates(fclBlCharges.getChargeCode(), null, "36");
                        if (codeList != null && codeList.size() > 0) {
                            GenericCode gen = (GenericCode) codeList.get(0);
                            fclBlCharges.setCharges(gen.getCodedesc());
                            fclBlCharges.setChargeCode(gen.getCode());
                        }
                    }
                }
                if (amount[i].contains(",")) {
                    amount[i] = amount[i].replace(",", "");
                }
                if (amount[i] != null) {
                    fclBlCharges.setAmount(Double.parseDouble(amount[i]));
                }
                if (currency != null) {
                    fclBlCharges.setCurrencyCode(currency[i]);
                }
                if (billTo != null && billTo[i] != null) {
                    fclBlCharges.setBillTo(billTo[i]);
                }
                if (printBl != null) {
                    fclBlCharges.setPrintOnBl(printBl[i]);
                }
                if (request.getParameter("pcollect" + i) != null) {
                    fclBlCharges.setPcollect(request.getParameter("pcollect" + i));
                }
                total = total + fclBlCharges.getAmount();
            }
            for (int i = 0; i < costCodesList.size(); i++) {
                FclBlCostCodes fclBlCostCodes = (FclBlCostCodes) costCodesList.get(i);
                String costCode1 = "";
                if (request.getParameter("costCode" + i) != null) {
                    costCode1 = request.getParameter("costCode" + i);
                }
                String costCodeDesc1 = "";
                if (request.getParameter("costCodeDesc" + i) != null) {
                    costCodeDesc1 = request.getParameter("costCodeDesc" + i);
                }
                /*if(readyToPostCostCheck[i].equals("1")){
                fclBlCostCodes.setReadyToPost("on");
                }else{
                fclBlCostCodes.setReadyToPost("off");
                }*/
                if (request.getParameter("costCode" + i) != null) {
                    if (!costCode1.equals(fclBlCostCodes.getCostCode())) {
                        fclBlCostCodes.setCostCode(request.getParameter("costCode" + i));
                        List codeList = genericDAO.findForChargeCodesForAirRates(fclBlCostCodes.getCostCode(), null, "36");
                        if (codeList != null && codeList.size() > 0) {
                            GenericCode gen = (GenericCode) codeList.get(0);
                            fclBlCostCodes.setCostCodeDesc(gen.getCodedesc());
                            fclBlCostCodes.setCostCode(gen.getCode());
                            costCodeDesc1 = fclBlCostCodes.getCostCodeDesc();
                        }
                    }
                } else {
                    fclBlCostCodes.setCostCode(request.getParameter("costCode" + i));
                    List codeList = genericDAO.findForChargeCodesForAirRates(fclBlCostCodes.getCostCode(), null, "36");
                    if (codeList != null && codeList.size() > 0) {
                        GenericCode gen = (GenericCode) codeList.get(0);
                        fclBlCostCodes.setCostCodeDesc(gen.getCodedesc());
                        fclBlCostCodes.setCostCode(gen.getCode());
                    }
                }
                if (request.getParameter("costCodeDesc" + i) != null) {
                    if (!costCodeDesc1.equals(fclBlCostCodes.getCostCodeDesc())) {
                        fclBlCostCodes.setCostCodeDesc(request.getParameter("costCodeDesc" + i));
                        List codeList = genericDAO.findForChargeCodesForAirRates(null, fclBlCostCodes.getCostCodeDesc(), "36");
                        if (codeList != null && codeList.size() > 0) {
                            GenericCode gen = (GenericCode) codeList.get(0);
                            fclBlCostCodes.setCostCode(gen.getCode());
                            fclBlCostCodes.setCostCodeDesc(gen.getCodedesc());
                        }
                    }
                } else {
                    fclBlCostCodes.setCostCodeDesc(request.getParameter("costCodeDesc" + i));
                    List codeList = genericDAO.findForChargeCodesForAirRates(null, fclBlCostCodes.getCostCodeDesc(), "36");
                    if (codeList != null && codeList.size() > 0) {
                        GenericCode gen = (GenericCode) codeList.get(0);
                        fclBlCostCodes.setCostCode(gen.getCode());
                        fclBlCostCodes.setCostCodeDesc(gen.getCodedesc());
                    }
                }
                if (fclBlCostCodes.getAccNo() != null) {
                    if (!fclBlCostCodes.getAccNo().equals(request.getParameter("accountno" + i))) {

                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).trim().equals("")) {

                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer = (CustomerTemp) list.get(0);
                                fclBlCostCodes.setAccNo(customer.getAccountNo());
                                fclBlCostCodes.setAccName(customer.getAccountName());
                            } else {
                                fclBlCostCodes.setAccNo("");
                                fclBlCostCodes.setAccName("");
                            }
                        } else {
                            fclBlCostCodes.setAccNo("");
                            fclBlCostCodes.setAccName("");
                        }
                    }
                } else {
                    if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).trim().equals("")) {
                        List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer = (CustomerTemp) list.get(0);
                            fclBlCostCodes.setAccNo(customer.getAccountNo());
                            fclBlCostCodes.setAccName(customer.getAccountName());
                        } else {
                            fclBlCostCodes.setAccNo("");
                            fclBlCostCodes.setAccName("");
                        }
                    } else {
                        fclBlCostCodes.setAccNo("");
                        fclBlCostCodes.setAccName("");
                    }
                }
                String acctName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                if (fclBlCostCodes.getAccName() != null) {
                    if (!fclBlCostCodes.getAccName().equals(acctName)) {
                        if (acctName != null && !acctName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, acctName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer = (CustomerTemp) list.get(0);
                                fclBlCostCodes.setAccNo(customer.getAccountNo());
                                fclBlCostCodes.setAccName(customer.getAccountName());
                            }
                        } else {
                            fclBlCostCodes.setAccNo("");
                            fclBlCostCodes.setAccName("");
                        }
                    }
                } else {
                    if (acctName != null && !acctName.equals("")) {
                        List list = customerDAO.findForAgenttNo(null, acctName);
                        if (list != null && list.size() > 0) {
                            CustomerTemp customer = (CustomerTemp) list.get(0);
                            fclBlCostCodes.setAccNo(customer.getAccountNo());
                            fclBlCostCodes.setAccName(customer.getAccountName());
                        }
                    } else {
                        fclBlCostCodes.setAccNo("");
                        fclBlCostCodes.setAccName("");
                    }
                }
                if (camount[i].contains(",")) {
                    camount[i] = camount[i].replace(",", "");
                }
                fclBlCostCodes.setAmount(Double.parseDouble(camount[i]));
                totalCostCode = totalCostCode + fclBlCostCodes.getAmount();
                fclBlCostCodes.setComments(CommonFunctions.isNotNull(comments[i])?
                		comments[i].toUpperCase():comments[i]);
          	 
                fclBlCostCodes.setCurrencyCode(costCurrency[i]);
                Date datePaid1 = null;
                if (datePaid[i] != null && !datePaid[i].equals("")) {
                        datePaid1 = (Date) sdf.parse(datePaid[i]);
                    fclBlCostCodes.setDatePaid(datePaid1);
                } else {
                    fclBlCostCodes.setDatePaid(null);
                }
            }
            if (buttonValue.equals("popup")) {
                forward = "success";
            }
            if (buttonValue.equals("chargedelete")) {
                Set fclBlChargesSet = new LinkedHashSet<FclBlCharges>();
                if (chargesList != null && chargesList.size() > 0) {
                    FclBlCharges fclBlCharges = (FclBlCharges) chargesList.get(Integer.parseInt(index));
                    total = total - fclBlCharges.getAmount();
                    fclBlChargesDAO.delete(fclBlCharges);
                    chargesList.remove(fclBlCharges);
                }
                for (Iterator iter = chargesList.iterator(); iter.hasNext();) {
                    FclBlCharges fclBlCharges = (FclBlCharges) iter.next();
                    fclBlChargesSet.add(fclBlCharges);
                }
                tempFclBl.setFclcharge(fclBlChargesSet);
                fclBlDAO.update(tempFclBl);
                request.setAttribute("addchargeslist", chargesList);
                request.setAttribute("fclbl", tempFclBl);
                forward = "success";
            }
            if (buttonValue.equals("costdelete")) {
                Set fclBlCostCodesSet = new LinkedHashSet<FclBlCostCodes>();
                if (costCodesList != null && costCodesList.size() > 0) {
                    FclBlCostCodes fclBlCosts = (FclBlCostCodes) costCodesList.get(Integer.parseInt(index1));
                    totalCostCode = totalCostCode - fclBlCosts.getAmount();
                    costCodesList.remove(fclBlCosts);
                }
                for (Iterator iter = costCodesList.iterator(); iter.hasNext();) {
                    FclBlCostCodes fclBlCosts = (FclBlCostCodes) iter.next();
                    fclBlCostCodesSet.add(fclBlCosts);
                }
                tempFclBl.setFclblcostcodes(fclBlCostCodesSet);
                fclBlDAO.update(tempFclBl);
                request.setAttribute("addcostcodeslist", costCodesList);
                request.setAttribute("fclbl", tempFclBl);
                forward = "success";
            }
            if (buttonValue != null && (buttonValue.equals("add") || buttonValue.equals("corrections"))) {
                List newaddList = fclBlBC.addFclBlCharges(chargesList, tempFclBl);
                Set fclBlChargesSet = new LinkedHashSet<FclBlCharges>();
                for (Iterator iterator = newaddList.iterator(); iterator.hasNext();) {
                    FclBlCharges fclBlCharges = (FclBlCharges) iterator.next();
                    fclBlChargesSet.add(fclBlCharges);
                }

                tempFclBl.setFclcharge(fclBlChargesSet);
                fclBlDAO.update(tempFclBl);
                request.setAttribute("addchargeslist", newaddList);
                request.setAttribute("fclbl", tempFclBl);
                forward = "success";
            }
            if (buttonValue.equals("costCodeAdd")) {
                List newaddList = fclBlBC.addFclCostCodes(costCodesList, tempFclBl);
                Set fclBlCostCodesSet = new LinkedHashSet<FclBlCostCodes>();
                for (Iterator iterator = newaddList.iterator(); iterator.hasNext();) {
                    FclBlCostCodes tempFclBlCostCodes = (FclBlCostCodes) iterator.next();
                    fclBlCostCodesSet.add(tempFclBlCostCodes);
                }
                tempFclBl.setFclblcostcodes(fclBlCostCodesSet);
                fclBlDAO.update(tempFclBl);
                request.setAttribute("addcostcodeslist", newaddList);
                request.setAttribute("fclbl", tempFclBl);
                forward = "success";
            }
            if (buttonValue.equals("save")) {/*
                List newaddList = fclBlBC.saveFclBLCharges(chargesList);
                request.setAttribute("addchargeslist", newaddList);
                List newaddList1=fclBlBC.saveFclBlCostCodes(costCodesList);
                request.setAttribute("addcostcodeslist", newaddList1);
                Set fclBlChargesSet=new LinkedHashSet<FclBlCharges>();
                for (Iterator iterator = newaddList.iterator(); iterator
                .hasNext();) {
                FclBlCharges fclBlCharges = (FclBlCharges) iterator.next();
                fclBlChargesSet.add(fclBlCharges);
                }
                tempFclBl.setFclcharge(fclBlChargesSet);
                Set fclBlCostCodes=new LinkedHashSet<FclBlCostCodes>();
                for (Iterator iterator = newaddList1.iterator(); iterator
                .hasNext();) {
                FclBlCostCodes tempFclBlCostCodes = (FclBlCostCodes) iterator.next();
                fclBlCostCodes.add(tempFclBlCostCodes);
                }
                tempFclBl.setFclblcostcodes(fclBlCostCodes);
                fclBlDAO.update(tempFclBl);
                request.setAttribute("fclbl", tempFclBl);
                request.setAttribute("buttonValue", "completed");
                forward="success";
                 */

            }
            if (request.getAttribute("fclbl") != null) {
                fclBl = (FclBl) request.getAttribute("fclbl");
                fclBlBC.saveFclBlInFclBlCharges(fclBl, total, totalCostCode, billTrePty, thirdPartyName, billThirdParty);
            }
        }
        return mapping.findForward(forward);
    }
}