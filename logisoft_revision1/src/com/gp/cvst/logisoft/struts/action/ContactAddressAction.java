/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cvst.logisoft.domain.CustAddress;
import com.gp.cvst.logisoft.hibernate.dao.CustAddressDAO;
import com.gp.cvst.logisoft.struts.form.ContactAddressForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-02-2009
 * 
 * XDoclet definition:
 * @struts.action path="/contactAddress" name="contactAddressForm" input="/jsps/fclQuotes/ContactAddress.jsp" scope="request" validate="true"
 */
public class ContactAddressAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ContactAddressForm contactAddressForm = (ContactAddressForm) form;// TODO Auto-generated method stub
		HttpSession session = ((HttpServletRequest)request).getSession();
		
		String buttonValue=contactAddressForm.getButtonValue();
		String clientNumber=contactAddressForm.getClientNo();
		String address1=contactAddressForm.getAddress();
		List addressList=new ArrayList();
		CustAddressDAO custAddressDAO = new CustAddressDAO();
		GenericCodeDAO genericCodeDAO=new GenericCodeDAO();
		if(request.getParameter("buttonValue")!=null && (request.getParameter("buttonValue").equals("BookingShipper")||
	request.getParameter("buttonValue").equals("BookingForwarder") || request.getParameter("buttonValue").equals("BookingConsignee")||
	request.getParameter("buttonValue").equals("BookingTruker")) ){
			String clientNo=request.getParameter("clientNo");
			String address=request.getParameter("address");
			String address2=request.getParameter("address");
			int i=address.indexOf(" ");
			if(i!=-1){
			address2=address.substring(0, i);
			}
			if (address2.equals("percent")) {
				address2 = "%";
			}
			if (address.equals("percent")) {
				address = "%";
			}
			addressList=custAddressDAO.findBy2(null, clientNo, address2, null);
			session.setAttribute("addressList", addressList);
			request.setAttribute("clientNo",clientNo);
			session.setAttribute("buttonValue", request.getParameter("buttonValue"));
		}else if(request.getParameter("paramId")!=null){
			if(session.getAttribute("addressList")!=null){
				addressList=(List)session.getAttribute("addressList");
				CustAddress custAddress=(CustAddress)addressList.get(Integer.parseInt(request.getParameter("paramId")));
			List clientList=new ArrayList();
			custAddress.setAcctName(custAddress.getAcctName().replace("'", ":").replace("&", ";;"));
			clientList.add(request.getParameter("button"));
			clientList.add(custAddress.getAcctType());
			clientList.add(custAddress.getAcctName());
			clientList.add(custAddress.getAcctNo());
			String addr="";
			String add[]=StringUtils.split(custAddress.getAddress1(),"\n");
			for (int i = 0; i < add.length; i++) {
				addr=addr+add[i].trim();
			}
			clientList.add(addr);
			if(custAddress.getCity1()==null){
				custAddress.setCity1("");
			}
			clientList.add(custAddress.getCity1().replace("'", ":"));
			clientList.add(custAddress.getState());
			clientList.add(custAddress.getZip());
			if(custAddress.getCuntry()!=null){
				clientList.add(custAddress.getCuntry().getCodedesc());
			}
			clientList.add(custAddress.getPhone());
			clientList.add(custAddress.getFax());
			clientList.add(custAddress.getEmail1());
			
			
			//clientList.add(custAddress.getContactName());
			request.setAttribute("clientList", clientList);
			if(request.getParameter("button").equals("BookingShipper") || request.getParameter("button").equals("BookingForwarder")|| 
					request.getParameter("button").equals("BookingConsignee")|| request.getParameter("button").equals("BookingTruker") ){
			request.setAttribute("buttonValue", "Booking");
			}
			if(session.getAttribute("addressList")!=null){
				session.removeAttribute("addressList");
			}
			if(session.getAttribute("buttonValue")!=null){
				session.removeAttribute("buttonValue");
			}
			}
		}
		if(buttonValue!=null && buttonValue.equals("SearchCustomer")){
			addressList=custAddressDAO.findBy2(null, clientNumber, address1, null);
			session.setAttribute("addressList",addressList);
			request.setAttribute("clientNo",clientNumber);
		}
		return mapping.findForward("contact");
	}
}