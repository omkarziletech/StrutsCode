/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.bc.notes.NotesBC;
import com.gp.cong.logisoft.bc.notes.NotesConstants;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Notes;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cvst.logisoft.domain.Charges;
import com.gp.cvst.logisoft.domain.Quotation;
import com.gp.cvst.logisoft.hibernate.dao.ChargesDAO;
import com.gp.cvst.logisoft.hibernate.dao.QuotationDAO;
import com.gp.cvst.logisoft.struts.form.QuoteChargeForm;
import org.apache.struts.util.LabelValueBean;

/**
 * MyEclipse Struts
 * Creation date: 10-07-2008
 *
 * XDoclet definition:
 * @struts.action path="/quoteCharge" name="quoteChargeForm" input="/jsps/fclQuotes/QuoteCharge.jsp" scope="request" validate="true"
 */
public class QuoteChargeAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = ((HttpServletRequest) request).getSession();
        QuoteChargeForm quoteChargeForm = (QuoteChargeForm) form;// TODO Auto-generated method stub
        String buttonValue = quoteChargeForm.getButtonValue();
        String unitType = quoteChargeForm.getUnitSelect();
        String number1 = quoteChargeForm.getNumber();
        String chargeCodeDesc = quoteChargeForm.getChargeCodeDesc();
        String costType = quoteChargeForm.getCostType();
        String currency = quoteChargeForm.getCurrency();
        String amount = quoteChargeForm.getAmount();
        String minimum = quoteChargeForm.getMinimum();
        String comment = quoteChargeForm.getComment();
        String markUp = quoteChargeForm.getMarkUp();
        String defaultCarrier = quoteChargeForm.getDefaultCarrier();
        String quoteNo = request.getParameter("quoteNo");
        QuotationBC quotationBC = new QuotationBC();
        Charges charges = new Charges();
        ChargesDAO chargesDAO = new ChargesDAO();
        QuotationDAO quotationDAO = new QuotationDAO();
        GenericCodeDAO genDAO = new GenericCodeDAO();
        String userName = "";
        boolean hasUpdated = false;
        String notesDesc = "";
        User user = new User();
        if (session.getAttribute("loginuser") != null) {
            user = (User) session.getAttribute("loginuser");
            userName = user.getLoginName();
        }
        if (request.getParameter("markup") != null) {
            request.setAttribute("markup", request.getParameter("markup"));
        }
        if (request.getParameter("ratedOption") != null) {
            request.setAttribute("ratedOption", request.getParameter("ratedOption"));
        }
        String hazmat = request.getParameter("hazmat");
        request.setAttribute("hazmat", hazmat);

        String spcleqpmt = request.getParameter("spcleqpmt");
        request.setAttribute("spcleqpmt", spcleqpmt);
        
        String breakBulk = request.getParameter("breakBulk");
        request.setAttribute("breakBulk", breakBulk);

        request.setAttribute("fileNo", request.getParameter("fileNo"));
        request.setAttribute("importFlag", request.getParameter("importFlag"));

        String forMarkUp = quoteChargeForm.getForMarkUp();

        if (unitType != null) {
            charges.setUnitType(unitType);
        }
        request.setAttribute("interchargecode", "");
        charges.setNumber("1");
        DBUtil dbUtil = new DBUtil();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        MessageResources messageResources = getResources(request);
        if (chargeCodeDesc != null && !chargeCodeDesc.equalsIgnoreCase("0")) {
            GenericCode gen = genDAO.findById(Integer.parseInt(chargeCodeDesc));
            charges.setChgCode(gen.getCodedesc());
            charges.setChargeCodeDesc(gen.getCode());
            charges.setChargeCode(gen);
            if ((charges.getChargeCodeDesc().equalsIgnoreCase("INTMDL") || charges.getChargeCodeDesc().equalsIgnoreCase("INLAND")) && markUp.equalsIgnoreCase("0.00")) {
                markUp = "50.00";
            }
        }
        if (costType != null && !costType.equalsIgnoreCase("0")) {
            GenericCode gen1 = genDAO.findById(Integer.parseInt(costType));
            charges.setCostType(gen1.getCodedesc());
            charges.setCosttype(gen1);
        }
        if (null!=amount && !amount.equals("")) {
            charges.setAmount(Double.parseDouble(dbUtil.removeComma(amount)));
        } else {
            charges.setAmount(0.00);
        }
        if (markUp != null && !markUp.equals("")) {
            charges.setMarkUp(Double.parseDouble(dbUtil.removeComma(markUp)));
        } else {
            charges.setMarkUp(0.00);
        }
        if (null!=minimum && !minimum.equals("")) {
            charges.setMinimum(Double.parseDouble(dbUtil.removeComma(minimum)));
        } else {
            charges.setMinimum(0.00);
        }
        if (comment != null) {
            charges.setComment(CommonFunctions.isNotNull(comment)
                    ? comment.toUpperCase() : comment);

        }

        if (currency != null && !currency.equalsIgnoreCase("0")) {
            GenericCode gen = genDAO.findById(Integer.parseInt(currency));
            charges.setCurrecny(gen.getCode());
            charges.setCurrency1(gen);
        }
        charges.setAccountName(quoteChargeForm.getVendorName());
        charges.setAccountNo(quoteChargeForm.getVendorNumber());
        charges.setComment(CommonFunctions.isNotNull(comment)
                ? comment.toUpperCase() : comment);
        charges.setDefaultCarrier(CommonUtils.isNotEmpty(defaultCarrier) ? defaultCarrier : "");
        session.setAttribute("newCharges", charges);

        Quotation quotation = new Quotation();
        if (quoteNo != null && !quoteNo.equalsIgnoreCase("")) {
            quotation = quotationDAO.findById(Integer.parseInt(quoteNo));
        } else {
            quotation = new Quotation();
            quotation.setQuoteDate(new Date());
        }
        // To set on-carriage charge code
        com.gp.cvst.logisoft.util.DBUtil util = new com.gp.cvst.logisoft.util.DBUtil();
        if ((null != request.getAttribute("markup") && ((String) request.getAttribute("markup")).equalsIgnoreCase("onCarriage")) || (null != request.getParameter("markup") && ((String) request.getParameter("markup")).equalsIgnoreCase("onCarriage"))) {
            request.setAttribute("costtypelist", util.getGenericCodeCostListForQuoteChargeForLocalDrayage(37, "yes", "Select Cost type"));
            request.setAttribute("costcodelist", util.getChargeCodes(36, "yes", "Select Cost Code", "ONCARRIAGE"));
            request.setAttribute("markup", "onCarriage");
            List list = util.getChargeCodes(new Integer(36), "yes", "Select Cost Code", "ONCARRIAGE");
            LabelValueBean bean = (LabelValueBean) list.get(0);
            request.setAttribute("chargeCode", util.getCostCodeForDrayage(bean.getValue()));
            quotation.setOnCarriage("on");
        }
        quotationDAO.save(quotation);
        List chargesList = new ArrayList();
        if (session.getAttribute("chargesList") != null) {
            chargesList = (List) session.getAttribute("chargesList");
        } else {
            chargesList = new ArrayList();
        }
        request.setAttribute("quoteNo", quotation.getQuoteId().toString());
        List tempfclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());

        HashMap hashMap = new HashMap();
        if (session.getAttribute("hashMap") == null) {
            if (tempfclRates != null && tempfclRates.size() > 0) {
                for (Iterator iterator = tempfclRates.iterator(); iterator.hasNext();) {
                    Charges tempCharges = (Charges) iterator.next();
                    if (hashMap.size() > 0 && hashMap.containsKey(tempCharges.getUnitType())) {
                    } else {
                        hashMap.put(tempCharges.getUnitType(), tempCharges.getUnitType());
                    }
                }
            }
            session.setAttribute("hashMap", hashMap);
        }
        if (request.getParameter("buttonValue") != null && request.getParameter("buttonValue").equalsIgnoreCase("edit")) {
            String quoteNumber = request.getParameter("quoteNo");
            String id = request.getParameter("id");
            request.setAttribute("id", id);
            Charges tempCharges = chargesDAO.findById(Integer.parseInt(id));
            GenericCode genericCode = genDAO.findByCodeDescName(tempCharges.getCostType(), 37);
            tempCharges.setCosttype(genericCode);
            genericCode = genDAO.findByCodeName(tempCharges.getChargeCodeDesc(), 36);
            request.setAttribute("interchargecode", tempCharges.getChgCode());
            tempCharges.setChargeCode(genericCode);
            if ("true".equalsIgnoreCase(request.getParameter("isCollapsed"))) {//only for collapse rates table
                Double collapseMarkupAmount=0d;
                Double collapseAmount =0d;
                if ("INTRAMP".equalsIgnoreCase(tempCharges.getChargeCodeDesc())
                        || "INTFS".equalsIgnoreCase(tempCharges.getChargeCodeDesc())) { //Intermodal charges
                    List<Charges> consolidatedList = chargesDAO.getConsolidatedCharges(quoteNumber,
                            tempCharges.getChargeCode().getCodedesc(), tempCharges.getUnitType());
                    for(Charges consolidatedCharge : consolidatedList) {
                        collapseMarkupAmount+=consolidatedCharge.getMarkUp();
                        collapseAmount+=consolidatedCharge.getAmount();
                    }
                } else { // other than intermodal charges
                    collapseMarkupAmount = Double.parseDouble(dbUtil.removeComma(request.getParameter("markupValue")));
                    collapseAmount = (Double.parseDouble(dbUtil.removeComma(request.getParameter("totalValue")))) - (collapseMarkupAmount);
                }
                request.setAttribute("collapseAmount", collapseAmount);
                request.setAttribute("collapseMarkupAmount", collapseMarkupAmount);
            }
            session.setAttribute("newCharges", tempCharges);
            request.setAttribute("buttonValue", "edit");
            if (CommonUtils.notIn(tempCharges.getChargeFlag(), "M","D","I","F","CH")) {
                request.setAttribute("nonManualCharges", "nonManualCharges");
            }else{
                request.setAttribute("nonManualCharges", "");
            }
        } else if (buttonValue != null && (buttonValue.equalsIgnoreCase("update") || buttonValue.equalsIgnoreCase("updateWithOutInsure"))) {
            String chargeId = request.getParameter("id");
            StringBuilder message = new StringBuilder();
            if (CommonFunctions.isNotNull(chargeId)) {
                Charges chargesDomain = chargesDAO.findById(Integer.parseInt(chargeId));
                if (CommonUtils.isNotEmpty(amount) && ("M".equalsIgnoreCase(chargesDomain.getChargeFlag()) || "CH".equalsIgnoreCase(chargesDomain.getChargeFlag()))) {
                    chargesDomain.setAmount(CommonFunctions.isNotNull(amount) ? Double.parseDouble(dbUtil.removeComma(amount)) : 0.00);
                }else if("I".equalsIgnoreCase(chargesDomain.getChargeFlag())){
                    chargesDomain.setAmount(0.00);
                }
                if (CommonUtils.isNotEmpty(markUp) && ("M".equalsIgnoreCase(chargesDomain.getChargeFlag()) || "I".equalsIgnoreCase(chargesDomain.getChargeFlag()) || "CH".equalsIgnoreCase(chargesDomain.getChargeFlag()))) {
                    if (chargesDomain.getChargeFlag() != null && !chargesDomain.getChargeFlag().equals("")) {
                        chargesDomain.setMarkUp(CommonFunctions.isNotNull(markUp) ? Double.parseDouble(dbUtil.removeComma(markUp)) : 0.00);
                    } else {
                        double markup1 = CommonFunctions.isNotNull(markUp) ? Double.parseDouble(dbUtil.removeComma(markUp)) : 0.00;
                        markup1 -= chargesDomain.getAmount();
                        chargesDomain.setMarkUp(markup1);
                    }
                }
                if (quoteChargeForm.getVendorName() != null) {
                    chargesDomain.setAccountName(quoteChargeForm.getVendorName());
                }
                if (quoteChargeForm.getVendorNumber() != null) {
                    chargesDomain.setAccountNo(quoteChargeForm.getVendorNumber());
                }
                
                //0003101: Spot Rate Field Starts
                
                if (quotation.getSpotRate().equals("Y") && CommonUtils.notIn(chargesDomain.getChargeFlag(), "M","D","I","F","CH")) {
                    if((quoteChargeForm.getChargeCode().equals("OCNFRT") || quoteChargeForm.getChargeCode().equals("OFIMP")) && quoteChargeForm.getSpotRateChk().equals("off")
                            && quoteChargeForm.getStandardChk().equals("off")){
                        chargesDAO.updateOfrSpotrate(quoteChargeForm, chargesDomain);
                    }else if(quoteChargeForm.getSpotRateChk().equals("on")){
                        chargesDomain.setSpotRateAmt(0d);
                        chargesDomain.setSpotRateChk("on");
                        chargesDomain.setStandardChk("off");
                        Double sell=chargesDomain.getAmount()+ (null!=chargesDomain.getMarkUp()?chargesDomain.getMarkUp():0d);
                        chargesDomain.setSpotRateMarkUp(sell);
                    }else if(quoteChargeForm.getStandardChk().equals("on")){
                        chargesDomain.setStandardChk("on");
                        chargesDomain.setSpotRateChk("off");
                        chargesDomain.setSpotRateAmt(chargesDomain.getAmount());
                        chargesDomain.setSpotRateMarkUp(chargesDomain.getMarkUp());
                    }else if(null!=quoteChargeForm.getSpotRateAmt()){
                        chargesDomain.setSpotRateAmt(quoteChargeForm.getSpotRateAmt());
                        Double sell=chargesDomain.getAmount()+ (null!=chargesDomain.getMarkUp()?chargesDomain.getMarkUp():0d);
                        Double spotMarkUp=sell- (null!=chargesDomain.getSpotRateAmt()?chargesDomain.getSpotRateAmt():0d);
                        chargesDomain.setSpotRateMarkUp(spotMarkUp);
                    }
                }
                
                //0003101: Spot Rate Field Ends
                        
                chargesDomain.setComment(CommonFunctions.isNotNull(comment) ? comment.toUpperCase() : comment);
                chargesDomain.setDefaultCarrier(CommonUtils.isNotEmpty(defaultCarrier) ? defaultCarrier : "");
                chargesDAO.update(chargesDomain);

                if (null != quoteChargeForm.getOldCost() && !quoteChargeForm.getOldCost().equals(amount)) {
                    double oldAmount = !"".equals(quoteChargeForm.getOldCost()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getOldCost())) : 0.00;
                    message.append(" Cost - ").append(oldAmount).append(" to ").append(chargesDomain.getAmount());
                    hasUpdated = true;
                }
                if ((null != quoteChargeForm.getOldSell() && !quoteChargeForm.getOldSell().equals(markUp))) {
                    double oldMarkUp = !"".equals(quoteChargeForm.getOldSell()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getOldSell())) : 0.00;
                    message.append(" Sell - ").append(oldMarkUp).append(" to ").append(chargesDomain.getMarkUp());
                    hasUpdated = true;
                }
                if (null != quoteChargeForm.getOldVendor() && !quoteChargeForm.getOldVendor().equals(chargesDomain.getAccountNo())) {
                    message.append(" Vendor Name - ").append(quoteChargeForm.getOldVendor()).append(" to ").append(chargesDomain.getAccountNo());
                    message.append(" Vendor Name - ").append(quoteChargeForm.getOldVendorName()).append(" to ").append(chargesDomain.getAccountName());
                    hasUpdated = true;
                }
                if (CommonFunctions.isNotNull(comment) && !comment.equals(quoteChargeForm.getOldComment())) {
                    message.append(" Comment -").append(chargesDomain.getComment());
                    hasUpdated = true;
                }
                notesDesc = "";
                if (hasUpdated) {
                    if (chargesDomain.getUnitType() != null) {
                        GenericCode genericCode = new GenericCodeDAO().findById(Integer.parseInt(chargesDomain.getUnitType()));
                        if (null != genericCode) {
                            message.append(" Unit Type -").append(genericCode.getCodedesc());
                        }
                    }
                    notesDesc = "UPDATED -> Charge Code - " + chargesDomain.getChargeCodeDesc() + " Cost Type - " + chargesDomain.getCostType();
                    notesDesc += " " + message.toString();
                }

                if (!"".equals(notesDesc)) {
                    Notes note = new Notes();
                    note.setModuleId(NotesConstants.FILE);
                    note.setModuleRefId("" + quotation.getFileNo());
                    note.setNoteType(NotesConstants.NOTES_TYPE_EVENT);
                    note.setUpdateDate(new Date());
                    note.setUpdatedBy(user.getLoginName());
                    note.setNoteDesc(notesDesc);
                    new NotesBC().saveNotes(note);
                }
                if("I".equalsIgnoreCase(chargesDomain.getChargeFlag()) || (buttonValue.equals("updateWithOutInsure"))){
                    request.setAttribute("buttonvalue", "dontAddInsure");
                }else{
                    request.setAttribute("buttonvalue", "completed");
                }
                request.setAttribute("quoteNo", chargesDomain.getQouteId().toString());
            }

        } else if (buttonValue != null && buttonValue.equalsIgnoreCase("updateall")) {
            String id = request.getParameter("id");
            Charges tempCharges = chargesDAO.findById(Integer.parseInt(id));
            List tempChargesList = chargesDAO.getAllChargesForUpdate(Integer.parseInt(request.getParameter("quoteNo")), tempCharges.getChgCode());
            for (Iterator iterator = tempChargesList.iterator(); iterator.hasNext();) {
                Charges tempNewCharges = (Charges) iterator.next();
                StringBuilder message = new StringBuilder();
                hasUpdated = false;
                if (CommonUtils.isNotEmpty(amount) && !"I".equalsIgnoreCase(tempCharges.getChargeFlag())) {
                        tempNewCharges.setAmount(Double.parseDouble(dbUtil.removeComma(amount)));
                    } else {
                        tempNewCharges.setAmount(0.00);
                }
                if (CommonUtils.isNotEmpty(markUp)) {
                        tempNewCharges.setMarkUp(Double.parseDouble(dbUtil.removeComma(markUp)));
                } else {
                        tempNewCharges.setMarkUp(0.00);
                }
                if (quoteChargeForm.getVendorName() != null) {
                    tempNewCharges.setAccountName(quoteChargeForm.getVendorName());
                }
                if (quoteChargeForm.getVendorNumber() != null) {
                    tempNewCharges.setAccountNo(quoteChargeForm.getVendorNumber());
                }
                tempNewCharges.setComment(CommonFunctions.isNotNull(comment) ? comment.toUpperCase() : comment);
                tempNewCharges.setDefaultCarrier(CommonUtils.isNotEmpty(defaultCarrier) ? defaultCarrier : "");
                chargesDAO.update(tempNewCharges);
                if (null != quoteChargeForm.getOldCost() && !quoteChargeForm.getOldCost().equals(amount)) {
                    double oldAmount = !"".equals(quoteChargeForm.getOldCost()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getOldCost())) : 0.00;
                    message.append(" Cost - ").append(oldAmount).append(" to ").append(tempNewCharges.getAmount());
                    hasUpdated = true;
                }
                if (null != quoteChargeForm.getOldSell() && !quoteChargeForm.getOldSell().equals(markUp)) {
                    double oldMarkUp = !"".equals(quoteChargeForm.getOldSell()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getOldSell())) : 0.00;
                    message.append(" Sell - ").append(oldMarkUp).append(" to ").append(tempNewCharges.getMarkUp());
                    hasUpdated = true;
                }
                if (null != quoteChargeForm.getOldVendor() && !quoteChargeForm.getOldVendor().equals(tempNewCharges.getAccountNo())) {
                    message.append(" Vendor Name - ").append(quoteChargeForm.getOldVendor()).append(" to ").append(tempNewCharges.getAccountNo());
                    message.append(" Vendor Name - ").append(quoteChargeForm.getOldVendorName()).append(" to ").append(tempNewCharges.getAccountName());
                    hasUpdated = true;
                }
                if (CommonFunctions.isNotNull(comment) && !comment.equals(quoteChargeForm.getOldComment())) {
                    message.append(" Comment -").append(tempNewCharges.getComment());
                    hasUpdated = true;
                }
                notesDesc = "";
                if (hasUpdated) {
                    if (tempNewCharges.getUnitType() != null) {
                        GenericCode genericCode = new GenericCodeDAO().findById(Integer.parseInt(tempNewCharges.getUnitType()));
                        if (null != genericCode) {
                            message.append(" Unit Type -").append(genericCode.getCodedesc());
                        }
                    }
                    notesDesc = "UPDATED -> Charge Code - " + tempNewCharges.getChargeCodeDesc() + " Cost Type - " + tempNewCharges.getCostType();
                    notesDesc += " " + message.toString();
                }
                if (!"".equals(notesDesc)) {
                    Notes note = new Notes();
                    note.setModuleId(NotesConstants.FILE);
                    note.setModuleRefId("" + quotation.getFileNo());
                    note.setNoteType(NotesConstants.NOTES_TYPE_EVENT);
                    note.setUpdateDate(new Date());
                    note.setUpdatedBy(user.getLoginName());
                    note.setNoteDesc(notesDesc);
                    new NotesBC().saveNotes(note);
                }
            }
            if("I".equalsIgnoreCase(tempCharges.getChargeFlag()) || buttonValue.equals("updateAllWithOutInsure")){
                    request.setAttribute("buttonvalue", "dontAddInsure");
                }else{
                    request.setAttribute("buttonvalue", "completed");
                }
            request.setAttribute("quoteNo", tempCharges.getQouteId().toString());
        }
        if (buttonValue != null && buttonValue.equalsIgnoreCase("accept")) {
            List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
            if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && "11300".equalsIgnoreCase(costType) && null != quotation.getSelectedUnits() && !"".equals(quotation.getSelectedUnits())) {
                String[] str = quotation.getSelectedUnits().split(",");
                for (String unit : str) {
                    if (!"".equals(unit)) {
                        charges.setUnitType(new GenericCodeDAO().getFieldByCodeDescAndCodetypeId("38", unit, "id"));
                        unitType = charges.getUnitType();
                        if ("A=20".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountA() && !"".equals(quoteChargeForm.getAmountA().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountA())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpA() && !"".equals(quoteChargeForm.getMarkUpA().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpA())) : 0d);
                        } else if ("B=40".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountB() && !"".equals(quoteChargeForm.getAmountB().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountB())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpB() && !"".equals(quoteChargeForm.getMarkUpB().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpB())) : 0d);
                        } else if ("C=40HC".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountC() && !"".equals(quoteChargeForm.getAmountC().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountC())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpC() && !"".equals(quoteChargeForm.getMarkUpC().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpC())) : 0d);
                        } else if ("D=45".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountD() && !"".equals(quoteChargeForm.getAmountD().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountD())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpD() && !"".equals(quoteChargeForm.getMarkUpD().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpD())) : 0d);
                        } else if ("E=48".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountE() && !"".equals(quoteChargeForm.getAmountE().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountE())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpE() && !"".equals(quoteChargeForm.getMarkUpE().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpE())) : 0d);
                        } else if ("F=40NOR".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountF() && !"".equals(quoteChargeForm.getAmountF().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountF())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpF() && !"".equals(quoteChargeForm.getMarkUpF().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpF())) : 0d);
                        } else if ("E=45102".equals(unit.trim())) {
                            charges.setAmount(null != quoteChargeForm.getAmountG() && !"".equals(quoteChargeForm.getAmountG().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getAmountG())) : 0d);
                            charges.setMarkUp(null != quoteChargeForm.getMarkUpG() && !"".equals(quoteChargeForm.getMarkUpG().trim()) ? Double.parseDouble(dbUtil.removeComma(quoteChargeForm.getMarkUpG())) : 0d);
                        }
                        if (charges.getMarkUp() != 0) {

                            for (int i = 0; i < fclRates.size(); i++) {
                                Charges tempCharges = (Charges) fclRates.get(i);
                                if (tempCharges.getUnitType() != null && !tempCharges.getUnitType().equalsIgnoreCase("") && !tempCharges.getUnitType().equalsIgnoreCase("0.00")) {
                                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(tempCharges.getUnitType()));
                                    if (genericCode != null) {
                                        tempCharges.setUnitName(genericCode.getCodedesc());
                                    }
                                }
                            }
                            boolean flag1 = false;
                            List fclRatesList1 = new ArrayList();
                            boolean flag3 = false;
                            if (hazmat != null && hazmat.equalsIgnoreCase("N") && ((charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE"))
                                    || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE- LAND")) || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE- SEA"))
                                    || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZ FEE/CERT/U.N.")) || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("Hazard Certificate"))
                                    || (charges.getChargeCodeDesc() != null && charges.getChargeCodeDesc().trim().equalsIgnoreCase(messageResources.getMessage("hazardous"))) || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("Hazardous Fee")))) {
                                String msg = "Please select Hazmat = yes, for selecting the Hazardous charge code";
                                request.setAttribute("msg", msg);
                                flag3 = true;
                            }
                            if (spcleqpmt != null && charges.getChgCode() != null && spcleqpmt.equalsIgnoreCase("N") && charges.getChgCode().trim().equalsIgnoreCase("SPECIAL EQUIPMENT SURCHARGE")) {
                                String msg = "Please select Special Equipment, for selecting the Special Equipment Charge Code";
                                request.setAttribute("msg", msg);
                                flag3 = true;
                            }
                            if (!flag3) {
                                if (!"N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                                    flag1 = validateChargePerContainerSize(charges.getChgCode(), charges.getUnitType(), session);
                                    if (flag1) {
                                        String msg = charges.getChgCode() + " For  " + charges.getCostType() + "  already exists";
                                        request.setAttribute("msg", msg);
                                    }
                                }
                                if (!flag1) {
                                    if (!"N".equalsIgnoreCase(quotation.getRatesNonRates())) {
                                        flag1 = validateChargePerContainerSize(charges.getChgCode(), charges.getUnitType(), session);
                                        if (flag1) {
                                            String msg = charges.getChgCode() + " For " + charges.getCostType() + "  already exists";
                                            request.setAttribute("msg", msg);
                                        }
                                    }
                                }
                                if (!flag1) {
                                    if (charges.getCostType() != null) {
                                        if (fclRates.size() > 0) {
                                            boolean flag = false;
                                            boolean flag2 = false;
                                            int a = 0;
                                            if (null != unitType && !unitType.equalsIgnoreCase("0")) {
                                                for (int i = 0; i < fclRates.size(); i++) {
                                                    Charges costBean = (Charges) fclRates.get(i);
                                                    if (!flag) {
                                                        if (costBean.getUnitType().equalsIgnoreCase(unitType)) {
                                                            flag2 = true;
                                                            a = a + 1;
                                                            if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && costBean.getChgCode().equalsIgnoreCase(charges.getChgCode()) && costBean.getUnitType().equalsIgnoreCase(unitType)) {
                                                                flag = true;
                                                                String msg = costBean.getChgCode() + " For " + costBean.getCostType() + "  already exists";
                                                                request.setAttribute("msg", msg);
                                                                for (int j = 0; j < fclRates.size(); j++) {
                                                                    Charges cost = (Charges) fclRates.get(j);
                                                                    fclRatesList1.add(cost);
                                                                }
                                                                break;
                                                            }
                                                        }
                                                    } else {
                                                        break;
                                                    }
                                                }
                                                if (!flag2) {
                                                    for (int i = 0; i < fclRates.size(); i++) {
                                                        Charges c1 = (Charges) fclRates.get(i);
                                                        fclRatesList1.add(c1);
                                                    }
                                                    Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, number1);
                                                    chargesList.add(c1);
                                                    boolean flag6 = false;
                                                    if (!flag6) {
                                                        fclRatesList1.add(c1);
                                                        request.setAttribute("interchargecode", c1.getChgCode());
                                                        String msg = "Charges added to Quote";
                                                        request.setAttribute("msg", msg);
                                                    }
                                                } else {
                                                    if (!flag) {
                                                        boolean flag4 = false;
                                                        for (int j = 0; j < fclRates.size(); j++) {
                                                            Charges c9 = (Charges) fclRates.get(j);
                                                            fclRatesList1.add(c9);
                                                            if (!flag4) {
                                                                if (c9.getUnitType().equalsIgnoreCase(unitType)) {
                                                                    flag4 = true;
                                                                    Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, c9.getNumber());
                                                                    fclRatesList1.add(c1);
                                                                    chargesList.add(c1);

                                                                    request.setAttribute("interchargecode", c1.getChgCode());
                                                                    String msg = "Charges added to Quote";
                                                                    request.setAttribute("msg", msg);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, number1);
                                            fclRatesList1.add(c1);
                                            chargesList.add(c1);
                                            request.setAttribute("interchargecode", c1.getChgCode());
                                            String msg = "Charges added to Quote";
                                            request.setAttribute("msg", msg);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges tempCharges = (Charges) fclRates.get(i);
                    if (tempCharges.getUnitType() != null && !tempCharges.getUnitType().equalsIgnoreCase("") && !tempCharges.getUnitType().equalsIgnoreCase("0.00")) {
                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(tempCharges.getUnitType()));
                        if (genericCode != null) {
                            tempCharges.setUnitName(genericCode.getCodedesc());
                        }
                    }
                }
                List perkglbsList = new ArrayList();
                boolean flag1 = false;
                List fclRatesList1 = new ArrayList();
                boolean flag3 = false;
                if (hazmat != null && hazmat.equalsIgnoreCase("N") && ((charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE"))
                        || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE- LAND")) || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZARDOUS SURCHARGE- SEA"))
                        || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("HAZ FEE/CERT/U.N.")) || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("Hazard Certificate"))
                        || (charges.getChargeCodeDesc() != null && charges.getChargeCodeDesc().trim().equalsIgnoreCase(messageResources.getMessage("hazardous"))) || (charges.getChgCode() != null && charges.getChgCode().trim().equalsIgnoreCase("Hazardous Fee")))) {
                    String msg = "Please select Hazmat = yes, for selecting the Hazardous charge code";
                    request.setAttribute("msg", msg);
                    flag3 = true;
                }
                if (spcleqpmt != null && charges.getChgCode() != null && spcleqpmt.equalsIgnoreCase("N") && charges.getChgCode().trim().equalsIgnoreCase("SPECIAL EQUIPMENT SURCHARGE")) {
                    String msg = "Please select Special Equipment, for selecting the Special Equipment Charge Code";
                    request.setAttribute("msg", msg);
                    flag3 = true;
                }
                if (!flag3) {
                    if (charges.getCostType() != null && (charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize"))
                            || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))) && null != unitType && unitType.equalsIgnoreCase("0")) {
                        String msg = "Please Select the Unit Type";
                        request.setAttribute("msg", msg);
                    } else if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && charges.getCostType() != null && (charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))
                            || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")))) {
                        if (charges.getCostType().equalsIgnoreCase("PER CONTAINER SIZE") || charges.getCostType().trim().equalsIgnoreCase("PER TEU")) {
                            flag1 = validateChargePerContainerSize(charges.getChgCode(), charges.getUnitType(), session);
                        } else {
                            flag1 = validateCharge(charges.getChgCode(), session);
                        }
                        if (flag1) {
                            String msg = charges.getChgCode() + " For  " + charges.getCostType() + "  already exists";
                            request.setAttribute("msg", msg);
                        }
                    }
                    if (!flag1) {
                        if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && charges.getCostType() != null && (charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))
                                || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl")))) {
                            if (charges.getCostType().equalsIgnoreCase("PER CONTAINER SIZE") || charges.getCostType().trim().equalsIgnoreCase("PER TEU")) {
                                flag1 = validateChargePerContainerSize(charges.getChgCode(), charges.getUnitType(), session);
                            } else {
                                flag1 = validateCharge(charges.getChgCode(), session);
                            }
                            if (flag1) {
                                String msg = charges.getChgCode() + " For " + charges.getCostType() + "  already exists";
                                request.setAttribute("msg", msg);
                            }
                        }
                    }
                    if (!flag1) {
                        if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && charges.getCostType() != null && (charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))
                                || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl")))) {
                            flag1 = validateCharge(charges.getChgCode(), session);
                            if (flag1) {
                                String msg = charges.getChgCode() + " For  " + charges.getCostType() + "  already exists";
                                request.setAttribute("msg", msg);
                            }
                        }
                    }
                    if (!flag1) {
                        if (charges.getCostType() != null && charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("percentofr"))) {
                            boolean perFlag = false;
                            boolean perFlag1 = false;
                            if (fclRates != null) {
                                for (int i = 0; i < fclRates.size(); i++) {
                                    Charges c5 = (Charges) fclRates.get(i);
                                    fclRatesList1.add(c5);
                                    if (c5.getUnitType().equalsIgnoreCase(unitType)) {
                                        perFlag = true;
                                        if (c5.getChgCode().trim().equalsIgnoreCase("OCEAN FREIGHT")) {
                                            perFlag1 = true;
                                            Charges c1 = quotationBC.addCostBeanForPercenOFR(charges, messageResources, unitType, c5.getNumber(), c5);
                                            fclRatesList1.add(c1);
                                            chargesList.add(c1);
                                            request.setAttribute("interchargecode", c1.getChgCode());
                                            String msg = "Charges added to Quote";
                                            request.setAttribute("msg", msg);
                                        }
                                    }
                                }
                            }
                            if (!perFlag || !perFlag1) {
                                String msg = "Please Select Ocean Freight before selecting Percent OFR";
                                request.setAttribute("msg", msg);
                            }
                        }
                        if (charges.getCostType() != null &&
                                (charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("FlatRatePerConatinerSize"))
                                || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer"))
                                || charges.getCostType().trim().equalsIgnoreCase("PER TEU")
                                )) {
                            boolean insFlag = false;
                            for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                                Charges costBean = (Charges) iter.next();
                                if (!costBean.getUnitType().equalsIgnoreCase(unitType)) {
                                    insFlag = true;
                                    break;
                                }
                            }
                            if (fclRates.size() > 0) {
                                boolean flag = false;
                                boolean flag2 = false;
                                int a = 0;
                                if (null != unitType && !unitType.equalsIgnoreCase("0")) {
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        Charges costBean = (Charges) fclRates.get(i);
                                        if (!flag) {
                                            if (costBean.getUnitType().equalsIgnoreCase(unitType)) {
                                                flag2 = true;
                                                a = a + 1;
                                                if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && costBean.getChgCode().equalsIgnoreCase(charges.getChgCode()) && costBean.getUnitType().equalsIgnoreCase(unitType)) {
                                                    flag = true;
                                                    String msg = costBean.getChgCode() + " For " + costBean.getCostType() + "  already exists";
                                                    request.setAttribute("msg", msg);
                                                    for (int j = 0; j < fclRates.size(); j++) {
                                                        Charges cost = (Charges) fclRates.get(j);
                                                        fclRatesList1.add(cost);
                                                    }
                                                    break;
                                                }
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                    if (!flag2) {
                                        for (int i = 0; i < fclRates.size(); i++) {
                                            Charges c1 = (Charges) fclRates.get(i);
                                            fclRatesList1.add(c1);
                                        }
                                        Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, number1);
                                        chargesList.add(c1);
                                        boolean flag6 = false;
                                        for (int i = 0; i < fclRates.size(); i++) {
                                            Charges c10 = (Charges) fclRates.get(i);
                                            if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && c10.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("Flatratepercontainer"))) {
                                                if (c10.getChgCode().equalsIgnoreCase(c1.getChgCode()) && c10.getUnitType().equalsIgnoreCase(c1.getUnitType())) {
                                                    flag6 = false;
                                                    String msg = c10.getChgCode() + " For " + c10.getCostType() + "  already exists";
                                                    request.setAttribute("msg", msg);
                                                    break;
                                                }
                                            }
                                        }
                                        if (!flag6) {
                                            fclRatesList1.add(c1);

                                            request.setAttribute("interchargecode", c1.getChgCode());
                                            String msg = "Charges added to Quote";
                                            request.setAttribute("msg", msg);
                                        }
                                    } else {
                                        if (!flag) {
                                            boolean flag4 = false;
                                            for (int j = 0; j < fclRates.size(); j++) {
                                                Charges c9 = (Charges) fclRates.get(j);
                                                fclRatesList1.add(c9);
                                                if (!flag4) {
                                                    if (c9.getUnitType().equalsIgnoreCase(unitType)) {
                                                        flag4 = true;
                                                        Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, c9.getNumber());
                                                        fclRatesList1.add(c1);
                                                        chargesList.add(c1);

                                                        request.setAttribute("interchargecode", c1.getChgCode());
                                                        String msg = "Charges added to Quote";
                                                        request.setAttribute("msg", msg);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    boolean flag4 = false;
                                    for (int i = 0; i < fclRates.size(); i++) {
                                        Charges c9 = (Charges) fclRates.get(i);
                                        if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && c9.getChgCode().equalsIgnoreCase(charges.getChgCode())) {
                                            String msg = c9.getChgCode() + " For " + c9.getCostType() + "  already exists";
                                            request.setAttribute("msg", msg);
                                            flag4 = true;
                                            break;
                                        }
                                    }
                                    if (!flag4) {
                                        boolean testFlag = false;
                                        for (int k = 0; k < fclRates.size(); k++) {
                                            Charges c5 = (Charges) fclRates.get(k);

                                            if (!c5.getUnitType().equalsIgnoreCase(unitType)) {
                                                unitType = c5.getUnitType();
                                                testFlag = true;
                                                Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, c5.getNumber());
                                                if("PER TEU".equalsIgnoreCase(charges.getCostType()) && !"A=20".equalsIgnoreCase(c1.getUnitName())){
                                                    c1.setAmount(c1.getAmount() *2.00);
                                                    c1.setMarkUp(c1.getMarkUp() *2.00);
                                                }
                                                fclRatesList1.add(c1);
                                                chargesList.add(c1);
                                                request.setAttribute("interchargecode", c1.getChgCode());
                                                String msg = "Charges added to Quote";
                                                request.setAttribute("msg", msg);
                                                fclRatesList1.add(c5);
                                            } else {
                                                fclRatesList1.add(c5);
                                            }
                                        }
                                        if (!testFlag) {
                                            Charges c5 = (Charges) fclRates.get(fclRates.size() - 1);
                                            unitType = c5.getUnitType();
                                            Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, number1);
                                            fclRatesList1.add(c1);
                                            chargesList.add(c1);

                                            request.setAttribute("interchargecode", c1.getChgCode());
                                            String msg = "Charges added to Quote";
                                            request.setAttribute("msg", msg);
                                        }
                                    }
                                }
                            } else {
                                Charges c1 = quotationBC.addCostBean(charges, messageResources, unitType, number1);
                                fclRatesList1.add(c1);
                                chargesList.add(c1);

                                request.setAttribute("interchargecode", c1.getChgCode());
                                String msg = "Charges added to Quote";
                                request.setAttribute("msg", msg);
                            }

                        } else if (charges.getCostType() != null && (charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs")) || charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")))) {
                            boolean flag = false;
                            for (int i = 0; i < perkglbsList.size(); i++) {
                                Charges c1 = (Charges) perkglbsList.get(i);
                                if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && c1.getChgCode().equalsIgnoreCase(charges.getChgCode())) {
                                    flag = true;
                                    String msg = c1.getChgCode() + " For " + c1.getCostType() + "  already exists";
                                    request.setAttribute("msg", msg);
                                    break;
                                }
                            }
                            if (!flag || perkglbsList.size() == 0) {
                                Charges c1 = quotationBC.getCostBean(number1, charges);
                                c1.setMinimum(charges.getMinimum());
                                perkglbsList.add(c1);
                                chargesList.add(c1);
                                request.setAttribute("interchargecode", c1.getChgCode());
                                String msg = "Charges added to Quote";
                                request.setAttribute("msg", msg);
                            }
                        } else if (charges.getCostType() != null && charges.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("perbl"))) {
                            boolean flag = false;
                            if (session.getAttribute("chargesList") != null) {
                                flag = validateCharge(charges.getChgCode(), session);
                                if (!"N".equalsIgnoreCase(quotation.getRatesNonRates()) && flag) {
                                    String msg = charges.getChgCode() + " For " + charges.getCostType() + "  already exists";
                                    request.setAttribute("msg", msg);
                                }
                                if (!flag) {
                                    Charges c1 = quotationBC.getCostBean(number1, charges);
                                    chargesList.add(c1);
                                    request.setAttribute("interchargecode", c1.getChgCode());
                                    String msg = "Charges added to Quote";
                                    request.setAttribute("msg", msg);
                                }
                            } else {
                                Charges c1 = quotationBC.getCostBean(number1, charges);
                                request.setAttribute("interchargecode", c1.getChgCode());
                                chargesList.add(c1);
                                String msg = "Charges added to Quote";
                                request.setAttribute("msg", msg);
                            }
                        }
                    }
                }
            }

            session.setAttribute("chargesList", chargesList);
            List<Charges> chargeList = (List<Charges>) session.getAttribute("chargesList");
            if (CommonFunctions.isNotNullOrNotEmpty(chargeList)) {
                for (Charges chargesListTemp1 : chargeList) {
                    if (null != chargesListTemp1.getChargeCodeDesc() && "INSURE".equals(chargesListTemp1.getChargeCodeDesc())) {
                        buttonValue = "SaveToQuote";
                    }
                }
            }

            if (forMarkUp.equalsIgnoreCase("closeThePopUP")) {//--not removing the session for Intermodal & LocalDrayage
                //---do nothing----
                if (session.getAttribute("newCharges") != null) {
                    session.removeAttribute("newCharges");
                }

            } else if (forMarkUp.equalsIgnoreCase("dontClose")) {
                if (session.getAttribute("newCharges") != null) {
                    session.removeAttribute("newCharges");
                }
            }
            request.setAttribute("changeButtonName", "changeButtonName");
        }
        if (buttonValue != null && buttonValue.equalsIgnoreCase("close")) {
            if (session.getAttribute("chargesList") != null) {
                session.removeAttribute("chargesList");
            }
            if (session.getAttribute("hashMap") != null) {
                session.removeAttribute("hashMap");
            }
            request.setAttribute("buttonvalue", "dontAddInsure");
        }
        if (buttonValue != null && buttonValue.equalsIgnoreCase("SaveToQuote")) {
            if (session.getAttribute("chargesList") != null) {
                List<Charges> chargeList = (List<Charges>) session.getAttribute("chargesList");
                if (CommonFunctions.isNotNullOrNotEmpty(chargeList)) {
                    for (Charges persistenceCharges : chargeList) {
                        persistenceCharges.setQouteId(quotation.getQuoteId());
                        persistenceCharges.setStandardCharge("Y");
                        if (CommonUtils.isNotEmpty(persistenceCharges.getUnitType())) {
                            List l = chargesDAO.getStandardCharge(quotation.getQuoteId(), persistenceCharges.getUnitType());
                            if (!l.isEmpty()) {
                                Charges c = (Charges) l.get(0);
                                persistenceCharges.setSpecialEquipment(c.getSpecialEquipment());
                                persistenceCharges.setSpecialEquipmentUnit(c.getSpecialEquipmentUnit());
                            }
                        }
                        chargesDAO.save(persistenceCharges);
                        if (CommonUtils.isNotEmpty(persistenceCharges.getUnitType())) {
                            GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(persistenceCharges.getUnitType()));
                            if (null != genericCode) {
                                if (!"N".equals(quotation.getRatesNonRates())) {
                                    if (CommonUtils.isNotEmpty(quotation.getSelectedUnits())) {
                                        if (!quotation.getSelectedUnits().contains(genericCode.getCodedesc())) {
                                            quotation.setSelectedUnits(quotation.getSelectedUnits() + "," + genericCode.getCodedesc());
                                        }
                                    } else {
                                        quotation.setSelectedUnits(genericCode.getCodedesc());
                                    }
                                }
                                chargesDAO.saveManualSpecialEquipmentCharges(persistenceCharges, genericCode.getCode());
                            }
                        }
                        new NotesBC().saveNotesWhileAddingCharges(NotesConstants.QUOTE, quotation.getFileNo(), userName, persistenceCharges);
                    }
                }
            }
            // create note
            quotation.setRampCheck(quoteChargeForm.getRampCheck());
            request.setAttribute("buttonvalue", "completed");
            if (session.getAttribute("chargesList") != null) {
                session.removeAttribute("chargesList");
            }
            if (session.getAttribute("hashMap") != null) {
                session.removeAttribute("hashMap");
            }
        }
        request.setAttribute("selectedUnits", quotation.getSelectedUnits());
        return mapping.findForward("charges");
    }

    public Boolean validateCharge(String ChargeCode, HttpSession session) {
        boolean flag = false;
        if (session.getAttribute("chargesList") != null) {
            List<Charges> chargeList = (List<Charges>) session.getAttribute("chargesList");
            if (CommonFunctions.isNotNullOrNotEmpty(chargeList)) {
                for (Charges persistenceCharges : chargeList) {
                    if (persistenceCharges.getChgCode().equalsIgnoreCase(ChargeCode)) {
                        flag = true;
                        break;
                    }
                }
            }
        }
        return flag;
    }

    public Boolean validateChargePerContainerSize(String ChargeCode, String unitType, HttpSession session) {
        boolean flag = false;
        if (session.getAttribute("chargesList") != null) {
            List<Charges> chargeList = (List<Charges>) session.getAttribute("chargesList");
            if (CommonFunctions.isNotNullOrNotEmpty(chargeList)) {
                for (Charges persistenceCharges : chargeList) {
                    if (persistenceCharges.getChgCode().equalsIgnoreCase(ChargeCode) && persistenceCharges.getUnitType().equalsIgnoreCase(unitType)) {
                        flag = true;
                        break;
                    }
                }
            }
        }
        return flag;
    }
    private void spotRateFeatures()throws Exception{
        
    }
}
