/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import com.gp.cong.common.CommonConstants;
import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.GenerateFileNumber;
import com.gp.cong.logisoft.bc.fcl.ImportBc;
import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.bc.fcl.QuotationConstants;
import com.gp.cong.logisoft.bc.fcl.QuotationDTO;
import com.gp.cong.logisoft.bc.fcl.QuotationReportBC;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Notes;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.TradingPartnerTemp;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.NotesDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.util.StringFormatter;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.TransactionBean;
import com.gp.cvst.logisoft.domain.Charges;
import com.gp.cvst.logisoft.domain.FileNumberForQuotaionBLBooking;
import com.gp.cvst.logisoft.domain.Quotation;
import com.gp.cvst.logisoft.hibernate.dao.ChargesDAO;
import com.gp.cvst.logisoft.hibernate.dao.QuotationDAO;
import com.gp.cvst.logisoft.struts.form.QuotesForm;
import com.logiware.hibernate.dao.CustomerDefaultChargesDAO;
import com.logiware.hibernate.domain.CustomerDefaultCharges;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

/**
 * MyEclipse Struts Creation date: 06-30-2008
 *
 * XDoclet definition:
 *
 * @struts.action path="/quotes" name="QuotesForm"
 * input="/jsps/fclQuotes/Quote.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/jsps/fclQuotes/Quote.jsp"
 */
public class QuotesAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        QuotesForm quotesForm = (QuotesForm) form;// TODO Auto-generated method stub

        NumberFormat numb = new DecimalFormat("###,###,##0.00");
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        Notes notes = new Notes();
        NotesDAO notesDAO = new NotesDAO();
        StringFormatter stringFormatter = new StringFormatter();
        QuotationBC quotationBC = new QuotationBC();
        ChargesDAO chargesDAO = new ChargesDAO();
        QuotationDAO quotationDAO = new QuotationDAO();
        String portofDischarge = quotesForm.getPortofDischarge();
        String ssline = quotesForm.getSsline();
        MessageResources messageResources = getResources(request);
        String clientName = quotesForm.getCustomerName();
        CustomerDAO customerDAO = new CustomerDAO();
        String ssDescription = quotesForm.getSslDescription();
        String findForward = "";
        String buttonValue = quotesForm.getButtonValue();
        String OriginNumber = quotesForm.getOriginNumber();
        DBUtil dbUtil = new DBUtil();
        HttpSession session = request.getSession();
        Double totalCharges = 0.00;
        String commId = quotesForm.getCommdityId();
        String requestObjectVAlue = null;
        String originCode = null;
        String propRemarks = null;
        String rateFlag = "false";
        if (null != quotesForm && null != quotesForm.getSelectedOrigin() && quotesForm.getSelectedOrigin().lastIndexOf("(") != -1) {
            originCode = quotesForm.getSelectedOrigin().substring(quotesForm.getSelectedOrigin().lastIndexOf("(") + 1,
                    quotesForm.getSelectedOrigin().lastIndexOf(")"));
        }
        if (quotesForm.getZip() != null && !quotesForm.getZip().trim().equals("")) {
            propRemarks = new UnLocationDAO().getpropertyRemarks(originCode);
        }
        if (propRemarks != null) {
            request.setAttribute("remarks", propRemarks);
        }
        boolean importFlag = quotesForm.isImportFlag();
        importFlag=(null!=session.getAttribute(ImportBc.sessionName))?true:false;
        request.setAttribute("focusValue", quotesForm.getFocusValue());
        request.setAttribute("enableIms", LoadLogisoftProperties.getProperty("ims.enable"));
        User user1 = new User();
        String userName = "";
        if (session.getAttribute("loginuser") != null) {
            user1 = (User) session.getAttribute("loginuser");
            userName = user1.getLoginName();
        }
        if (session.getAttribute(CommonConstants.UNIQUE_ITEM) != null) {
            Map addUniqueCode = (Map) session.getAttribute(CommonConstants.UNIQUE_ITEM);
            Set set = addUniqueCode.entrySet();
            for (Iterator it = set.iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();
                if (entry.getKey() != null && entry.getKey().equals(CommonConstants.SEARCH_FILE_NUMBER)) {
                    String quoteFolderId = (String) entry.getValue();//QOT
                    String quoteLinkId = quoteFolderId.substring(quoteFolderId.lastIndexOf("=") + 1);//link id
                    String folderid = quoteFolderId.substring(quoteFolderId.indexOf("=") + 1, quoteFolderId.lastIndexOf("&"));
                    requestObjectVAlue = "folderId=" + folderid + "&linkid=" + quoteLinkId;
                }
            }
        }
        TransactionBean transactionBean = new TransactionBean();
        transactionBean.setDirectConsignmntCheck(quotesForm.getDirectConsignmntCheck());
        transactionBean.setRampCheck(quotesForm.getRampCheck());
        transactionBean.setBrand(quotesForm.getBrand());
        request.setAttribute("transactionbean", (transactionBean));
        if (null != buttonValue) {
            if (buttonValue.equals("getCustomer")) {
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                findForward = "add";
            }
            if (buttonValue.equals("getClient")) {
                List customerList = quotationBC.getCustomerList(clientName);
                request.setAttribute(QuotationConstants.QUOTATIONLIST, customerList);
                request.setAttribute("buttonValue", buttonValue);
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                findForward = "success";
            }
            if (buttonValue.equals("getCarrier")) {
                List customerList = quotationBC.getCustomerList(ssDescription);
                request.setAttribute(QuotationConstants.QUOTATIONLIST, customerList);
                request.setAttribute("buttonValue", buttonValue);
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                findForward = "success";
            }
            if (buttonValue.equals("popup1")) {
                List ratesList = new ArrayList();
                QuotationDTO quotationDTO = new QuotationDTO(quotesForm);
                quotationDTO = quotationBC.getQuotationDTO(quotationDTO, quotesForm);
                ratesList = quotationBC.getQuotationRates(quotationDTO, messageResources, request);
                request.setAttribute(QuotationConstants.RATESLIST, ratesList);
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                request.setAttribute("pId", portofDischarge);
                request.setAttribute("oId", OriginNumber);
                request.setAttribute("cId", commId);
                request.setAttribute(QuotationConstants.QUOTATIONNO, quotesForm.getQuotationNo());
                findForward = "success";
            }
            if (buttonValue.equals("newgetRates")) {
                QuotationDTO quotationDTO = new QuotationDTO(quotesForm);
                quotationDTO = quotationBC.getQuotationDTO(quotationDTO, quotesForm);
                CustomerDAO colDAO = new CustomerDAO();
                String code = "";
                String desc = "";
                String sscode = "";
                if (ssline != null) {
                    int i = ssline.indexOf("//");
                    if (i != -1) {
                        String destinationPort[] = ssline.split("//");
                        desc = destinationPort[0];
                        code = destinationPort[1];
                    }
                    List list = colDAO.findForAgenttNo1(code, desc);

                    if (list != null && list.size() > 0) {
                        TradingPartnerTemp customerTemp = (TradingPartnerTemp) list.get(0);
                        ssline = customerTemp.getAccountName();
                        sscode = customerTemp.getAccountno();
                    }
                    request.setAttribute("bulletRates", null != quotesForm.getBulletRatesCheck() && quotesForm.getBulletRatesCheck().equalsIgnoreCase("on")
                            ? true : new QuotationDAO().isBulletRate(sscode, quotesForm.getIsTerminal(), quotesForm.getPortofDischarge()));
                }
                quotationDTO.setSelectedCheck(quotesForm.getSelectedCheck());
                quotationDTO.setSscode(sscode);
                quotationDTO.setSsline(ssline);
                quotesForm.setSslDescription(ssline);
                quotesForm.setSslcode(sscode);
                quotesForm.setSsline(ssline);
                Quotation quotation = quotationBC.save(quotesForm);
                quotationDTO.setHazmat(quotesForm.getHazmat());
                quotationDTO.setSoc(quotesForm.getSoc());
                quotationDTO.setSpclEqpmt(quotesForm.getSpecialequipment());
                quotationDTO.setSelectedOrigin(quotesForm.getSelectedOrigin());
                quotationDTO.setSelectedDestination(quotesForm.getSelectedDestination());
                quotationDTO.setSelectedComCode(quotesForm.getSelectedComCode());
                session.setAttribute("quotationDTO", quotationDTO);
                //--------------GETTING RATESLIST------
                boolean isImsQuote = false;
                if (null != quotesForm.getIsTerminal() && quotesForm.getIsTerminal().trim().equalsIgnoreCase(quotesForm.getImsOrigin())) {
                    isImsQuote = true;
                }
                quotationBC.getQuotationRates1(quotationDTO, messageResources, request, quotation, buttonValue, isImsQuote);
                quotesForm.setSelectedDestination(quotesForm.getSelectedDestination().replace("&&", "'"));
                quotation = stringFormatter.findForManagementForDestination(quotesForm.getSelectedOrigin(), quotesForm.getSelectedDestination(), quotation);
                // adding afrfee for japan destinations here
                String destination = quotation.getDestination_port();
                String afrFees = LoadLogisoftProperties.getProperty("afrfee.rate.japan");
                Double afrFee = !afrFees.equals("") ? Double.parseDouble(afrFees) : 0d;
                if (null != destination && destination.substring(destination.lastIndexOf("(") + 1, destination.length() - 1).startsWith("JP") && afrFee > 0d) {
                    chargesDAO.addAfrfeeForJapan(quotation.getQuoteId(), afrFee);
                }
                // adding afrfee for japan destinations here
                //--------TO GET POLCODE AND PODCODES AND SET IT TO POL AND POD---------
                if (request.getAttribute("QuotationCodes") != null) {
                    Quotation newQuotation = new Quotation();
                    newQuotation = (Quotation) request.getAttribute("QuotationCodes");
                    quotation.setPlor(newQuotation.getPlor());
                    quotation.setFinaldestination(newQuotation.getFinaldestination());
                    quotation.setDestination_port(newQuotation.getDestination_port());
                }
                session.setAttribute("ratesbasicsmessage", "Rates basis------------> " + quotesForm.getSelectedOrigin() + " to " + quotesForm.getSelectedDestination());
                quotesForm = quotationBC.getRemarksandTransitDaysFromFclSellrates(quotesForm);
                quotation.setNoOfDays(quotesForm.getNoOfDays());
                quotation.setRatesRemarks(quotesForm.getRatesRemarks());
                quotation.setFclTempRemarks(quotesForm.getFclTempRemarks());
                boolean isBaseBullet = genericCodeDAO.displayBulletRatesRemarks(quotation.getCommcode().getCode());
                if (CommonUtils.isEqualIgnoreCase(quotation.getBulletRatesCheck(), "on") || isBaseBullet) {
                    quotation.setFclGRIRemarks("");
                } else {
                    quotation.setFclGRIRemarks(quotesForm.getFclGRIRemarks());
                }
                quotation.setLocaldryage(quotesForm.getLocaldryage());
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                if (quotation.getFileNo() != null) {
                    quotesForm.setQuotationNo(quotation.getFileNo().toString());
                }
                if (quotation.getQuoteId() != null) {
                    quotesForm.setQuoteId(quotation.getQuoteId().toString());
                }
                if (quotesForm.getIdinclude().equals("on")) {
                    totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount1()));
                }
                if (quotesForm.getInsuranceCharge() == null || quotesForm.getInsuranceCharge().equals("")) {
                    quotesForm.setInsuranceCharge("0.00");
                }
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()));

                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                quotesForm.setSslcode(sscode);
                quotesForm.setSslDescription(ssline);
                quotesForm = quotationBC.getCurrency(fclRates, quotesForm, messageResources);
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                List otherChargesList = new ArrayList();
                List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                List perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                quotesForm = quotationBC.getOtherCurrency(otherChargesList, quotesForm, messageResources);
                if (quotation.getInsurance().equals("Y") && !quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                    quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceAmount())));
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                }
//		if (quotation.getLocaldryage() != null && quotation.getLocaldryage().equals("Y")) {
//		    fclRates = quotationBC.addLocalDrayageToBl(fclRates, quotation, messageResources);
//		}
                if (quotation.getIntermodel() != null && quotation.getIntermodel().equals("Y")) {
                    fclRates = quotationBC.addIntermodelToBl(fclRates, quotation, messageResources);
                }
                if (quotesForm.getInsuranceCharge() == null || quotesForm.getInsuranceCharge().equals("")) {
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                }
                if (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y")) {
                    fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
                }
                if (CommonUtils.isNotEmpty(quotation.getDocumentAmount()) && "Y".equalsIgnoreCase(quotation.getDocCharge())) {
                    fclRates = quotationBC.addDocChargeToBl(fclRates, quotation, quotesForm.getDocChargeAmount());
                }
                for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getCharges(fclRates, messageResources, quotation, request);
                for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getOtherCharges(otherChargesList, quotation);
                for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getOtherChargesforKG(perkglbsList, quotation);
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                perkglbsList = new ArrayList();
                otherChargesList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                quotation.setQuoteNo(quotation.getQuoteId().toString());
                quotation.setTotalCharges(quotation.getTotalCharges());
                ChargesDAO cDao = new ChargesDAO();
                fclRates = (List) cDao.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                String num = "";
                Double myr = 0.00;
                Double nht = 0.00;
                Double pkr = 0.00;
                Double rm = 0.00;
                Double spo = 0.00;
                Double vnd = 0.00;
                Double inr = 0.00;
                List unitsList = new ArrayList();
                String currency[] = messageResources.getMessage("currency").split(",");
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges c1 = (Charges) fclRates.get(i);
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[0])) {
                        myr = myr + c1.getAmount();
                        myr = myr + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[1])) {
                        nht = nht + c1.getAmount();
                        nht = nht + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[2])) {
                        pkr = pkr + c1.getAmount();
                        pkr = pkr + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[3])) {
                        rm = rm + c1.getAmount();
                        rm = rm + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[4])) {
                        spo = spo + c1.getAmount();
                        spo = spo + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[5])) {
                        vnd = vnd + c1.getAmount();
                        vnd = vnd + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[6])) {
                        inr = inr + c1.getAmount();
                        inr = inr + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getNumber() != null) {
                        num = c1.getUnitType();
                        unitsList.add(num);
                    }
                }
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                otherChargesList = new ArrayList();
                otherChargesLIst = (List) cDao.getChargesforQuotation8(quotation.getQuoteId());
                perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))
                            || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                for (int i = 0; i < otherChargesList.size(); i++) {
                    Charges c1 = (Charges) otherChargesList.get(i);
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[0])) {
                        myr = myr + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[1])) {
                        nht = nht + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[2])) {
                        pkr = pkr + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[3])) {
                        rm = rm + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[4])) {
                        spo = spo + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[5])) {
                        vnd = vnd + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[6])) {
                        inr = inr + c1.getRetail();
                    }
                }
                quotation.setMyr(myr);
                quotation.setNht(nht);
                quotation.setPkr(pkr);
                quotation.setRm(rm);
                quotation.setSpo(spo);
                quotation.setVnd(vnd);
                quotation.setInr(inr);
                request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                request.setAttribute("specialEquipmentUnitList", new DBUtil().getSpecialEquipmentUnitList(quotation.getSelectedUnits()));
                request.setAttribute("buttonValue", buttonValue);
                if (session.getAttribute(QuotationConstants.QUOTATIONOLD) != null) {
                    session.removeAttribute(QuotationConstants.QUOTATIONOLD);
                    session.setAttribute(QuotationConstants.QUOTATIONOLD, quotation);
                } else {
                    session.setAttribute(QuotationConstants.QUOTATIONOLD, quotation);
                }
                quotation = quotationBC.save(quotesForm);
                rateFlag = "true";
                findForward = "edit";
            }
            request.setAttribute("rateFlag", rateFlag);
            if (buttonValue.equals("numberChanged")) {
                Quotation quotation = quotationBC.save(quotesForm);
                quotationDAO.save(quotation);
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                List changedfclRates = quotationBC.getNumbersChanged(fclRates, quotesForm, userName);
                for (int i = 0; i < changedfclRates.size(); i++) {
                    Charges c1 = (Charges) changedfclRates.get(i);
                    if (c1.getAccountNo() != null) {
                        if (!c1.getAccountNo().equals(
                                request.getParameter("accountno" + i))) {
                            if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                                List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                    String accountName = "";
                    if (request.getParameter("accountname" + i) != null) {
                        accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                    }
                    if (c1.getAccountName() != null) {
                        if (!c1.getAccountName().equals(accountName)) {
                            if (accountName != null && !accountName.equals("")) {
                                List list = customerDAO.findForAgenttNo(null, accountName);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (accountName != null && !accountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, accountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                }
                for (int i = 0; i < changedfclRates.size(); i++) {
                    Charges charges = (Charges) changedfclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                List consolidatorList = quotationBC.consolidateRates(changedfclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, changedfclRates);
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                if (quotation.getInsurance().equals("Y") && quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                    //quotation=quotationBC.calculateInsurance(quotation,quotesForm.getInsuranceAmount());

                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                }
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                List otherChargesList = new ArrayList();
                request.setAttribute(QuotationConstants.QUOTATIONNO, quotesForm.getQuotationNo());
                List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                List perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                //otherChargesList=quotationBC.getOtherNumbersChanged(otherChargesList);
                for (int i = 0; i < otherChargesList.size(); i++) {
                    Charges c1 = (Charges) otherChargesList.get(i);
                    if (c1.getAccountNo() != null) {
                        if (!c1.getAccountNo().equals(request.getParameter("otheraccountno" + i))) {
                            if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                                List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                    String otherAccountName = "";
                    if (request.getParameter("otheraccountname" + i) != null) {
                        otherAccountName = request.getParameter("otheraccountname" + i).replace("amp;", "").trim();
                    }
                    if (c1.getAccountName() != null) {
                        if (!c1.getAccountName().equals(otherAccountName)) {
                            if (otherAccountName != null && !otherAccountName.equals("")) {
                                List list = customerDAO.findForAgenttNo(null, otherAccountName);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (otherAccountName != null && !otherAccountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, otherAccountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                }
                if (quotation.getInsurance().equals("Y") && !quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                    //otherChargesList=quotationBC.addInsuranceToBl(otherChargesList, quotation);
                    quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceAmount())));
                    changedfclRates = quotationBC.getInsuranceCostofGoods(changedfclRates, quotation, messageResources);
                }
                if (quotesForm.getDeductFFcomm() != null && quotesForm.getDeductFFcomm().equals("Y")) {
                    changedfclRates = quotationBC.addFFCommission(changedfclRates, messageResources, quotation);
                }
                for (Iterator iter = changedfclRates.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getCharges(changedfclRates, messageResources, quotation, request);
                for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getOtherCharges(otherChargesList, quotation);
                for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getOtherChargesforKG(perkglbsList, quotation);
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                perkglbsList = new ArrayList();
                otherChargesList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                /*if ((quotation.getHazmat() != null && quotation.getHazmat().equals("Y")) ||
                 (quotation.getHazmatSet() != null && quotation.getHazmatSet().size() > 0)) {
                 String msg = "HAZARDOUS CARGO";
                 request.setAttribute("msg", msg);
                 }*/
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);

                findForward = "success";
            }
            if (buttonValue.equals("save") || buttonValue.equals("confirmSave") || "applyDefaultValues".equalsIgnoreCase(buttonValue)) {
                Quotation quotation = quotationBC.save(quotesForm);
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                if (quotesForm.getPortofDischarge() != null) {
                    String Destination = quotesForm.getPortofDischarge();
                    int j = Destination.indexOf("/");
                    if (j != -1) {
                        String a[] = Destination.split("/");
                        Destination = a[0];
                    }
                    boolean isBaseBullet = false;
                    if (null != quotation.getCommcode() && null != quotation.getCommcode().getCode()) {
                        isBaseBullet = genericCodeDAO.displayBulletRatesRemarks(quotation.getCommcode().getCode());
                    }
                    if (CommonUtils.isEqualIgnoreCase(quotation.getBulletRatesCheck(), "on") || isBaseBullet) {
                        quotation.setFclGRIRemarks("");
                    } else {
                        quotation.setFclGRIRemarks(new UnLocationDAO().getDestinationGRIRemarks(Destination));
                    }
                }
                if (quotation.getFileNo() == null) {/*
                     List fileNumberList = genericCodeDAO.findByCodeTypeid(46);
                     if (fileNumberList != null && !fileNumberList.isEmpty()) {
                     GenericCode genericCode = (GenericCode) fileNumberList.get(0);
                     if (genericCode != null) {
                    
                     int fileNo = Integer.parseInt(genericCode.getCode());
                     genericCode.setCode(String.valueOf(fileNo + 1));
                     quotation.setFileNo(fileNo + 1);
                    
                     }
                     }
                     // quotationDAO.update(quotationdomain);
                     */

                    User userid = null;
                    if (session.getAttribute("loginuser") != null) {
                        userid = (User) session.getAttribute("loginuser");
                    }
                    GenerateFileNumber generateFileNumber = new GenerateFileNumber();// wil generate file number
                    generateFileNumber.join();// it wil force thread to complete the task before move to next step
                    quotation.setFileNo("" + generateFileNumber.getFileNumber());
                }
                quotationDAO.save(quotation);
                quotesForm.setQuotationNo(quotation.getFileNo().toString());
                /*if(quotesForm.getLdinclude().equals("on")){
                 totalCharges+=Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount()));
                 }*/
                if ("applyDefaultValues".equalsIgnoreCase(buttonValue) && CommonUtils.isNotEmpty(quotation.getDestination_port()) && CommonUtils.isNotEmpty(quotation.getOrigin_terminal())) {
                    if ("Y".equalsIgnoreCase(quotation.getBreakBulk())) {
                        saveDefaultCharges(quotation.getClientnumber(), quotation.getQuoteId(), "PER BL CHARGES");
                    } else {
                        saveDefaultCharges(quotation.getClientnumber(), quotation.getQuoteId(), "PER CONTAINER SIZE");
                    }
                    notes.setModuleId("FILE");
                    notes.setUpdateDate(new Date());
                    notes.setNoteTpye("auto");
                    notes.setNoteDesc("Important Notes pop up was Closed By '" + quotation.getUserName() + "' at '" + new Date().getTime() + "' ");
                    notes.setUpdatedBy(quotation.getBookedBy());
                    notes.setModuleRefId(quotation.getFileNo().toString());
                    notesDAO.save(notes);
                }
                if (quotesForm.getIdinclude().equals("on")) {
                    totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount1()));
                }
                if (quotesForm.getInsuranceCharge() == null || quotesForm.getInsuranceCharge().equals("")) {
                    quotesForm.setInsuranceCharge("0.00");
                }
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()));
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                quotation.setQuoteNo(quotation.getQuoteId().toString());
                if (quotation.getInsurance().equals("Y") && !quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                    quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceAmount())));
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                }
                if (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y")) {
                    fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
                }
                quotationDAO.save(quotation);
                for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getCharges(fclRates, messageResources, quotation, request);
                List otherChargesList = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                quotationBC.getOtherCharges(otherChargesList, quotation);
                setFileList(session, quotation);
                String msg = "Quotation saved successfully";
                request.setAttribute("msg", msg);
                request.setAttribute("requestObjectVAlue", requestObjectVAlue);
                User userid = null;
                if (session.getAttribute("loginuser") != null) {
                    userid = (User) session.getAttribute("loginuser");
                }
                ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
                ProcessInfo pi = new ProcessInfo();
                String programid = "";
                programid = (String) session.getAttribute("processinfoforquotation");
                String recordid = quotation.getFileNo().toString();
                String editstatus = "startedited";
                String deletestatus = "startdeleted";
                int progId = 0;
                if (programid != null && !programid.equals("")) {
                    progId = Integer.parseInt(programid);
                }
                UserDAO userDAO = new UserDAO();
                ProcessInfo processinfoobj = processinfoDAO.findById(progId, recordid, deletestatus, editstatus);
                if (processinfoobj != null && !processinfoobj.getUserid().equals(userid.getUserId()) && processinfoobj != null) {
                    String view = "3";
                    User loginuser = userDAO.findById(processinfoobj.getUserid());
                    String loginName = loginuser.getLoginName();
                    msg = "This record is being used by ";
                    String message = msg + loginName;
                    request.setAttribute("msg", message);
                    session.setAttribute("view", view);
                } else {
                    pi.setUserid(userid.getUserId());
                    if (programid != null && !programid.equals("")) {
                        pi.setProgramid(Integer.parseInt(programid));
                    }
                    java.util.Date currdate = new java.util.Date();
                    pi.setProcessinfodate(currdate);
                    pi.setEditstatus(editstatus);
                    pi.setRecordid(recordid);
                    processinfoDAO.save(pi);
                    if (session.getAttribute("view") != null) {
                        session.removeAttribute("view");
                    }
                }
                quotation.setQuoteNo(quotation.getQuoteId().toString());
                quotation.setTotalCharges(quotation.getTotalCharges());
                ChargesDAO cDao = new ChargesDAO();
                fclRates = (List) cDao.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                otherChargesList = (List) cDao.getChargesforQuotation8(quotation.getQuoteId());

                request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute("specialEquipmentUnitList", new DBUtil().getSpecialEquipmentUnitList(quotation.getSelectedUnits()));
                if (session.getAttribute(QuotationConstants.QUOTATIONOLD) != null) {
                    session.removeAttribute(QuotationConstants.QUOTATIONOLD);
                    session.setAttribute(QuotationConstants.QUOTATIONOLD, quotation);
                } else {
                    session.setAttribute(QuotationConstants.QUOTATIONOLD, quotation);
                }
                findForward = "edit";
            }
            if (buttonValue.equals("goBack") || buttonValue.equals("confirmSave")) {
                if (!quotesForm.getQuoteId().equals("")) {
                    Quotation quotation = quotationDAO.findById(Integer.parseInt(quotesForm.getQuoteId()));
                    if (null != quotation) {
                        session.setAttribute("selectedFileNumber", quotation.getFileNo());
                    }
                    setFileList(session, quotation);
                }
                session.setAttribute("screenName", "fileSearch");
                findForward = "closeSearch";
            }
            if (buttonValue.equals("hazmat") || buttonValue.equals("assignRemarks") || buttonValue.equals("insurance")
                    || buttonValue.equals("addLocalDrayageToBl") || buttonValue.equals("addIntermodelToBl") || buttonValue.equals("addInsuranceToBl")
                    || buttonValue.equals("FFCommssion") || buttonValue.equals("deleteLocalDrayageToBl") || buttonValue.equals("deleteIntermodelToBl")
                    || buttonValue.equals("deleteInsuranceToBl") || buttonValue.equals("deleteFFCommssion") || buttonValue.equals("deleteInlandToBl")) {
                Quotation quotation = quotationBC.save(quotesForm);
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                if (quotation.getQuoteId() != null) {
                    quotesForm.setQuoteId(quotation.getQuoteId().toString());
                }
                if (quotesForm.getIntermodelComments() != null) {
                    quotesForm.setIntermodelComments(quotesForm.getIntermodelComments());
                }
                request.setAttribute("focusValue", quotesForm.getFocusValue());
                request.setAttribute("buttonValue", buttonValue);
                //quotationDAO.save(quotation);
                if (quotation.getQuoteId() != null) {
                    quotesForm.setQuoteId(quotation.getQuoteId().toString());
                }
                /*if(quotesForm.getLdinclude().equals("on")){
                 totalCharges+=Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount()));
                 }*/
                if (quotesForm.getIdinclude().equals("on")) {
                    totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount1()));
                }
                if (quotesForm.getInsuranceCharge() == null || quotesForm.getInsuranceCharge().equals("")) {
                    quotesForm.setInsuranceCharge("0.00");
                }
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()));
                if (quotation.getQuoteId() != null) {
                    List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                    for (int i = 0; i < fclRates.size(); i++) {
                        Charges charges = (Charges) fclRates.get(i);
                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                        charges.setUnitName(genericCode.getCodedesc());
                    }
                    for (int i = 0; i < fclRates.size(); i++) {
                        Charges c1 = (Charges) fclRates.get(i);
                        if (c1.getAccountNo() != null) {
                            if (!c1.getAccountNo().equals(
                                    request.getParameter("accountno" + i))) {
                                if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                                    List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                                    if (list != null && list.size() > 0) {
                                        CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                        c1.setAccountNo(customer1.getAccountNo());
                                        c1.setAccountName(customer1.getAccountName());
                                    }
                                }
                            }
                        } else {
                            if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                                List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                        String accountName = "";
                        if (request.getParameter("accountname" + i) != null) {
                            accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                        }
                        if (c1.getAccountName() != null) {
                            if (!c1.getAccountName().equals(accountName)) {
                                if (accountName != null && !accountName.equals("")) {
                                    List list = customerDAO.findForAgenttNo(null, accountName);
                                    if (list != null && list.size() > 0) {
                                        CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                        c1.setAccountNo(customer1.getAccountNo());
                                        c1.setAccountName(customer1.getAccountName());
                                    }
                                }
                            }
                        } else {
                            if (accountName != null && !accountName.equals("")) {
                                List list = customerDAO.findForAgenttNo(null, accountName);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    }
                    quotesForm = quotationBC.getCurrency(fclRates, quotesForm, messageResources);
                    fclRates = quotationBC.serMarkUpValuesforQuotesForm(fclRates, quotesForm, messageResources);
                    List otherChargesList = new ArrayList();
                    List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                    List perkglbsList = new ArrayList();
                    for (int i = 0; i < otherChargesLIst.size(); i++) {
                        Charges c1 = (Charges) otherChargesLIst.get(i);
                        if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                            perkglbsList.add(c1);
                        } else {
                            otherChargesList.add(c1);
                        }
                    }
                    for (int i = 0; i < otherChargesList.size(); i++) {
                        Charges c1 = (Charges) otherChargesList.get(i);
                        if (c1.getAccountNo() != null) {
                            if (!c1.getAccountNo().equals(request.getParameter("otheraccountno" + i))) {
                                if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                                    List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                                    if (list != null && list.size() > 0) {
                                        CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                        c1.setAccountNo(customer1.getAccountNo());
                                        c1.setAccountName(customer1.getAccountName());
                                    }
                                }
                            }
                        } else {
                            if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                                List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                        String otherAccountName = "";
                        if (request.getParameter("otheraccountname" + i) != null) {
                            otherAccountName = request.getParameter("otheraccountname" + i).replace("amp;", "").trim();
                        }
                        if (c1.getAccountName() != null) {
                            if (!c1.getAccountName().equals(otherAccountName)) {
                                if (otherAccountName != null && !otherAccountName.equals("")) {
                                    List list = customerDAO.findForAgenttNo(null, otherAccountName);
                                    if (list != null && list.size() > 0) {
                                        CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                        c1.setAccountNo(customer1.getAccountNo());
                                        c1.setAccountName(customer1.getAccountName());
                                    }
                                }
                            }
                        } else {
                            if (otherAccountName != null && !otherAccountName.equals("")) {
                                List list = customerDAO.findForAgenttNo(null, otherAccountName);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    }
                    fclRates = quotationBC.serMarkUpValuesforQuotesForm(fclRates, quotesForm, messageResources);
                    if (buttonValue.equals("deleteLocalDrayageToBl")) {
                        fclRates = quotationBC.deleteLocalDrayage(fclRates);
                        quotation.setAmount(0.00);
                        quotesForm.setAmount("0.00");
                    }
                    if (buttonValue.equals("deleteInlandToBl")) {
                        if (null != quotation.getRampCheck() && !quotation.getRampCheck().equals("") && quotation.getRampCheck().equalsIgnoreCase("on")) {
                            quotationDAO.deleteInlandOrIntmodRamp(quotation.getQuoteId().toString(), "INTRAMP");
                            fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                        } else {
                            quotationDAO.deleteInlandOrIntmodRamp(quotation.getQuoteId().toString(), importFlag?"DELIV": "INLAND");
                            fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                        }
                        quotation.setAmount(0.00);
                        quotation.setInland("N");
                        quotesForm.setAmount("0.00");
                    }
                    if (buttonValue.equals("addLocalDrayageToBl")) {
                        fclRates = quotationBC.addLocalDrayageToBl(fclRates, quotation, messageResources);
                    }
                    if (buttonValue.equals("deleteIntermodelToBl")) {
                        fclRates = quotationBC.deleteIntermodelToBl(fclRates);
                        quotation.setAmount1(0.00);
                        quotesForm.setAmount1("0.00");
                    }
                    if (buttonValue.equals("addIntermodelToBl")) {
                        fclRates = quotationBC.addIntermodelToBl(fclRates, quotation, messageResources);
                    }
                    if (buttonValue.equals("deleteInsuranceToBl")) {
                        fclRates = quotationBC.deleteInsuranceToBl(fclRates);
                        quotation.setCostofgoods(0.00);
                        quotesForm.setCostofgoods("0.00");
                        quotation.setInsuranceCharge(0.00);
                        quotesForm.setInsuranceCharge("0.00");
                    }
                    if (buttonValue.equals("addInsuranceToBl")) {
                        //otherChargesList=quotationBC.addInsuranceToBl(otherChargesList, quotation);
                    }
                    if (buttonValue.equals("deleteFFCommssion")) {
                        fclRates = quotationBC.deleteFFCommission(fclRates);
                    }
                    if (buttonValue.equals("FFCommssion") || (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y"))) {
                        fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
                    }

                    quotesForm = quotationBC.getOtherCurrency(otherChargesList, quotesForm, messageResources);
                    quotesForm.setTotalCharges(numb.format((Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + totalCharges)));
                    quotation = quotationBC.getCurrencyForQuotation(fclRates, quotation, messageResources);
                    quotation = quotationBC.getOtherCurrencyForQuotation(otherChargesList, quotation, messageResources);
                    quotation.setQuoteNo(quotation.getQuoteId().toString());
                    if (quotation.getInsurance().equals("Y") && !quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                        //quotation=quotationBC.calculateInsurance(quotation,quotesForm.getInsuranceAmount());
                        //otherChargesList=quotationBC.addInsuranceToBl(otherChargesList, quotation);
                        quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceAmount())));
                        fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                        quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                        quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                        quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    }
                    //quotationDAO.save(quotation);
                    for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                        Charges Charges = (Charges) iter.next();
                        Charges.setNewFlag(null);
                    }
                    quotationBC.getCharges(fclRates, messageResources, quotation, request);
                    for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                        Charges Charges = (Charges) iter.next();
                        Charges.setNewFlag(null);
                    }
                    quotationBC.getOtherChargesforKG(perkglbsList, quotation);
                    for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                        Charges Charges = (Charges) iter.next();
                        Charges.setNewFlag(null);
                    }
                    quotationBC.getOtherCharges(otherChargesList, quotation);
                    fclRates = new ArrayList();
                    fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                    for (int i = 0; i < fclRates.size(); i++) {
                        Charges charges = (Charges) fclRates.get(i);
                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                        charges.setUnitName(genericCode.getCodedesc());
                    }
                    otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                    perkglbsList = new ArrayList();
                    otherChargesList = new ArrayList();
                    for (int i = 0; i < otherChargesLIst.size(); i++) {
                        Charges c1 = (Charges) otherChargesLIst.get(i);
                        if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                            perkglbsList.add(c1);
                        } else {
                            otherChargesList.add(c1);
                        }
                    }
                    /*if ((quotation.getHazmat() != null && quotation.getHazmat().equals("Y")) ||
                     (quotation.getHazmatSet() != null && quotation.getHazmatSet().size() > 0)) {
                     String msg = "HAZARDOUS CARGO";
                     request.setAttribute("msg", msg);
                     }*/
                    request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                    List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                    request.setAttribute("consolidatorList", consolidatorList);
                    request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                    request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                }

                if (quotation.getFileNo() != null) {
                    request.setAttribute(QuotationConstants.QUOTATIONNO, quotation.getFileNo().toString());
                }
                request.setAttribute(QuotationConstants.QUOTATIONNAME, "Quote");
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                findForward = "success";
            }
            if (buttonValue.equals("recalc")) {
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                Quotation quotation = quotationDAO.findById(Integer.parseInt(quotesForm.getQuoteId()));
                if (quotation.getFileNo() != null) {
                    quotesForm.setQuotationNo(quotation.getFileNo().toString());
                }
                if (quotation.getQuoteId() != null) {
                    quotesForm.setQuoteId(quotation.getQuoteId().toString());
                }
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount()));
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount1()));
                if (quotesForm.getInsuranceCharge() == null || quotesForm.getInsuranceCharge().equals("")) {
                    quotesForm.setInsuranceCharge("0.00");
                }
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()));
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges c1 = (Charges) fclRates.get(i);
                    if (c1.getAccountNo() != null) {
                        if (!c1.getAccountNo().equals(
                                request.getParameter("accountno" + i))) {
                            if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                                List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (request.getParameter("accountno" + i) != null && !request.getParameter("accountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("accountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                    String accountName = "";
                    if (request.getParameter("accountname" + i) != null) {
                        accountName = request.getParameter("accountname" + i).replace("amp;", "").trim();
                    }
                    if (c1.getAccountName() != null) {
                        if (!c1.getAccountName().equals(accountName)) {
                            if (accountName != null && !accountName.equals("")) {
                                List list = customerDAO.findForAgenttNo(null, accountName);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (accountName != null && !accountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, accountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                }
                quotesForm = quotationBC.getCurrency(fclRates, quotesForm, messageResources);
                fclRates = quotationBC.serMarkUpValuesforQuotesForm(fclRates, quotesForm, messageResources);
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                List otherChargesList = new ArrayList();
                List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                List perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                for (int i = 0; i < otherChargesList.size(); i++) {
                    Charges c1 = (Charges) otherChargesList.get(i);
                    if (c1.getAccountNo() != null) {
                        if (!c1.getAccountNo().equals(request.getParameter("otheraccountno" + i))) {
                            if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                                List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (request.getParameter("otheraccountno" + i) != null && !request.getParameter("otheraccountno" + i).equals("")) {
                            List list = customerDAO.findForAgenttNo(request.getParameter("otheraccountno" + i), null);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                    String otherAccountName = "";
                    if (request.getParameter("otheraccountname" + i) != null) {
                        otherAccountName = request.getParameter("otheraccountname" + i).replace("amp;", "").trim();
                    }
                    if (c1.getAccountName() != null) {
                        if (!c1.getAccountName().equals(otherAccountName)) {
                            if (otherAccountName != null && !otherAccountName.equals("")) {
                                List list = customerDAO.findForAgenttNo(null, otherAccountName);
                                if (list != null && list.size() > 0) {
                                    CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                    c1.setAccountNo(customer1.getAccountNo());
                                    c1.setAccountName(customer1.getAccountName());
                                }
                            }
                        }
                    } else {
                        if (otherAccountName != null && !otherAccountName.equals("")) {
                            List list = customerDAO.findForAgenttNo(null, otherAccountName);
                            if (list != null && list.size() > 0) {
                                CustomerTemp customer1 = (CustomerTemp) list.get(0);
                                c1.setAccountNo(customer1.getAccountNo());
                                c1.setAccountName(customer1.getAccountName());
                            }
                        }
                    }
                }
                quotesForm = quotationBC.getOtherCurrency(otherChargesList, quotesForm, messageResources);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                quotesForm.setTotalCharges(numb.format((Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + totalCharges)));
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                if (quotation.getInsurance().equals("Y")) {
                    //quotation=quotationBC.calculateInsurance(quotation,quotesForm.getInsuranceAmount());
                    otherChargesList = quotationBC.addInsuranceToBl(otherChargesList, quotation);
                    quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceAmount())));
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                }
                if (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y")) {
                    fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
                }
                for (Iterator iter = fclRates.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getCharges(fclRates, messageResources, quotation, request);
                for (Iterator iter = otherChargesList.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getOtherCharges(otherChargesList, quotation);
                for (Iterator iter = perkglbsList.iterator(); iter.hasNext();) {
                    Charges Charges = (Charges) iter.next();
                    Charges.setNewFlag(null);
                }
                quotationBC.getOtherChargesforKG(perkglbsList, quotation);
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                perkglbsList = new ArrayList();
                otherChargesList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                /*if ((quotation.getHazmat() != null && quotation.getHazmat().equals("Y")) ||
                 (quotation.getHazmatSet() != null && quotation.getHazmatSet().size() > 0)) {
                 String msg = "HAZARDOUS CARGO";
                 request.setAttribute("msg", msg);
                 }*/
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                request.setAttribute(QuotationConstants.QUOTATIONNO, quotesForm.getQuotationNo());
                findForward = "success";
            }
            if (buttonValue.equals("addCharges")) {
                Quotation quotation = quotationBC.save(quotesForm);
                quotationDAO.save(quotation);
                if (quotation.getFileNo() != null) {
                    quotesForm.setQuotationNo(quotation.getFileNo().toString());
                }
                quotesForm.setQuoteId(quotation.getQuoteId().toString());
                totalCharges = 0.00;
                /*if(quotesForm.getLdinclude()!=null && quotesForm.getLdinclude().equals("on")){
                 totalCharges+=Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount()));
                 }*/
                if (quotesForm.getIdinclude() != null && quotesForm.getIdinclude().equals("on")) {
                    totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getAmount1()));
                }
                if (quotesForm.getInsuranceCharge() == null || quotesForm.getInsuranceCharge().equals("")) {
                    quotesForm.setInsuranceCharge("0.00");
                }
                totalCharges += Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()));
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    if (charges.getUnitType() != null && !charges.getUnitType().equals("") && !charges.getUnitType().equals("0.00")) {
                        GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                        if (genericCode != null) {
                            charges.setUnitName(genericCode.getCodedesc());
                        }
                    }
                }
                List otherChargesList = new ArrayList();
                List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());

                List perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                quotesForm = quotationBC.getCurrency(fclRates, quotesForm, messageResources);
                quotesForm = quotationBC.getQuotesForm(quotesForm);
                quotesForm = quotationBC.getOtherCurrency(otherChargesList, quotesForm, messageResources);
                quotesForm.setTotalCharges(numb.format((Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + totalCharges)));
                quotation.setTotalCharges(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())));
                if (quotation.getInsurance().equals("Y") && !quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                    //quotation=quotationBC.calculateInsurance(quotation,quotesForm.getInsuranceAmount());
                    //otherChargesList=quotationBC.addInsuranceToBl(otherChargesList, quotation);
                    quotation.setInsurancamt(Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceAmount())));
                    fclRates = quotationBC.getInsuranceCostofGoods(fclRates, quotation, messageResources);
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                }
                if (quotation.getDeductFfcomm() != null && quotation.getDeductFfcomm().equals("Y")) {
                    fclRates = quotationBC.addFFCommission(fclRates, messageResources, quotation);
                }
                quotationBC.getCharges(fclRates, messageResources, quotation, request);
                quotationBC.getOtherCharges(otherChargesList, quotation);
                quotationBC.getOtherChargesforKG(perkglbsList, quotation);
                fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    if (genericCode != null) {
                        charges.setUnitName(genericCode.getCodedesc());
                    }
                }
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                perkglbsList = new ArrayList();
                otherChargesList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                /*if ((quotation.getHazmat() != null && quotation.getHazmat().equals("Y")) ||
                 (quotation.getHazmatSet() != null && quotation.getHazmatSet().size() > 0)) {
                 String msg = "HAZARDOUS CARGO";
                 request.setAttribute("msg", msg);
                 }*/
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                request.setAttribute(QuotationConstants.QUOTATIONNO, quotesForm.getQuotationNo());
                setFileList(session, quotation);
                User userid = null;
                if (session.getAttribute("loginuser") != null) {
                    userid = (User) session.getAttribute("loginuser");
                }
//            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
//            ProcessInfo pi = new ProcessInfo();
//            String programid = "";
//            programid = (String) session.getAttribute("processinfoforquotation");
//            String recordid = quotation.getQuoteId().toString();
//            String editstatus = "startedited";
//            String deletestatus = "startdeleted";
//            int progId = 0;
//            if (programid != null && !programid.equals("")) {
//                progId = Integer.parseInt(programid);
//            }
//            UserDAO userDAO = new UserDAO();
//            ProcessInfo processinfoobj = processinfoDAO.findById(progId, recordid, deletestatus, editstatus);
//            if (processinfoobj != null && !processinfoobj.getUserid().equals(userid.getUserId()) && processinfoobj != null) {
//                String view = "3";
//                User loginuser = userDAO.findById(processinfoobj.getUserid());
//                String loginName = loginuser.getLoginName();
//                String msg = "This record is being used by ";
//                String message = msg + loginName;
//                request.setAttribute("msg", message);
//                session.setAttribute("view", view);
//            } else {
//                pi.setUserid(userid.getUserId());
//                if (programid != null && !programid.equals("")) {
//                    pi.setProgramid(Integer.parseInt(programid));
//                }
//                java.util.Date currdate = new java.util.Date();
//                pi.setProcessinfodate(currdate);
//                pi.setEditstatus(editstatus);
//                pi.setRecordid(recordid);
//                processinfoDAO.save(pi);
//                if (session.getAttribute("view") != null) {
//                    session.removeAttribute("view");
//                }
//            }
                quotation.setQuoteNo(quotation.getQuoteId().toString());
                quotation.setTotalCharges(quotation.getTotalCharges());
                ChargesDAO cDao = new ChargesDAO();
                fclRates = (List) cDao.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    if (genericCode != null) {
                        charges.setUnitName(genericCode.getCodedesc());
                    }
                }
                String num = "";
                Double myr = 0.00;
                Double nht = 0.00;
                Double pkr = 0.00;
                Double rm = 0.00;
                Double spo = 0.00;
                Double vnd = 0.00;
                Double inr = 0.00;
                List unitsList = new ArrayList();
                String currency[] = messageResources.getMessage("currency").split(",");
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges c1 = (Charges) fclRates.get(i);
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[0])) {
                        myr = myr + c1.getAmount();
                        myr = myr + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[1])) {
                        nht = nht + c1.getAmount();
                        nht = nht + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[2])) {
                        pkr = pkr + c1.getAmount();
                        pkr = pkr + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[3])) {
                        rm = rm + c1.getAmount();
                        rm = rm + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[4])) {
                        spo = spo + c1.getAmount();
                        spo = spo + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[5])) {
                        vnd = vnd + c1.getAmount();
                        vnd = vnd + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[6])) {
                        inr = inr + c1.getAmount();
                        inr = inr + c1.getMarkUp();
                    }
                    if (c1.getCurrecny() != null && c1.getNumber() != null) {
                        num = c1.getUnitType();
                        unitsList.add(num);
                    }
                }
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                otherChargesList = new ArrayList();
                otherChargesLIst = (List) cDao.getChargesforQuotation8(quotation.getQuoteId());
                perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg"))
                            || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                for (int i = 0; i < otherChargesList.size(); i++) {
                    Charges c1 = (Charges) otherChargesList.get(i);
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[0])) {
                        myr = myr + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[1])) {
                        nht = nht + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[2])) {
                        pkr = pkr + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[3])) {
                        rm = rm + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[4])) {
                        spo = spo + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[5])) {
                        vnd = vnd + c1.getRetail();
                    }
                    if (c1.getCurrecny() != null && c1.getCurrecny().trim().equals(currency[6])) {
                        inr = inr + c1.getRetail();
                    }
                }
                quotation.setMyr(myr);
                quotation.setNht(nht);
                quotation.setPkr(pkr);
                quotation.setRm(rm);
                quotation.setSpo(spo);
                quotation.setVnd(vnd);
                quotation.setInr(inr);
//            if(CommonFunctions.isNotNullOrNotEmpty(quotationBC.cheackChargeCode(
//            		"chgCode", QuotationConstants.DRAY,"qouteId",quotation.getQuoteId()))){
//            	quotation.setLocaldryage("Y");
//            }else{
//            	quotation.setLocaldryage("N");
//            }
                if (CommonFunctions.isNotNullOrNotEmpty(quotationBC.cheackChargeCode("chgCode",
                        QuotationConstants.INTMDL, "qouteId", quotation.getQuoteId()))) {
                    quotation.setIntermodel("Y");
                } else {
                    quotation.setIntermodel("N");
                }

                request.setAttribute(QuotationConstants.QUOTEVALUES, quotation);
                consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                request.setAttribute("specialEquipmentUnitList", new DBUtil().getSpecialEquipmentUnitList(quotation.getSelectedUnits()));
                if (session.getAttribute(QuotationConstants.QUOTATIONOLD) != null) {
                    session.removeAttribute(QuotationConstants.QUOTATIONOLD);
                    session.setAttribute(QuotationConstants.QUOTATIONOLD, quotation);
                } else {
                    session.setAttribute(QuotationConstants.QUOTATIONOLD, quotation);
                }
                findForward = "edit";
            } else if (buttonValue != null && buttonValue.equals("deleteCharge")) {
                QuotationReportBC quotationReportBC = new QuotationReportBC();
                // deleting charge code:-----
                quotationBC.deleteCharge(quotesForm.getNumbIdx());
                Quotation quotation = quotationReportBC.getQuotation(quotesForm.getQuoteId());
                List fclRates = (List) chargesDAO.getChargesforQuotation1(quotation.getQuoteId());
                for (int i = 0; i < fclRates.size(); i++) {
                    Charges charges = (Charges) fclRates.get(i);
                    GenericCode genericCode = genericCodeDAO.findById(Integer.parseInt(charges.getUnitType()));
                    charges.setUnitName(genericCode.getCodedesc());
                }
                quotesForm = quotationBC.getCurrency(fclRates, quotesForm, messageResources);
                fclRates = quotationBC.serMarkUpValuesforQuotesForm(fclRates, quotesForm, messageResources);
                List consolidatorList = quotationBC.consolidateRates(fclRates, messageResources,importFlag);
                request.setAttribute("consolidatorList", consolidatorList);
                request.setAttribute(QuotationConstants.FCLRATES, fclRates);
                List otherChargesList = new ArrayList();
                List otherChargesLIst = (List) chargesDAO.getChargesforQuotation8(quotation.getQuoteId());
                List perkglbsList = new ArrayList();
                for (int i = 0; i < otherChargesLIst.size(); i++) {
                    Charges c1 = (Charges) otherChargesLIst.get(i);
                    if (c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || c1.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                        perkglbsList.add(c1);
                    } else {
                        otherChargesList.add(c1);
                    }
                }
                quotesForm = quotationBC.getOtherCurrency(otherChargesList, quotesForm, messageResources);
                request.setAttribute(QuotationConstants.PERKGLBSLIST, perkglbsList);
                quotesForm.setTotalCharges(numb.format((Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + totalCharges)));
                request.setAttribute(QuotationConstants.OTHERCHARGESLIST, otherChargesList);
                if (quotation.getInsurance().equals("Y") && !quotation.getCostofgoods().equals("") && !quotation.getCostofgoods().equals(0.00)) {
                    quotation = quotationBC.calculateInsurance(quotation, quotesForm.getInsuranceAmount());
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) - Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                    quotesForm.setInsuranceCharge(numb.format(quotation.getInsuranceCharge()));
                    quotesForm.setTotalCharges(numb.format(Double.parseDouble(dbUtil.removeComma(quotesForm.getTotalCharges())) + Double.parseDouble(dbUtil.removeComma(quotesForm.getInsuranceCharge()))));
                }
                /* if ((quotation.getHazmat() != null && quotation.getHazmat().equals("Y")) ||
                 (quotation.getHazmatSet() != null && quotation.getHazmatSet().size() > 0)) {
                 String msg = "HAZARDOUS CARGO";
                 request.setAttribute("msg", msg);
                 }*/
                //This is for setting hazmat message in quotation if it is hazardous
                if (null != buttonValue && !buttonValue.equals("")) {
                    Quotation quoteDup = quotationBC.save(quotesForm);
                    /*	 HazmatMaterialDAO hazmatMaterialDAO=new HazmatMaterialDAO();
                     if(null != quoteDup.getQuoteId() && !quoteDup.getQuoteId().equals("")){
                     List hazmatList = hazmatMaterialDAO.getQuoteHamMat(quoteDup.getQuoteId());
                     if(null != hazmatList && hazmatList.size() > 0){
                     String msg = "HAZARDOUS CARGO";
                     request.setAttribute("msg", msg);
                     }
                     }*/
                    //In quotation right now if the hazmat radio button is clicked to yes then we will consider it as hazardous
                    //so no need to check in the database for hazmat material's
                    if (null != quoteDup.getHazmat() && quoteDup.getHazmat().equalsIgnoreCase("Y")) {
                        String msg = "HAZARDOUS CARGO";
                        request.setAttribute("msg", msg);
                    }
                }
                request.setAttribute(QuotationConstants.QUOTATIONFORM, quotesForm);
                request.setAttribute(QuotationConstants.QUOTATIONNO, quotesForm.getQuotationNo());
                findForward = "success";
            }
        }
        return mapping.findForward(findForward);
    }

    public void setFileList(HttpSession session, Quotation q1) {
        if (session.getAttribute("SearchListByfileNumber") != null && q1.getFileNo() != null) {
            List getFileList = (List) session.getAttribute("SearchListByfileNumber");
            FileNumberForQuotaionBLBooking fileNoObject = new FileNumberForQuotaionBLBooking(q1, null, null);
            fileNoObject.setDisplayColor("RED");
            fileNoObject.setRatesNonRates(q1.getRatesNonRates());
            getFileList.add(0, fileNoObject);
            if (getFileList.size() > 100) {
                getFileList = getFileList.subList(0, 100);
            }
            session.setAttribute(QuotationConstants.FILESEARCHLIST, getFileList);
        }
    }

    public void saveDefaultCharges(String clientNumber, Integer quoteId, String costType) throws Exception {
        if (CommonUtils.isNotEmpty(clientNumber)) {
            List l = new CustomerDefaultChargesDAO().findByProperty("acctNo", clientNumber);
            if (!l.isEmpty()) {
                for (Object object : l) {
                    CustomerDefaultCharges customerDefaultCharges = (CustomerDefaultCharges) object;
                    if (costType.equalsIgnoreCase(customerDefaultCharges.getCostType().getCodedesc())) {
                        Charges charges = new Charges();
                        charges.setCurrecny(customerDefaultCharges.getCurrency());
                        charges.setEfectiveDate(new Date());
                        charges.setAccountName(customerDefaultCharges.getVendorName());
                        charges.setAccountNo(customerDefaultCharges.getVendorNumber());
                        charges.setChgCode(customerDefaultCharges.getChargeCodeDesc().getCodedesc());
                        charges.setChargeCodeDesc(customerDefaultCharges.getChargeCodeDesc().getCode());
                        charges.setUnitType(null != customerDefaultCharges.getUnitType() ? "" + customerDefaultCharges.getUnitType().getId() : null);
                        charges.setAmount(customerDefaultCharges.getCost());
                        charges.setMarkUp(customerDefaultCharges.getSell());
                        charges.setAdjestment(0d);
                        charges.setCostType(customerDefaultCharges.getCostType().getCodedesc());
                        charges.setChargeFlag("M");
                        charges.setNewFlag("new");
                        charges.setComment(customerDefaultCharges.getComment());
                        charges.setDefaultCarrier(customerDefaultCharges.getDefaultCarrier());
                        charges.setOutOfGauge("N");
                        charges.setStandardCharge("Y");
                        charges.setNumber("1");
                        charges.setQouteId(quoteId);
                        new ChargesDAO().save(charges);
                    }
                }
            }
        }
    }
}
