/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cvst.logisoft.util.DBUtil;
import com.gp.cvst.logisoft.domain.Batch;
import com.gp.cvst.logisoft.domain.JournalEntry;
import com.gp.cvst.logisoft.domain.LineItem;
import com.gp.cvst.logisoft.struts.form.AddLineItemForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-22-2008
 * 
 * XDoclet definition:
 * @struts.action path="/addLineItem" name="addLineItemForm" input="/jsps/Accounting/AddLineItem.jsp" scope="request" validate="true"
 */
public class AddLineItemAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {
        AddLineItemForm addLineItemForm = (AddLineItemForm) form;// TODO Auto-generated method stub
        String buttonValue = addLineItemForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();
        LineItem line = new LineItem();
        String itemNo = addLineItemForm.getItemNo();
        String reference = addLineItemForm.getReference();
        String refDesc = addLineItemForm.getDescription();
        String account = addLineItemForm.getAccount();
        String acctDesc = addLineItemForm.getAccountDesc();
        String debits = addLineItemForm.getDebits();
        String credits = addLineItemForm.getCredits();
        String currency = addLineItemForm.getCurrency();
        String[] dispitemNo = addLineItemForm.getDisplineItemId();
        String[] dispAccount = addLineItemForm.getDispaccount();
        String[] dispaccountDesc = addLineItemForm.getDispaccountDesc();
        String[] dispcredit = addLineItemForm.getDispcredit();
        String[] dispdebit = addLineItemForm.getDispdebit();
        String[] dispRef = addLineItemForm.getDispreference();
        String[] dispRefDesc = addLineItemForm.getDispreferenceDesc();
        String[] dispCurrency = addLineItemForm.getDispcurrency();

        List lineItemList = new ArrayList();
        ;
        List batchList = new ArrayList();
        Batch batch = new Batch();
        Batch b1 = new Batch();
        DBUtil dbUtil = new DBUtil();
        String journalId = "";
        Double debit = 0.0;
        Double credit = 0.0;
        if (session.getAttribute("journalId") != null) {
            journalId = (String) session.getAttribute("journalId");
        }
        List journalEntryList = new ArrayList();

        if (session.getAttribute("lineItemList") != null) {

            lineItemList = (List) session.getAttribute("lineItemList");
            line = new LineItem();
            for (int i = 0; i < lineItemList.size(); i++) {
                line = (LineItem) lineItemList.get(i);
                if (line.getLineItemId() != null) {


                    if (line.getLineItemId().equals(dispitemNo[i])) {
                        line.setLineItemId(dispitemNo[i]);
                        line.setAccount(dispAccount[i]);
                        line.setAccountDesc(dispaccountDesc[i]);

                        if (dispcredit[i] != null && !dispcredit[i].equals("")) {
                            line.setCredit(new Double(dispcredit[i]));
                            credit = credit + line.getCredit();
                        } else {
                            line.setCredit(new Double(0.0));
                            credit = credit + line.getCredit();
                        }
                        if (dispdebit[i] != null && !dispdebit[i].equals("")) {
                            line.setDebit(new Double(dispdebit[i]));
                            debit = debit + line.getDebit();
                        } else {
                            line.setDebit(new Double(0.0));
                            debit = debit + line.getDebit();
                        }
                        line.setReference(dispRef[i]);
                        line.setReferenceDesc(dispRefDesc[i]);
                        line.setCurrency(dispCurrency[i]);
                    }

                }

            }
            session.setAttribute("lineItemList", lineItemList);

        }


        if (session.getAttribute("batchList") != null) {
            batchList = (List) session.getAttribute("batchList");
        }
        if (session.getAttribute("batch") != null) {
            b1 = (Batch) session.getAttribute("batch");
        }
        if (session.getAttribute("line") != null) {
            line = (LineItem) session.getAttribute("line");
        } else {
            line = new LineItem();
        }
        line.setLineItemId(itemNo);
        line.setReference(reference);
        line.setReferenceDesc(refDesc);
        //AccountDetailsDAO accountDetailsDAO=new AccountDetailsDAO();
        //AccountDetails accountDetail=accountDetailsDAO.findById(account);
        line.setAccount(account);
        line.setAccountDesc(acctDesc);

        if (debits != null && !debits.equals("")) {
            line.setDebit(Double.parseDouble(debits));
        } else {
            line.setDebit(0.0);
        }
        if (credits != null && !credits.equals("")) {
            line.setCredit(Double.parseDouble(credits));
        } else {
            line.setCredit(0.0);
        }

        if (currency != null) {
            line.setCurrency(currency);
        }
        session.setAttribute("line", line);
        if (buttonValue.equals("cancel")) {
            if (session.getAttribute("search") != null) {
                session.removeAttribute("search");
            }
            if (session.getAttribute("search1") != null) {
                session.removeAttribute("search1");
            }
            Set lineSet = new HashSet<LineItem>();
            for (int i = 0; i < lineItemList.size(); i++) {
                LineItem lItem = (LineItem) lineItemList.get(i);
                if (lItem.getLineItemId() != null) {
                    if (dbUtil.lineitemidid(lItem.getLineItemId()).equals(journalId)) {
                        lineSet.add(lItem);
                    }
                }
            }
            for (int i = 0; i < batchList.size(); i++) {
                batch = new Batch();
                batch = (Batch) batchList.get(i);
                if (batch.getBatchId().equals(b1.getBatchId())) {
                    if (b1.getJournalEntrySet() != null) {
                        Iterator iter = b1.getJournalEntrySet().iterator();
                        while (iter.hasNext()) {
                            JournalEntry j1 = (JournalEntry) iter.next();
                            if (j1.getJournalEntryId().equals(journalId)) {
                                j1.setCredit(credit);
                                j1.setDebit(debit);
                                j1.setLineItemSet(lineSet);
                            }
                        }
                    }
                    session.setAttribute("batch", b1);
                }
            }
            session.setAttribute("cancelline", "cancelline");

        } else if (buttonValue.equals("addline")) {

            if (session.getAttribute("batchList") != null) {
                batchList = (List) session.getAttribute("batchList");
            }
            for (int i = 0; i < batchList.size(); i++) {
                batch = new Batch();
                batch = (Batch) batchList.get(i);
                if (batch.getBatchId().equals(b1.getBatchId())) {
                    batch.setBatchId(b1.getBatchId());
                    batch.setBatchDesc(b1.getBatchDesc());
                    batch.setTotalDebit(b1.getTotalDebit());
                    batch.setTotalCredit(b1.getTotalCredit());
                    batch.setStatus(b1.getStatus());
                    session.setAttribute("batch", batch);
                }
            }

            if (session.getAttribute("lineItemList") != null) {
                lineItemList = (List) session.getAttribute("lineItemList");

            }
            if (session.getAttribute("line") != null) {
                line = (LineItem) session.getAttribute("line");
            } else {
                line = new LineItem();
            }
            line.setLineItemId(itemNo);
            line.setReference(reference);
            line.setReferenceDesc(refDesc);
            //AccountDetailsDAO accountDetailsDAO=new AccountDetailsDAO();
            //AccountDetails accountDetail=accountDetailsDAO.findById(account);
            line.setAccount(account);
            line.setAccountDesc(acctDesc);

            if (debits != null && !debits.equals("")) {
                line.setDebit(Double.parseDouble(debits));
            }
            if (credits != null && !credits.equals("")) {
                line.setCredit(Double.parseDouble(credits));
            }

            if (currency != null) {
                line.setCurrency(currency);
            }
            Date date = new Date(System.currentTimeMillis());
            line.setDate(date);
            lineItemList.add(line);
            Set lineSet = new HashSet<LineItem>();
            for (int i = 0; i < lineItemList.size(); i++) {
                LineItem lItem = (LineItem) lineItemList.get(i);

                if (lItem.getLineItemId() != null) {
                    if (lItem.getLineItemId() != null) {
                        if (dbUtil.lineitemidid(lItem.getLineItemId()).equals(journalId)) {
                            lineSet.add(lItem);
                        }
                    }
                }



            }


            if (batchList != null) {
                for (int i = 0; i < batchList.size(); i++) {
                    Batch b2 = (Batch) batchList.get(i);
                    if (b1.getBatchId().equals(b2.getBatchId())) {
                        if (b1.getJournalEntrySet() != null) {
                            Iterator iter = b1.getJournalEntrySet().iterator();
                            while (iter.hasNext()) {
                                JournalEntry j1 = (JournalEntry) iter.next();
                                if (j1.getJournalEntryId().equals(journalId)) {
                                    j1.setLineItemSet(lineSet);
                                }
                            }
                        }
                    }
                }
            }

            //session.setAttribute("journalEntryList", journalEntryList);
            session.setAttribute("lineItemList", lineItemList);


            Double credit1 = 0.0;
            Double debit1 = 0.0;
            if (lineItemList != null && lineItemList.size() > 0) {
                for (int i = 0; i < lineItemList.size(); i++) {
                    LineItem l1 = (LineItem) lineItemList.get(i);

                    if (l1.getLineItemId() != null) {
                        String je = dbUtil.lineitemidid(l1.getLineItemId());
                        if (je.equals(journalId)) {
                            if (l1.getCredit() != null) {
                                credit1 = credit1 + l1.getCredit();
                            }
                            if (l1.getDebit() != null) {
                                debit1 = debit1 + l1.getDebit();
                            }
                        }
                    }
                }
            }

            if (session.getAttribute("journalEntryList") != null) {
                journalEntryList = (List) session.getAttribute("journalEntryList");
            }

            if (journalEntryList.size() > 0) {
                for (int i = 0; i < journalEntryList.size(); i++) {
                    JournalEntry j1 = (JournalEntry) journalEntryList.get(i);
                    if (j1.getJournalEntryId().equals(journalId)) {
                        j1.setCredit(credit);
                        j1.setDebit(debit);
                        session.setAttribute("journalEntry", j1);
                    }
                }
            }


            if (session.getAttribute("line") != null) {
                session.removeAttribute("line");
            }
            List litemList = new ArrayList();
            if (session.getAttribute("lineItemList") != null) {
                lineItemList = (List) session.getAttribute("lineItemList");
                for (int i = 0; i < lineItemList.size(); i++) {
                    LineItem l2 = (LineItem) lineItemList.get(i);
                    if (l2.getLineItemId() != null) {
                        String jId1 = String.valueOf(dbUtil.lineitemidid(l2.getLineItemId()));
                        if (jId1.equals(journalId)) {
                            litemList.add(l2);
                        }
                    }
                }
            }
            //int l1=litemList.size();

            String lineItemId = "";
            for (int i = 0; i < 10; i++) {
                if (litemList.size() == 0) {
                    lineItemId = journalId + "-" + "001";
                    line = new LineItem();
                    line.setLineItemId(lineItemId);
                    line.setCurrency("USD");

                } else if (litemList != null && litemList.size() > 0) {
                    LineItem l4 = (LineItem) litemList.get(litemList.size() - 1);
                    lineItemId = dbUtil.lineitemidid1(l4.getLineItemId());
                    int l1 = Integer.parseInt(lineItemId);
                    l1 = l1 + 1;

                    if (l1 >= 0 && l1 < 10) {
                        lineItemId = journalId + "-" + "00" + l1;
                    } else if (l1 >= 10 && l1 < 100) {
                        lineItemId = journalId + "-" + "0" + l1;
                    } else if (l1 >= 100 && l1 < 1000) {
                        lineItemId = journalId + "-" + l1;
                    }
                }
                line = new LineItem();
                line.setLineItemId(lineItemId);
                line.setCurrency("USD");
                litemList.add(line);
            }

            session.setAttribute("lineItemList", litemList);

            if (session.getAttribute("search") != null) {
                session.removeAttribute("search");
            }
            if (session.getAttribute("search1") != null) {
                session.removeAttribute("search1");
            }
        }


        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward("lineItem");
    }
}