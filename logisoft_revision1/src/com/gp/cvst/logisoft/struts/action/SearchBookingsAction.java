 /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;
import com.gp.cong.logisoft.bc.fcl.BookingConstants;
import com.gp.cong.logisoft.bc.fcl.BookingFclBC;
import com.gp.cong.logisoft.bc.fcl.FclBlConstants;
import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.bc.fcl.QuotationConstants;
import com.gp.cong.logisoft.bc.ratemanagement.PortsBC;
import com.gp.cong.logisoft.bc.scheduler.ProcessInfoBC;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GeneralInformationDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.TransactionBean;
import com.gp.cvst.logisoft.domain.BookingFcl;
import com.gp.cvst.logisoft.domain.BookingfclUnits;
import com.gp.cvst.logisoft.domain.CustAddress;
import com.gp.cvst.logisoft.hibernate.dao.BookingFclDAO;
import com.gp.cvst.logisoft.hibernate.dao.BookingfclUnitsDAO;
import com.gp.cvst.logisoft.hibernate.dao.CustAddressDAO;
import com.gp.cvst.logisoft.struts.form.NewBookingsForm;
import com.gp.cvst.logisoft.struts.form.searchBookingsForm;

public class SearchBookingsAction extends Action {
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        searchBookingsForm SearchBookingsForm = (searchBookingsForm) form;// TODO Auto-generated method stub

        HttpSession session = request.getSession(true);
        String forwardName = "";
        String buttonValue = SearchBookingsForm.getButtonValue();
        String bookingNo = SearchBookingsForm.getBookingno();
        String portofOrigin = SearchBookingsForm.getPlor();
        String Destination = SearchBookingsForm.getPod();
        String portofDischarge = SearchBookingsForm.getPlod();
        String OriginTerminal = SearchBookingsForm.getPol();
        String bookingStartDate = SearchBookingsForm.getBookingStartdate();
        String bookingEndDate = SearchBookingsForm.getBookinEnddate();
        String sslBooking = SearchBookingsForm.getSslBooking();
        MessageResources messageResources = getResources(request);
        BookingFclBC bookingFclBC = new BookingFclBC();
        BookingFclDAO BookingfclDAO = new BookingFclDAO();
        BookingFcl bookingFCL = new BookingFcl();
        BookingfclUnitsDAO BookingfclUnits = new BookingfclUnitsDAO();
        String userName = SearchBookingsForm.getCarrierName();
        List bookingFclList = new ArrayList();
        BookingfclUnitsDAO bookingfclUnitsDAO = new BookingfclUnitsDAO();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");

        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm");
        request.setAttribute("enableIms", LoadLogisoftProperties.getProperty("ims.enable"));
        if (request.getParameter("newbooking") != null) {
            BookingFcl bookingFcl = new BookingFcl();
            bookingFcl.setForward(FclBlConstants.DEFAULT_FREIGHT_FORWARDER_NAME);
            bookingFcl.setForwNo(FclBlConstants.DEFAULT_FREIGHT_FORWARDER_NO);
            bookingFcl.setImportFlag(FclBlConstants.DEFAULT_IMPORT_FLAG);
            TransactionBean transactionBean = new TransactionBean();
            transactionBean.setBillToCode("S");
            transactionBean.setPrepaidToCollect("P");
            transactionBean.setRatesNonRates("R");
            if(transactionBean.getDirectConsignmntCheck() == null) {
            transactionBean.setDirectConsignmntCheck("off");
            }
            request.setAttribute(BookingConstants.TRANSACTIONBEAN, transactionBean);
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFcl);
            request.setAttribute("shippingCodeInttra", false);
            request.setAttribute("cancelEdi", false);
            request.setAttribute("createOrChange", "");
            return mapping.findForward("viewBookings");

        }
        if (request.getParameter("paramid") != null) {
            String paramid = request.getParameter("paramid");
            bookingFCL = BookingfclDAO.findById(Integer.parseInt(paramid));
            //-----TO get & display bookingCompletedDate--------
            if (null != bookingFCL && bookingFCL.getBookingCompletedDate() != null) {
                bookingFCL.setBookingCompletedDate(bookingFCL.getBookingCompletedDate());
            }
            TransactionBean transactionBean = new TransactionBean();
            transactionBean.setBillToCode(bookingFCL.getBilltoCode());
            transactionBean.setBookingComplete(bookingFCL.getBookingComplete());
            transactionBean.setPrepaidToCollect(bookingFCL.getPrepaidCollect());
            transactionBean.setSpecialequipment(bookingFCL.getSpecialequipment());
            transactionBean.setHazmat(bookingFCL.getHazmat());
            transactionBean.setOutofgate(bookingFCL.getOutofgage());
            transactionBean.setLocaldryage(bookingFCL.getLocaldryage());
            transactionBean.setIntermodel(bookingFCL.getIntermodel());
            transactionBean.setInland(bookingFCL.getInland());
            transactionBean.setDocCharge(bookingFCL.getDocCharge());
            transactionBean.setPierPass(bookingFCL.getPierPass());
            transactionBean.setChassisCharge(bookingFCL.getChassisCharge());
            transactionBean.setInsurance(bookingFCL.getInsurance());
            transactionBean.setSoc(bookingFCL.getSoc());
            transactionBean.setShippercheck(bookingFCL.getShippercheck());
            transactionBean.setForwardercheck(bookingFCL.getForwardercheck());
            transactionBean.setConsigneecheck(bookingFCL.getConsigneecheck());
            transactionBean.setAlternateAgent(bookingFCL.getAlternateAgent());
            transactionBean.setDirectConsignmntCheck(bookingFCL.getDirectConsignmntCheck());
            transactionBean.setPrintGoodsDescription(bookingFCL.getPrintGoodsDescription());
            transactionBean.setRoutedAgentCheck(bookingFCL.getRoutedAgentCheck());
            transactionBean.setCustomertoprovideSED(bookingFCL.getCustomertoprovideSED());
            transactionBean.setDeductFFcomm(bookingFCL.getDeductFFcomm());
            transactionBean.setBreakBulk(bookingFCL.getBreakBulk());
            transactionBean.setSpotRate(bookingFCL.getSpotRate());
            transactionBean.setRatesNonRates(bookingFCL.getRatesNonRates());
            bookingFCL.setBookingNumber(bookingFCL.getBookingId().toString());
            if(BookingfclDAO.canWeCancelEdi(bookingFCL.getFileNo())){
            request.setAttribute("cancelEdi", true);
            }else{
            request.setAttribute("cancelEdi", false);
            }
            if (bookingFCL.getImportFlag()!=null && !bookingFCL.getImportFlag().equals("I")  && bookingFCL.getFileNo() != null) {
                request.setAttribute("createOrChange", BookingfclDAO.createOrChangeXml(bookingFCL.getFileNo()));
            } else {
                request.setAttribute("createOrChange", "");
            }
            if (bookingFCL.getSSLine() != null && !bookingFCL.getSSLine().trim().equals("")) {
                String accountNumber = bookingFCL.getSSLine();
                List carrier = new CustAddressDAO().findBy1(null, accountNumber, null, null);
                if (carrier != null && carrier.size() > 0) {
                    CustAddress c1 = (CustAddress) carrier.get(0);
                    GeneralInformation generalInformation
                            = new GeneralInformationDAO().getGeneralInformationByAccountNumber(c1.getAcctNo());
                    if (bookingFCL.getImportFlag()!=null && !bookingFCL.getImportFlag().equals("I") && generalInformation != null && generalInformation.getShippingCode() != null && generalInformation.getShippingCode().equalsIgnoreCase("I")) {
                        request.setAttribute("shippingCodeInttra", true);
                    } else {
                        request.setAttribute("shippingCodeInttra", false);
                    }
                }
            }
            if (bookingFCL.getDocumentsReceived() != null) {
                transactionBean.setDocumentsReceived(bookingFCL.getDocumentsReceived());
            } else {
                transactionBean.setDocumentsReceived("N");
            }
            //--for Check boxes that disables dojo-----
            if (null != bookingFCL.getShipperTpCheck()) {
                transactionBean.setShipperTpCheck(bookingFCL.getShipperTpCheck());
            }
            if (null != bookingFCL.getTruckerTpCheck()) {
                transactionBean.setTruckerTpCheck(bookingFCL.getTruckerTpCheck());
            }
            if (null != bookingFCL.getConsigneeTpCheck()) {
                transactionBean.setConsigneeTpCheck(bookingFCL.getConsigneeTpCheck());
            }
            if (null != bookingFCL.getContactNameCheck()) {
                transactionBean.setContactNameCheck(bookingFCL.getContactNameCheck());
            }
            request.setAttribute(BookingConstants.TRANSACTIONBEAN, transactionBean);
            String originCode = null;
            String propRemarks = null;
            if (bookingFCL.getOriginTerminal().lastIndexOf("(") != -1) {
                originCode = bookingFCL.getOriginTerminal().substring(bookingFCL.getOriginTerminal().lastIndexOf("(") + 1,
                        bookingFCL.getOriginTerminal().lastIndexOf(")"));
            }
            if (bookingFCL.getZip() != null && !bookingFCL.getZip().trim().equals("")) {
                propRemarks = new UnLocationDAO().getpropertyRemarks(originCode);
            }
            if (propRemarks != null) {
                request.setAttribute("remarks", propRemarks);
            }
            BookingInfo bookingInfo = new BookingInfo(bookingFclBC.getBookingInfo(Integer.parseInt(paramid)));
            if (("R".equalsIgnoreCase(bookingFCL.getRatesNonRates()))
                    || ("N".equals(bookingFCL.getRatesNonRates()) && "N".equals(bookingFCL.getBreakBulk()))) {
                bookingFclList = BookingfclUnits.getbookingfcl(paramid);
                if (bookingFclList.isEmpty()) {
                    bookingFclList = BookingfclUnits.getbookingfcl2(paramid);
                    List tempList = new ArrayList();
                    for (Object o : bookingFclList) {
                        BookingfclUnits bookingfclUnits = (BookingfclUnits) o;
                        if (!bookingfclUnits.getCostType().equalsIgnoreCase("PER BL CHARGES")) {
                            tempList.add(bookingfclUnits);
                        }
                    }
                    bookingFclList.clear();
                    bookingFclList.addAll(tempList);
                }
            } else {
                bookingFclList = BookingfclUnits.getbookingfcl2(paramid);
            }
            String bookignId = bookingFCL.getBookingId().toString();
            List otherChargesList = (List) bookingfclUnitsDAO.getbookingfcl1(bookignId);

            List otherChargeList = new ArrayList();
            List perkgList = new ArrayList();
            String per1000kg = messageResources.getMessage("per1000kg");
            String per2000lbs = messageResources.getMessage("per2000lbs");
            String perbl = messageResources.getMessage("perbl");
            for (Object o : otherChargesList) {
                BookingfclUnits book = (BookingfclUnits) o;
                String costType = book.getCostType().trim();
                if (costType.equalsIgnoreCase(per1000kg) || costType.equalsIgnoreCase(per2000lbs)) {
                    perkgList.add(book);
                } else if (costType.equalsIgnoreCase(perbl)) {
                    otherChargeList.add(book);
                }
            }
            bookingFCL = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargeList, bookingFCL);
           boolean importFlag = "I".equalsIgnoreCase(bookingFCL.getImportFlag());
            if (CommonFunctions.isNotNull(bookingFCL.getAmount()) && CommonFunctions.isNotNull(bookingFCL.getTotalCharges())) {
                bookingFCL.setTotalCharges(bookingFCL.getTotalCharges() + bookingFCL.getAmount());
            }
            if (CommonFunctions.isNotNull(bookingFCL.getAmount1()) && CommonFunctions.isNotNull(bookingFCL.getTotalCharges())) {
                bookingFCL.setTotalCharges(bookingFCL.getTotalCharges() + bookingFCL.getAmount1());
            }

            if (CommonFunctions.isNotNull(bookingFCL.getInsurancamt()) && CommonFunctions.isNotNull(bookingFCL.getTotalCharges())) {
                bookingFCL.setTotalCharges(bookingFCL.getTotalCharges() + bookingFCL.getInsurancamt());
            }
            if (("R".equalsIgnoreCase(bookingFCL.getRatesNonRates())) || ("N".equals(bookingFCL.getRatesNonRates())
                    && "N".equals(bookingFCL.getBreakBulk()))) {
                bookingFCL = bookingFclBC.saveCurrenciesIntoNewBookingFcl(bookingFclList, bookingFCL);
                if ("N".equalsIgnoreCase(bookingFCL.getRatesNonRates())) {
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderNonRatedList(bookingFclList));
                    request.setAttribute("consolidaorList", bookingFclBC.orderNonRatedList(bookingFclList));
                } else {
                    List consolidaorList = bookingFclBC.consolidateRates(bookingFclList, messageResources,importFlag);
                    request.setAttribute("consolidaorList", consolidaorList);
                    request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(bookingFclList));
                }
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargeList);
                request.setAttribute(BookingConstants.PERKGLBSLIST, perkgList);
                request.setAttribute("specialEquipmentUnitList", new BookingfclUnitsDAO().getGroupByUnitType("" + bookingFCL.getBookingId()));
            } else {
                bookingFCL = bookingFclBC.saveCurrenciesIntoNewBookingFcl(bookingFclList, bookingFCL);
                otherChargesList = bookingfclUnitsDAO.getbookingfcl1(bookingFCL.getBookingNumber());
                request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargesList);
                request.setAttribute("specialEquipmentUnitList", new BookingfclUnitsDAO().getGroupByUnitType("" + bookingFCL.getBookingId()));
            }
            //--TO DISPLAY "HAZARDOUS CARGO" MESSAGE----
            //TO Display Hazardous inside booking ,check whether hazmat radio button is checked inside booking
            if (bookingFCL.getHazmat() != null && bookingFCL.getHazmat().equals("Y")) {
                String msg = "HAZARDOUS CARGO";
                request.setAttribute("msg", msg);
            }

            //---to get quoteBy and Blby  and on dates------
            bookingFCL.setQuoteBy(bookingInfo.getQuoteBy());
            bookingFCL.setQuoteDate(bookingInfo.getQuoteDate());

            if (bookingInfo.getBlBy() != null) {
                bookingFCL.setBlBy(bookingInfo.getBlBy());
                bookingFCL.setBlDate(bookingInfo.getBolDate());
                bookingFCL.setBlFlag("on");
            }

            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFCL);
            request.setAttribute("selectedTab", null);
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }

            ProcessInfoBC processInfoBC = new ProcessInfoBC();
            QuotationBC quotationBC = new QuotationBC();
            if (CommonFunctions.isNotNull(bookingFCL.getFileNo() != null)) {
                User user1 = null;
                String returnResult = "";
                Integer userId = 0;
                if (session.getAttribute("loginuser") != null) {
                    user1 = (User) session.getAttribute("loginuser");
                    userId = user1.getUserId();
                }
                if (quotationBC.findConvertedRecords(bookingFCL.getFileNo(), false)) {
                    returnResult = processInfoBC.cheackFileNumberForLoack(bookingFCL.getFileNo().toString(),
                            userId.toString(), BookingConstants.BOOKING);
                    if (CommonFunctions.isNotNull(returnResult)) {
                        // setting request.
                        request.setAttribute(QuotationConstants.LOCK, "This Record is Used by " + returnResult);
                    }
                } else {
                    returnResult = processInfoBC.cheackFileINDB(bookingFCL.getFileNo().toString(), userId.toString()); //bookingInfo.getUsedBy();
                    if (CommonFunctions.isNotNull(returnResult) && !returnResult.equals("sameUser")) {
                        // setting request.
                        request.setAttribute(QuotationConstants.LOCK, "This Record is Used by " + returnResult);
                    }
                }

            }
            return mapping.findForward("viewBookings");
        } else if (request.getParameter("paramid1") != null) {
            String paramid = request.getParameter("paramid1");
            bookingFCL = BookingfclDAO.findById(Integer.parseInt(paramid));
            bookingFCL.setBookingNumber(bookingFCL.getBookingId().toString());
            boolean importFlag = "I".equalsIgnoreCase(bookingFCL.getImportFlag());
            TransactionBean transactionBean = new TransactionBean();
            transactionBean.setBillToCode(bookingFCL.getBilltoCode());
            transactionBean.setBookingComplete(bookingFCL.getBookingComplete());
            transactionBean.setPrepaidToCollect(bookingFCL.getPrepaidCollect());
            transactionBean.setSpecialequipment(bookingFCL.getSpecialequipment());
            transactionBean.setHazmat(bookingFCL.getHazmat());
            transactionBean.setOutofgate(bookingFCL.getOutofgage());
            transactionBean.setLocaldryage(bookingFCL.getLocaldryage());
            transactionBean.setIntermodel(bookingFCL.getIntermodel());
            transactionBean.setInland(bookingFCL.getInland());
            transactionBean.setDocCharge(bookingFCL.getDocCharge());
            transactionBean.setPierPass(bookingFCL.getPierPass());
            transactionBean.setChassisCharge(bookingFCL.getChassisCharge());
            transactionBean.setInsurance(bookingFCL.getInsurance());
            transactionBean.setSoc(bookingFCL.getSoc());
            transactionBean.setShippercheck(bookingFCL.getShippercheck());
            transactionBean.setForwardercheck(bookingFCL.getForwardercheck());
            transactionBean.setConsigneecheck(bookingFCL.getConsigneecheck());
            request.setAttribute(BookingConstants.TRANSACTIONBEAN, transactionBean);
            bookingFclList = BookingfclUnits.getbookingfcl(paramid);
            bookingFCL = bookingFclBC.saveCurrenciesIntoNewBookingFcl(bookingFclList, bookingFCL);
            List consolidaorList = bookingFclBC.consolidateRates(bookingFclList, messageResources,importFlag);
            request.setAttribute("consolidaorList", consolidaorList);
            request.setAttribute(BookingConstants.FCLRATES, bookingFclBC.orderExpandList(bookingFclList));
            request.setAttribute("specialEquipmentUnitList", new DBUtil().getSpecialEquipmentUnitList(bookingFCL.getSelectedUnits()));
            String bookignId = bookingFCL.getBookingId().toString();
            List otherChargesList = (List) bookingfclUnitsDAO.getbookingfcl1(bookignId);
            List otherChargeList = new ArrayList();
            List perkgList = new ArrayList();
            for (int i = 0; i < otherChargesList.size(); i++) {
                BookingfclUnits book = (BookingfclUnits) otherChargesList.get(i);
                if (book.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per1000kg")) || book.getCostType().trim().equalsIgnoreCase(messageResources.getMessage("per2000lbs"))) {
                    perkgList.add(book);
                } else {
                    otherChargeList.add(book);
                }
            }
            bookingFCL = bookingFclBC.saveCurrenciesofOtherChargesIntoBookignFcl(otherChargeList, bookingFCL);
            if (bookingFCL.getAmount() != null) {
                bookingFCL.setTotalCharges(bookingFCL.getTotalCharges() + bookingFCL.getAmount());
            }
            if (bookingFCL.getAmount1() != null) {
                bookingFCL.setTotalCharges(bookingFCL.getTotalCharges() + bookingFCL.getAmount1());
            }

            if (bookingFCL.getInsurancamt() != null) {
                bookingFCL.setTotalCharges(bookingFCL.getTotalCharges() + bookingFCL.getInsurancamt());
            }
            request.setAttribute(BookingConstants.BOOKINGVALUES, bookingFCL);
            request.setAttribute(BookingConstants.OTHERCHARGESLIST, otherChargeList);
            request.setAttribute(BookingConstants.PERKGLBSLIST, perkgList);
            String view = "3";
            // session.setAttribute("view", view);
            return mapping.findForward("viewBookings");

        }
        if (buttonValue.equals("addnew")) {
            NewBookingsForm newBookingForm = new NewBookingsForm();
            Date date = new Date();
            newBookingForm.setBookingDate(dateFormat.format(date));
            User user1 = null;
            if (session.getAttribute("loginuser") != null) {
                user1 = (User) session.getAttribute("loginuser");
                newBookingForm.setUserName(user1.getLoginName());
            }
            newBookingForm = bookingFclBC.getDefaultValues(newBookingForm);
            request.setAttribute(BookingConstants.BOOKINGFORM, newBookingForm);
            forwardName = "newBook";
        }
        if (buttonValue.equals("search")) {
            BookingFcl b1 = new BookingFcl();
            Date EmptyPickUpdatee = null;
            EmptyPickUpdatee = (Date) sdf.parse(bookingEndDate);
            Date bookingStartDate1 = null;
            bookingStartDate1 = (Date) sdf.parse(bookingStartDate);
            b1.setEndDate(EmptyPickUpdatee);
            b1.setBookingDate(bookingStartDate1);
            String fileNo = null;
            if (bookingNo != null && !bookingNo.equals("")) {
                fileNo = bookingNo;
            }
            b1.setBookingNumber(bookingNo);
            b1.setPortofOrgin(portofOrigin);
            b1.setDestination(Destination);
            b1.setUsername(userName);
            b1.setFileNo(fileNo);
            b1.setSSLine(sslBooking);
            request.setAttribute(BookingConstants.BOOKINGVALUES, b1);
            request.setAttribute("searchcollapse", "searchcollapse");
            List SearchList = BookingfclDAO.getSearchBookingList(bookingEndDate, bookingStartDate, fileNo, portofOrigin, Destination, OriginTerminal, portofDischarge, userName, sslBooking);
            request.setAttribute(BookingConstants.SEARCHLIST, SearchList);
            forwardName = "success";
        }
        if (buttonValue.equals("search1")) {
            forwardName = "success";
        } else if (buttonValue.equals("showall")) {
            List SearchList = BookingfclDAO.getShowallList();
            request.setAttribute(BookingConstants.SEARCHLIST, SearchList);
            forwardName = "success";
        } else if ("searchPort".equals(buttonValue)) {
            PortsBC portsBC = new PortsBC();
            request.setAttribute("regions", portsBC.getAllRegion1());
            request.setAttribute("textName", request.getParameter("textName"));
            request.setAttribute("from", request.getParameter("from"));
            forwardName = "portSearchPage";
        }
        return mapping.findForward(forwardName);
    }
}

class BookingInfo {

    private String fileNumber;
    private int quoteId;
    private int bookingId;
    private int bol;
    private int processId;
    private String quoteBy;
    private Date quoteDate;
    private String blBy;
    private Date bolDate;
    private int operationCount;
    private String docTypeCode;
    private String usedBy;

    BookingInfo(List list) {
        if (list != null && !list.isEmpty()) {
            Object quoteInfo[] = (Object[]) list.get(0);
            fileNumber = quoteInfo[0] == null ? null : quoteInfo[0].toString();
            quoteId = quoteInfo[1] == null ? -1 : (Integer) quoteInfo[1];
            bookingId = quoteInfo[2] == null ? -1 : (Integer) quoteInfo[2];
            bol = quoteInfo[3] == null ? -1 : (Integer) quoteInfo[3];
            processId = quoteInfo[4] == null ? -1 : (Integer) quoteInfo[4];
            quoteBy = quoteInfo[5] == null ? null : (String) quoteInfo[5];
            quoteDate = quoteInfo[6] == null ? null : (Date) quoteInfo[6];
            blBy = quoteInfo[7] == null ? null : (String) quoteInfo[7];
            bolDate = quoteInfo[8] == null ? null : (Date) quoteInfo[8];
            operationCount = quoteInfo[9] == null ? -1 : new Integer(quoteInfo[9].toString());
            docTypeCode = quoteInfo[10] == null ? null : (String) quoteInfo[10];
            usedBy = quoteInfo[11] == null ? null : (String) quoteInfo[11];
        }
    }

    public String getBlBy() {
        return blBy;
    }

    public int getBol() {
        return bol;
    }

    public Date getBolDate() {
        return bolDate;
    }

    public int getBookingId() {
        return bookingId;
    }

    public String getDocTypeCode() {
        return docTypeCode;
    }

    public String getFileNumber() {
        return fileNumber;
    }

    public int getOperationCount() {
        return operationCount;
    }

    public int getProcessId() {
        return processId;
    }

    public String getQuoteBy() {
        return quoteBy;
    }

    public Date getQuoteDate() {
        return quoteDate;
    }

    public int getQuoteId() {
        return quoteId;
    }

    public String getUsedBy() {
        return usedBy;
    }
}
