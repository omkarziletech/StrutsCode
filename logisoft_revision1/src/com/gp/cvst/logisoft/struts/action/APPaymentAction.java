/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cvst.logisoft.struts.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.common.CommonConstants;
import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.DateUtils;
import com.gp.cong.common.NumberUtils;
import com.gp.cong.logisoft.bc.accounting.APPaymentBC;
import com.gp.cong.logisoft.bc.accounting.ARInvoiceBC;
import com.gp.cong.logisoft.bc.notes.NotesConstants;
import com.gp.cong.logisoft.domain.EmailSchedulerVO;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Vendor;
import com.gp.cong.logisoft.hibernate.dao.EmailschedulerDAO;
import com.gp.cong.logisoft.hibernate.dao.TradingPartnerDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.struts.LoadLogisoftProperties;
import com.gp.cvst.logisoft.beans.TransactionBean;
import com.gp.cvst.logisoft.domain.ApBatch;
import com.gp.cvst.logisoft.domain.BankDetails;
import com.gp.cvst.logisoft.domain.Transaction;
import com.gp.cvst.logisoft.domain.TransactionLedger;
import com.gp.cvst.logisoft.hibernate.dao.ApBatchDAO;
import com.gp.cvst.logisoft.hibernate.dao.BankDetailsDAO;
import com.gp.cvst.logisoft.hibernate.dao.SystemRulesDAO;
import com.gp.cvst.logisoft.hibernate.dao.TransactionDAO;
import com.gp.cvst.logisoft.hibernate.dao.TransactionLedgerDAO;
import com.gp.cvst.logisoft.struts.form.APPaymentForm;
import com.logiware.hibernate.dao.AccountingLedgerDAO;
import com.logiware.hibernate.dao.ApTransactionHistoryDAO;
import com.logiware.hibernate.dao.ArTransactionHistoryDAO;
import com.logiware.hibernate.domain.ApTransactionHistory;
import com.logiware.hibernate.domain.ArTransactionHistory;
import com.logiware.thread.CheckNumberThread;
import com.logiware.utils.ArCreditHoldUtils;
import com.logiware.utils.AuditNotesUtils;
import javax.servlet.ServletContext;

import org.apache.log4j.Logger;

/**
 * MyEclipse Struts
 * Creation date: 02-06-2009
 *
 * XDoclet definition:
 * @struts.action path="/aPPayment" name="aPPaymentForm" input="jsps/Accounting/aPPayment.jsp" scope="request" validate="true"
 */
public class APPaymentAction extends Action {

    private static final Logger log = Logger.getLogger(APPaymentAction.class);
    /*
     * Generated Methods
     */
    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    APPaymentBC aPPaymentBC = new APPaymentBC();
    ARInvoiceBC aRInvoiceBC = new ARInvoiceBC();
    User loginUser = null;
    String checks = "";
    String overflowChecks = "";

    @SuppressWarnings("null")
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String forward = "APPaymentPage";
        BankDetailsDAO bankDetailsDAO = new BankDetailsDAO();
        synchronized (APPaymentAction.class) {
            HttpSession session = request.getSession();
            APPaymentForm aPPaymentForm = (APPaymentForm) form;
            String buttonAction = aPPaymentForm.getButton();
            loginUser = (User) session.getAttribute("loginuser");
            if (CommonUtils.isEmpty(buttonAction)) {
                forward = "APPaymentPage";
            } else {
                TransactionDAO transactionDAO = new TransactionDAO();
                TransactionLedgerDAO transactionLedgerDAO = new TransactionLedgerDAO();
                String idsForPayment = aPPaymentForm.getIdsForPayment();
                String idsForApproval = aPPaymentForm.getIdsForApproval();
                String paymentMethods = aPPaymentForm.getPaymentMethods();
                String paymentDate = aPPaymentForm.getTxtCommonPaymentDate();
                if (CommonUtils.isEqualIgnoreCase(buttonAction, "undoPayment") || CommonUtils.isEqualIgnoreCase(buttonAction, "makePayment")) {
                    if (CommonUtils.isNotEmpty(aPPaymentForm.getIdsForUnCheckPay())) {
                        String[] idsForUnCheckPay = StringUtils.splitByWholeSeparator(aPPaymentForm.getIdsForUnCheckPay(), ",");
                        for (String id : idsForUnCheckPay) {
                            Transaction unCheckPayTransaction = transactionDAO.findById(Integer.parseInt(id));
                            if (CommonUtils.isEqualIgnoreCase(unCheckPayTransaction.getPaymentMethod(), CommonConstants.PAYMENT_METHOD_ACH)) {
                                StringBuilder desc = new StringBuilder(unCheckPayTransaction.getPaymentMethod()).append(" Payment for Invoice '");
                                desc.append(unCheckPayTransaction.getInvoiceNumber()).append("' of Vendor '");
                                desc.append(unCheckPayTransaction.getCustName()).append("(").append(unCheckPayTransaction.getCustNo()).append(")'");
                                desc.append(" for amount '").append(NumberUtils.formatNumber(unCheckPayTransaction.getBalance(), "###,###,##0.00")).append("'");
                                desc.append(" is disapproved by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                                String key = unCheckPayTransaction.getCustNo() + "-" + unCheckPayTransaction.getInvoiceNumber();
                                AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_INVOICE, key, NotesConstants.AP_INVOICE, loginUser);
                                unCheckPayTransaction.setPaidBy(null);
                                unCheckPayTransaction.setStatus(CommonConstants.STATUS_READY_TO_PAY);
                                unCheckPayTransaction.setBankAccountNumber(null);
                                unCheckPayTransaction.setBankName(null);
                                unCheckPayTransaction.setUpdatedBy(loginUser.getUserId());
                                unCheckPayTransaction.setUpdatedOn(new Date());
                                unCheckPayTransaction.setPaymentMethod(null);
                            }
                        }
                    }
                }
                if (CommonUtils.isEqualIgnoreCase(buttonAction, "makePayment")) {
                    this.checks = "";
                    this.overflowChecks = "";
                    if (CommonUtils.isNotEmpty(paymentMethods)) {
                        Integer batchId = aPPaymentForm.getBatchId();
                        String batchDescription = null != aPPaymentForm.getBatchDescription() ? aPPaymentForm.getBatchDescription() : "";
                        boolean batchReportFlag = false;
                        String allPaidIds = "";
                        String bankGLAccountNumber = bankDetailsDAO.getGlAccountNoByBankAcctNumberAndBankName(aPPaymentForm.getBankAccountNumber(), aPPaymentForm.getBankName());
                        String[] paymentMethodArray = StringUtils.splitByWholeSeparator(paymentMethods, "<-->");
                        String[] paymentIds = StringUtils.splitByWholeSeparator(idsForPayment, "<-->");
                        String[] approvedPaymentIds = StringUtils.splitByWholeSeparator(idsForApproval, "<-->");
                        int rowCount = 0;
                        for (String paymentMethod : paymentMethodArray) {
                            if (CommonUtils.isEqualIgnoreCase(paymentMethod, CommonConstants.PAYMENT_METHOD_ACH)
                                    || CommonUtils.isEqualIgnoreCase(paymentMethod, CommonConstants.PAYMENT_METHOD_WIRE)) {
                                if (loginUser.isAchApprover() && CommonUtils.isEqual(paymentIds[rowCount], approvedPaymentIds[rowCount])) {
                                    // Autorized user used to approve and pay normal user's ACH/WIRE payments
                                    if (this.payAchOrWireTransaction(approvedPaymentIds[rowCount], aPPaymentForm, paymentMethod, batchId, paymentDate, bankGLAccountNumber, request)) {
                                        this.sendEmailForEachPayment(paymentMethod, approvedPaymentIds[rowCount], request, paymentDate, batchId.toString(), CommonConstants.STATUS_APPROVED);
                                        allPaidIds += approvedPaymentIds[rowCount] + ",";
                                        batchReportFlag = true;
                                    } else {
                                        batchReportFlag = false;
                                    }
                                } else {
                                    // Normal users used to pay and wait for approval for ACH/WIRE payments
                                    this.normalAchPayment(paymentMethod, paymentIds[rowCount], aPPaymentForm.getBankAccountNumber(), aPPaymentForm.getBankName(), request, paymentDate);
                                }
                            } else if (CommonUtils.isEqualIgnoreCase(paymentMethod, CommonConstants.PAYMENT_METHOD_CHECK)) {
                                if (null != paymentIds[rowCount] && !paymentIds[rowCount].trim().equals("")) {
                                    CheckNumberThread checkNumberThread = new CheckNumberThread();
                                    Integer checkNumber = checkNumberThread.getCheckNumber(aPPaymentForm.getBankName(), aPPaymentForm.getBankAccountNumber());
                                    if (payCheckTransaction(paymentIds[rowCount], aPPaymentForm, checkNumber.toString(), batchId, paymentDate, bankGLAccountNumber)) {
                                        batchReportFlag = true;
                                        allPaidIds += paymentIds[rowCount] + ",";
                                        this.sendEmailForEachPayment(paymentMethod, paymentIds[rowCount], request, paymentDate, checkNumber.toString(), CommonConstants.STATUS_APPROVED);
                                        this.printCheck(paymentIds[rowCount], checkNumber.toString(), paymentDate, aPPaymentForm.getBankName(), aPPaymentForm.getBankAccountNumber(), request);
                                    } else {
                                        batchReportFlag = false;
                                    }
                                }
                            } else {
                                //Pay ACH DEBIT or CREDI CARD payments
                                if (null != paymentIds[rowCount] && !paymentIds[rowCount].trim().equals("")) {
                                    if (payOtherTransaction(paymentIds[rowCount], aPPaymentForm, paymentMethod, batchId, paymentDate, bankGLAccountNumber, request)) {
                                        batchReportFlag = true;
                                        allPaidIds += paymentIds[rowCount] + ",";
                                        if (CommonUtils.isEqualIgnoreCase(paymentMethod, CommonConstants.PAYMENT_METHOD_ACH_DEBIT)) {
                                            bankDetailsDAO.updateAchDebitCount(aPPaymentForm.getBankName(), aPPaymentForm.getBankAccountNumber());
                                        } else {
                                            bankDetailsDAO.updateCreditCardCount(aPPaymentForm.getBankName(), aPPaymentForm.getBankAccountNumber());
                                        }
                                    } else {
                                        batchReportFlag = false;
                                    }
                                }
                            }
                            rowCount++;
                        }

                        if (batchReportFlag) {
                            // save batch with CHECK Payment and ACH/WIRE payments if approved by authorized user
                            ApBatch apBatch = new ApBatchDAO().findById(batchId.toString());
                            apBatch.setBatchDesc(batchDescription);
                            // print batch report
                            //this.printBatch(batchId, aPPaymentForm);
                            if (null != allPaidIds && !allPaidIds.trim().equals("")) {
                                Double batchAmount = 0d;
                                allPaidIds = StringUtils.removeStart(StringUtils.removeEnd(allPaidIds, ","), ",");
                                String[] ids = StringUtils.splitByWholeSeparator(allPaidIds, ",");
                                for (String paidId : ids) {
                                    Transaction paidTransaction = transactionDAO.findById(Integer.parseInt(paidId));
                                    if (null != paidTransaction.getTransactionType()
                                            && paidTransaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_PAYABLE)) {
                                        batchAmount += paidTransaction.getBalance();
                                    } else if (null != paidTransaction.getTransactionType()
                                            && paidTransaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                                        batchAmount -= paidTransaction.getBalance();
                                        /*
                                         * For AR we need to
                                         * set Closed Date to current date
                                         * as balance goes zero
                                         */
                                        paidTransaction.setClosedDate(new Date());
                                    }
                                    paidTransaction.setBalance(new Double(0));
                                    paidTransaction.setBalanceInProcess(new Double(0));
                                    paidTransaction.setUpdatedOn(new Date());
                                    paidTransaction.setUpdatedBy(loginUser.getUserId());
                                }
                                TransactionLedger transactionLedger = new TransactionLedger();
                                transactionLedger.setTransactionAmt((-1) * batchAmount);
                                transactionLedger.setGlAccountNumber(bankGLAccountNumber);
                                transactionLedger.setTransactionType(CommonConstants.TRANSACTION_TYPE_CASH_DEPOSIT);
                                transactionLedger.setStatus(CommonConstants.STATUS_PAID);
                                transactionLedger.setCleared(CommonConstants.NO);
                                transactionLedger.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
                                transactionLedger.setBankName(aPPaymentForm.getBankName());
                                Date transactionDate = new Date();
                                transactionDate = DateUtils.parseToDate(paymentDate);
                                transactionLedger.setPostedDate(transactionDate);
                                transactionLedger.setCustomerReferenceNo(batchId.toString());
                                transactionLedger.setInvoiceNumber(null);
                                transactionLedger.setTransactionDate(new Date());
                                transactionLedger.setSubledgerSourceCode(CommonConstants.SUB_LEDGER_CODE_CASH_DEPOSIT);
                                transactionLedger.setApBatchId(batchId);
                                transactionLedger.setCreatedOn(new Date());
                                transactionLedger.setCreatedBy(loginUser.getUserId());
                                transactionLedgerDAO.save(transactionLedger);
                                batchAmount = 0d;
                            }
                        }
                    }
                }
                if (buttonAction.trim().equals("showAll")
                        || buttonAction.trim().equals("undoPayment") || buttonAction.trim().equals("makePayment")) {
                    List<TransactionBean> listOfCustomer = aPPaymentBC.getAllCustomerByUserId(aPPaymentForm, loginUser);
                    request.setAttribute("listOfcustomers", listOfCustomer);
                    request.setAttribute("paymentForm", aPPaymentForm);
                    forward = "APPaymentPage";
                }
                if (buttonAction.equals("clearAll")) {
                    forward = "APPaymentPage";
                }
            }
            List<String> bankNames = bankDetailsDAO.getBankNames(loginUser.getUserId());
            request.setAttribute("bankNames", bankNames);
            if (CommonUtils.isNotEmpty(bankNames) && bankNames.size() == 1) {
                String bankName = bankNames.get(0);
                List<BankDetails> bankAccounts = bankDetailsDAO.getBankAccounts(loginUser.getUserId(), bankName);
                request.setAttribute("bankAccounts", bankAccounts);
            }
            bankDetailsDAO.getSession().getTransaction().commit();
        }
        if (!bankDetailsDAO.getSession().getTransaction().isActive()) {
            bankDetailsDAO.getSession().getTransaction().begin();
        }
        return mapping.findForward(forward);
    }

    private void normalAchPayment(String paymentMethod, String paymentIds, String bankAccountNumber, String bankName, HttpServletRequest request, String paymentDate) throws Exception {
        String[] waitForApprovalIds = StringUtils.splitByWholeSeparator(paymentIds, ",");
        boolean hasPayment = false;
        for (String id : waitForApprovalIds) {
            Transaction waitForApprovalTransaction = new TransactionDAO().findById(Integer.parseInt(id));
            if (CommonUtils.isEmpty(waitForApprovalTransaction.getPaidBy())) {
                hasPayment = true;
                waitForApprovalTransaction.setPaidBy(loginUser.getUserId());
                waitForApprovalTransaction.setStatus(CommonConstants.STATUS_WAITING_FOR_APPROVAL);
                waitForApprovalTransaction.setPaymentMethod(paymentMethod);
                waitForApprovalTransaction.setBankAccountNumber(bankAccountNumber);
                waitForApprovalTransaction.setBankName(bankName);
                waitForApprovalTransaction.setPaidOn(new Date());
                StringBuilder desc = new StringBuilder(waitForApprovalTransaction.getPaymentMethod()).append(" Payment for Invoice '");
                desc.append(waitForApprovalTransaction.getInvoiceNumber()).append("' of Vendor '");
                desc.append(waitForApprovalTransaction.getCustName()).append("(").append(waitForApprovalTransaction.getCustNo()).append(")'");
                desc.append(" for amount '").append(NumberUtils.formatNumber(waitForApprovalTransaction.getTransactionAmt(), "###,###,##0.00")).append("'");
                desc.append(" paid by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                String key = waitForApprovalTransaction.getCustNo() + "-" + waitForApprovalTransaction.getInvoiceNumber();
                AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_INVOICE, key, NotesConstants.AP_INVOICE, loginUser);
            }
        }
        if (hasPayment) {
            this.sendEmailForEachPayment(paymentMethod, paymentIds, request, paymentDate, null, CommonConstants.STATUS_WAITING_FOR_APPROVAL);
        }
    }

    private void printCheck(String idsForCheckTransaction, String checkNumber, String paymentDate, String bankAccountName, String bankAccountNo, HttpServletRequest request) throws Exception {
        String outputFileName = LoadLogisoftProperties.getProperty("reportLocation") + "/Documents/ApPayment" + "/" + DateUtils.formatDate(new Date(), "yyyy/MM/dd") + "/";
        File file = new File(outputFileName);
        if (!file.exists()) {
            file.mkdirs();
        }
        String realPath = this.getServlet().getServletContext().getRealPath("/");
        outputFileName = outputFileName + checkNumber + ".pdf";
        String checkFileName = null;
        String overflowFileName = null;
        String fileNames = aPPaymentBC.createPaymentReport(idsForCheckTransaction, checkNumber, paymentDate, outputFileName, realPath);
        if (null != fileNames && fileNames.contains(":-")) {
            String[] fileName = StringUtils.splitByWholeSeparator(fileNames, ":-");
            checkFileName = fileName[0];
            overflowFileName = fileName[1];
        } else if (null != fileNames) {
            checkFileName = fileNames;
        }
        BankDetailsDAO bankDetailsDAO = new BankDetailsDAO();
        List<BankDetails> bankList = bankDetailsDAO.findByBankAccountNumberAndBankName(bankAccountName, bankAccountNo);
        String checkPrinter = "";
        String overflowPrinter = "";
        for (BankDetails bankDetails : bankList) {
            checkPrinter = bankDetails.getCheckPrinter();
            overflowPrinter = bankDetails.getOverflowPrinter();
        }
        if (CommonUtils.isNotEmpty(checkFileName) && CommonUtils.isNotEmpty(checkPrinter)) {
            this.savePrintTemplate(checkFileName, checkNumber, checkPrinter);
            this.checks += "," + checkNumber;
            this.checks = StringUtils.removeStart(StringUtils.removeEnd(this.checks, ","), ",");
            request.setAttribute("checkPrinterMessage", " Check - " + this.checks + " sent to the Check Printer - " + checkPrinter + " successfully");
        }

        if (CommonUtils.isNotEmpty(overflowFileName) && CommonUtils.isNotEmpty(overflowPrinter)) {
            this.savePrintTemplate(overflowFileName, checkNumber, overflowPrinter);
            this.overflowChecks += "," + checkNumber;
            this.overflowChecks = StringUtils.removeStart(StringUtils.removeEnd(this.overflowChecks, ","), ",");
            request.setAttribute("overflowPrinterMessage", " Overflow Check - " + this.overflowChecks + " sent to the Overflow Printer - " + overflowPrinter + " successfully");
        }
        // fileList.add(checkNumber+".pdf");
    }

    private void savePrintTemplate(String fileLocation, String moduleId, String printerName) throws Exception {
        EmailSchedulerVO emailSchedulerVO = new EmailSchedulerVO();
        emailSchedulerVO.setFileLocation(fileLocation);
        emailSchedulerVO.setStatus(CommonConstants.EMAIL_STATUS_PENDING);
        emailSchedulerVO.setModuleName("APPAYMENT");
        emailSchedulerVO.setModuleId(moduleId);
        emailSchedulerVO.setType(CommonConstants.CONTACT_MODE_PRINT);
        emailSchedulerVO.setHtmlMessage("Check Printing");
        emailSchedulerVO.setSubject("Check Printing");
        emailSchedulerVO.setUserName(loginUser.getLoginName());
        emailSchedulerVO.setEmailDate(new Date());
        emailSchedulerVO.setPrinterName(printerName);
        emailSchedulerVO.setPrintCopy(1);
        aRInvoiceBC.save(emailSchedulerVO);
    }

    private void printBatch(Integer batchId, APPaymentForm apPaymentForm) throws Exception {
        String outputFileName = LoadLogisoftProperties.getProperty("reportLocation") + "/Documents/ApPayment/" + DateUtils.formatDate(new Date(), "yyyy/MM/dd") + "/";
        File file = new File(outputFileName);
        if (!file.exists()) {
            file.mkdirs();
        }
        String realPath = this.getServlet().getServletContext().getRealPath("/");
        outputFileName = outputFileName + CommonConstants.BATCH_REPORT + "_" + batchId + ".pdf";
        aPPaymentBC.createPaymentBatchReport(batchId, CommonConstants.TRANSACTION_TYPE_PAYAMENT, CommonConstants.STATUS_PAID, outputFileName, apPaymentForm, realPath);

    }

    private void sendEmailForEachPayment(String paymentMethod, String paidIds, HttpServletRequest request, String date, String checkNumber, String status) throws Exception {
        TransactionDAO transactionDAO = new TransactionDAO();
        TradingPartnerDAO tradingPartnerDAO = new TradingPartnerDAO();
        String[] ids = StringUtils.splitByWholeSeparator(paidIds, ",");
        List<TransactionBean> paymentList = new ArrayList<TransactionBean>();
        String vendorNo = null;
        String vendorName = null;
        Double amount = 0d;
        String fromAddress = null;
        String fromName = null;
        for (String id : ids) {
            Transaction transaction = transactionDAO.findById(Integer.parseInt(id));
            if (null != transaction) {
                TransactionBean transactionBean = new TransactionBean(transaction);
                vendorNo = transaction.getCustNo();
                vendorName = transaction.getCustName();
                User user = null != transaction.getPaidBy() ? new UserDAO().findById(transaction.getPaidBy()) : loginUser;
                fromName = user.getLoginName();
                fromAddress = user.getEmail();
                transactionBean.setTransDate(DateUtils.parseDateToString(transaction.getTransactionDate()));
                if (null != transaction.getTransactionType() && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                    transactionBean.setAmount(NumberUtils.formatNumber(((-1) * transaction.getBalance()), "###,###,##0.00"));
                }
                amount += Double.parseDouble(StringUtils.replace(transactionBean.getAmount(), ",", ""));
                paymentList.add(transactionBean);
            }
        }
        String totalAmount = NumberUtils.formatNumber(amount, "###,###,##0.00");
        String toAddress = null;
        if (CommonUtils.isEqual(status, CommonConstants.STATUS_APPROVED)) {
            toAddress = tradingPartnerDAO.getRemitEmailForPaymentMethod(paymentMethod, vendorNo);
            if (null == toAddress || toAddress.trim().equals("")) {
                toAddress = loginUser.getEmail();
            }
        } else {
            List<User> approvers = new UserDAO().findByProperty("achApprover", true);
            toAddress = "";
            for (User approver : approvers) {
                if (CommonUtils.isNotEmpty(approver.getEmail())) {
                    toAddress += "," + approver.getEmail();
                }
            }
            toAddress = StringUtils.removeEnd(StringUtils.removeStart(toAddress, ","), ",");
        }
        if (null != toAddress && !toAddress.trim().equals("")) {
            EmailschedulerDAO emailschedulerDAO = new EmailschedulerDAO();
            SystemRulesDAO systemRulesDAO = new SystemRulesDAO();
            String companyName = LoadLogisoftProperties.getProperty("application.ECU.companyname");
            String imagePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath();
            String companyLogo = imagePath + LoadLogisoftProperties.getProperty("application.image.logo");
            EmailSchedulerVO emailSchedulerVO = new EmailSchedulerVO();
            String toName = null;
            fromName = CommonUtils.isNotEmpty(fromName) ? fromName : loginUser.getLoginName();
            fromAddress = CommonUtils.isNotEmpty(fromAddress) ? fromAddress : loginUser.getEmail();
            String ccAddress = null;
            String bccAddress = null;
            String subject = "";
            StringBuilder htmlMessage = new StringBuilder("<html>");
            htmlMessage.append("<body>");
            htmlMessage.append("<center>");
            htmlMessage.append("<div style='width:600px;background-color:#E6F2FF;border:5px solid #4F8CE5'>");
            htmlMessage.append("<div style='width:600px;'>");
            htmlMessage.append("<img title='").append(companyName).append("' src='").append(companyLogo).append("'/>");
            htmlMessage.append("</div>");
            htmlMessage.append("<div style='width:600px;margin:0 auto;'>");
            htmlMessage.append("<div style='font-weight: bold;'>");
            StringBuilder textMessage = new StringBuilder();
            if (CommonUtils.isEqual(status, CommonConstants.STATUS_APPROVED)) {
                subject = "Disbursment notification from " + companyName + " to " + vendorName;
                htmlMessage.append("A payment in the amount of $").append(totalAmount);
                htmlMessage.append(" was made by ").append(paymentMethod).append(" on ").append(date).append(".");
                textMessage.append("A payment in the amount of $").append(totalAmount);
                textMessage.append(" was made by ").append(paymentMethod).append(" on ").append(date).append(".");
                Vendor vendor = new TradingPartnerDAO().getVendorByCustomerNumber(vendorNo);
                if (null != vendor && null != vendor.getApSpecialist()) {
                    ccAddress = vendor.getApSpecialist().getEmail();
                }
            } else {
                subject = "ACH payments ready for approval";
                htmlMessage.append("The following ACH payments have been submitted for approval:");
                textMessage.append("The following ACH payments have been submitted for approval:");
            }
            if (paymentMethod.trim().equalsIgnoreCase(CommonConstants.PAYMENT_METHOD_CHECK)) {
                htmlMessage.append("<br> Vendor : ").append(vendorName);
                htmlMessage.append("<br> Check# : ").append(checkNumber);
                textMessage.append("\n Vendor : ").append(vendorName);
                textMessage.append("\n Check# : ").append(checkNumber);
            } else {
                htmlMessage.append("<br> Vendor : ").append(vendorName);
                textMessage.append("\n Vendor : ").append(vendorName);
            }
            htmlMessage.append("</div>");
            htmlMessage.append("<table width='600' cellspacing='1' cellpadding='0' border='0'>");
            htmlMessage.append("<tr style='background-color: #11539F;font-weight: bold;font-family : Arial;color:black;'>");
            htmlMessage.append("<td>Invoice/BL</td>").append("<td>Date</td>").append("<td>Amount</td>");
            htmlMessage.append("</tr>");
            textMessage.append("\nInvoice/BL\t\t").append("Date\t\t").append("Amount");
            boolean isOdd = true;
            for (TransactionBean transactionBean : paymentList) {
                if (isOdd) {
                    htmlMessage.append("<tr style='background-color: #ffffff;'>");
                    isOdd = false;
                } else {
                    htmlMessage.append("<tr style='background-color: #D1DBE9;'>");
                    isOdd = true;
                }
                htmlMessage.append("<td>").append(transactionBean.getInvoiceOrBl()).append("</td>");
                htmlMessage.append("<td>").append(transactionBean.getTransDate()).append("</td>");
                htmlMessage.append("<td>").append(transactionBean.getAmount()).append("</td>");
                htmlMessage.append("</tr>");
                textMessage.append("\n").append(transactionBean.getInvoiceOrBl());
                textMessage.append("\t\t").append(transactionBean.getTransDate());
                textMessage.append("\t\t").append(transactionBean.getAmount());
            }
            htmlMessage.append("<tr>");
            htmlMessage.append("<td colspan='3'>").append(paymentList.size()).append(" Invoices Paid").append("</td>");
            htmlMessage.append("</tr>");
            htmlMessage.append("</table>");
            textMessage.append("\n").append(paymentList.size()).append(" Invoices Paid");
            htmlMessage.append("</div>");
            htmlMessage.append("<div>").append("<u>").append("International Transportation Specialists").append("</u>").append("</div>");
            htmlMessage.append("</div>");
            htmlMessage.append("</body>");
            htmlMessage.append("</center>");
            htmlMessage.append("</html>");
            textMessage.append("\n").append("International Transportation Specialists");
            emailSchedulerVO.setEmailData(toName, toAddress, fromName, fromAddress, ccAddress, bccAddress, subject, htmlMessage.toString());
            emailSchedulerVO.setEmailInfo("APPAYMENT", null, CommonConstants.CONTACT_MODE_EMAIL, 0, new Date(), "AP Payment", checkNumber, loginUser.getLoginName());
            emailSchedulerVO.setStatus(CommonConstants.EMAIL_STATUS_PENDING);
            emailSchedulerVO.setTextMessage(textMessage.toString());
            emailSchedulerVO.setHtmlMessage(htmlMessage.toString());
            //emailSchedulerVO.setFileLocation(emailSchedulerVO.getFileLocation());
            emailschedulerDAO.save(emailSchedulerVO);
        }
    }

    private Boolean payCheckTransaction(String paymentIds, APPaymentForm aPPaymentForm, String startingNumber, Integer batchId, String paymentDate, String bankGLAccountNumber) throws Exception {
        ApTransactionHistoryDAO apTransactionHistoryDAO = new ApTransactionHistoryDAO();
        ArTransactionHistoryDAO arTransactionHistoryDAO = new ArTransactionHistoryDAO();
        ServletContext servletContext = this.servlet.getServletContext();
        String imagePath = "http://" + servletContext.getResource(LoadLogisoftProperties.getProperty("application.image.logo")).getPath();
        String[] payByCheckIds = StringUtils.splitByWholeSeparator(paymentIds, ",");
        String vendorName = null;
        String vendorNumber = null;
        double paymentAmount = 0d;
        for (String payByCheckId : payByCheckIds) {
            // Update transactions paid by CHECK payment
            Transaction transaction = new TransactionDAO().findById(Integer.parseInt(payByCheckId));
            vendorName = transaction.getCustName();
            vendorNumber = transaction.getCustNo();
            paymentAmount += transaction.getTransactionAmt();
            transaction.setStatus(CommonConstants.STATUS_PAID);
            transaction.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
            transaction.setBankName(aPPaymentForm.getBankName());
            transaction.setChequeNumber(startingNumber.toString());
            transaction.setApBatchId(batchId);
            transaction.setPaymentMethod(CommonConstants.PAYMENT_METHOD_CHECK);
//            if (null != transaction.getTransactionType()
//                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
//                transaction.setTransactionAmt(transaction.getBalance());
//            }
            transaction.setCheckDate(DateUtils.parseToDate(paymentDate));
            transaction.setPaidBy(loginUser.getUserId());
            StringBuilder desc = new StringBuilder("Check Payment for Invoice '");
            desc.append(transaction.getInvoiceNumber()).append("' of Vendor '");
            desc.append(transaction.getCustName()).append("(").append(transaction.getCustNo()).append(")'");
            desc.append(" for amount '").append(NumberUtils.formatNumber(transaction.getTransactionAmt(), "###,###,##0.00")).append("'");
            desc.append(" paid by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
            String key = transaction.getCustNo() + "-" + transaction.getInvoiceNumber();
            AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_INVOICE, key, NotesConstants.AP_INVOICE, loginUser);
            //Insert new Record of Transaction Type Payment and status Paid for CHECK payment
            Transaction payment = new Transaction(transaction);
            payment.setTransactionType(CommonConstants.TRANSACTION_TYPE_PAYAMENT);
            payment.setPostedDate(DateUtils.parseToDate(paymentDate));
            payment.setStatus(CommonConstants.STATUS_PAID);
            payment.setCleared(CommonConstants.NO);
            payment.setVoidTransaction(CommonConstants.NO);
            payment.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
            payment.setBankName(aPPaymentForm.getBankName());
            payment.setChequeNumber(startingNumber.toString());
            payment.setTransactionDate(DateUtils.parseToDate(paymentDate));
            payment.setBillTo(CommonConstants.YES);
            payment.setApBatchId(batchId);
            payment.setPaymentMethod(CommonConstants.PAYMENT_METHOD_CHECK.toUpperCase());
            if (null != transaction.getTransactionType()
                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                payment.setTransactionAmt((-1) * transaction.getBalance());
                ArTransactionHistory arTransactionHistory = new ArTransactionHistory();
                arTransactionHistory.setCustomerNumber(payment.getCustNo());
                arTransactionHistory.setBlNumber(payment.getBillLaddingNo());
                arTransactionHistory.setInvoiceNumber(payment.getInvoiceNumber());
                arTransactionHistory.setInvoiceDate(transaction.getTransactionDate());
                arTransactionHistory.setTransactionDate(payment.getTransactionDate());
                arTransactionHistory.setPostedDate(payment.getTransactionDate());
                arTransactionHistory.setTransactionAmount(payment.getTransactionAmt());
                arTransactionHistory.setCustomerReferenceNumber(payment.getCustomerReferenceNo());
                arTransactionHistory.setVoyageNumber(payment.getVoyageNo());
                arTransactionHistory.setCheckNumber(payment.getChequeNumber());
                arTransactionHistory.setArBatchId(null);
                arTransactionHistory.setApBatchId(batchId);
                arTransactionHistory.setTransactionType("AP PY");
                arTransactionHistory.setCreatedBy(loginUser.getLoginName());
                arTransactionHistory.setCreatedDate(new Date());
                arTransactionHistoryDAO.save(arTransactionHistory);
                String invoiceOrBl = "";
                if (CommonUtils.isNotEmpty(transaction.getBillLaddingNo())) {
                    invoiceOrBl = transaction.getBillLaddingNo();
                } else {
                    invoiceOrBl = transaction.getInvoiceNumber();
                }
                if (CommonUtils.isEqualIgnoreCase(transaction.getCreditHold(), CommonConstants.YES)) {
                    if (transaction.isEmailed()) {
                        ArCreditHoldUtils.sendEmail(transaction, loginUser, false, imagePath);
                    }
                    transaction.setRemovedFromHold(true);
                    transaction.setEmailed(false);
                    transaction.setCreditHold(CommonConstants.NO);
                    StringBuilder notesDesc = new StringBuilder("BL# - ").append(invoiceOrBl).append(" of ");
                    notesDesc.append(transaction.getCustName()).append("(").append(transaction.getCustNo()).append(")");
                    notesDesc.append(" taken off credit hold by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                    AuditNotesUtils.insertAuditNotes(notesDesc.toString(), NotesConstants.AR_INVOICE, transaction.getCustNo() + "-" + invoiceOrBl,
                            "AR Credit Hold", loginUser);
                }
            } else {
                payment.setTransactionAmt(transaction.getBalance());
                ApTransactionHistory apTransactionHistory = new ApTransactionHistory(payment);
                apTransactionHistory.setInvoiceDate(transaction.getTransactionDate());
                apTransactionHistory.setAmount(-payment.getTransactionAmt());
                apTransactionHistory.setCreatedBy(loginUser.getLoginName());
                apTransactionHistoryDAO.save(apTransactionHistory);
            }
            payment.setGlAccountNumber(bankGLAccountNumber);
            payment.setBalance(new Double(0));
            payment.setBalanceInProcess(new Double(0));
            payment.setCreatedOn(new Date());
            payment.setCreatedBy(loginUser.getUserId());
            new TransactionDAO().save(payment);

            // Insert CD subledger for CHECK payment only for transaction type AR
            if (null != transaction.getTransactionType()
                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                TransactionLedger checkPaidCDSubledger = new TransactionLedger(transaction);
                checkPaidCDSubledger.setTransactionAmt((-1) * transaction.getBalance());
                checkPaidCDSubledger.setBalance(new Double(0));
                checkPaidCDSubledger.setBalanceInProcess(new Double(0));
                checkPaidCDSubledger.setGlAccountNumber(LoadLogisoftProperties.getProperty(CommonConstants.AR_CONTROL_ACCOUNT));
                checkPaidCDSubledger.setTransactionType(CommonConstants.TRANSACTION_TYPE_CASH_DEPOSIT);
                checkPaidCDSubledger.setStatus(CommonConstants.STATUS_PAID);
                checkPaidCDSubledger.setCleared(CommonConstants.NO);
                checkPaidCDSubledger.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
                checkPaidCDSubledger.setBankName(aPPaymentForm.getBankName());
                checkPaidCDSubledger.setChequeNumber(startingNumber.toString());
                checkPaidCDSubledger.setPostedDate(DateUtils.parseToDate(paymentDate));
                checkPaidCDSubledger.setCustomerReferenceNo(batchId.toString());
                checkPaidCDSubledger.setInvoiceNumber(null);
                checkPaidCDSubledger.setTransactionDate(new Date());
                checkPaidCDSubledger.setSubledgerSourceCode(CommonConstants.SUB_LEDGER_CODE_CASH_DEPOSIT);
                checkPaidCDSubledger.setApBatchId(batchId);
                checkPaidCDSubledger.setCreatedOn(new Date());
                checkPaidCDSubledger.setCreatedBy(loginUser.getUserId());
                new TransactionLedgerDAO().save(checkPaidCDSubledger);
            }

            //Update Fclblcostcode Paid date
            String paidDate = DateUtils.formatDate(DateUtils.parseDate(paymentDate, "MM/dd/yyyy"), "yyyy-MM-dd");
            new AccountingLedgerDAO().setPaidDateForAccrualCost(vendorNumber, transaction.getInvoiceNumber(), paidDate);
        }
        StringBuilder desc = new StringBuilder("Check Payment - '").append(startingNumber).append("' of Vendor '");
        desc.append(vendorName).append("(").append(vendorNumber).append(")'");
        desc.append(" for amount '").append(NumberUtils.formatNumber(paymentAmount, "###,###,##0.00")).append("'");
        desc.append(" paid by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
        AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_PAYMENT, startingNumber.toString(), NotesConstants.AP_PAYMENT, loginUser);
        return true;
    }

    private Boolean payAchOrWireTransaction(String approvedPaymentIds, APPaymentForm aPPaymentForm,
            String paymentMethod, Integer batchId, String paymentDate, String bankGLAccountNumber, HttpServletRequest request) throws Exception {
        ApTransactionHistoryDAO apTransactionHistoryDAO = new ApTransactionHistoryDAO();
        ArTransactionHistoryDAO arTransactionHistoryDAO = new ArTransactionHistoryDAO();
        ServletContext servletContext = this.servlet.getServletContext();
        String imagePath = "http://" + servletContext.getResource(LoadLogisoftProperties.getProperty("application.image.logo")).getPath();
        String[] approvedToPaidIds = StringUtils.splitByWholeSeparator(approvedPaymentIds, ",");
        String vendorName = null;
        String vendorNumber = null;
        double paymentAmount = 0d;
        User paidUser = null;
        Date paidDate = null;
        for (String approvedToPaidId : approvedToPaidIds) {
            // Update transactions approved by authorized user for ACH/WIRE payments
            Transaction transaction = new TransactionDAO().findById(Integer.parseInt(approvedToPaidId));
            vendorName = transaction.getCustName();
            vendorNumber = transaction.getCustNo();
            paymentAmount += transaction.getBalance();
            if (CommonUtils.isNotEmpty(transaction.getPaidBy())) {
                paidUser = new UserDAO().findById(transaction.getPaidBy());
            } else {
                transaction.setPaidBy(loginUser.getUserId());
                paidUser = loginUser;
            }
            if (null != transaction.getCheckDate()) {
                paidDate = transaction.getCheckDate();
            } else {
                paidDate = new Date();
            }
            transaction.setStatus(CommonConstants.STATUS_PAID);
            transaction.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
            transaction.setBankName(aPPaymentForm.getBankName());
            transaction.setChequeNumber(null);
            transaction.setApBatchId(batchId);
            transaction.setPaymentMethod(paymentMethod.toUpperCase());
//            if (null != transaction.getTransactionType() && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)
//                    && null != transaction.getInvoiceNumber()
//                    && (transaction.getInvoiceNumber().equalsIgnoreCase(AccountingConstants.ON_ACCOUNT)
//                    || transaction.getInvoiceNumber().equalsIgnoreCase(AccountingConstants.PRE_PAYMENT))) {
//                transaction.setTransactionAmt(transaction.getBalance());
//            }
            transaction.setCheckDate(DateUtils.parseToDate(paymentDate));
            transaction.setApprovedBy(loginUser.getUserId());
            StringBuilder desc = new StringBuilder(transaction.getPaymentMethod()).append(" Payment for Invoice '");
            desc.append(transaction.getInvoiceNumber()).append("' for Vendor '");
            desc.append(transaction.getCustName()).append("(").append(transaction.getCustNo()).append(")'");
            desc.append(" for amount '").append(NumberUtils.formatNumber(transaction.getBalance(), "###,###,##0.00")).append("'");
            desc.append(" approved by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
            String key = transaction.getCustNo() + "-" + transaction.getInvoiceNumber();
            AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_INVOICE, key, NotesConstants.AP_INVOICE, loginUser);

            //Insert new Record of Transaction Type Payment and status Paid for ACH/WIRE payments
            Transaction payment = new Transaction(transaction);
            payment.setTransactionType(CommonConstants.TRANSACTION_TYPE_PAYAMENT);
            payment.setPostedDate(DateUtils.parseToDate(paymentDate));
            payment.setStatus(CommonConstants.STATUS_PAID);
            payment.setCleared(CommonConstants.NO);
            payment.setVoidTransaction(CommonConstants.NO);
            payment.setBankAccountNumber(transaction.getBankAccountNumber());
            payment.setBankName(transaction.getBankName());
            payment.setChequeNumber(null);
            payment.setTransactionDate(DateUtils.parseToDate(paymentDate));
            payment.setBillTo(CommonConstants.YES);
            payment.setApBatchId(batchId);
            payment.setPaymentMethod(paymentMethod.toUpperCase());
            if (null != transaction.getTransactionType()
                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                payment.setTransactionAmt((-1) * transaction.getBalance());
                ArTransactionHistory arTransactionHistory = new ArTransactionHistory();
                arTransactionHistory.setCustomerNumber(payment.getCustNo());
                arTransactionHistory.setBlNumber(payment.getBillLaddingNo());
                arTransactionHistory.setInvoiceNumber(payment.getInvoiceNumber());
                arTransactionHistory.setInvoiceDate(transaction.getTransactionDate());
                arTransactionHistory.setTransactionDate(payment.getTransactionDate());
                arTransactionHistory.setPostedDate(payment.getTransactionDate());
                arTransactionHistory.setTransactionAmount(payment.getTransactionAmt());
                arTransactionHistory.setCustomerReferenceNumber(payment.getCustomerReferenceNo());
                arTransactionHistory.setVoyageNumber(payment.getVoyageNo());
                arTransactionHistory.setCheckNumber(payment.getChequeNumber());
                arTransactionHistory.setArBatchId(null);
                arTransactionHistory.setApBatchId(batchId);
                arTransactionHistory.setTransactionType("AP PY");
                arTransactionHistory.setCreatedBy(paidUser.getLoginName());
                arTransactionHistory.setCreatedDate(new Date());
                arTransactionHistoryDAO.save(arTransactionHistory);
                String invoiceOrBl = "";
                if (CommonUtils.isNotEmpty(transaction.getBillLaddingNo())) {
                    invoiceOrBl = transaction.getBillLaddingNo();
                } else {
                    invoiceOrBl = transaction.getInvoiceNumber();
                }
                if (CommonUtils.isEqualIgnoreCase(transaction.getCreditHold(), CommonConstants.YES)) {
                    if (transaction.isEmailed()) {
                        ArCreditHoldUtils.sendEmail(transaction, loginUser, false, imagePath);
                    }
                    transaction.setRemovedFromHold(true);
                    transaction.setEmailed(false);
                    transaction.setCreditHold(CommonConstants.NO);
                    StringBuilder notesDesc = new StringBuilder("BL# - ").append(invoiceOrBl).append(" of ");
                    notesDesc.append(transaction.getCustName()).append("(").append(transaction.getCustNo()).append(")");
                    notesDesc.append(" taken off credit hold by ").append(paidUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                    AuditNotesUtils.insertAuditNotes(notesDesc.toString(), NotesConstants.AR_INVOICE, transaction.getCustNo() + "-" + invoiceOrBl,
                            "AR Credit Hold", paidUser);
                }
            } else {
                payment.setTransactionAmt(transaction.getBalance());
                ApTransactionHistory apTransactionHistory = new ApTransactionHistory(payment);
                apTransactionHistory.setInvoiceDate(transaction.getTransactionDate());
                apTransactionHistory.setAmount(-payment.getTransactionAmt());
                apTransactionHistory.setCreatedBy(loginUser.getLoginName());
                apTransactionHistoryDAO.save(apTransactionHistory);
            }
            payment.setGlAccountNumber(bankGLAccountNumber);
            payment.setBalance(new Double(0));
            payment.setBalanceInProcess(new Double(0));
            payment.setCreatedOn(new Date());
            payment.setCreatedBy(loginUser.getUserId());
            new TransactionDAO().save(payment);

            // Insert CD subledger for ACH/WIRE payments only for transaction type AR
            if (null != transaction.getTransactionType()
                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                TransactionLedger achOrWirePaidCDLedger = new TransactionLedger(transaction);
                achOrWirePaidCDLedger.setTransactionAmt((-1) * transaction.getBalance());
                achOrWirePaidCDLedger.setBalance(new Double(0));
                achOrWirePaidCDLedger.setBalanceInProcess(new Double(0));
                achOrWirePaidCDLedger.setGlAccountNumber(LoadLogisoftProperties.getProperty(CommonConstants.AR_CONTROL_ACCOUNT));
                achOrWirePaidCDLedger.setTransactionType(CommonConstants.TRANSACTION_TYPE_CASH_DEPOSIT);
                achOrWirePaidCDLedger.setStatus(CommonConstants.STATUS_PAID);
                achOrWirePaidCDLedger.setCleared(CommonConstants.NO);
                achOrWirePaidCDLedger.setBankAccountNumber(transaction.getBankAccountNumber());
                achOrWirePaidCDLedger.setBankName(transaction.getBankName());
                achOrWirePaidCDLedger.setChequeNumber(null);
                achOrWirePaidCDLedger.setPostedDate(DateUtils.parseToDate(paymentDate));
                achOrWirePaidCDLedger.setCustomerReferenceNo(batchId.toString());
                achOrWirePaidCDLedger.setInvoiceNumber(null);
                achOrWirePaidCDLedger.setTransactionDate(new Date());
                achOrWirePaidCDLedger.setSubledgerSourceCode(CommonConstants.SUB_LEDGER_CODE_CASH_DEPOSIT);
                achOrWirePaidCDLedger.setApBatchId(batchId);
                achOrWirePaidCDLedger.setCreatedOn(new Date());
                achOrWirePaidCDLedger.setCreatedBy(loginUser.getUserId());
                new TransactionLedgerDAO().save(achOrWirePaidCDLedger);
            }
            //Update Fclblcostcode Paid date
            String datePaid = DateUtils.formatDate(DateUtils.parseDate(paymentDate, "MM/dd/yyyy"), "yyyy-MM-dd");
            new AccountingLedgerDAO().setPaidDateForAccrualCost(vendorNumber, transaction.getInvoiceNumber(), datePaid);
        }
        StringBuilder desc = new StringBuilder(paymentMethod).append(" Payment - '").append(batchId).append("' of Vendor '");
        desc.append(vendorName).append("(").append(vendorNumber).append(")'");
        desc.append(" for amount '").append(NumberUtils.formatNumber(paymentAmount, "###,###,##0.00")).append("'");
        desc.append(" paid by ").append(paidUser.getLoginName()).append(" on ").append(DateUtils.formatDate(paidDate, "MM/dd/yyyy"));
        AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_PAYMENT, vendorNumber + "-" + batchId, NotesConstants.AP_PAYMENT, paidDate, paidUser);
        desc = new StringBuilder(paymentMethod).append(" Payment - '").append(batchId).append("' of Vendor '");
        desc.append(vendorName).append("(").append(vendorNumber).append(")'");
        desc.append(" for amount '").append(NumberUtils.formatNumber(paymentAmount, "###,###,##0.00")).append("'");
        desc.append(" approved by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
        AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_PAYMENT, vendorNumber + "-" + batchId, NotesConstants.AP_PAYMENT, loginUser);
        return true;
    }

    private Boolean payOtherTransaction(String selectedIds, APPaymentForm aPPaymentForm,
            String paymentMethod, Integer batchId, String paymentDate, String bankGLAccountNumber, HttpServletRequest request) throws Exception {
        ServletContext servletContext = this.servlet.getServletContext();
        String imagePath = "http://" + servletContext.getResource(LoadLogisoftProperties.getProperty("application.image.logo")).getPath();
        ApTransactionHistoryDAO apTransactionHistoryDAO = new ApTransactionHistoryDAO();
        ArTransactionHistoryDAO arTransactionHistoryDAO = new ArTransactionHistoryDAO();
        BankDetailsDAO bankDetailsDAO = new BankDetailsDAO();
        String checkNumber = paymentMethod + " - ";
        if (CommonUtils.isEqualIgnoreCase(paymentMethod, CommonConstants.PAYMENT_METHOD_ACH_DEBIT)) {
            checkNumber += bankDetailsDAO.getAchDebitCount(aPPaymentForm.getBankName(), aPPaymentForm.getBankAccountNumber());
        } else {
            checkNumber += bankDetailsDAO.getCreditCardCount(aPPaymentForm.getBankName(), aPPaymentForm.getBankAccountNumber());
        }
        String[] ids = StringUtils.splitByWholeSeparator(selectedIds, ",");
        String vendorName = null;
        String vendorNumber = null;
        double paymentAmount = 0d;
        for (String id : ids) {
            // Update transactions paid by CHECK payment
            Transaction transaction = new TransactionDAO().findById(Integer.parseInt(id));
            vendorName = transaction.getCustName();
            vendorNumber = transaction.getCustNo();
            paymentAmount += transaction.getBalance();
            transaction.setStatus(CommonConstants.STATUS_PAID);
            transaction.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
            transaction.setBankName(aPPaymentForm.getBankName());
            transaction.setApBatchId(batchId);
            transaction.setPaymentMethod(paymentMethod);
//            if (null != transaction.getTransactionType()
//                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
//                transaction.setTransactionAmt(transaction.getBalance());
//            }
            transaction.setChequeNumber(checkNumber);
            transaction.setCheckDate(DateUtils.parseToDate(paymentDate));
            transaction.setPaidBy(loginUser.getUserId());
            StringBuilder desc = new StringBuilder(paymentMethod + " for Invoice '");
            desc.append(transaction.getInvoiceNumber()).append("' of Vendor '");
            desc.append(transaction.getCustName()).append("(").append(transaction.getCustNo()).append(")'");
            desc.append(" for amount '").append(NumberUtils.formatNumber(transaction.getBalance(), "###,###,##0.00")).append("'");
            desc.append(" paid by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
            String key = transaction.getCustNo() + "-" + transaction.getInvoiceNumber();
            AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_INVOICE, key, NotesConstants.AP_INVOICE, loginUser);
            //Insert new Record of Transaction Type Payment and status Paid for CHECK payment
            Transaction payment = new Transaction(transaction);
            payment.setTransactionType(CommonConstants.TRANSACTION_TYPE_PAYAMENT);
            payment.setPostedDate(DateUtils.parseToDate(paymentDate));
            payment.setStatus(CommonConstants.STATUS_PAID);
            payment.setCleared(CommonConstants.NO);
            payment.setVoidTransaction(CommonConstants.NO);
            payment.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
            payment.setBankName(aPPaymentForm.getBankName());
            payment.setTransactionDate(DateUtils.parseToDate(paymentDate));
            payment.setBillTo(CommonConstants.YES);
            payment.setApBatchId(batchId);
            payment.setPaymentMethod(paymentMethod);
            if (null != transaction.getTransactionType()
                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                payment.setTransactionAmt((-1) * transaction.getBalance());
                ArTransactionHistory arTransactionHistory = new ArTransactionHistory();
                arTransactionHistory.setCustomerNumber(payment.getCustNo());
                arTransactionHistory.setBlNumber(payment.getBillLaddingNo());
                arTransactionHistory.setInvoiceNumber(payment.getInvoiceNumber());
                arTransactionHistory.setInvoiceDate(transaction.getTransactionDate());
                arTransactionHistory.setTransactionDate(payment.getTransactionDate());
                arTransactionHistory.setPostedDate(payment.getTransactionDate());
                arTransactionHistory.setTransactionAmount(payment.getTransactionAmt());
                arTransactionHistory.setCustomerReferenceNumber(payment.getCustomerReferenceNo());
                arTransactionHistory.setVoyageNumber(payment.getVoyageNo());
                arTransactionHistory.setCheckNumber(payment.getChequeNumber());
                arTransactionHistory.setArBatchId(null);
                arTransactionHistory.setApBatchId(batchId);
                arTransactionHistory.setTransactionType("AP PY");
                arTransactionHistory.setCreatedBy(loginUser.getLoginName());
                arTransactionHistory.setCreatedDate(new Date());
                arTransactionHistoryDAO.save(arTransactionHistory);
                String invoiceOrBl = "";
                if (CommonUtils.isNotEmpty(transaction.getBillLaddingNo())) {
                    invoiceOrBl = transaction.getBillLaddingNo();
                } else {
                    invoiceOrBl = transaction.getInvoiceNumber();
                }
                if (CommonUtils.isEqualIgnoreCase(transaction.getCreditHold(), CommonConstants.YES)) {
                    if (transaction.isEmailed()) {
                        ArCreditHoldUtils.sendEmail(transaction, loginUser, false, imagePath);
                    }
                    transaction.setRemovedFromHold(true);
                    transaction.setEmailed(false);
                    transaction.setCreditHold(CommonConstants.NO);
                    StringBuilder notesDesc = new StringBuilder("BL# - ").append(invoiceOrBl).append(" of ");
                    notesDesc.append(transaction.getCustName()).append("(").append(transaction.getCustNo()).append(")");
                    notesDesc.append(" taken off credit hold by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
                    AuditNotesUtils.insertAuditNotes(notesDesc.toString(), NotesConstants.AR_INVOICE, transaction.getCustNo() + "-" + invoiceOrBl, "AR Credit Hold", loginUser);
                }
            } else {
                payment.setTransactionAmt(transaction.getBalance());
                ApTransactionHistory apTransactionHistory = new ApTransactionHistory(payment);
                apTransactionHistory.setInvoiceDate(transaction.getTransactionDate());
                apTransactionHistory.setAmount(-payment.getTransactionAmt());
                apTransactionHistory.setCreatedBy(loginUser.getLoginName());
                apTransactionHistoryDAO.save(apTransactionHistory);
            }
            payment.setGlAccountNumber(bankGLAccountNumber);
            payment.setBalance(new Double(0));
            payment.setBalanceInProcess(new Double(0));
            payment.setCreatedOn(new Date());
            payment.setCreatedBy(loginUser.getUserId());
            new TransactionDAO().save(payment);

            // Insert CD subledger for CHECK payment only for transaction type AR
            if (null != transaction.getTransactionType()
                    && transaction.getTransactionType().trim().equals(CommonConstants.TRANSACTION_TYPE_ACCOUNT_RECEIVABLE)) {
                TransactionLedger cdSubledger = new TransactionLedger(transaction);
                cdSubledger.setTransactionAmt((-1) * transaction.getBalance());
                cdSubledger.setBalance(new Double(0));
                cdSubledger.setBalanceInProcess(new Double(0));
                cdSubledger.setGlAccountNumber(LoadLogisoftProperties.getProperty(CommonConstants.AR_CONTROL_ACCOUNT));
                cdSubledger.setTransactionType(CommonConstants.TRANSACTION_TYPE_CASH_DEPOSIT);
                cdSubledger.setStatus(CommonConstants.STATUS_PAID);
                cdSubledger.setCleared(CommonConstants.NO);
                cdSubledger.setBankAccountNumber(aPPaymentForm.getBankAccountNumber());
                cdSubledger.setBankName(aPPaymentForm.getBankName());
                cdSubledger.setPostedDate(DateUtils.parseToDate(paymentDate));
                cdSubledger.setCustomerReferenceNo(batchId.toString());
                cdSubledger.setInvoiceNumber(null);
                cdSubledger.setTransactionDate(new Date());
                cdSubledger.setSubledgerSourceCode(CommonConstants.SUB_LEDGER_CODE_CASH_DEPOSIT);
                cdSubledger.setApBatchId(batchId);
                cdSubledger.setCreatedOn(new Date());
                cdSubledger.setCreatedBy(loginUser.getUserId());
                new TransactionLedgerDAO().save(cdSubledger);
            }

            //Update Fclblcostcode Paid date
            String paidDate = DateUtils.formatDate(DateUtils.parseDate(paymentDate, "MM/dd/yyyy"), "yyyy-MM-dd");
            new AccountingLedgerDAO().setPaidDateForAccrualCost(vendorNumber, transaction.getInvoiceNumber(), paidDate);
        }
        StringBuilder desc = new StringBuilder(paymentMethod).append(" Payment - '").append(batchId).append("' of Vendor '");
        desc.append(vendorName).append("(").append(vendorNumber).append(")'");
        desc.append(" for amount '").append(NumberUtils.formatNumber(paymentAmount, "###,###,##0.00")).append("'");
        desc.append(" paid by ").append(loginUser.getLoginName()).append(" on ").append(DateUtils.formatDate(new Date(), "MM/dd/yyyy"));
        AuditNotesUtils.insertAuditNotes(desc.toString(), NotesConstants.AP_PAYMENT, vendorNumber + "-" + batchId, NotesConstants.AP_PAYMENT, new Date(), loginUser);
        return true;
    }
}
