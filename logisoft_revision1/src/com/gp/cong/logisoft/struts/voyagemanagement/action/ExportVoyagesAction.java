/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.voyagemanagement.action;

import java.text.DateFormat;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.CarriersOrLineTemp;
import com.gp.cong.logisoft.domain.ChangeVoyage;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.VoyageExport;
import com.gp.cong.logisoft.hibernate.dao.CarriersOrLineDAO;
import com.gp.cong.logisoft.hibernate.dao.ChangeVoyageDAO;
import com.gp.cong.logisoft.struts.voyagemanagement.form.ExportVoyagesForm;

/** 
 * MyEclipse Struts
 * Creation date: 10-23-2008
 * 
 * XDoclet definition:
 * @struts.action path="/exportVoyages" name="exportVoyagesForm" input="/jsps/voyagemanagement/exportVoyages.jsp" scope="request" validate="true"
 */
public class ExportVoyagesAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception {
        ExportVoyagesForm exportVoyagesForm = (ExportVoyagesForm) form;// TODO Auto-generated method stub

        HttpSession session = ((HttpServletRequest) request).getSession();
        ChangeVoyage changevoyage = null;
        String forwardName = "";
        String buttonValue = "";

        //save values
        String sailDate1;
        String vessel1;
        String vesselName1;
        String pierNo1;
        String flightSsVoyage1;
        String lineNo1;
        String reasonCode;
        String reasonDescription;
        String singleSelect1;
        String singleSelect2;

        String sailDate;
        String lineNo;
        String vessel;
        String vesselName;
        String pierNo;
        String flightSsVoyage;

        buttonValue = exportVoyagesForm.getButtonValue();
        ChangeVoyage changeVoyage = null;


        //change and edit values
        CarriersOrLineTemp carriersOrLineTemp = new CarriersOrLineTemp();
        CarriersOrLineDAO carriersOrLineDAO = new CarriersOrLineDAO();
        sailDate1 = exportVoyagesForm.getSailDate1();
        vessel1 = exportVoyagesForm.getVessel1();
        vesselName1 = exportVoyagesForm.getVesselName1();
        pierNo1 = exportVoyagesForm.getPierNo1();
        flightSsVoyage1 = exportVoyagesForm.getFlightSsVoyage1();
        lineNo1 = exportVoyagesForm.getLineNo1();
        reasonCode = exportVoyagesForm.getReasonCode();
        reasonDescription = exportVoyagesForm.getReasonDescription();
        singleSelect1 = exportVoyagesForm.getSingleSelect1();
        singleSelect2 = exportVoyagesForm.getSingleSelect2();
        sailDate = exportVoyagesForm.getSailDate();
        lineNo = exportVoyagesForm.getLineNo();
        vessel = exportVoyagesForm.getVessel();
        vesselName = exportVoyagesForm.getVesselName();
        pierNo = exportVoyagesForm.getPierNo();
        flightSsVoyage = exportVoyagesForm.getFlightSsVoyage();
        VoyageExport voyageExport = new VoyageExport();

        if (request.getParameter("param") != null) {
            String param = request.getParameter("param");
            List changeVoyageList = (List) session.getAttribute("changeVoyageList");
            if (changeVoyageList != null && changeVoyageList.size() > 0) {
                for (int i = 0; i < changeVoyageList.size(); i++) {
                    changevoyage = (ChangeVoyage) changeVoyageList.get(i);
                    if (changevoyage.getId().equals(Integer.parseInt(param))) {
                        break;
                    }
                }
            }
            request.setAttribute("changevoyage", changevoyage);
            forwardName = "exportVoyages";
        }
        if (buttonValue != null && buttonValue.equals("popup1")) {
            changeVoyage = new ChangeVoyage();
            if (session.getAttribute("addvesselrecords1") != null) {
                VoyageExport v1 = (VoyageExport) session.getAttribute("addvesselrecords1");
                if (v1.getVesselNo() != null) {
                    changeVoyage.setNewvesselNo(v1.getVesselNo());
                }
            }
            if (sailDate1 != null && !sailDate1.equals("")) {
                DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                Date today = null;
                    today = df.parse(sailDate1);
                changeVoyage.setNewSailDate(today);
            }

            if (pierNo1 != null && !pierNo1.equals("")) {
                changeVoyage.setNewPier(pierNo1);

            }

            if (flightSsVoyage1 != null && !flightSsVoyage1.equals("")) {
                changeVoyage.setNewFlightSsVoyage(flightSsVoyage1);
            }

            if (lineNo1 != null && !lineNo1.equals("")) {

                List SSNo = carriersOrLineDAO.findForSSLine1(lineNo1);

                if (SSNo != null && SSNo.size() > 0) {
                    carriersOrLineTemp = (CarriersOrLineTemp) SSNo.get(0);
                    changeVoyage.setNewLineNo(carriersOrLineTemp);

                } else {
                    //request.setAttribute("message", "Please enter proper SS LINE number Code");
                    CarriersOrLineTemp c1 = null;
                    changeVoyage.setNewLineNo(c1);

                }
            }
            session.setAttribute("popup1", changeVoyage);
            forwardName = "exportVoyages";

        }
        if (buttonValue != null && buttonValue.equals("cancel")) {
            request.setAttribute("buttonValue", "completed");
            String path1 = "jsps/voyagemanagement/exportVoyage.jsp";
            request.setAttribute("path1", path1);
            if (session.getAttribute("popup1") != null) {
                session.removeAttribute("popup1");
            }

            if (session.getAttribute("addvesselrecords1") != null) {
                session.removeAttribute("addvesselrecords1");

            }
            if (session.getAttribute("VoyageReason") != null) {

                session.removeAttribute("VoyageReason");
            }
            if (session.getAttribute("searchvoyagerecords1") != null) {
                session.removeAttribute("searchvoyagerecords1");
            }
            forwardName = "exportVoyages";


        }

        if (buttonValue != null && buttonValue.equals("save")) {


            changeVoyage = new ChangeVoyage();
            ChangeVoyageDAO changedao = new ChangeVoyageDAO();


            if (session.getAttribute("voyageExport1") != null) {

                voyageExport = (VoyageExport) session.getAttribute("voyageExport1");
                changeVoyage.setVoyageId(voyageExport.getId());

            }

            if (session.getAttribute("voyageExport1") != null) {

                voyageExport = (VoyageExport) session.getAttribute("voyageExport1");
                GenericCode vesselNo = voyageExport.getVesselNo();
                changeVoyage.setOldvesselNo(vesselNo);

            }
            if (session.getAttribute("addvesselrecords1") != null) {
                VoyageExport v1 = (VoyageExport) session.getAttribute("addvesselrecords1");
                if (v1.getVesselNo() != null) {
                    changeVoyage.setNewvesselNo(v1.getVesselNo());
                }
            }

            if (sailDate != null && !sailDate.equals("")) {
                DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                Date today = null;
                    today = df.parse(sailDate);
                changeVoyage.setOldSailDate(today);
            }
            if (sailDate1 != null && !sailDate1.equals("")) {
                DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                Date today = null;
                    today = df.parse(sailDate1);
                changeVoyage.setNewSailDate(today);
            }
            if (pierNo != null && !pierNo.equals("")) {
                changeVoyage.setOldPier(pierNo);

            }
            if (pierNo1 != null && !pierNo1.equals("")) {
                changeVoyage.setNewPier(pierNo1);

            }
            if (flightSsVoyage != null && !flightSsVoyage.equals("")) {
                changeVoyage.setOldFlightSsVoyage(flightSsVoyage);
            }
            if (flightSsVoyage1 != null && !flightSsVoyage1.equals("")) {
                changeVoyage.setNewFlightSsVoyage(flightSsVoyage1);
            }
            if (lineNo != null && !lineNo.equals("")) {

                List SSNo1 = carriersOrLineDAO.findForSSLine1(lineNo);

                if (SSNo1 != null && SSNo1.size() > 0) {
                    carriersOrLineTemp = (CarriersOrLineTemp) SSNo1.get(0);
                    changeVoyage.setOldLineNo(carriersOrLineTemp);

                } else {
                    //request.setAttribute("message", "Please enter proper SS LINE number Code");
                    CarriersOrLineTemp c1 = null;
                    changeVoyage.setOldLineNo(c1);

                }
            }
            if (lineNo1 != null && !lineNo1.equals("")) {

                List SSNo2 = carriersOrLineDAO.findForSSLine1(lineNo1);

                if (SSNo2 != null && SSNo2.size() > 0) {
                    carriersOrLineTemp = (CarriersOrLineTemp) SSNo2.get(0);
                    changeVoyage.setNewLineNo(carriersOrLineTemp);

                } else {
                    //request.setAttribute("message", "Please enter proper SS LINE number Code");
                    CarriersOrLineTemp c1 = null;
                    changeVoyage.setNewLineNo(c1);

                }
            }

            if (reasonCode != null && !reasonCode.equals("")) {
                    changeVoyage.setCodetypeid(Integer.parseInt(reasonCode));
            }
            if (reasonDescription != null && !reasonDescription.equalsIgnoreCase("")) {
                changeVoyage.setCodeDescription(reasonDescription);
            }
            if (singleSelect1 != null && !singleSelect1.equals("")) {
                if (singleSelect1.equals("y")) {
                    changeVoyage.setNotifyCustomer("y");
                } else {
                    changeVoyage.setNotifyCustomer("n");
                }

            }


            if (singleSelect2 != null && !singleSelect2.equals("")) {

                if (singleSelect2.equals("y")) {
                    changeVoyage.setNotifyEci("y");
                } else {
                    changeVoyage.setNotifyEci("n");
                }
            }
            if (session.getAttribute("loginuser") != null) {
                User userid1 = (User) session.getAttribute("loginuser");
                changeVoyage.setUserName(userid1.getLoginName());
            }
            changeVoyage.setDateModified(new Date());
            Date dt = new Date();
            String hr = String.valueOf(dt.getHours());
            String min = String.valueOf(dt.getMinutes());
            String currenttime = hr.concat(":" + min);
            changeVoyage.setTimeModified(currenttime);
            changedao.save(changeVoyage);
            session.setAttribute("changevoyage", changeVoyage);
            forwardName = "exportVoyages";
            if (session.getAttribute("popup1") != null) {
                session.removeAttribute("popup1");
            }

            if (session.getAttribute("addvesselrecords1") != null) {
                session.removeAttribute("addvesselrecords1");

            }
            if (session.getAttribute("VoyageReason") != null) {

                session.removeAttribute("VoyageReason");
            }
            if (session.getAttribute("searchvoyagerecords1") != null) {
                session.removeAttribute("searchvoyagerecords1");
            }
        }








        return mapping.findForward(forwardName);

    }
}