/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.voyagemanagement.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.CarriersOrLineTemp;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.VoyageExport;
import com.gp.cong.logisoft.hibernate.dao.CarriersOrLineDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.hibernate.dao.VoyageExportDAO;
import com.gp.cong.logisoft.struts.voyagemanagement.form.SearchVoyageForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 08-12-2008
 * 
 * XDoclet definition:
 * @struts.action path="/searchVoyage" name="searchVoyageForm" input="/jsps/voyagemanagement/searchVoyage.jsp" scope="request" validate="true"
 */
public class SearchVoyageAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        SearchVoyageForm searchVoyageForm = (SearchVoyageForm) form;// TODO Auto-generated method stub
        String button = searchVoyageForm.getButtonValue();
        String buttonValue = searchVoyageForm.getButtonValue();
        String get = searchVoyageForm.getIndex();
        String match = searchVoyageForm.getMatch();
        String trmNum = searchVoyageForm.getTerminalNumber();
        String tername = searchVoyageForm.getTerminalName();
        String portNum = searchVoyageForm.getDestSheduleNumber();
        String portName = searchVoyageForm.getDestAirportname();
        String comCode = searchVoyageForm.getComCode();
        String sslineNO = searchVoyageForm.getSslinenumber();
        String ssName = searchVoyageForm.getSslinename();
        CarriersOrLineDAO carriersOrLineDAO = new CarriersOrLineDAO();
        CarriersOrLineTemp carriersOrLineTemp = null;
        RefTerminalDAO refTerminalDAO = new RefTerminalDAO();
        PortsDAO portsDAO = new PortsDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        List voyageList = new ArrayList();
        //RefTerminalTemp origin=null;
        //PortsTemp dest=null;
        CarriersOrLineTemp carries = null;
        GenericCode genericCode = null;
        RefTerminalTemp refObj = null;
        PortsTemp destObj = null;
        CarriersOrLineTemp comObj = null;
        VoyageExportDAO voyagemasterDAO = new VoyageExportDAO();
        String loginName = "";
        String msg = "";
        String forwardName = "";
        DBUtil dbUtil = new DBUtil();
        String message = "";
        RefTerminalTemp refTerminal = null;
        VoyageExport voyageExport = new VoyageExport();
        GenericCode gen = null;
        PortsTemp ports = null;
        HttpSession session = ((HttpServletRequest) request).getSession();
        if (request.getParameter("ind") != null) {


            String ind = request.getParameter("ind").toString();

        }
        //FclBuy fclBuy=new FclBuy();

        if (buttonValue != null && buttonValue.equals("hello")) {
            String hello = "";
            if (match.equals("match")) {
                hello = "yes";
                session.setAttribute("yes", hello);

            }
            if (match.equals("starts")) {

                hello = "no";
                session.setAttribute("yes", hello);
            }


        }

        if (buttonValue != null && buttonValue.equals("popupsearch")) {

            if (trmNum != null && !trmNum.equals("")) {

                refTerminal = refTerminalDAO.findById1(trmNum);
                if (refTerminal != null) {
                    voyageExport.setOriginTerminal(refTerminal);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                }

            }

            if (tername != null && !tername.equals("")) {

                RefTerminalTemp refTerminalobj = null;
                List terminal = refTerminalDAO.findForManagement(null, tername, null, null);
                Iterator iter = terminal.iterator();
                if (terminal.size() > 0) {
                    refTerminalobj = (RefTerminalTemp) terminal.get(0);
                }
                if (refTerminalobj != null) {
                    voyageExport.setOriginTerminal(refTerminalobj);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                }

            }

            if (portNum != null && !portNum.equals("")) {

                List portsList = portsDAO.findPortCode(portNum, "0001");
                if (portsList != null && portsList.size() > 0) {
                    destObj = (PortsTemp) portsList.get(0);
                    voyageExport.setDestinationPort(destObj);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                }

            }
            if (portName != null && !portName.equals("")) {

                List portsList = portsDAO.findPierCode(null, portName);
                if (portsList != null && portsList.size() > 0) {

                    destObj = (PortsTemp) portsList.get(0);
                    voyageExport.setDestinationPort(destObj);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                }
            }

            if (sslineNO != null && !sslineNO.equals("")) {

                List codeList = carriersOrLineDAO.findForSSLine1(sslineNO);
                if (codeList != null && codeList.size() > 0) {
                    carries = (CarriersOrLineTemp) codeList.get(0);
                    voyageExport.setLineNo(carries);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                }
            }

            if (ssName != null && !ssName.equals("")) {

                List codeList = carriersOrLineDAO.findForSSLine(null, ssName);
                if (codeList != null && codeList.size() > 0) {
                    carries = (CarriersOrLineTemp) codeList.get(0);
                    voyageExport.setLineNo(carries);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                }
            }


            forwardName = "searchvoyage";
        }
        if (buttonValue != null && buttonValue.equals("search")) {
            String hello = "";
            if (match.equals("match")) {
                hello = "yes";
                session.setAttribute("yes", hello);

            }
            if (match.equals("starts")) {

                hello = "no";
                session.setAttribute("yes", hello);
            }


            if (session.getAttribute("searchvoyagerecords") != null) {
                voyageExport = (VoyageExport) session.getAttribute("searchvoyagerecords");
            }

            if (trmNum != null && !trmNum.equals("")) {
                refTerminal = refTerminalDAO.findById1(trmNum);
                if (refTerminal != null) {
                    voyageExport.setOriginTerminal(refTerminal);

                    session.setAttribute("searchvoyagerecords", voyageExport);
                } else {


                    request.setAttribute("warning", "Please enter proper terminal number");
                }
            } else {
                RefTerminalTemp ref = null;
                voyageExport.setOriginTerminal(ref);
                session.setAttribute("searchvoyagerecords", voyageExport);
            }

            if (portNum != null && !portNum.equals("")) {
                List portsList = portsDAO.findports(portNum);
                if (portsList != null && portsList.size() > 0) {
                    ports = (PortsTemp) portsList.get(0);

                    voyageExport.setDestinationPort(ports);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                } else {

                    request.setAttribute("warning", "Please enter proper Destination Port");
                }
            } else {
                PortsTemp p1 = null;
                voyageExport.setDestinationPort(p1);
                session.setAttribute("searchvoyagerecords", voyageExport);
            }
            if (comCode != null && !comCode.equals("") && !comCode.equals("%")) {
                List comList = genericCodeDAO.findForGenericCode(comCode);
                if (comList != null && comList.size() > 0) {
                    gen = (GenericCode) comList.get(0);

                    voyageExport.setComNum(gen);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                } else {

                    request.setAttribute("warning", "Please enter proper Commodity Code");
                }
            } else {
                GenericCode g1 = null;
                voyageExport.setComNum(g1);
                session.setAttribute("searchvoyagerecords", voyageExport);
            }

            if (sslineNO != null && !sslineNO.equals("")) {
                List SSNo = carriersOrLineDAO.findForSSLine1(sslineNO);
                if (SSNo != null && SSNo.size() > 0) {
                    carriersOrLineTemp = (CarriersOrLineTemp) SSNo.get(0);

                    voyageExport.setLineNo(carriersOrLineTemp);
                    session.setAttribute("searchvoyagerecords", voyageExport);
                } else {

                    request.setAttribute("warning", "Please enter proper SS LINE number Code");
                }
            } else {
                CarriersOrLineTemp c1 = null;
                voyageExport.setLineNo(c1);
                session.setAttribute("searchvoyagerecords", voyageExport);
            }
            session.setAttribute("addvoyagerecords", voyageExport);


            refObj = voyageExport.getOriginTerminal();
            destObj = voyageExport.getDestinationPort();
            comObj = voyageExport.getLineNo();

            if (get != null && !get.equals("")) {
                if (session.getAttribute("voyageRatescaption") != null) {
                    session.removeAttribute("voyageRatescaption");


                }
                if (match.equals("match")) {


                    if (request.getAttribute("warning") == null) {

                        if ((trmNum != null && portNum != null) || sslineNO != null) {

                            List searchvoyageList = voyagemasterDAO.findForSearchVoyageRatesmatch(trmNum, portNum, sslineNO, match);



                            if (trmNum != null && portNum != null && sslineNO != null) {
                                for (int k = 0; k < searchvoyageList.size(); k++) {
                                    voyageExport = (VoyageExport) searchvoyageList.get(k);

                                }


                            }
                            session.setAttribute("searchvoyageList", searchvoyageList);

                        }
                    }

                    session.setAttribute("voyageRatescaption", "Export Voyages {Match Only}");
                } else if (match.equals("starts")) {

                    List searchvoyageList = voyagemasterDAO.findForSearchVoyageRatesstarts(trmNum, portNum, sslineNO, match);


                    if (trmNum != null && portNum != null) {

                        List ftf = voyagemasterDAO.getRecordsForComm(refObj, destObj);
                        for (int i = 0; i < ftf.size(); i++) {
                            VoyageExport ftfMaster1 = (VoyageExport) ftf.get(i);
                            searchvoyageList.add(ftfMaster1);
                        }
                        for (int k = 0; k < searchvoyageList.size(); k++) {
                            voyageExport = (VoyageExport) searchvoyageList.get(k);

                        }


                    }

                    session.setAttribute("searchvoyageList", searchvoyageList);
                    session.setAttribute("voyageRatescaption", "Export Voyages {start at list}");

                }


            }
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");

            }
            if (session.getAttribute("view") != null) {

                session.removeAttribute("view");
            }


            forwardName = "searchvoyage";

        }

        if (request.getParameter("paramid") != null) {

            if (session.getAttribute("view") != null) {

                session.removeAttribute("view");
            }
            if (session.getAttribute("voyageExport1") != null) {
                session.removeAttribute("voyageExport1");
            }
            if (session.getAttribute("voyageeditrecord") != null) {
                session.removeAttribute("voyageeditrecord");
            }
            if (request.getAttribute("voyageExprt") != null) {

                session.removeAttribute("voyageExprt");
            }
            /*
            voyageMasterDAO voyageExport1=new voyageMasterDAO();

            int param=Integer.parseInt(request.getParameter("paramid"));
            String param1=request.getParameter("paramid");

            session.setAttribute("param",param1);




            voyageExport =voyageExport1.findById(Integer.parseInt(request.getParameter("paramid")));

             */
            User userid = null;
            UserDAO user1 = new UserDAO();
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("addvesselrecords") != null) {
                session.removeAttribute("addvesselrecords");
            }
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
            ProcessInfo pi = new ProcessInfo();
            String programid = null;
            programid = (String) session.getAttribute("processinfoforExport");
            String recordid = "";

            if (voyageExport.getId() != null) {
                recordid = voyageExport.getId().toString();
            }

            String editstatus = "startedited";
            String deletestatus = "startdeleted";
            ProcessInfo processinfoobj = null;
            if (programid != null && !programid.equals("")) {
                processinfoobj = processinfoDAO.findById(Integer.parseInt(programid), recordid, deletestatus, editstatus);
            }


            if (processinfoobj != null) {
                //String view="3";
                User loginuser = user1.findById(processinfoobj.getUserid());
                loginName = loginuser.getLoginName();
                msg = "This record is being used by ";
                message = msg + loginName;
                session.setAttribute("usermessage", message);
                //session.setAttribute("view", view);
                forwardName = "voyageparam";
            } else {
                pi.setUserid(userid.getUserId());
                if (programid != null && !programid.equals("")) {
                    pi.setProgramid(Integer.parseInt(programid));
                }
                java.util.Date currdate = new java.util.Date();
                pi.setProcessinfodate(currdate);
                pi.setEditstatus(editstatus);
                pi.setRecordid(recordid);
                processinfoDAO.save(pi);
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }



            }
            if (session.getAttribute("closed") != null) {

                session.removeAttribute("closed");
            }

            if (session.getAttribute("audited") != null) {
                session.removeAttribute("audited");
            }

            session.setAttribute("voyagerate", "edit");
            session.setAttribute("voyageExport1", voyageExport);
            forwardName = "voyageparam";

        }

        if (request.getParameter("ind") != null) {
            int index = Integer.parseInt(request.getParameter("ind"));



            List searchvoyageList = (List) session.getAttribute("searchvoyageList");
            session.setAttribute("searchvoyageList", searchvoyageList);
            VoyageExport exp = new VoyageExport();
            //exp=(VoyageExport)searchvoyageList.get(index);

            if (session.getAttribute("exportvoyages") != null) {

                session.removeAttribute("exportvoyages");
            }
            if (request.getAttribute("voyageExprt") != null) {

                session.removeAttribute("voyageExprt");
            }
            if (session.getAttribute("addvoyagerecords") != null) {
                session.removeAttribute("addvoyagerecords");
            }
            if (session.getAttribute("exportvoyageport") != null) {
                session.removeAttribute("exportvoyageport");
            }
            if (session.getAttribute("addvesselrecords") != null) {
                session.removeAttribute("addvesselrecords");
            }
            if (session.getAttribute("voyagerecords") != null) {
                session.removeAttribute("voyagerecords");
            }
            if (session.getAttribute("changevoyage") != null) {
                session.removeAttribute("changevoyage");
            }
            if (session.getAttribute("voyageExportPopup") != null) {
                session.removeAttribute("voyageExportPopup");
            }
            session.setAttribute("voyageExport1", searchvoyageList.get(index));

            session.setAttribute("voyageeditrecord", "edit");
            //session.setAttribute("index",index);
            forwardName = "voyageparam";

        }
        if (request.getParameter("param") != null) {
            String view = "3";
            session.setAttribute("view", view);
            int id = Integer.parseInt(request.getParameter("param"));
            //voyageMasterDAO voyageExport1=new voyageMasterDAO();
            //voyageExport =voyageExport1.findById(Integer.parseInt(request.getParameter("param")));
            List searchvoyageList = (List) session.getAttribute("searchvoyageList");
            session.setAttribute("searchvoyageList", searchvoyageList);

            if (searchvoyageList != null && searchvoyageList.size() > 0) {
                for (int i = 0; i < searchvoyageList.size(); i++) {
                    VoyageExport voyageFromSession = (VoyageExport) searchvoyageList.get(i);

                    if (voyageFromSession.getId().equals(id)) {

                        session.setAttribute("voyageExport1", searchvoyageList.get(i));
                        break;
                    }
                }

            }

            //	session.setAttribute("voyageeditrecord","edit");

            forwardName = "voyageparam";
        }

        return mapping.findForward(forwardName);

    }
}