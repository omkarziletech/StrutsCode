/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.voyagemanagement.action;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditVoyageInland;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.VoyageInland;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.VoyageInlandDAO;
import com.gp.cong.logisoft.hibernate.dao.voyageMasterDAO;
import com.gp.cong.logisoft.struts.voyagemanagement.form.InlandVoyageForm;
import com.gp.cong.logisoft.util.DBUtil;

/**
 * MyEclipse Struts Creation date: 08-13-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/inlandVoyage" name="inlandVoyageForm"
 *                input="/jsps/voyagemanagement/inlandVoyage.jsp"
 *                scope="request" validate="true"
 */
public class InlandVoyageAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)  throws Exception {
        InlandVoyageForm inlandVoyageForm = (InlandVoyageForm) form;
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = inlandVoyageForm.getButtonValue();
        String departDate = inlandVoyageForm.getDeparDate();
        String destination = inlandVoyageForm.getDestination();
        String destTerminal = inlandVoyageForm.getDestTerminal();
        String index = inlandVoyageForm.getIndex();

        String inlandVoyNo = inlandVoyageForm.getInlandVoyNo();

        String loadedDate = inlandVoyageForm.getLoadedDate();

        String optITPort = inlandVoyageForm.getOptITPort();

        String origin = inlandVoyageForm.getOrigin();

        String origTerminal = inlandVoyageForm.getOrigTerminal();

        String portName = inlandVoyageForm.getPortName();

        String ssVoyageNo = inlandVoyageForm.getSsVoyageNo();

        String terArrvlDate = inlandVoyageForm.getTerArrvlDate();

        String txtItemcreated = inlandVoyageForm.getTxtItemcreated();

        String txtItemcreatedo = inlandVoyageForm.getTxtItemcreatedo();

        String txtItemcreatedon = inlandVoyageForm.getTxtItemcreatedon();

        String vesselName = inlandVoyageForm.getVesselName();

        String vesselNum = inlandVoyageForm.getVesselNum();

        String message = "";
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        GenericCode genericCo = null;
        // String SsVoyageNo=inlandVoyageForm.getSsVoyageNo();
        String Forward = "InlandVyge";
        PortsDAO portsDAO = new PortsDAO();
        RefTerminalDAO refTerminalDAO = new RefTerminalDAO();

        String recordid = "";
        String programid = null;
        DBUtil dbUtil = new DBUtil();
        VoyageInlandDAO voyageInlandDAO = new VoyageInlandDAO();
        VoyageInland voyageInland = null;
        voyageMasterDAO voyagemasterDAO = new voyageMasterDAO();
        List searchinlandList = new ArrayList();


        if (session.getAttribute("voyageInlnd") == null) {
            voyageInland = new VoyageInland();
        } else {
            voyageInland = (VoyageInland) session.getAttribute("voyageInlnd");
        }

        if (ssVoyageNo != null && !ssVoyageNo.equals("")) {
            voyageInland.setSslVoyageNo(ssVoyageNo);
        }
        if (departDate != null && departDate != "") {

            Date departDt = null;
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                departDt = sdf.parse(departDate);
            voyageInland.setDateOfDeparture(departDt);
        }

        if (terArrvlDate != null && terArrvlDate != "") {
            Date terArrvlDt = null;
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                terArrvlDt = sdf.parse(terArrvlDate);
            voyageInland.setDateTerminalArrival(terArrvlDt);
        }
        session.setAttribute("voyageInlnd", voyageInland);
        if (buttonValue != null && !buttonValue.equals("") && buttonValue.equals("closed")) {
            String yes = "";
            session.setAttribute("yes", yes);


        }
        if (buttonValue != null && !buttonValue.equals("") && buttonValue.equals("audit")) {
            String no = "";
            session.setAttribute("no", no);



        }
        // EDIT STARTS

        if (buttonValue.equals("edit") && buttonValue != null && !buttonValue.equals("")) {

            if (session.getAttribute("voyageInland1") != null) {

                voyageInland = (VoyageInland) session.getAttribute("voyageInland1");
            // session.removeAttribute("voyageInland1");
            }

            /*
             * if(session.getAttribute("editInland")!=null) {
             * voyageInland=(VoyageInland)session.getAttribute("editInland"); }
             * else { System.out.println("INSIDE
             * ELSEEEEEEEEEEEEEEEEEEEEEEEEEEEEEe"); voyageInland=new
             * VoyageInland(); }
             */


            /*
             * if(session.getAttribute("searchinlandList")!=null) {
             * searchinlandList=(List)session.getAttribute("searchinlandList");
             * for(int i=0;i<searchinlandList.size();i++) {
             */
            // voyageInland=(VoyageInland)searchinlandList.get(i);
            if (voyageInland.getId() != null) {
                voyageInland.setId(voyageInland.getId());
                // for update

                if (ssVoyageNo != null && !ssVoyageNo.equals("")) {
                    voyageInland.setSslVoyageNo(ssVoyageNo);
                }

                if (departDate != null && departDate != "") {
                    Date departDt = null;
                        SimpleDateFormat sdf = new SimpleDateFormat(
                                "MM/dd/yyyy");
                        departDt = sdf.parse(departDate);
                    voyageInland.setDateOfDeparture(departDt);
                }

                if (terArrvlDate != null && terArrvlDate != "") {
                    Date terArrvlDt = null;
                        SimpleDateFormat sdf = new SimpleDateFormat(
                                "MM/dd/yyyy");
                        terArrvlDt = sdf.parse(terArrvlDate);
                    voyageInland.setDateTerminalArrival(terArrvlDt);
                }

                if (origin != null && !origin.equals("")) {
                    RefTerminalTemp refTerminal = refTerminalDAO.findById1(origin);
                    if (refTerminal != null) {
                        voyageInland.setScheduleDkOrigin(refTerminal);
                        session.setAttribute("inlandvoyages", voyageInland);
                    } else {

                        // request.setAttribute("message", "Please enter proper
                        // terminal number");
                        RefTerminalTemp r1 = null;
                        voyageInland.setScheduleDkOrigin(r1);

                    }
                } else {
                    RefTerminalTemp r1 = null;
                    voyageInland.setScheduleDkOrigin(r1);
                }

                if (destination != null && !destination.equals("")) {
                    List portsList = portsDAO.findports(destination);
                    if (portsList != null && portsList.size() > 0) {
                        PortsTemp ports = (PortsTemp) portsList.get(0);
                        voyageInland.setScheduleDkDestination(ports);

                    } else {

                        // request.setAttribute("message", "Please enter proper
                        // Destination Port");
                        PortsTemp p1 = null;
                        voyageInland.setScheduleDkDestination(p1);

                    }
                } else {
                    PortsTemp p1 = null;
                    voyageInland.setScheduleDkDestination(p1);

                }
                session.setAttribute("inlandvoyages", voyageInland);

                if (optITPort != null && !optITPort.equals("")) {
                    List portsList = portsDAO.findports(optITPort);

                    if (portsList != null && portsList.size() > 0) {
                        PortsTemp ports = (PortsTemp) portsList.get(0);
                        voyageInland.setOptItPortNo(ports);

                    } else {

                        // request.setAttribute("message", "Please enter proper
                        // Destination Port");
                        PortsTemp p1 = null;
                        voyageInland.setOptItPortNo(p1);

                    }
                } else {
                    PortsTemp p1 = null;
                    voyageInland.setOptItPortNo(p1);

                }

                if (session.getAttribute("inlandvesselrecords") != null) {
                    VoyageInland v1 = (VoyageInland) session.getAttribute("inlandvesselrecords");
                    if (v1.getVesselNo() != null) {
                        voyageInland.setVesselNo(v1.getVesselNo());
                    }
                }
                // update ends
                User userid = null;
                if (session.getAttribute("loginuser") != null) {
                    userid = (User) session.getAttribute("loginuser");
                }
                if (session.getAttribute("yes") != null) {


                    voyageInland.setClosed("c");

                    SimpleDateFormat sdformat = new SimpleDateFormat();
                    Date dt = new Date();
                    voyageInland.setClosedDate(dt);
                    String hr = String.valueOf(dt.getHours());
                    String min = String.valueOf(dt.getMinutes());
                    String currenttime = hr.concat(":" + min);

                    String systemtime = sdformat.format(dt);

                    voyageInland.setClosedTime(currenttime);
                    User userid1 = null;
                    if (session.getAttribute("loginuser") != null) {
                        userid1 = (User) session.getAttribute("loginuser");
                    }
                    voyageInland.setClosedUser(userid1.getLoginName());

                }

                if (session.getAttribute("no") != null) {

                    voyageInland.setAudited("A");
                    voyageInland.setAuditedDate(new Date());
                    User userid1 = null;
                    if (session.getAttribute("loginuser") != null) {
                        userid1 = (User) session.getAttribute("loginuser");
                    }
                    voyageInland.setAuditedUser(userid1.getLoginName());
                    Date dt = new Date();
                    String hr = String.valueOf(dt.getHours());
                    String min = String.valueOf(dt.getMinutes());
                    String currenttime = hr.concat(":" + min);
                    voyageInland.setAuditedTime(currenttime);

                }




                voyageInlandDAO.update(voyageInland, userid.getLoginName());
                List searchList = new ArrayList();
                searchList.add(voyageInland);
                session.setAttribute("searchinlandList", searchList);
                session.setAttribute("hello", voyageInland);
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }
            }
            // }
            // }
            message = "Voyage details Edited successfully";
            if (session.getAttribute("yes") != null) {

                session.removeAttribute("yes");

            }
            if (session.getAttribute("no") != null) {

                session.removeAttribute("no");
            }
            if (session.getAttribute("addinlandrecords") != null) {

                session.removeAttribute("addinlandrecords");
            }
            if (session.getAttribute("searchinlandrecords") != null) {

                session.removeAttribute("searchinlandrecords");
            }
            session.setAttribute("inlandmessage", message);
            session.setAttribute("editInland", voyageInland);


            session.setAttribute("trade", "inlandrate");
            Forward = "InlandVoyage";
        }
        // EDIT ENDS

        if (buttonValue.equals("popup") && buttonValue != null && !buttonValue.equals("")) {

            voyageInland = new VoyageInland();
            if (terArrvlDate != null && terArrvlDate != "") {
                Date terArrvlDt = null;
                    DateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    terArrvlDt = sdf.parse(terArrvlDate);
                voyageInland.setDateTerminalArrival(terArrvlDt);
            }
            if (departDate != null && departDate != "") {
                Date departDt = null;
                    DateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    departDt = sdf.parse(departDate);

                voyageInland.setDateOfDeparture(departDt);
            }
            if (ssVoyageNo != null && !ssVoyageNo.equals("")) {
                voyageInland.setSslVoyageNo(ssVoyageNo);
            }
            session.setAttribute("voyagepopup", voyageInland);

        }
        if (buttonValue.equals("save") && buttonValue != null && !buttonValue.equals("")) {


            /*
             * if(session.getAttribute("inlandvoyages")!=null) {
             * voyageInland=(VoyageInland)session.getAttribute("inlandvoyages"); }
             * else{
             *
             * voyageInland=new VoyageInland(); }
             */
            voyageInland = new VoyageInland();

            if (session.getAttribute("addinlandrecords") != null) {
                voyageInland = (VoyageInland) session.getAttribute("addinlandrecords");

                voyageInland.setOriginTerminal(voyageInland.getOriginTerminal());

                voyageInland.setDestTerminal(voyageInland.getDestTerminal());
                voyageInland.setInlandVoyageNo(voyageInland.getInlandVoyageNo());
                voyageInland.setDateLoaded(voyageInland.getDateLoaded());

            }


            if (ssVoyageNo != null && !ssVoyageNo.equals("")) {
                voyageInland.setSslVoyageNo(ssVoyageNo);
            }



            voyageInland.setDateOfDeparture(null);
            if (departDate != null && departDate != "") {

                Date departDt = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    departDt = sdf.parse(departDate);


                voyageInland.setDateOfDeparture(departDt);
            }

            voyageInland.setDateTerminalArrival(null);
            if (terArrvlDate != null && terArrvlDate != "") {
                Date terArrvlDt = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    terArrvlDt = sdf.parse(terArrvlDate);
                voyageInland.setDateTerminalArrival(terArrvlDt);
            }

            if (origin != null && !origin.equals("")) {
                RefTerminalTemp refTerminal = refTerminalDAO.findById1(origin);
                if (refTerminal != null) {
                    voyageInland.setScheduleDkOrigin(refTerminal);
                    session.setAttribute("inlandvoyages", voyageInland);
                } else {

                    // request.setAttribute("message", "Please enter proper
                    // terminal number");
                    RefTerminalTemp r1 = null;
                    voyageInland.setScheduleDkOrigin(r1);

                }
            } else {
                RefTerminalTemp r1 = null;
                voyageInland.setScheduleDkOrigin(r1);
            }

            if (destination != null && !destination.equals("")) {
                List portsList = portsDAO.findports(destination);
                if (portsList != null && portsList.size() > 0) {
                    PortsTemp ports = (PortsTemp) portsList.get(0);
                    voyageInland.setScheduleDkDestination(ports);

                } else {

                    // request.setAttribute("message", "Please enter proper
                    // Destination Port");
                    PortsTemp p1 = null;
                    voyageInland.setScheduleDkDestination(p1);

                }
            } else {
                PortsTemp p1 = null;
                voyageInland.setScheduleDkDestination(p1);

            }
            session.setAttribute("inlandvoyages", voyageInland);

            if (optITPort != null && !optITPort.equals("")) {
                List portsList = portsDAO.findports(optITPort);

                if (portsList != null && portsList.size() > 0) {
                    PortsTemp ports = (PortsTemp) portsList.get(0);
                    voyageInland.setOptItPortNo(ports);

                } else {

                    // request.setAttribute("message", "Please enter proper
                    // Destination Port");
                    PortsTemp p1 = null;
                    voyageInland.setOptItPortNo(p1);

                }
            } else {
                PortsTemp p1 = null;
                voyageInland.setOptItPortNo(p1);

            }
            if (session.getAttribute("inlandvesselrecords") != null) {
                VoyageInland v1 = (VoyageInland) session.getAttribute("inlandvesselrecords");
                if (v1.getVesselNo() != null) {
                    voyageInland.setVesselNo(v1.getVesselNo());
                }
            }
            GenericCodeDAO genericdao = new GenericCodeDAO();
            voyageInland.setVesselNo(null);
            if (vesselNum != null && !vesselNum.equals("")) {
                List vesselList = genericdao.findForVesselNo(vesselNum);
                if (vesselList != null && vesselList.size() > 0) {
                    GenericCode vesselNo = (GenericCode) vesselList.get(0);
                    voyageInland.setVesselNo(vesselNo);

                } else {

                    GenericCode vesselNo = null;
                    voyageInland.setVesselNo(vesselNo);
                }

            }
            /*
             * if(vesselNum!=null && !vesselNum.equals("")) {

             * GenericCode
             * genericCode=genericCodeDAO.findById1(Integer.parseInt(vesselNum));

             * if(genericCode!=null)

             * voyageInland.setVesselNo(genericCode); } else {
            //request.setAttribute("message",
             * "Please enter proper terminal number"); GenericCode r2=null;
             * voyageInland.setVesselNo(r2); } }
             *
             * else { GenericCode r2=null; voyageInland.setVesselNo(r2); }
             */

            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }

            voyageInlandDAO.save(voyageInland, userId.getLoginName());
            searchinlandList.add(voyageInland);
            session.setAttribute("searchinlandList", searchinlandList);
            if (session.getAttribute("inlandvoyages") != null) {
                session.removeAttribute("inlandvoyages");
            }
            if (session.getAttribute("voyageInland1") != null) {
                session.removeAttribute("voyageInland1");
            }
            if (request.getAttribute("searchinlandrecords") != null) {

                session.removeAttribute("searchinlandrecords");
            }
            if (session.getAttribute("inlandvoyages") != null) {
                session.removeAttribute("inlandvoyages");
            }
            if (session.getAttribute("editInland") != null) {
                session.removeAttribute("editInland");
            }
            if (session.getAttribute("addinlandrecords") != null) {

                session.removeAttribute("addinlandrecords");
            }
            /*
             * if (session.getAttribute("searchinlandList") != null) {
             *
             * session.removeAttribute("searchinlandList"); }
             */
            Forward = "InlandVoyage";
        } // SAVE ENDS
        // DELETE STARTS
        else if (buttonValue != null && buttonValue.equals("delete")) {
            List searchinlandList1 = (List) session.getAttribute("searchinlandList");

            programid = (String) session.getAttribute("processinfoforInland");

            if (session.getAttribute("voyageInland1") != null) {
                voyageInland = (VoyageInland) session.getAttribute("voyageInland1");

            } else {

                voyageInland = new VoyageInland();
            }
            if (voyageInland != null && voyageInland.getId() != null) {
                recordid = voyageInland.getId().toString();
            }
            /*
             * for(int i=0;i<searchinlandList1.size();i++) {
             * voyageInland=(VoyageInland)searchinlandList1.get(i);
             */

            if (voyageInland.getId() != null) {
                searchinlandList1.remove(voyageInland);

                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                voyageInlandDAO.delete(voyageInland, userId.getLoginName());
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
                message = "Inland Voyage details deleted successfully";
                session.setAttribute("inlandmessage", message);
                session.setAttribute("trade", "inlandrate");
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }
                if (session.getAttribute("searchinlandList") != null) {

                    session.removeAttribute("searchinlandList");

                }
                Forward = "InlandVoyage";
            }
        // }
        }
        // Delete Ends

        // Note Starts
        if (buttonValue != null && buttonValue.equals("note")) {
            if (session.getAttribute("voyageInland1") != null) {
                voyageInland = (VoyageInland) session.getAttribute("voyageInland1");
            }


            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            String noteId = "";
            if (session.getAttribute("processinfoforInland") != null) {
                String itemId = (String) session.getAttribute("processinfoforInland");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();

            }

            // Forward="note";
            AuditLogRecord auditLogRecord = new AuditVoyageInland();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            // noteBean.setUser(user);

            if (voyageInland.getId() != null) {
                noteId = voyageInland.getId().toString();


                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }
            // noteBean.setReferenceId("185");
            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            noteBean.setPageName("cancelinland");
            request.setAttribute("noteBean", noteBean);
            String documentName = "User";
            request.setAttribute("buttonValue", buttonValue);
            // session.setAttribute("document",documentName);

            request.setAttribute("inlandnotes", "inlandnotes");
            Forward = "note";
        }
        // Note Ends
        if (buttonValue != null && buttonValue.equals("cancel")) {


            if (session.getAttribute("inlandvoyages") != null) {
                session.removeAttribute("inlandvoyages");
            }
            if (session.getAttribute("voyageInlnd") != null) {

                session.removeAttribute("voyageInlnd");

            }
            if (session.getAttribute("editInland") != null) {
                session.removeAttribute("editInland");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            programid = (String) session.getAttribute("processinfoforInland");
            if (session.getAttribute("voyageInland1") != null) {
                voyageInland = (VoyageInland) session.getAttribute("voyageInland1");

            } else {

                voyageInland = new VoyageInland();
            }
            if (voyageInland != null && voyageInland.getId() != null) {
                recordid = voyageInland.getId().toString();
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            voyageInlandDAO.delete(voyageInland, userId.getLoginName());
            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
            Forward = "InlandVoyage";
        } else if (buttonValue != null && buttonValue.equals("savecancel")) {
            if (session.getAttribute("inlandvoyages") != null) {
                session.removeAttribute("inlandvoyages");
            }
            if (session.getAttribute("voyageInlnd") != null) {

                session.removeAttribute("voyageInlnd");

            }
            if (session.getAttribute("editInland") != null) {
                session.removeAttribute("editInland");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            programid = (String) session.getAttribute("processinfoforInland");

            if (session.getAttribute("voyageInland1") != null) {
                voyageInland = (VoyageInland) session.getAttribute("voyageInland1");

            } else {

                voyageInland = new VoyageInland();
            }
            if (voyageInland != null && voyageInland.getId() != null) {
                recordid = voyageInland.getId().toString();
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            voyageInlandDAO.delete(voyageInland, userId.getLoginName());
            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
            Forward = "InlandVoyage";
        }
        // Forward="inland";

        session.setAttribute("trade", "inlandvoyage");
        return mapping.findForward(Forward);
    }
}