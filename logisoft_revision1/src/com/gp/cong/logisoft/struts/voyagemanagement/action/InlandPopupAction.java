/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.voyagemanagement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.VoyageInland;
import com.gp.cong.logisoft.domain.VoyageMaster;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.struts.voyagemanagement.form.InlandPopupForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 08-13-2008
 * 
 * XDoclet definition:
 * @struts.action path="/inlandPopup" name="inlandPopupForm" input="/jsps/voyagemanagement/inlandPopup.jsp" scope="request" validate="true"
 */
public class InlandPopupAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        InlandPopupForm inlandPopupForm = (InlandPopupForm) form;
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = inlandPopupForm.getButtonValue();
        String trmNum = inlandPopupForm.getTerminalNumber();
        String tername = inlandPopupForm.getTerminalName();
        String portNum = inlandPopupForm.getDestSheduleNumber();
        String portName = inlandPopupForm.getDestAirportname();
        String voyNum = inlandPopupForm.getVoyageNo();
        String dateLoaded = inlandPopupForm.getDateLoaded();
        VoyageInland voyageInland = new VoyageInland();
        RefTerminalDAO refTerminalDAO = new RefTerminalDAO();
        RefTerminalTemp refTerminal1 = null;
        PortsTemp destObj = null;
        PortsDAO portsDAO = new PortsDAO();
        DBUtil dbutil = new DBUtil();
        List list = new ArrayList();
        if (session.getAttribute("view") != null) {
            session.removeAttribute("view");
        }
        if (session.getAttribute("voyageInlnd") != null) {
            session.removeAttribute("voyageInlnd");
        }
        if (session.getAttribute("inlandvesselrecords") != null) {
            session.removeAttribute("inlandvesselrecords");
        }


        if (session.getAttribute("inlandport") != null) {
            session.removeAttribute("inlandport");
        }
        if (session.getAttribute("voyagepopup") != null) {
            session.removeAttribute("voyagepopup");
        }
        if (session.getAttribute("inlandports") != null) {
            session.removeAttribute("inlandports");
        }
        if (session.getAttribute("addinlandrecords") != null) {
            voyageInland = (VoyageInland) session.getAttribute("addinlandrecords");
        }
        if (voyNum != null && !voyNum.equals("")) {
            voyageInland.setInlandVoyageNo(Integer.parseInt(voyNum));
        }
        // Getting value for Terminal Number
        if (dateLoaded != null && dateLoaded != "") {
            Date delCutoffDate = null;
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                delCutoffDate = sdf.parse(dateLoaded);
            voyageInland.setDateLoaded(delCutoffDate);
        }
        if (trmNum != null && !trmNum.equals("")) {
            RefTerminalTemp refTerminal = refTerminalDAO.findById1(trmNum);
            if (refTerminal != null) {
                voyageInland.setOriginTerminal(refTerminal);

            } else {
                request.setAttribute("message", "Please enter proper terminal number");
                RefTerminalTemp r1 = null;
                voyageInland.setOriginTerminal(r1);

            }
        } else {
            RefTerminalTemp r1 = null;
            voyageInland.setOriginTerminal(r1);

        }
        voyageInland.setSslVoyageNo("");

        // Getting value for Port Number

        if (portNum != null && !portNum.equals("")) {
            List portsList = portsDAO.findports(portNum);
            if (portsList != null && portsList.size() > 0) {
                PortsTemp ports = (PortsTemp) portsList.get(0);
                voyageInland.setDestTerminal(ports);
                session.setAttribute("addinlandrecords", voyageInland);
            } else {
                request.setAttribute("message", "Please enter proper Destination Port");
                PortsTemp p1 = null;
                voyageInland.setDestTerminal(p1);
                session.setAttribute("addinlandrecords", voyageInland);
            }
        } else {
            PortsTemp p1 = null;
            voyageInland.setDestTerminal(p1);
            session.setAttribute("addinlandrecords", voyageInland);
        }


        if (session.getAttribute("inlandvoyages") != null) {
            session.removeAttribute("inlandvoyages");
        }
        if (session.getAttribute("voyageInlnd") != null) {

            session.removeAttribute("voyageInlnd");

        }
        if (session.getAttribute("editInland") != null) {
            session.removeAttribute("editInland");
        }
        if (session.getAttribute("voyageInland1") != null) {
            session.removeAttribute("voyageInland1");
        }
        if (buttonValue != null && buttonValue.equals("search")) {
            if (request.getAttribute("update") == null) {
                list = dbutil.getExportDetailsInland(voyageInland.getOriginTerminal(), voyageInland.getDestTerminal(), voyageInland.getInlandVoyageNo());
                if (list != null && list.size() > 0) {
                    request.setAttribute("update", "This Combination is already exist");

                }
            }
            session.setAttribute("addinlandrecords", voyageInland);
            session.setAttribute("inlandrate", "save");
            request.setAttribute("sendfclcontrol", "sendfclcontrol");
        }

        if (buttonValue != null && buttonValue.equals("popupsearch")) {


            if (session.getAttribute("searchinlandrecords") == null) {
                voyageInland = new VoyageInland();
            }
            if (session.getAttribute("searchinlandrecords") != null) {
                voyageInland = (VoyageInland) session.getAttribute("searchinlandrecords");
            }

            if (trmNum != null && !trmNum.equals("")) {

                refTerminal1 = refTerminalDAO.findById1(trmNum);

                if (refTerminal1 != null) {
                    voyageInland.setOriginTerminal(refTerminal1);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }

            }

            if (tername != null && !tername.equals("")) {

                RefTerminalTemp refTerminalobj = null;
                List terminal = refTerminalDAO.findForManagement(null, tername, null, null);
                Iterator iter = terminal.iterator();
                if (terminal.size() > 0) {
                    refTerminalobj = (RefTerminalTemp) terminal.get(0);
                }
                if (refTerminalobj != null) {
                    voyageInland.setOriginTerminal(refTerminalobj);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }

            }

            if (portNum != null && !portNum.equals("")) {

                List portsList = portsDAO.findPortCode(portNum, "0001");
                if (portsList != null && portsList.size() > 0) {
                    destObj = (PortsTemp) portsList.get(0);
                    voyageInland.setDestTerminal(destObj);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }

            }
            if (portName != null && !portName.equals("")) {

                List portsList = portsDAO.findPierCode(null, portName);
                if (portsList != null && portsList.size() > 0) {

                    destObj = (PortsTemp) portsList.get(0);
                    voyageInland.setDestTerminal(destObj);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }
            }
        }
        return mapping.findForward("addinlandpopup");
    }
}