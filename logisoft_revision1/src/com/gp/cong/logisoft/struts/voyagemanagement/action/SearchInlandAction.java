/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.voyagemanagement.action;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.CarriersOrLineTemp;
import com.gp.cong.logisoft.domain.FclBuyCost;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.VoyageInland;
import com.gp.cong.logisoft.hibernate.dao.CarriersOrLineDAO;
import com.gp.cong.logisoft.hibernate.dao.FclBuyDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.hibernate.dao.VoyageInlandDAO;
import com.gp.cong.logisoft.struts.voyagemanagement.form.SearchInlandForm;
import com.gp.cong.logisoft.util.DBUtil;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/** 
 * MyEclipse Struts
 * Creation date: 08-13-2008
 * 
 * XDoclet definition:
 * @struts.action path="/searchInland" name="searchInlandForm" input="/jsps/voyagemanagement/searchInland.jsp" scope="request" validate="true"
 */
public class SearchInlandAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        SearchInlandForm searchInlandForm = (SearchInlandForm) form;
        HttpSession session = ((HttpServletRequest) request).getSession();
        String button = searchInlandForm.getButtonValue();
        String buttonValue = searchInlandForm.getButtonValue();
        String get = searchInlandForm.getIndex();
        String match = searchInlandForm.getMatch();
        String trmNum = searchInlandForm.getTerminalNumber();
        String tername = searchInlandForm.getTerminalName();
        String VoyageNo = searchInlandForm.getVoyageNo();

        String portNum = searchInlandForm.getDestSheduleNumber();
        String portName = searchInlandForm.getDestAirportname();
        String dateLoaded = searchInlandForm.getDateLoaded();
        String voyno = "";

        CarriersOrLineDAO carriersOrLineDAO = new CarriersOrLineDAO();
        CarriersOrLineTemp carriersOrLineTemp = null;
        RefTerminalDAO refTerminalDAO = new RefTerminalDAO();
        PortsDAO portsDAO = new PortsDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        //RefTerminalTemp origin=null;
        //PortsTemp dest=null;
        CarriersOrLineTemp carries = null;
        GenericCode genericCode = null;
        GenericCode genObj = null;
        List commonList = new ArrayList();
        VoyageInlandDAO voyageInlandDAO = new VoyageInlandDAO();
        FclBuyDAO fclBuyDAO = new FclBuyDAO();
        List searchFclrecords = new ArrayList();
        List secondunittype = new ArrayList();
        String loginName = "";
        String msg = "";
        String forwardName = "";
        DBUtil dbUtil = new DBUtil();
        String message = "";
        List fclBuyList = new ArrayList();
        FclBuyCost fclBuyCost = new FclBuyCost();
        Set set = new HashSet();
        RefTerminalTemp refTerminal = null;
        GenericCode gen = null;
        RefTerminalTemp refObj = null;
        PortsTemp destObj = null;
        PortsTemp ports = null;
        List unittypelist = new ArrayList();

        VoyageInland voyageInland = null;



        if (buttonValue != null && buttonValue.equals("popupsearch")) {

            if (session.getAttribute("searchinlandrecords") == null) {
                voyageInland = new VoyageInland();
            }
            if (session.getAttribute("searchinlandrecords") != null) {
                voyageInland = (VoyageInland) session.getAttribute("searchinlandrecords");
            }

            if (trmNum != null && !trmNum.equals("")) {

                refTerminal = refTerminalDAO.findById1(trmNum);

                if (refTerminal != null) {
                    voyageInland.setOriginTerminal(refTerminal);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }

            }

            if (tername != null && !tername.equals("")) {

                RefTerminalTemp refTerminalobj = null;
                List terminal = refTerminalDAO.findForManagement(null, tername, null, null);
                Iterator iter = terminal.iterator();
                if (terminal.size() > 0) {
                    refTerminalobj = (RefTerminalTemp) terminal.get(0);
                }
                if (refTerminalobj != null) {
                    voyageInland.setOriginTerminal(refTerminalobj);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }

            }

            if (portNum != null && !portNum.equals("")) {

                List portsList = portsDAO.findPortCode(portNum, "0001");
                if (portsList != null && portsList.size() > 0) {
                    destObj = (PortsTemp) portsList.get(0);
                    voyageInland.setDestTerminal(destObj);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }

            }
            if (portName != null && !portName.equals("")) {

                List portsList = portsDAO.findPierCode(null, portName);
                if (portsList != null && portsList.size() > 0) {

                    destObj = (PortsTemp) portsList.get(0);
                    voyageInland.setDestTerminal(destObj);
                    session.setAttribute("searchinlandrecords", voyageInland);
                }
            }




            forwardName = "searchinland";

        }

        if (buttonValue != null && buttonValue.equals("search")) {


            if (session.getAttribute("searchinlandrecords") == null) {
                voyageInland = new VoyageInland();
            }
            if (session.getAttribute("searchinlandrecords") != null) {
                voyageInland = (VoyageInland) session.getAttribute("searchinlandrecords");
            }


            if (VoyageNo != null && !VoyageNo.equals("")) {

                voyageInland.setInlandVoyageNo(Integer.parseInt(VoyageNo));
            }

            if (voyno != null && !voyno.equals("")) {

                voyno = voyageInland.getInlandVoyageNo().toString();
            }

            if (session.getAttribute("yes") != null) {

                session.removeAttribute("yes");
            }

            if (session.getAttribute("no") != null) {
                session.removeAttribute("no");
            }
            if (trmNum != null && !trmNum.equals("")) {
                refTerminal = refTerminalDAO.findById1(trmNum);

                if (refTerminal != null && !refTerminal.equals("")) {

                    voyageInland.setOriginTerminal(refTerminal);

                    session.setAttribute("searchinlandrecords", voyageInland);
                } else {


                    request.setAttribute("warning", "Please enter proper terminal number");
                }
            } else {
                RefTerminalTemp ref = null;
                voyageInland.setOriginTerminal(ref);
                session.setAttribute("searchinlandrecords", voyageInland);
            }

            if (portNum != null && !portNum.equals("")) {
                List portsList = portsDAO.findports(portNum);
                if (portsList != null && portsList.size() > 0) {
                    ports = (PortsTemp) portsList.get(0);

                    voyageInland.setDestTerminal(ports);
                    session.setAttribute("searchinlandrecords", voyageInland);
                } else {

                    request.setAttribute("warning", "Please enter proper Destination Port");
                }
            } else {
                PortsTemp p1 = null;
                voyageInland.setDestTerminal(p1);
                session.setAttribute("searchinlandrecords", voyageInland);
            }
            session.setAttribute("addinlandrecords", voyageInland);


            if (session.getAttribute("fclatescaptioncom") != null) {
                session.removeAttribute("fclatescaptioncom");
            }
            if (session.getAttribute("fclatescaption") != null) {
                session.removeAttribute("fclatescaption");
            }
            refObj = voyageInland.getOriginTerminal();
            destObj = voyageInland.getDestTerminal();
            String comm = "";
            if (get != null && !get.equals("")) {
                if (match.equals("match")) {
                    if (session.getAttribute("searchFclcodelist") != null) {
                        session.removeAttribute("searchFclcodelist");
                    }
                    if (session.getAttribute("fclcommonList") != null) {
                        session.removeAttribute("fclcommonList");
                    }

                    if (request.getAttribute("warning") == null) {

                        if ((trmNum != null && portNum != null && VoyageNo != null)) {

                            List searchinlandList = voyageInlandDAO.findForSearchVoyageRatesmatch(trmNum, portNum, VoyageNo, match);



                            if (trmNum != null && portNum != null) {


                                for (int k = 0; k < searchinlandList.size(); k++) {
                                    voyageInland = (VoyageInland) searchinlandList.get(k);

                                }


                            }
                            session.setAttribute("searchinlandList", searchinlandList);

                        }
                    }
                    session.setAttribute("voyageRatescaption", "Inland Voyages {Match Only}");
                } else if (match.equals("starts")) {

                    List searchinlandList = voyageInlandDAO.findForSearchVoyageRatesstarts(trmNum, portNum, VoyageNo, match);


                    if (trmNum != null && portNum != null) {

                        List ftf = voyageInlandDAO.getRecordsForComm(refObj, destObj);
                        for (int i = 0; i < ftf.size(); i++) {
                            VoyageInland ftfMaster1 = (VoyageInland) ftf.get(i);
                            searchinlandList.add(ftfMaster1);
                        }
                        for (int k = 0; k < searchinlandList.size(); k++) {
                            voyageInland = (VoyageInland) searchinlandList.get(k);

                        }


                    }
                    session.setAttribute("searchinlandList", searchinlandList);
                    session.setAttribute("voyageRatescaption", "Inland Voyages {start at list}");
                }


            }
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");

            }
            if (session.getAttribute("view") != null) {

                session.removeAttribute("view");
            }


            forwardName = "searchinland";

        }

        if (request.getParameter("paramid") != null) {
            VoyageInlandDAO voyageInland1 = new VoyageInlandDAO();
            voyageInland = voyageInland1.findById(Integer.parseInt(request.getParameter("paramid")));



            User userid = null;
            UserDAO user1 = new UserDAO();
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("voyageInlnd") != null) {
                session.removeAttribute("voyageInlnd");
            }
            if (session.getAttribute("inlandvesselrecords") != null) {
                session.removeAttribute("inlandvesselrecords");
            }
            if (session.getAttribute("voyagepopup") != null) {

                session.removeAttribute("voyagepopup");
            }

            if (session.getAttribute("inlandport") != null) {
                session.removeAttribute("inlandport");
            }
            if (session.getAttribute("voyagepopup") != null) {
                session.removeAttribute("voyagepopup");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            if (session.getAttribute("inlandports") != null) {
                session.removeAttribute("inlandports");
            }
            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
            ProcessInfo pi = new ProcessInfo();
            String programid = null;
            programid = (String) session.getAttribute("processinfoforInland");

            String recordid = "";

            if (voyageInland.getId() != null) {
                recordid = voyageInland.getId().toString();
            }

            String editstatus = "startedited";
            String deletestatus = "startdeleted";
            ProcessInfo processinfoobj = null;
            if (programid != null && !programid.equals("")) {
                processinfoobj = processinfoDAO.findById(Integer.parseInt(programid), recordid, deletestatus, editstatus);
            }


            if (processinfoobj != null) {

                String view = "3";
                User loginuser = user1.findById(processinfoobj.getUserid());
                loginName = loginuser.getLoginName();
                msg = "This record is being used by ";
                message = msg + loginName;
                session.setAttribute("usermessage", message);
                session.setAttribute("view", view);
                forwardName = "voyageparam";
            } else {
                pi.setUserid(userid.getUserId());
                if (programid != null && !programid.equals("")) {
                    pi.setProgramid(Integer.parseInt(programid));
                }
                java.util.Date currdate = new java.util.Date();
                pi.setProcessinfodate(currdate);
                pi.setEditstatus(editstatus);
                pi.setRecordid(recordid);
                processinfoDAO.save(pi);

                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }

            }
            if (session.getAttribute("yes") != null) {

                session.removeAttribute("yes");
            }

            if (session.getAttribute("no") != null) {
                session.removeAttribute("no");
            }
            if (session.getAttribute("addinlandrecords") != null) {

                session.removeAttribute("addinlandrecords");
            }
            session.setAttribute("voyageInland1", voyageInland);
            forwardName = "voyageparam";

        }

        if (request.getParameter("param") != null) {
            VoyageInlandDAO voyageInland1 = new VoyageInlandDAO();
            voyageInland = voyageInland1.findById(Integer.parseInt(request.getParameter("param")));
            String view = "3";
            session.setAttribute("view", view);
            session.setAttribute("voyageInland1", voyageInland);
            forwardName = "voyageparam";
        }


        return mapping.findForward(forwardName);
    }
}

