/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.PortsBean;
import com.gp.cong.logisoft.domain.AgencyInfo;
import com.gp.cong.logisoft.domain.AirPortConfiguration;
import com.gp.cong.logisoft.domain.AssociatedPort;
import com.gp.cong.logisoft.domain.FCLPortConfiguration;
import com.gp.cong.logisoft.domain.ImportPortConfiguration;
import com.gp.cong.logisoft.domain.LCLPortConfiguration;
import com.gp.cong.logisoft.domain.Ports;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.ManagePortsForm;
import com.gp.cong.logisoft.util.CommonFunctions;

/** 
 * MyEclipse Struts
 * Creation date: 12-24-2007
 * 
 * XDoclet definition:
 * @struts.action path="/managePorts" name="managePortsForm" input="/jsps/datareference/managePorts.jsp" scope="request" validate="true"
 */
public class ManagePortsAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        ManagePortsForm managePortsForm = (ManagePortsForm) form;// TODO Auto-generated method stub
        String scheduleCode = managePortsForm.getSheduleCode();
        String eciPortCode = managePortsForm.getEciPortCode();
        HttpSession session = ((HttpServletRequest) request).getSession();
        PortsDAO portsDAO = new PortsDAO();
        String buttonValue = managePortsForm.getButtonValue();
        String loginName = "";
        String msg = "";
        String forwardName = "";
        String message = "";
        AssociatedPort associatedPortObj = null;
        String type = managePortsForm.getType();
        Set agencyInfoSet = new HashSet<AgencyInfo>();
        Set associatedPort = new HashSet<AssociatedPort>();
        Set lclPortSet = new HashSet<LCLPortConfiguration>();
        List agencyInfoListForLCL = new ArrayList();
        List agencyInfoListForFCL = new ArrayList();
        List agencyInfoListForAir = new ArrayList();
        List agencyInfoListForImp = new ArrayList();
        AgencyInfo agencyObj = null;
        LCLPortConfiguration lclPortObj = null;
        List portList1 = new ArrayList();
        List portlt = new ArrayList();
        String showAllPorts = managePortsForm.getStart();
        PortsBean portBean = new PortsBean();
        portBean.setScheduleCode(managePortsForm.getSheduleCode());
        portBean.setEciPortCode(managePortsForm.getEciPortCode());
        portBean.setPortName(managePortsForm.getPortName());
        portBean.setPierCode(managePortsForm.getPierCode());
        portBean.setCityCode(managePortsForm.getCityCode());
        portBean.setCountry(managePortsForm.getCountry());
        portBean.setType(managePortsForm.getType());
        if (!CommonFunctions.isNotNull(buttonValue)) {
            //List portList = portsDAO.findForManagement(managePortsForm);
            //session.setAttribute("portList",portList);
            forwardName = "managePorts";
        }

        request.setAttribute("buttonValue", buttonValue);
        request.setAttribute("managePortsForm", managePortsForm);
        if (request.getParameter("paramid") != null) {
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");
            }

            Ports ports = portsDAO.findById(Integer.parseInt(request.getParameter("paramid")));
            List l = new UnLocationDAO().findForUnlocCode(ports.getUnLocationCode());
            if(l != null && !l.isEmpty()){
                UnLocation unLocation = (UnLocation)l.get(0);
                if(!ports.getLclPortConfigSet().isEmpty()){
                    LCLPortConfiguration lclPortConfig = (LCLPortConfiguration)ports.getLclPortConfigSet().iterator().next();
                    lclPortConfig.setBlNumbering(unLocation.getBlNumbering());
                    lclPortConfig.setExpressRelease(unLocation.isExpressRelease());
                    lclPortConfig.setDoNotExpressRelease(unLocation.isDoNotExpressRelease());
                    lclPortConfig.setMemoHouseBillofLading(unLocation.isMemoHouseBillofLading());
                    lclPortConfig.setOriginalsReleasedAtDestination(unLocation.isOriginalsReleasedAtDestination());
                    lclPortConfig.setOriginalsRequired(unLocation.isOriginalsRequired());
                    ports.getLclPortConfigSet().add(lclPortConfig);
                }
            }
            User userid = null;
            UserDAO user1 = new UserDAO();
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
            ProcessInfo pi = new ProcessInfo();
            String programid = null;
            programid = (String) session.getAttribute("processinfoforports");
            String recordid = ports.getId().toString();
            String editstatus = "startedited";
            String deletestatus = "startdeleted";
            ProcessInfo processinfoobj =
                    processinfoDAO.findById(Integer.parseInt(programid), recordid, deletestatus, editstatus);
            if (processinfoobj != null && processinfoobj.getUserid() != null && userid != null && userid.getUserId() != null && processinfoobj.getUserid().equals(userid.getUserId())) {
            } else {
                if (processinfoobj != null) {
                    String view = "3";
                    User loginuser = user1.findById(processinfoobj.getUserid());
                    loginName = loginuser.getLoginName();
                    msg = "This record is being used by ";
                    message = msg + loginName;
                    session.setAttribute("message", message);
                    session.setAttribute("view", view);
                } else {
                    pi.setUserid(userid.getUserId());
                    pi.setProgramid(Integer.parseInt(programid));
                    java.util.Date currdate = new java.util.Date();
                    pi.setProcessinfodate(currdate);
                    pi.setEditstatus(editstatus);
                    pi.setRecordid(recordid);
                    processinfoDAO.save(pi);
                    if (session.getAttribute("view") != null) {
                        session.removeAttribute("view");
                    }
                }
            }
            lclPortSet = ports.getLclPortConfigSet();
            Iterator iter1 = lclPortSet.iterator();
            while (iter1.hasNext()) {
                lclPortObj = (LCLPortConfiguration) iter1.next();
                associatedPort = lclPortObj.getAssociatedPort();
                Iterator iter2 = associatedPort.iterator();
                while (iter2.hasNext()) {
                    associatedPortObj = (AssociatedPort) iter2.next();
                    if (associatedPortObj.getLclId().equals(lclPortObj.getId())) {
                        if (associatedPortObj != null) {
                            portList1.add(associatedPortObj.getPortId());
                            portlt.add(associatedPortObj.getPortId());
                        }
                    }
                }
            }
            if (ports != null) {
                portlt.add(ports);
            }
            session.setAttribute("portlst", portlt);
            session.setAttribute("portList1", portList1);
            session.setAttribute("ports", ports);
            // session.setAttribute("portList", ports);
            LCLPortConfiguration lclPortConfigurationObj = new LCLPortConfiguration();
            FCLPortConfiguration fclPortObj = new FCLPortConfiguration();
            Set lclPortConfigSet = ports.getLclPortConfigSet();

            Iterator iter = lclPortConfigSet.iterator();
            while (iter.hasNext()) {
                lclPortConfigurationObj = (LCLPortConfiguration) iter.next();
            }
            session.setAttribute("lclPortConfigurationObj", lclPortConfigurationObj);
            Set fclPortConfigSet = ports.getFclPortConfigSet();
            Iterator iter3 = fclPortConfigSet.iterator();
            while (iter3.hasNext()) {
                fclPortObj = (FCLPortConfiguration) iter3.next();
                session.setAttribute("fclPortObjConfiguration", fclPortObj);
            }

            AirPortConfiguration airPortObj = new AirPortConfiguration();
            Set airPortConfigSet = ports.getAirPortConfigSet();
            Iterator iter4 = airPortConfigSet.iterator();
            while (iter4.hasNext()) {
                airPortObj = (AirPortConfiguration) iter4.next();
                session.setAttribute("airPortObjConfigConfiguration", airPortObj);
            }
            ImportPortConfiguration importsObj = new ImportPortConfiguration();
            Set importConfigSet = ports.getImportConfigSet();
            Iterator iter5 = importConfigSet.iterator();
            while (iter5.hasNext()) {
                importsObj = (ImportPortConfiguration) iter5.next();
                session.setAttribute("impPortObjConfiguration", importsObj);
            }

            if (ports.getAgencyInfoSet() != null) {
                agencyInfoSet = ports.getAgencyInfoSet();
                Iterator iter2 = agencyInfoSet.iterator();
                while (iter2.hasNext()) {
                    agencyObj = (AgencyInfo) iter2.next();


                    if (agencyObj.getType() != null && agencyObj.getType().equals("L")) {

                        agencyInfoListForLCL.add(agencyObj);
                        session.setAttribute("agencyInfoListForLCL", agencyInfoListForLCL);
                    }
                    if (agencyObj.getType().equals("F") && agencyObj.getType() != null) {
                        agencyInfoListForFCL.add(agencyObj);
                        session.setAttribute("agencyInfoListForFCL", agencyInfoListForFCL);
                    }
                    if (agencyObj.getType().equals("A") && agencyObj.getType() != null) {
                        agencyInfoListForAir.add(agencyObj);
                        session.setAttribute("agencyInfoListForAir", agencyInfoListForAir);
                    }
                    if (agencyObj.getType().equals("I") && agencyObj.getType() != null) {
                        agencyInfoListForImp.add(agencyObj);
                        session.setAttribute("agencyInfoListForImpAdd", agencyInfoListForImp);
                    }
                }
            }
            forwardName = "editPortDetails";
        } else if (request.getParameter("param") != null) {
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");
            }
            Ports ports = portsDAO.findById(Integer.parseInt(request.getParameter("param")));
            String view = "3";
            session.setAttribute("view", view);
            lclPortSet = ports.getLclPortConfigSet();
            Iterator iter1 = lclPortSet.iterator();
            while (iter1.hasNext()) {
                lclPortObj = (LCLPortConfiguration) iter1.next();
                associatedPort = lclPortObj.getAssociatedPort();
                Iterator iter2 = associatedPort.iterator();
                while (iter2.hasNext()) {
                    associatedPortObj = (AssociatedPort) iter2.next();
                    if (associatedPortObj != null) {
                        portList1.add(associatedPortObj.getPortId());
                    }
                }
            }
            session.setAttribute("portList1", portList1);
            session.setAttribute("ports", ports);
            LCLPortConfiguration lclPortConfigurationObj = new LCLPortConfiguration();
            FCLPortConfiguration fclPortObj = new FCLPortConfiguration();
            Set lclPortConfigSet = ports.getLclPortConfigSet();

            Iterator iter = lclPortConfigSet.iterator();
            while (iter.hasNext()) {
                lclPortConfigurationObj = (LCLPortConfiguration) iter.next();
            }
            session.setAttribute("lclPortConfigurationObj", lclPortConfigurationObj);
            Set fclPortConfigSet = ports.getFclPortConfigSet();
            Iterator iter3 = fclPortConfigSet.iterator();
            while (iter3.hasNext()) {
                fclPortObj = (FCLPortConfiguration) iter3.next();
            }
            session.setAttribute("fclPortObjConfiguration", fclPortObj);
            AirPortConfiguration airPortObj = new AirPortConfiguration();
            Set airPortConfigSet = ports.getAirPortConfigSet();
            Iterator iter4 = airPortConfigSet.iterator();
            while (iter4.hasNext()) {
                airPortObj = (AirPortConfiguration) iter4.next();
                session.setAttribute("airPortObjConfigConfiguration", airPortObj);
            }
            ImportPortConfiguration importsObj = new ImportPortConfiguration();
            Set importConfigSet = ports.getImportConfigSet();
            Iterator iter5 = importConfigSet.iterator();
            while (iter5.hasNext()) {
                importsObj = (ImportPortConfiguration) iter5.next();
                session.setAttribute("impPortObjConfiguration", importsObj);
            }
            agencyInfoSet = ports.getAgencyInfoSet();
            Iterator iter2 = agencyInfoSet.iterator();
            while (iter2.hasNext()) {
                agencyObj = (AgencyInfo) iter2.next();
                if (agencyObj.getType() != null && agencyObj.getType().equals("L")) {
                    agencyInfoListForLCL.add(agencyObj);
                    session.setAttribute("agencyInfoListForLCL", agencyInfoListForLCL);
                }
                if (agencyObj.getType().equals("F") && agencyObj.getType() != null) {
                    agencyInfoListForFCL.add(agencyObj);
                    session.setAttribute("agencyInfoListForFCL", agencyInfoListForFCL);
                }
                if (agencyObj.getType().equals("A") && agencyObj.getType() != null) {
                    agencyInfoListForAir.add(agencyObj);
                    session.setAttribute("agencyInfoListForAir", agencyInfoListForAir);
                }
                if (agencyObj.getType().equals("I") && agencyObj.getType() != null) {
                    agencyInfoListForImp.add(agencyObj);
                    session.setAttribute("agencyInfoListForImp", agencyInfoListForImp);
                }
                if (session.getAttribute("portobject") != null) {
                    session.removeAttribute("portobject");
                }
                if (session.getAttribute("pierList") != null) {
                    session.removeAttribute("pierList");
                }
                if (session.getAttribute("cityDetails") != null) {
                    session.removeAttribute("cityDetails");
                }
            }
            forwardName = "editPortDetails";
        } else {

            if (buttonValue != null && buttonValue.equals("searchall")) {
                if (session.getAttribute("message") != null) {
                    session.removeAttribute("message");
                }
                if (session.getAttribute("buttonValue") != null) {
                    session.removeAttribute("buttonValue");
                }
                forwardName = "managePorts";
            } else if (buttonValue != null && buttonValue.equals("add") && buttonValue != null) {
                if (session.getAttribute("lclPortConfigurationObj") != null) {
                    session.removeAttribute("lclPortConfigurationObj");
                }
                if (session.getAttribute("fclPortObjConfiguration") != null) {
                    session.removeAttribute("fclPortObjConfiguration");
                }
                if (session.getAttribute("airPortObjConfigConfiguration") != null) {
                    session.removeAttribute("airPortObjConfigConfiguration");
                }
                if (session.getAttribute("impPortObjConfiguration") != null) {
                    session.removeAttribute("impPortObjConfiguration");
                }
                if (session.getAttribute("importPortObj") != null) {
                    session.removeAttribute("importPortObj");
                }
                if (session.getAttribute("agencyInfoListForLCL") != null) {
                    session.removeAttribute("agencyInfoListForLCL");
                }
                if (session.getAttribute("agencyInfoListForFCL") != null) {
                    session.removeAttribute("agencyInfoListForFCL");
                }
                if (session.getAttribute("agencyInfoListForAir") != null) {
                    session.removeAttribute("agencyInfoListForAir");
                }
                if (session.getAttribute("agencyInfoListForImp") != null) {
                    session.removeAttribute("agencyInfoListForImp");
                }
                if (session.getAttribute("portobj") != null) {
                    session.removeAttribute("portobj");
                }

                if (session.getAttribute("portList") != null) {
                    session.removeAttribute("portList");
                }
                forwardName = "addNewPorts";
            }
            if (buttonValue != null && buttonValue.equals("search") && buttonValue != null) {
                if (session.getAttribute("message") != null) {
                    session.removeAttribute("message");
                }
                if (showAllPorts != null && showAllPorts.equals("starts")) {
                    List portList = portsDAO.findForManagementaction(managePortsForm);
                    session.setAttribute("portList", portList);
                    // session.setAttribute("PortCaption","Port and Schedule {Start At List}");

                    if (managePortsForm.getSheduleCode() != null && !managePortsForm.getSheduleCode().equals("")) {
                        session.setAttribute("PortCaption", "ScheduleCode {Start At List}");
                    }
                    if (managePortsForm.getEciPortCode() != null && !managePortsForm.getEciPortCode().equals("")) {
                        session.setAttribute("PortCaption", "EciPortCode {Start At List}");
                    }
                    if (managePortsForm.getPortName() != null && !managePortsForm.getPortName().equals("")) {
                        session.setAttribute("PortCaption", "CityName {Start At List}");
                    }
                    if (managePortsForm.getPierCode() != null && !managePortsForm.getPierCode().equals("")) {
                        session.setAttribute("PortCaption", "PierAbbr {Start At List}");
                    }
                    if (managePortsForm.getCityCode() != null && !managePortsForm.getCityCode().equals("")) {
                        session.setAttribute("PortCaption", "UnLocCode {Start At List}");
                    }
                    if (managePortsForm.getCountry() != null && !managePortsForm.getCountry().equals("")) {
                        session.setAttribute("PortCaption", "Country {Start At List}");
                    }
                } else {
                    List portList = portsDAO.findForManagement(managePortsForm);
                    if (portList.size() == 0) {
                        session.setAttribute("Notfound", managePortsForm.getSheduleCode());
                    }
                    session.setAttribute("portList", portList);
                    // session.setAttribute("PortCaption","Port and Schedule {Match Only}");

                    if (managePortsForm.getSheduleCode() != null && !managePortsForm.getSheduleCode().equals("")) {
                        session.setAttribute("PortCaption", "ScheduleCode {Match Only}");
                    }
                    if (managePortsForm.getEciPortCode() != null && !managePortsForm.getEciPortCode().equals("")) {
                        session.setAttribute("PortCaption", "EciPortCode {Match Only}");
                    }
                    if (managePortsForm.getPortName() != null && !managePortsForm.getPortName().equals("")) {
                        session.setAttribute("PortCaption", "CityName {Match Only}");
                    }
                    if (managePortsForm.getPierCode() != null && !managePortsForm.getPierCode().equals("")) {
                        session.setAttribute("PortCaption", "PierAbbr {Match Only}");
                    }
                    if (managePortsForm.getCityCode() != null && !managePortsForm.getCityCode().equals("")) {
                        session.setAttribute("PortCaption", "UnLocCode {Match Only}");
                    }
                    if (managePortsForm.getCountry() != null && !managePortsForm.getCountry().equals("")) {
                        session.setAttribute("PortCaption", "Country {Match Only}");
                    }
                    if (type != null && !type.equals("")) {
                        session.setAttribute("PortCaption", "Type {Match Only}");
                    }


                }
                request.setAttribute("portBean", portBean);
                forwardName = "managePorts";
            }

        }
        if (buttonValue != null && buttonValue.equalsIgnoreCase("clearSearch")) {
            if (session.getAttribute("portList") != null) {
                session.removeAttribute("portList");
            }
            if (session.getAttribute("agencyInfoListForImpAdd") != null) {
                session.removeAttribute("agencyInfoListForImpAdd");
            }
            forwardName = "managePorts";
            managePortsForm.setSCHCode("on");
            request.setAttribute("managePortsForm", managePortsForm);
        }
        return mapping.findForward(forwardName);
    }
}
