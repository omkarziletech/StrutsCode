/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordGeneralInformation;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.form.MasterEditGeneralInformationForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 04-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterEditGeneralInformation" name="masterEditGeneralInformationForm" input="/jsps/Tradingpartnermaintainance/masterEditGeneralInformation.jsp" scope="request" validate="true"
 */
public class MasterEditGeneralInformationAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterEditGeneralInformationForm masterEditGeneralInformationForm = (MasterEditGeneralInformationForm) form;// TODO Auto-generated method stub
        String idType = masterEditGeneralInformationForm.getIdType();

        customerBean customerbean = new customerBean();
        DBUtil dbUtil = new DBUtil();
        String buttonValue = masterEditGeneralInformationForm.getButtonValue();
        String commodity = masterEditGeneralInformationForm.getCommodity();
        String commodityDesc = masterEditGeneralInformationForm.getCommDesc();
        String impCommodity = masterEditGeneralInformationForm.getImpCommodity();
        String impCommodityDesc = masterEditGeneralInformationForm.getImpCommodityDesc();
        String phone = masterEditGeneralInformationForm.getPhone1();
        String insure = masterEditGeneralInformationForm.getInsure();
        String goalAcct = masterEditGeneralInformationForm.getGoalAcct();
        String fax = masterEditGeneralInformationForm.getFax1();
        String inventoryCode = masterEditGeneralInformationForm.getInventoryCode();
        String userName = masterEditGeneralInformationForm.getUserName();
        String password = masterEditGeneralInformationForm.getPassword();
        String poa = masterEditGeneralInformationForm.getPoa();
        String maxdays = masterEditGeneralInformationForm.getMaxDay();
        String salescode = masterEditGeneralInformationForm.getSalesCode();
        String frieghtfmc = masterEditGeneralInformationForm.getFrieghtFmc();
        String frieghtchb = masterEditGeneralInformationForm.getFrieghtChb();
        String arContact = masterEditGeneralInformationForm.getArCode();
        String spclRemark = masterEditGeneralInformationForm.getSpclRemark();
        String defaultRoute = masterEditGeneralInformationForm.getDefaultRoute();
        String importTrack = masterEditGeneralInformationForm.getImportTrackingScreen();
        String activatePassword = masterEditGeneralInformationForm.getActivatePwdQuotes();
        String weblcl = masterEditGeneralInformationForm.getAllowLclQuotes();
        String webfcl = masterEditGeneralInformationForm.getAllowFclQuotes();
        String reserved = masterEditGeneralInformationForm.getReservedForFuture();
        String faxSail = masterEditGeneralInformationForm.getFaxSailingSchedule();
        String fclMail = masterEditGeneralInformationForm.getFclMailingList();
        String christmasCard = masterEditGeneralInformationForm.getChristmasCard();
        String importcfs = masterEditGeneralInformationForm.getImportsCfs();
        String pbasurchrge = masterEditGeneralInformationForm.getPbaSurchrge();
        String lastDate = masterEditGeneralInformationForm.getLastDate();
        String einMaster = masterEditGeneralInformationForm.getEinmaster();
        String commodityMaster = masterEditGeneralInformationForm.getCommoditymaster();
        String importMaster = masterEditGeneralInformationForm.getImportmaster();
        String insuranceComment = masterEditGeneralInformationForm.getInsuranceComment();
        String phone1 = "";

        String acctType1 = masterEditGeneralInformationForm.getAccountType1();
        String acctType2 = masterEditGeneralInformationForm.getAccountType2();
        String acctType3 = masterEditGeneralInformationForm.getAccountType3();
        String acctType4 = masterEditGeneralInformationForm.getAccountType4();
        String acctType5 = masterEditGeneralInformationForm.getAccountType5();
        String acctType6 = masterEditGeneralInformationForm.getAccountType6();
        String acctType7 = masterEditGeneralInformationForm.getAccountType7();
        String acctType8 = masterEditGeneralInformationForm.getAccountType8();
        String acctType9 = masterEditGeneralInformationForm.getAccountType9();
        String acctType10 = masterEditGeneralInformationForm.getAccountType10();
        String acctType11 = masterEditGeneralInformationForm.getAccountType11();
        String active = masterEditGeneralInformationForm.getActive();
        String accountType = "";

        if (phone != null) {
            phone1 = dbUtil.stringtokenizer(phone);
        }

        String idText = masterEditGeneralInformationForm.getIdtext();
        String dunsNo = masterEditGeneralInformationForm.getDunsNo();

        String fax1 = "";
        if (fax != null) {
            fax1 = dbUtil.stringtokenizer(fax);
        }

        HttpSession session = ((HttpServletRequest) request).getSession();
        GeneralInformation generalInformation = null;
        GenericCode genericCode = null;
        GenericCode gen = null;
        GenericCode impcommodity = null;
        GenericCode salecode = null;
        GenericCode arcontactcode = null;
        String forwardName = "";
        customerbean.setGoalAcct(goalAcct);
        customerbean.setPoa(poa);
        customerbean.setImportTrack(importTrack);
        customerbean.setWebQuotes(activatePassword);
        customerbean.setWebFcl(webfcl);
        customerbean.setWebLcl(weblcl);
        customerbean.setReserved(reserved);
        customerbean.setFaxSail(faxSail);
        customerbean.setFclMail(fclMail);
        customerbean.setChristmas(christmasCard);
        customerbean.setImportCfs(importcfs);
        customerbean.setPba(pbasurchrge);
        customerbean.setIdType(idType);
        customerbean.setInsure(insure);
        customerbean.setEinmaster(einMaster);
        customerbean.setCommoditymaster(commodityMaster);
        customerbean.setImportmaster(importMaster);
        customerbean.setAccountType1(acctType1);
        customerbean.setAccountType2(acctType2);
        customerbean.setAccountType3(acctType3);
        customerbean.setAccountType4(acctType4);
        customerbean.setAccountType5(acctType5);
        customerbean.setAccountType6(acctType6);
        customerbean.setAccountType7(acctType7);
        customerbean.setAccountType8(acctType8);
        customerbean.setAccountType9(acctType9);
        customerbean.setAccountType10(acctType10);
        customerbean.setAccountType11(acctType11);
        customerbean.setActive(active);
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        session.setAttribute("customerbean", customerbean);

        if (session.getAttribute("mastergeneralInformation") != null) {
            generalInformation = (GeneralInformation) session.getAttribute("mastergeneralInformation");
        } else {
            generalInformation = new GeneralInformation();
        }

        if (buttonValue != null && buttonValue.equals("popupsearch")) {


            if (commodity != null && !commodity.equals("") && !commodity.equals("%")) {

                List comList = genericCodeDAO.findForGenericCode(commodity);
                if (comList != null && comList.size() > 0) {

                    gen = (GenericCode) comList.get(0);

                    generalInformation.setGenericCode(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            if (commodityDesc != null && !commodityDesc.equals("")) {

                List codeList = genericCodeDAO.findForAirRates(null, commodityDesc);
                if (codeList != null && codeList.size() > 0) {
                    gen = (GenericCode) codeList.get(0);
                    generalInformation.setGenericCode(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            if (impCommodity != null && !impCommodity.equals("")) {
                List comList = genericCodeDAO.findForGenericCode(impCommodity);
                if (comList != null && comList.size() > 0) {

                    gen = (GenericCode) comList.get(0);

                    generalInformation.setImpCommodity(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            if (impCommodityDesc != null && !impCommodityDesc.equals("")) {

                List codeList = genericCodeDAO.findForAirRates(null, impCommodityDesc);
                if (codeList != null && codeList.size() > 0) {
                    gen = (GenericCode) codeList.get(0);
                    generalInformation.setImpCommodity(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            forwardName = "generalinfo";
        }
        if (!buttonValue.equals("note")) {
            generalInformation.setIdType(idType);
            if (acctType1 != null && acctType1.equalsIgnoreCase("on")) {
                accountType = "S,";
            }
            if (acctType2 != null && acctType2.equalsIgnoreCase("on")) {
                accountType = accountType + "F,";
            }
            if (acctType3 != null && acctType3.equalsIgnoreCase("on")) {
                accountType = accountType + "N,";
            }
            if (acctType4 != null && acctType4.equalsIgnoreCase("on")) {
                accountType = accountType + "C,";
            }
            if (acctType5 != null && acctType5.equalsIgnoreCase("on")) {
                accountType = accountType + "SS,";
            }
            if (acctType6 != null && acctType6.equalsIgnoreCase("on")) {
                accountType = accountType + "T,";
            }
            if (acctType7 != null && acctType7.equalsIgnoreCase("on")) {
                accountType = accountType + "A,";
            }
            if (acctType8 != null && acctType8.equalsIgnoreCase("on")) {
                accountType = accountType + "I,";
            }
            if (acctType9 != null && acctType9.equalsIgnoreCase("on")) {
                accountType = accountType + "E,";
            }
            if (acctType10 != null && acctType10.equalsIgnoreCase("on")) {
                accountType = accountType + "V,";
            }
            if (acctType11 != null && acctType11.equalsIgnoreCase("on")) {
                accountType = accountType + "O,";
            }

            if (accountType.length() > 0) {
                accountType = accountType.substring(0, accountType.length() - 1);
            }
            if (insure != null && insure.equalsIgnoreCase("on")) {
                generalInformation.setInsure("Y");
                customerbean.setInsure("Y");
            } else {
                generalInformation.setInsure("N");
                customerbean.setInsure("N");

            }
            generalInformation.setAccounttype(accountType);


            if (salescode != null && !salescode.equals("0")) {

                salecode = genericCodeDAO.findById(Integer.parseInt(salescode));
                generalInformation.setSalesCodeName(salecode.getCodedesc());
                generalInformation.setSalescode(salecode);
            }

            if (maxdays != null && maxdays != "") {
                Integer maxday = Integer.parseInt(maxdays);
                generalInformation.setMaxDaysBetVisits(maxday);
            }

            if (einMaster != null && einMaster.equals("on")) {
                generalInformation.setEinMaster("Y");
            } else {
                generalInformation.setEinMaster("N");
            }
            if (commodityMaster != null && commodityMaster.equals("on")) {
                generalInformation.setCommodityMaster("Y");
            } else {
                generalInformation.setCommodityMaster("N");
            }
            if (importMaster != null && importMaster.equals("on")) {
                generalInformation.setImportMaster("Y");
            } else {
                generalInformation.setImportMaster("N");
            }
            generalInformation.setInsuranceComment(insuranceComment);
            generalInformation.setAd1Phones(phone);
            generalInformation.setAd1Faxs(fax);
            generalInformation.setIdText(idText);
            generalInformation.setDunsNo(dunsNo);
            if (goalAcct != null && goalAcct.equalsIgnoreCase("on")) {
                generalInformation.setGoalAcct("Y");
            } else {
                generalInformation.setGoalAcct("N");
            }
            generalInformation.setInventoryCode(inventoryCode);
            generalInformation.setUserName(userName);
            generalInformation.setPassword(password);

            if (poa != null && poa.equalsIgnoreCase("on")) {
                generalInformation.setPoa("Y");
            } else {
                generalInformation.setPoa("N");
            }
            //generalInformation.setMaxDaysBetVisits(Integer.parseInt(maxdays));
            generalInformation.setFwFmcNo(frieghtfmc);
            generalInformation.setFwChbNo(frieghtchb);
            if (maxdays != null && !maxdays.equals("null") && !maxdays.equals("")) {
                String max = masterEditGeneralInformationForm.getMaxDay();
                generalInformation.setMaxDaysBetVisits(Integer.parseInt(max));
            }
            generalInformation.setLdPwdActivated(generalInformation.getLdPwdActivated());
            if (weblcl != null && weblcl.equalsIgnoreCase("on")) {
                generalInformation.setAllowLclQuotes("Y");
            } else {
                generalInformation.setAllowLclQuotes("N");
            }
            if (webfcl != null && webfcl.equalsIgnoreCase("on")) {
                generalInformation.setAllowFclQuotes("Y");
            } else {
                generalInformation.setAllowFclQuotes("N");
            }
            if (faxSail != null && faxSail.equalsIgnoreCase("on")) {
                generalInformation.setFaxSailingSchedule("Y");
            } else {
                generalInformation.setFaxSailingSchedule("N");
            }
            if (fclMail != null && fclMail.equalsIgnoreCase("on")) {
                generalInformation.setFclMailingList("Y");
            } else {
                generalInformation.setFclMailingList("N");
            }
            if (christmasCard != null && christmasCard.equalsIgnoreCase("on")) {
                generalInformation.setChristmasCard("Y");
            } else {
                generalInformation.setChristmasCard("N");
            }
            generalInformation.setImportsCfs(importcfs);
            if (pbasurchrge != null && pbasurchrge.equalsIgnoreCase("on")) {
                generalInformation.setPbaSurchrge("Y");
            } else {
                generalInformation.setPbaSurchrge("N");
            }

            generalInformation.setSpecialRemarks(spclRemark);
            generalInformation.setRoutingInstruction(defaultRoute);
            if (importTrack != null && importTrack.equalsIgnoreCase("on")) {
                generalInformation.setImportTrackingScreen("Y");
            } else {
                generalInformation.setImportTrackingScreen("N");
            }
            if (activatePassword != null && activatePassword.equalsIgnoreCase("on")) {
                generalInformation.setActivatePwdQuotes("Y");
            } else {
                generalInformation.setActivatePwdQuotes("N");
            }
            if (active != null && active.equalsIgnoreCase("on")) {
                generalInformation.setActive("Y");
            } else {
                generalInformation.setActive("N");
            }
            generalInformation.setAd1Phones(phone1);
            generalInformation.setAd1Faxs(fax1);
            List generalInfo = new ArrayList();
            generalInfo.add(generalInformation);
            session.setAttribute("mastergeneralInformation", generalInformation);
            session.setAttribute("generalinfo", generalInfo);
            forwardName = "generalinfo";
        } else if (buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforcustomer") != null) {
                String itemId = (String) session.getAttribute("processinfoforcustomer");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordGeneralInformation();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            noteBean.setPageName("cancelmastergeneralinfo");
            String noteId = "";
            if (generalInformation.getId() != null && !generalInformation.getId().equals("")) {
                noteId = generalInformation.getId().toString();
                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }

            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);

            //session.setAttribute("document",documentName);
            request.setAttribute("customernotes", "customernotes");
            forwardName = "note";
        }
        return mapping.findForward(forwardName);


    }
}
