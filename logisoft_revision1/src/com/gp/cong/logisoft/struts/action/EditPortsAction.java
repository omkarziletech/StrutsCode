/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.AgencyInfo;
import com.gp.cong.logisoft.domain.AgencyRules;
import com.gp.cong.logisoft.domain.AirPortConfiguration;
import com.gp.cong.logisoft.domain.FCLPortConfiguration;
import com.gp.cong.logisoft.domain.ImportPortConfiguration;
import com.gp.cong.logisoft.domain.LCLPortConfiguration;
import com.gp.cong.logisoft.domain.Ports;
import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.struts.form.EditPortsForm;
import com.gp.cong.logisoft.util.DBUtil;
import org.apache.commons.beanutils.PropertyUtils;

public class EditPortsAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditPortsForm editPortsForm = (EditPortsForm) form;// TODO Auto-generated method stub
        String buttonValue = editPortsForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();
        Set lclPortConfigSet = new HashSet<LCLPortConfiguration>();
        Set fclPortConfigSet = new HashSet<FCLPortConfiguration>();
        Set airPortConfigSet = new HashSet<AirPortConfiguration>();
        Set importConfigSet = new HashSet<ImportPortConfiguration>();
        Set agencyInfoSet = new HashSet<AgencyInfo>();
        List agencyInfoListForLcl = null;
        List agencyInfoListForFcl = null;
        List agencyInfoListForAir = null;
        List agencyInfoListForImp = null;
        LCLPortConfiguration lclPortObj = null;
        FCLPortConfiguration fclPortObj = null;
        AirPortConfiguration airPortObj = null;
        ImportPortConfiguration impPortObj = null;

        PortsDAO portsDAO = new PortsDAO();
        Ports portObj = null;
        String message = "";
        DBUtil dbUtil = new DBUtil();
        List PortList = (List) session.getAttribute("portList");

        if (buttonValue.equals("save") || buttonValue.equals("delete")) {
            Ports oldPortObj = (Ports) session.getAttribute("ports");
            if (session.getAttribute("lclPortConfigurationObj") != null) {
                lclPortObj = (LCLPortConfiguration) session.getAttribute("lclPortConfigurationObj");
                new UnLocationDAO().updateUnlocation(lclPortObj.getBlNumbering(), lclPortObj.isExpressRelease(),lclPortObj.isDoNotExpressRelease(), lclPortObj.isOriginalsReleasedAtDestination(), lclPortObj.isOriginalsRequired(),lclPortObj.isMemoHouseBillofLading(), oldPortObj.getUnLocationCode());
            }
            if (CommonUtils.isNotEmpty(oldPortObj.getId())) {
                portObj = portsDAO.findById(oldPortObj.getId());
                portObj.setDrABBR(oldPortObj.getDrABBR());
                portObj.setPiercode(oldPortObj.getPiercode());
                portObj.setEciportcode(oldPortObj.getEciportcode());
                portObj.setPortCity(oldPortObj.getPortCity());
                portObj.setOmit2LetterCountryCode(oldPortObj.getOmit2LetterCountryCode());
                portObj.setCountryName(oldPortObj.getCountryName());
                portObj.setRegioncode(oldPortObj.getRegioncode());
                portObj.setIsocode(oldPortObj.getIsocode());
                portObj.setType(oldPortObj.getType());
                portObj.setPortname(oldPortObj.getPortname());
                portObj.setRatePortName(oldPortObj.getRatePortName());
                portObj.setRateControlNo(oldPortObj.getRateControlNo());
                portObj.setUncitycode(oldPortObj.getUncitycode());
                portObj.setRateFromPierCode(oldPortObj.getRateFromPierCode());
                portObj.setHscode(oldPortObj.getHscode());
                portObj.setNcmno(oldPortObj.getNcmno());
                portObj.setRateControlNo(oldPortObj.getControlNo());
                portObj.setRatePortName(oldPortObj.getPortname());
                //PropertyUtils.copyProperties(portObj, oldPortObj);
            } else {
                portObj = oldPortObj;
            }
            portObj.setShedulenumber(editPortsForm.getPortCode());
            portObj.setControlNo(editPortsForm.getControlNo());
            if (session.getAttribute("lclPortConfigurationObj") != null) {
                lclPortObj = (LCLPortConfiguration) session.getAttribute("lclPortConfigurationObj");
                if (CommonUtils.isNotEmpty(portObj.getLclPortConfigSet())) {
                    PropertyUtils.copyProperties((LCLPortConfiguration) portObj.getLclPortConfigSet().iterator().next(), lclPortObj);
                    portObj.setEngmet(lclPortObj.getDefaultRate());
                } else {
                    portObj.setLclPortConfigSet(new HashSet());
                    portObj.getLclPortConfigSet().add(lclPortObj);
                }
            }
            if (session.getAttribute("fclPortObjConfiguration") != null) {
                fclPortObj = (FCLPortConfiguration) session.getAttribute("fclPortObjConfiguration");
                if (CommonUtils.isNotEmpty(portObj.getFclPortConfigSet())) {
                    PropertyUtils.copyProperties((FCLPortConfiguration) portObj.getFclPortConfigSet().iterator().next(), fclPortObj);
                } else {
                    portObj.setFclPortConfigSet(new HashSet());
                    portObj.getFclPortConfigSet().add(fclPortObj);
                }
            }
            if (session.getAttribute("airPortObjConfigConfiguration") != null) {
                airPortObj = (AirPortConfiguration) session.getAttribute("airPortObjConfigConfiguration");
                if (CommonUtils.isNotEmpty(portObj.getAirPortConfigSet())) {
                    PropertyUtils.copyProperties((AirPortConfiguration) portObj.getAirPortConfigSet().iterator().next(), airPortObj);
                } else {
                    portObj.setAirPortConfigSet(new HashSet());
                    portObj.getAirPortConfigSet().add(airPortObj);
                }
            }
            if (session.getAttribute("impPortObjConfiguration") != null) {
                impPortObj = (ImportPortConfiguration) session.getAttribute("impPortObjConfiguration");
                if (CommonUtils.isNotEmpty(portObj.getImportConfigSet())) {
                    PropertyUtils.copyProperties((ImportPortConfiguration) portObj.getImportConfigSet().iterator().next(), impPortObj);
                } else {
                    portObj.setImportConfigSet(new HashSet());
                    portObj.getImportConfigSet().add(impPortObj);
                }
            }
            if (CommonUtils.isEmpty(portObj.getAgencyInfoSet())) {
                portObj.setAgencyInfoSet(new HashSet());
            }
            if (session.getAttribute("agencyInfoListForLCL") != null) {
                agencyInfoListForLcl = (List) session.getAttribute("agencyInfoListForLCL");
                Iterator iter = agencyInfoListForLcl.iterator();
                while (iter.hasNext()) {
                    AgencyInfo agencyInfo = (AgencyInfo) iter.next();
                    agencyInfoSet.add(agencyInfo);
                }
            }
            if (session.getAttribute("agencyInfoListForFCL") != null) {
                agencyInfoListForFcl = (List) session.getAttribute("agencyInfoListForFCL");
                Iterator iter = agencyInfoListForFcl.iterator();
                while (iter.hasNext()) {
                    AgencyInfo agencyInfo = (AgencyInfo) iter.next();

                    agencyInfoSet.add(agencyInfo);
                }
            }
            if (session.getAttribute("agencyInfoListForAir") != null) {
                agencyInfoListForAir = (List) session.getAttribute("agencyInfoListForAir");
                Iterator iter = agencyInfoListForAir.iterator();
                while (iter.hasNext()) {
                    AgencyInfo agencyInfo = (AgencyInfo) iter.next();
                    agencyInfoSet.add(agencyInfo);
                }
            }
            if (session.getAttribute("agencyInfoListForImp") != null) {
                agencyInfoListForImp = (List) session.getAttribute("agencyInfoListForImp");
                Iterator iter = agencyInfoListForImp.iterator();
                while (iter.hasNext()) {
                    AgencyInfo agencyInfo = (AgencyInfo) iter.next();
                    agencyInfoSet.add(agencyInfo);
                }
            }
            if (agencyInfoSet.size() > 0) {
                if (CommonUtils.isNotEmpty(portObj.getAgencyInfoSet())) {
                    for (Iterator iter = agencyInfoSet.iterator(); iter.hasNext();) {
                        AgencyInfo agencyInfo = (AgencyInfo) iter.next();
                        boolean notFound = true;
                        for (Iterator olditer = portObj.getAgencyInfoSet().iterator(); olditer.hasNext();) {
                            AgencyInfo oldAgencyInfo = (AgencyInfo) olditer.next();
                            if (CommonUtils.isEqual(oldAgencyInfo.getId(), agencyInfo.getId())) {
                                Set<AgencyRules> newRules = agencyInfo.getAgencyRules();
                                Set<AgencyRules> oldRules = oldAgencyInfo.getAgencyRules();
                                PropertyUtils.copyProperties(oldAgencyInfo, agencyInfo);
                                if (CommonUtils.isNotEmpty(newRules)) {
                                    if (CommonUtils.isEmpty(oldRules)) {
                                        oldRules = new HashSet<AgencyRules>();
                                    }
                                    for (AgencyRules newRule : newRules) {
                                        boolean ruleNotFound = true;
                                        for (AgencyRules oldRule : oldRules) {
                                            if (CommonUtils.isEqual(oldRule.getId(), newRule.getId())) {
                                                newRule.setAgencyId(oldRule.getAgencyId());
                                                PropertyUtils.copyProperties(oldRule, newRule);
                                                ruleNotFound = false;
                                            }
                                        }
                                        if (ruleNotFound) {
                                            oldRules.add(newRule);
                                        }
                                    }
                                }
                                oldAgencyInfo.setAgencyRules(oldRules);
                                notFound = false;
                                break;
                            }
                        }
                        if (notFound) {
                            portObj.getAgencyInfoSet().add(agencyInfo);
                        }
                    }
                } else {
                    portObj.setAgencyInfoSet(agencyInfoSet);
                }
            } else {
                portObj.setAgencyInfoSet(null);
            }
        }
        if (buttonValue.equals("save")) {
            boolean flag = false;
            if (null != PortList) {
                for (int i = 0; i < PortList.size(); i++) {
                    PortsTemp tempPorts = (PortsTemp) PortList.get(i);
                    if (tempPorts.getId().equals(portObj.getId())) {
                        tempPorts.setShedulenumber(portObj.getShedulenumber());
                        tempPorts.setControlNo(portObj.getControlNo());
                        tempPorts.setPortname(portObj.getPortname());
                        tempPorts.setEciportcode(portObj.getEciportcode());
                        tempPorts.setType(portObj.getType());
                        tempPorts.setIsocode(portObj.getIsocode());
                        tempPorts.setUncitycode(portObj.getUncitycode());
                        tempPorts.setUnLocationCode(portObj.getUnLocationCode());
                        tempPorts.setCityname(portObj.getCityname());
                        tempPorts.setCountryName(portObj.getCountryName());
                        tempPorts.setPiercode(portObj.getPiercode());
                        tempPorts.setDrABBR(portObj.getDrABBR());
                        tempPorts.setOmit2LetterCountryCode(portObj.getOmit2LetterCountryCode());
                        List portlist = new ArrayList();
                        portlist.add(tempPorts);
                        session.setAttribute("portList", portlist);
                        flag = true;
                        break;
                    }
                }
            }
            if (flag) {
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                portsDAO.update(portObj, userId.getLoginName());
            }
            String programid = null;
            programid = (String) session.getAttribute("processinfoforports");
            String recordid = "";
            if (portObj != null && portObj.getId() != null) {
                recordid = portObj.getId().toString();
            }
            dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");
            message = "Port Details Updated Successfully";
            session.setAttribute("message", message);
            if (session.getAttribute("lclPortobj") != null) {
                session.removeAttribute("lclPortConfigurationObj");
            }
            if (session.getAttribute("fclPortObjConfiguration") != null) {
                session.removeAttribute("fclPortObjConfiguration");
            }
            if (session.getAttribute("airPortObjConfigConfiguration") != null) {
                session.removeAttribute("airPortObjConfigConfiguration");
            }
            if (session.getAttribute("impPortObjConfiguration") != null) {
                session.removeAttribute("impPortObjConfiguration");
            }
            if (session.getAttribute("agencyInfoListForLCL") != null) {
                session.removeAttribute("agencyInfoListForLCL");
            }
            if (session.getAttribute("agencyInfoListForFCL") != null) {
                session.removeAttribute("agencyInfoListForFCL");
            }
            if (session.getAttribute("agencyInfoListForAir") != null) {
                session.removeAttribute("agencyInfoListForAir");
            }
            if (session.getAttribute("agencyInfoListForImp") != null) {
                session.removeAttribute("agencyInfoListForImp");
            }

            session.setAttribute("trade", "ports");
        } else if (buttonValue.equals("delete")) {
            boolean flag = false;
            for (int i = 0; i < PortList.size(); i++) {
                PortsTemp port1 = (PortsTemp) PortList.get(i);
                if (port1.getId().equals(portObj.getId())) {
                    PortList.remove(port1);
                    flag = true;
                    break;

                }
            }
            if (flag) {
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                portsDAO.delete(portObj, userId.getLoginName());
                String programid = null;
                programid = (String) session.getAttribute("processinfoforports");
                String recordid = "";
                if (portObj != null && portObj.getId() != null) {
                    recordid = portObj.getId().toString();
                }
                dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");
                message = "Ports details deleted successfully";
                session.setAttribute("message", message);
                if (session.getAttribute("lclPortobj") != null) {
                    session.removeAttribute("lclPortConfigurationObj");
                }
                if (session.getAttribute("fclPortObjConfiguration") != null) {
                    session.removeAttribute("fclPortObjConfiguration");
                }
                if (session.getAttribute("airPortObjConfigConfiguration") != null) {
                    session.removeAttribute("airPortObjConfigConfiguration");
                }
                if (session.getAttribute("impPortObjConfiguration") != null) {
                    session.removeAttribute("impPortObjConfiguration");
                }
                if (session.getAttribute("agencyInfoListForLCL") != null) {
                    session.removeAttribute("agencyInfoListForLCL");
                }
                if (session.getAttribute("agencyInfoListForFCL") != null) {
                    session.removeAttribute("agencyInfoListForFCL");
                }
                if (session.getAttribute("agencyInfoListForAir") != null) {
                    session.removeAttribute("agencyInfoListForAir");
                }
                if (session.getAttribute("agencyInfoListForImp") != null) {
                    session.removeAttribute("agencyInfoListForImp");
                }

                session.setAttribute("trade", "ports");
            }
        } else if (buttonValue.equals("cancel")) {
            if (session.getAttribute("lclPortobj") != null) {
                session.removeAttribute("lclPortConfigurationObj");
            }
            if (session.getAttribute("fclPortObjConfiguration") != null) {
                session.removeAttribute("fclPortObjConfiguration");
            }
            if (session.getAttribute("airPortObjConfigConfiguration") != null) {
                session.removeAttribute("airPortObjConfigConfiguration");
            }
            if (session.getAttribute("impPortObjConfiguration") != null) {
                session.removeAttribute("impPortObjConfiguration");
            }
            if (session.getAttribute("agencyInfoListForLCL") != null) {
                session.removeAttribute("agencyInfoListForLCL");
            }
            if (session.getAttribute("agencyInfoListForFCL") != null) {
                session.removeAttribute("agencyInfoListForFCL");
            }
            if (session.getAttribute("agencyInfoListForAir") != null) {
                session.removeAttribute("agencyInfoListForAir");
            }
            if (session.getAttribute("agencyInfoListForImp") != null) {
                session.removeAttribute("agencyInfoListForImp");
            }
            String programid = null;
            programid = (String) session.getAttribute("processinfoforports");
            String recordid = "";
            if (session.getAttribute("ports") != null) {
                portObj = (Ports) session.getAttribute("ports");
            }
            if (portObj != null && portObj.getId() != null) {
                recordid = portObj.getId().toString();
            }
            dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");
            session.setAttribute("trade", "ports");
        } else if (buttonValue.equals("cancelview")) {
            session.setAttribute("trade", "ports");
        }
        session.setAttribute("buttonValue", buttonValue);
        return mapping.findForward("addports");
    }
}
