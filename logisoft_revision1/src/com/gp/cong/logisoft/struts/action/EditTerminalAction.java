/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.TerminalBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordTerminal;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.RefTerminal;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.TerminalManager;
import com.gp.cong.logisoft.hibernate.dao.TerminalManagerDao;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.EditTerminalForm;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;

/**
 * MyEclipse Struts Creation date: 12-08-2007
 *
 * XDoclet definition:
 *
 * @struts.action path="/editTerminal" name="editTerminalForm"
 * input="/jsps/datareference/EditTerminal.jsp" scope="request" validate="true"
 */
public class EditTerminalAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditTerminalForm editTerminalForm = (EditTerminalForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = editTerminalForm.getButtonValue();
        String message = "";
        String termNo = editTerminalForm.getTermNo();
        String name = editTerminalForm.getName();
        String unLocCode = editTerminalForm.getUnLocCode();
        String unLocationCode1 = editTerminalForm.getUnLocationCode1();
        String terminalType = editTerminalForm.getTerminalType();

        String city = editTerminalForm.getCity();
        String address1 = editTerminalForm.getAddressLine1();
        String address2 = editTerminalForm.getAddressLine2();

        String zip = editTerminalForm.getZip();
        String phoneNo1 = editTerminalForm.getPhoneNo1();
        String phoneNo2 = editTerminalForm.getPhoneNo2();
        String phoneNo3 = editTerminalForm.getPhoneNo3();
        String extension1 = editTerminalForm.getExtension1();
        String extension2 = editTerminalForm.getExtension2();
        String extension3 = editTerminalForm.getExtension3();
        String faxNo1 = editTerminalForm.getFaxNo1();
        String faxNo2 = editTerminalForm.getFaxNo2();
        String faxNo3 = editTerminalForm.getFaxNo3();
        String faxNo4 = editTerminalForm.getFaxNo4();
        String faxNo5 = editTerminalForm.getFaxNo5();

        String printerModel = editTerminalForm.getPrinterModel();
        String acf = editTerminalForm.getAcf();
        String terminalLocation = editTerminalForm.getTerminalLocation();
        String ledgerno = editTerminalForm.getGeneralLedger();
        String careof = editTerminalForm.getCareof();
        String scheduleSuffix = editTerminalForm.getScheduleSuffix();
        String contactEmail = editTerminalForm.getImportsContacts();
        String govSchCode = editTerminalForm.getGovSchCode();
        String notes = editTerminalForm.getNotes();
        String airsrvc = editTerminalForm.getAirsrvc();
        String chargeCode = editTerminalForm.getChargeCode();
        String brlChargeCode = editTerminalForm.getBrlChargeCode();
        String ovr10kChgCode = editTerminalForm.getOvr10kChgCode();
        String ovr20kChgCode = editTerminalForm.getOvr20kChgCode();
        String docChargeCode = editTerminalForm.getDocChargeCode();
        String Tpacctno = editTerminalForm.getAcctno();
        String docDeptEmail = editTerminalForm.getDocDeptEmail();
        String zaccount = editTerminalForm.getZaccount();
        String exportsBillingTerminalEmail = editTerminalForm.getExportsBillingTerminalEmail();
        String docDeptName = editTerminalForm.getDocDeptName();
        String customerServiceName = editTerminalForm.getCustomerServiceName();
        String customerServiceEmail = editTerminalForm.getCustomerServiceEmail();
        String fclExportIssuingTerminal = editTerminalForm.getFclExportIssuingTerminal();
        String intraBookerId = editTerminalForm.getIntraBookerId();
        String importsDoorDeliveryEmail = editTerminalForm.getImportsDoorDeliveryEmail();
        String lclDocDeptName = editTerminalForm.getLclDocDeptName();
        String lclDocDeptEmail = editTerminalForm.getLclDocDeptEmail();
        String lclCustomerServiceName  = editTerminalForm.getLclCustomerServiceName();
        String lclCustomerServiceEmail = editTerminalForm.getLclCustomerServiceEmail();

        RefTerminal terminal1 = null;
        UnLocation unLocation = null;

        if (airsrvc == null) {
            airsrvc = "N";

        } else {
            airsrvc = "Y";
        }

        String forwardName = "";

        UnLocationDAO unLocationDAO = new UnLocationDAO();
        DBUtil dbUtil = new DBUtil();

        GenericCode genericCode = null;
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        String phone1 = "";
        String phone2 = "";
        String phone3 = "";
        String fax1 = "";
        String fax2 = "";
        String fax3 = "";
        String fax4 = "";
        String fax5 = "";

        RefTerminal terminal = new RefTerminal();
        if (session.getAttribute("terminal") != null) {
            terminal = (RefTerminal) session.getAttribute("terminal");
        }
        if (!buttonValue.equals("note") && !buttonValue.equals("cancelview") && !buttonValue.equals("terminalcontact") && !buttonValue.equals("searchcity")) {
//            phone1 = dbUtil.stringtokenizer(phoneNo1);
//            phone2 = dbUtil.stringtokenizer(phoneNo2);
//            phone3 = dbUtil.stringtokenizer(phoneNo3);
//            fax1 = dbUtil.stringtokenizer(faxNo1);
//            fax2 = dbUtil.stringtokenizer(faxNo2);
//            fax3 = dbUtil.stringtokenizer(faxNo3);
//            fax4 = dbUtil.stringtokenizer(faxNo4);
//            fax5 = dbUtil.stringtokenizer(faxNo5);

            phone1 = phoneNo1;
            phone2 = phoneNo2;
            phone3 = phoneNo3;
            fax1 = faxNo1;
            fax2 = faxNo2;
            fax3 = faxNo3;
            fax4 = faxNo4;
            fax5 = faxNo5;
        }
        List terminalList = null;
        if (session.getAttribute("terminalList") != null) {
            terminalList = (List) session.getAttribute("terminalList");
        }

        RefTerminalDAO terminalDAO = new RefTerminalDAO();

        //button value is cancelview
        if (buttonValue.equals("cancelview")) {
            forwardName = "searchterminal";
        } else if (!buttonValue.equals("cancelview") && !buttonValue.equals("cancel") && !buttonValue.equals("note") && !buttonValue.equals("terminalcontact")) {

            terminal.setTrmnam(name);
            terminal.setAddres1(address1);
            terminal.setAddres2(address2);
            terminal.setZipcde(zip);

            terminal.setExtension1(extension1);
            terminal.setExtension2(extension2);
            terminal.setExtension3(extension3);

            terminal.setTerminalLocation(terminalLocation);
            terminal.setLedgerNo(ledgerno);
            terminal.setCareof(careof);
            terminal.setScheduleSuffix(scheduleSuffix);
            terminal.setImportsContactEmail(contactEmail);
            //terminal.setFaxnum5(faxNo5);
            terminal.setPrintermodel(printerModel);
            terminal.setCountry(terminal.getCountry());
            terminal.setState(terminal.getState());
            terminal.setUnLocation(terminal.getUnLocation());
            terminal.setActyon(acf);
            unLocation = new UnLocationDAO().getUnlocation(unLocCode);
            if (unLocation != null) {
                terminal.setUnLocation(unLocation);
            }
            terminal.setCity1(city);
            terminal.setUnLocCode(unLocCode);
            terminal.setUnLocationCode1(unLocationCode1);
            terminal.setNotes(notes);
            terminal.setGovSchCode(govSchCode);
            terminal.setAirsrvc(airsrvc);

            if (CommonFunctions.isNotNull(chargeCode)) {
                genericCode = genericCodeDAO.getId(chargeCode);
                terminal.setGenericCode1(genericCode);
            }
            if (CommonFunctions.isNotNull(brlChargeCode)) {
                genericCode = genericCodeDAO.getId(brlChargeCode);
                terminal.setGenericCode2(genericCode);
            }
            if (CommonFunctions.isNotNull(ovr10kChgCode)) {
                genericCode = genericCodeDAO.getId(ovr10kChgCode);
                terminal.setGenericCode3(genericCode);
            }
            if (CommonFunctions.isNotNull(ovr20kChgCode)) {
                genericCode = genericCodeDAO.getId(ovr20kChgCode);
                terminal.setGenericCode4(genericCode);
            }
            if (CommonFunctions.isNotNull(docChargeCode)) {
                genericCode = genericCodeDAO.getId(docChargeCode);
                terminal.setGenericCode5(genericCode);
            }
            if (terminalType != null && !terminalType.equals("0")) {
                genericCode = genericCodeDAO.findById(Integer.parseInt(terminalType));
                terminal.setCodeDesc(terminalType);
                terminal.setGenericCode(genericCode);
            }

            terminal.setPhnnum1(phone1);
            terminal.setPhnnum2(phone2);
            terminal.setPhnnum3(phone3);
            terminal.setExtension1(extension1);
            terminal.setExtension2(extension2);
            terminal.setExtension3(extension3);
            terminal.setFaxnum1(fax1);
            terminal.setFaxnum2(fax2);
            terminal.setFaxnum3(fax3);
            terminal.setFaxnum4(fax4);
            terminal.setFaxnum5(fax5);
            terminal.setTpacctno(Tpacctno);
            terminal.setDocDeptEmail(docDeptEmail);
            terminal.setZaccount(zaccount);
            terminal.setExportsBillingTerminalEmail(exportsBillingTerminalEmail);
            terminal.setDocDeptName(docDeptName);
            terminal.setCustomerServiceName(customerServiceName);
            terminal.setCustomerServiceEmail(customerServiceEmail);
            terminal.setFclExportIssuingTerminal(fclExportIssuingTerminal);
            terminal.setIntraBookerId(intraBookerId);
            terminal.setImportsDoorDeliveryEmail(importsDoorDeliveryEmail);
            terminal.setLclDocDeptName(lclDocDeptName);
            terminal.setLclDocDeptEmail(lclDocDeptEmail);
            terminal.setLclCustomerServiceName(lclCustomerServiceName);
            terminal.setLclCustomerServiceEmail(lclCustomerServiceEmail);                    
            forwardName = "addterminal";

        }
        if (buttonValue != null && buttonValue.equals("update")) {
            session.removeAttribute("terminalList");
            terminalList = terminalDAO.findTermNumber1(terminal.getTrmnum());
            session.setAttribute("terminalList", terminalList);
            boolean flag = false;

            for (int i = 0; i < terminalList.size(); i++) {
                RefTerminalTemp tempTerm = (RefTerminalTemp) terminalList.get(i);

                if (tempTerm.getTrmnum().equals(terminal.getTrmnum())) {
                    tempTerm.setTrmnam(terminal.getTrmnam());
                    tempTerm.setTrmnum(terminal.getTrmnum());
                    tempTerm.setGenericCode(terminal.getGenericCode());
                    tempTerm.setCodeDesc(terminal.getCodeDesc());
                    tempTerm.setTerminalLocation(terminal.getTerminalLocation());
                    tempTerm.setCity1(terminal.getCity1());
                    tempTerm.setUnLocCode(terminal.getUnLocCode());
                    tempTerm.setUnLocationCode1(terminal.getUnLocationCode1());
                    tempTerm.setDocDeptEmail(terminal.getDocDeptEmail());
                    tempTerm.setDocDeptName(docDeptName);
                    tempTerm.setCustomerServiceName(customerServiceName);
                    tempTerm.setCustomerServiceEmail(customerServiceEmail);
                    tempTerm.setLclDocDeptName(lclDocDeptName);
                    tempTerm.setLclDocDeptEmail(terminal.getLclDocDeptEmail());
                    tempTerm.setLclCustomerServiceName(lclCustomerServiceName);
                    tempTerm.setLclCustomerServiceEmail(lclCustomerServiceEmail);
                    tempTerm.setIntraBookerId(intraBookerId);
                    tempTerm.setImportsDoorDeliveryEmail(importsDoorDeliveryEmail);
                    flag = true;
                    break;
                }
            }
            if (flag) {
                User userid = null;

                if (session.getAttribute("loginuser") != null) {
                    userid = (User) session.getAttribute("loginuser");
                }
                terminalDAO.update(terminal, userid.getLoginName());
            }
            String programid = null;
            programid = (String) session.getAttribute("processinfoforterminal");
            String recordid = "";
            if (terminal != null) {
                recordid = terminal.getTrmnum();
            }
            dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");

            if (session.getAttribute("terminal") != null) {
                session.removeAttribute("terminal");
            }
            if (session.getAttribute("contactAddList") != null) {
                session.removeAttribute("contactAddList");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            message = "Terminal details updated successfully";
            request.setAttribute("message", message);
            forwardName = "searchterminal";
        } else if (buttonValue != null && buttonValue.equals("delete")) {
            User userid = null;
            boolean flag = false;
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            String programid = null;
            programid = (String) session.getAttribute("processinfoforterminal");
            String recordid = "";
            if (terminal != null) {
                recordid = terminal.getTrmnum();
            }
            for (int i = 0; i < terminalList.size(); i++) {
                RefTerminalTemp tempTerminal = (RefTerminalTemp) terminalList.get(i);
                if (tempTerminal.getTrmnum().equals(terminal.getTrmnum())) {
                    terminalList.remove(tempTerminal);
                    flag = true;
                    break;

                }
            }
            if (flag) {
                RefTerminalDAO refTerminalDAO = new RefTerminalDAO();
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                refTerminalDAO.delete(terminal, userId.getLoginName());
                message = "Terminal details deleted successfully";
                request.setAttribute("message", message);
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            forwardName = "searchterminal";
        } else if (buttonValue != null && buttonValue.equals("cancel")) {
            String programid = null;
            programid = (String) session.getAttribute("processinfoforterminal");
            String recordid = "";
            if (terminal != null) {
                recordid = terminal.getTrmnum();
            }
            dbUtil.getProcessInfo(programid, recordid, "editcancelled", null);
            if (session.getAttribute("terminal") != null) {
                session.removeAttribute("terminal");
            }
            if (session.getAttribute("contactAddList") != null) {
                session.removeAttribute("contactAddList");
            }
            if (session.getAttribute("noteBean") != null) {
                session.removeAttribute("noteBean");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            forwardName = "searchterminal";
        } else if (buttonValue.equals("terminalcontact")) {
            UserDAO userDAO = new UserDAO();
            String terminalNo = terminal.getTrmnum();
            if (terminalNo != null) {
                List userList = userDAO.findTerminalName(terminal);

                session.setAttribute("contactAddList", userList);
            }

            String newTerm = "editterm";
            session.setAttribute("newterm", newTerm);
            forwardName = "terminalcontact";
        } else if (buttonValue != null && buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforterminal") != null) {
                String itemId = (String) session.getAttribute("processinfoforterminal");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordTerminal();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            noteBean.setPageName("cancelterminal");
            String noteId = terminal.getTrmnum();

            noteBean.setNoteId(noteId);
            noteBean.setReferenceId(noteId);
            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            request.setAttribute("buttonValue", buttonValue);
            return mapping.findForward("note");
        }

        if (buttonValue.equals("searchcity")) {
            if (session.getAttribute("terminal") != null) {
                terminal1 = (RefTerminal) session.getAttribute("terminal");

            } else {
                terminal1 = new RefTerminal();
            }
            phone1 = phoneNo1;
            phone2 = phoneNo2;
            phone3 = phoneNo3;
            fax1 = faxNo1;
            fax2 = faxNo2;
            fax3 = faxNo3;
            fax4 = faxNo4;
            fax5 = faxNo5;
            terminal1.setTrmnam(name);
            terminal1.setAddres1(address1);
            terminal1.setAddres2(address2);
            terminal1.setZipcde(zip);
            terminal1.setPhnnum1(phone1);
            terminal1.setPhnnum2(phone2);
            terminal1.setPhnnum3(phone3);
            terminal1.setExtension1(extension1);
            terminal1.setExtension2(extension2);
            terminal1.setExtension3(extension3);
            terminal1.setFaxnum1(fax1);
            terminal1.setFaxnum2(fax2);
            terminal1.setFaxnum3(fax3);
            terminal1.setFaxnum4(fax4);
            terminal1.setFaxnum5(fax5);
            terminal1.setTerminalLocation(terminalLocation);
            terminal1.setLedgerNo(ledgerno);
            terminal1.setCareof(careof);
            terminal1.setScheduleSuffix(scheduleSuffix);
            terminal1.setImportsContactEmail(contactEmail);
            terminal1.setPrintermodel(printerModel);
            terminal1.setActyon(acf);
            terminal1.setCity1(city);
            terminal1.setUnLocCode(unLocCode);
            terminal1.setUnLocationCode1(unLocationCode1);
            terminal1.setGovSchCode(govSchCode);
            terminal1.setAirsrvc(terminal.getAirsrvc());
            List searchcity = unLocationDAO.findbyCity(city);
            if (searchcity != null && searchcity.size() > 0) {
                UnLocation unLoc = (UnLocation) searchcity.get(0);
                terminal1.setUnLocation(unLoc);
                terminal1.setCity1(city);

            } else {
                UnLocation unLoc = null;
                terminal1.setUnLocation(unLoc);
                terminal1.setCity1(city);
            }
            terminal1.setDocDeptEmail(docDeptEmail);
            terminal1.setZaccount(zaccount);
            terminal1.setExportsBillingTerminalEmail(exportsBillingTerminalEmail);
            terminal.setDocDeptName(docDeptName);
            terminal.setCustomerServiceName(customerServiceName);
            terminal.setCustomerServiceEmail(customerServiceEmail);
            terminal.setFclExportIssuingTerminal(fclExportIssuingTerminal);
            terminal.setLclDocDeptName(lclDocDeptName);
            terminal.setLclDocDeptEmail(lclDocDeptEmail);
            terminal.setLclCustomerServiceName(lclCustomerServiceName);
            terminal.setLclCustomerServiceEmail(lclCustomerServiceEmail); 
            session.setAttribute("terminal", terminal1);
            return mapping.findForward("addterminal");

        }
        TerminalManagerDao terminalManagerDao = new TerminalManagerDao();
        UserDAO userDAO = new UserDAO();
        RefTerminalDAO refTerminalDao = new RefTerminalDAO();
        TerminalManager terminalManager = new TerminalManager();
        if (buttonValue.equalsIgnoreCase("saveManager")) {
            RefTerminal refTerminal = refTerminalDao.findById(termNo);
            terminalManager.setRefTerminal(refTerminal);
            User user = userDAO.findUserName(editTerminalForm.getUserName());
            terminalManager.setUser(user);
            terminalManagerDao.save(terminalManager);
            List<TerminalBean> managerList = terminalManagerDao.getTerminalManagers(termNo);
            request.setAttribute("managerList", managerList);
            request.setAttribute("termNo", termNo);
            forwardName = "terminalManagers";
        } else if (buttonValue.equalsIgnoreCase("deleteManager")) {
            terminalManager.setId(editTerminalForm.getTerminalManagerId());
            RefTerminal refTerminal = refTerminalDao.findById(termNo);
            terminalManager.setRefTerminal(refTerminal);
            User user = userDAO.findUserName(editTerminalForm.getUserName());
            terminalManager.setUser(user);
            terminalManagerDao.delete(terminalManager);
            List<TerminalBean> managerList = terminalManagerDao.getTerminalManagers(termNo);
            request.setAttribute("managerList", managerList);
            request.setAttribute("termNo", termNo);
            forwardName = "terminalManagers";
        }

        return mapping.findForward(forwardName);
    }
}
