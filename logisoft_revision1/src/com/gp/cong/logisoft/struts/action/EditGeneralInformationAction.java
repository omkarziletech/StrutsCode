/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordCustomer;
import com.gp.cong.logisoft.domain.AuditLogRecordGeneralInformation;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.form.EditGeneralInformationForm;
import com.gp.cong.logisoft.struts.form.SearchCustomerForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 01-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editGeneralInformation" name="editGeneralInformationForm" input="/jsps/Tradingpartnermaintainance/EditGeneralInformation.jsp" scope="request" validate="true"
 */
public class EditGeneralInformationAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		EditGeneralInformationForm editGeneralInformationForm = (EditGeneralInformationForm) form;// TODO Auto-generated method stub
		
		String idType=editGeneralInformationForm.getIdType();
		customerBean customerbean=new customerBean();
		DBUtil dbUtil=new DBUtil();
		String buttonValue=editGeneralInformationForm.getButtonValue();
		String commodity=editGeneralInformationForm.getCommodity();
		String impCommodity=editGeneralInformationForm.getImpCommodity();
		String commodityDesc=editGeneralInformationForm.getCommDesc();
		String impcommodityDesc=editGeneralInformationForm.getImpCommodityDesc();
		String phone=editGeneralInformationForm.getPhone1();
		String insure=editGeneralInformationForm.getInsure();
		String goalAcct=editGeneralInformationForm.getGoalAcct();
		String fax=editGeneralInformationForm.getFax1();
		String inventoryCode=editGeneralInformationForm.getInventoryCode();
		String userName=editGeneralInformationForm.getUserName();
		String password=editGeneralInformationForm.getPassword();
		String poa=editGeneralInformationForm.getPoa();
		String insuranceComment=editGeneralInformationForm.getInsuranceComment();
		String maxdays=editGeneralInformationForm.getMaxDay();
		String salescode=editGeneralInformationForm.getSalesCode();
		String frieghtfmc=editGeneralInformationForm.getFrieghtFmc();
		String frieghtchb=editGeneralInformationForm.getFrieghtChb();
		String arContact=editGeneralInformationForm.getArCode();
		String spclRemark=editGeneralInformationForm.getSpclRemark();
		String defaultRoute=editGeneralInformationForm.getDefaultRoute();
		String importTrack=editGeneralInformationForm.getImportTrackingScreen();
		String activatePassword=editGeneralInformationForm.getActivatePwdQuotes();
		String weblcl=editGeneralInformationForm.getAllowLclQuotes();
		String webfcl=editGeneralInformationForm.getAllowFclQuotes();
		String reserved=editGeneralInformationForm.getReservedForFuture();
		String faxSail=editGeneralInformationForm.getFaxSailingSchedule();
		String fclMail=editGeneralInformationForm.getFclMailingList();
		String christmasCard=editGeneralInformationForm.getChristmasCard();
		String importcfs=editGeneralInformationForm.getImportsCfs();
		String pbasurchrge=editGeneralInformationForm.getPbaSurchrge();
		String lastDate=editGeneralInformationForm.getLastDate();
		String einMaster=editGeneralInformationForm.getEinmaster();
		String commodityMaster=editGeneralInformationForm.getCommoditymaster();
		String importMaster=editGeneralInformationForm.getImportmaster();
		String phone1="";
		String idText=editGeneralInformationForm.getIdtext();
		String dunsNo = editGeneralInformationForm.getDunsNo();
		
		String acctType1=editGeneralInformationForm.getAccountType1();
		String acctType2=editGeneralInformationForm.getAccountType2();
		String acctType3=editGeneralInformationForm.getAccountType3();
		String acctType4=editGeneralInformationForm.getAccountType4();
		String acctType5=editGeneralInformationForm.getAccountType5();
		String acctType6=editGeneralInformationForm.getAccountType6();
		String acctType7=editGeneralInformationForm.getAccountType7();
		String acctType8=editGeneralInformationForm.getAccountType8();
		String acctType9=editGeneralInformationForm.getAccountType9();
		String acctType10=editGeneralInformationForm.getAccountType10();
		String acctType11=editGeneralInformationForm.getAccountType11();
		String active=editGeneralInformationForm.getActive();
		
		String accountType="";
		
		if(phone!=null)
		{
			phone1=dbUtil.stringtokenizer(phone);
		}
			
		
		String fax1="";
		if(fax!=null)
		{
			fax1=dbUtil.stringtokenizer(fax);
		}
			
		HttpSession session = ((HttpServletRequest)request).getSession();
		GeneralInformation generalInformation=null;
		
		GenericCode salecode=null;
		GenericCode gen = null;
		String forwardName="";
		customerbean.setAccountType1(acctType1);
		customerbean.setAccountType2(acctType2);
		customerbean.setAccountType3(acctType3);
		customerbean.setAccountType4(acctType4);
		customerbean.setAccountType5(acctType5);
		customerbean.setAccountType6(acctType6);
		customerbean.setAccountType7(acctType7);
		customerbean.setAccountType8(acctType8);
		customerbean.setAccountType9(acctType9);
		customerbean.setAccountType10(acctType10);
		customerbean.setAccountType11(acctType11);
		customerbean.setGoalAcct(goalAcct);
		customerbean.setPoa(poa);
		customerbean.setImportTrack(importTrack);
		customerbean.setWebQuotes(activatePassword);
		customerbean.setWebFcl(webfcl);
		customerbean.setWebLcl(weblcl);
		customerbean.setInsure(insure);
		customerbean.setReserved(reserved);
		customerbean.setFaxSail(faxSail);
		customerbean.setFclMail(fclMail);
		customerbean.setChristmas(christmasCard);
		customerbean.setImportCfs(importcfs);
		customerbean.setPba(pbasurchrge);
		customerbean.setIdType(idType);
		customerbean.setEinmaster(einMaster);
		customerbean.setDunsNo(dunsNo);
		customerbean.setCommoditymaster(commodityMaster);
		customerbean.setImportmaster(importMaster);
		//customerbean.setInsuranceComment(insuranceComment);
		customerbean.setActive(active);
		GenericCodeDAO genericCodeDAO=new GenericCodeDAO();
		session.setAttribute("customerbean",customerbean);
		
		
		if(buttonValue!=null && buttonValue.equals("editpopupsearch"))//-----DOJO CODE------
		{
			if(session.getAttribute("generalInformation")!=null)
			{
				generalInformation=(GeneralInformation)session.getAttribute("generalInformation");
				
			}
			else
			{
				
				 generalInformation=new GeneralInformation();
			}
			if(commodity != null && !commodity.equals("") && !commodity.equals("%"))
			{
				List comlist = genericCodeDAO.findForGenericCode(commodity);
				
				if(comlist != null && comlist.size()>0)
				{
					 gen = (GenericCode)comlist.get(0);
					 generalInformation.setGenericCode(gen);
					 session.setAttribute("generalInformation", generalInformation);
				}
			
		    }
			
			if(commodityDesc!=null && !commodityDesc.equals(""))
			{
				List cdlist=genericCodeDAO.findByCodedesc(commodityDesc);
				if(cdlist!=null && cdlist.size()>0)
				{
					gen=(GenericCode)cdlist.get(0);
					generalInformation.setGenericCode(gen);
					session.setAttribute("generalInformation", generalInformation);
				}
				
			}
			
			
			if(impCommodity != null && !impCommodity.equals("") && !impCommodity.equals("%"))
			{
				List implist = genericCodeDAO.findForGenericCode(impCommodity);
				
				if(implist != null && implist.size()>0)
				{
					 gen = (GenericCode)implist.get(0);
					 generalInformation.setImpCommodity(gen);
					 session.setAttribute("generalInformation", generalInformation);
				}
			}
			if(impcommodityDesc!=null && !impcommodityDesc.equals(""))
			{
				List idlist=genericCodeDAO.findByCodedesc(impcommodityDesc);
				if(idlist!=null && idlist.size()>0)
				{
					gen=(GenericCode)idlist.get(0);
					generalInformation.setImpCommodity(gen);
					session.setAttribute("generalInformation", generalInformation);
				}
				
			}
			
		
		}
	
		if(buttonValue!=null && !buttonValue.equals("note"))
		{
			
			if(session.getAttribute("generalInformation")!=null)
			{
				generalInformation=(GeneralInformation)session.getAttribute("generalInformation");
				
			}
			else
			{
				
				 generalInformation=new GeneralInformation();
			}
						
			
			generalInformation.setIdType(idType);

			
			if(acctType1!=null && acctType1.equalsIgnoreCase("on")) 
			{
				accountType="S,";
			}
			if(acctType2!=null && acctType2.equalsIgnoreCase("on"))
			{
				accountType=accountType+"F,";
			}
			if(acctType3!=null && acctType3.equalsIgnoreCase("on"))
			{
				accountType=accountType+"N,";
			}
			if(acctType4!=null && acctType4.equalsIgnoreCase("on"))
			{
				accountType=accountType+"C,";
			}
			if(acctType5!=null && acctType5.equalsIgnoreCase("on"))
			{
				accountType=accountType+"SS,";
			}
			if(acctType6!=null && acctType6.equalsIgnoreCase("on"))
			{
				accountType=accountType+"T,";
			}
			if(acctType7!=null && acctType7.equalsIgnoreCase("on"))
			{
				accountType=accountType+"A,";
			}
			if(acctType8!=null && acctType8.equalsIgnoreCase("on"))
			{
				accountType=accountType+"I,";
			}
			if(acctType9!=null && acctType9.equalsIgnoreCase("on"))
			{
				accountType=accountType+"E,";
			}
			if(acctType10!=null && acctType10.equalsIgnoreCase("on"))
			{
				accountType=accountType+"V,";
			}
			if(acctType11!=null && acctType11.equalsIgnoreCase("on"))
			{
				accountType=accountType+"O,";
			}
			
			if(accountType.length()>0)
			{
				accountType=accountType.substring(0, accountType.length()-1);
			}
			if(insure!=null && insure.equalsIgnoreCase("on"))
			{
				generalInformation.setInsure("Y");
				customerbean.setInsure("Y");
			}
			
			else 
			{
				generalInformation.setInsure("N");
				customerbean.setInsure("N");
				
			}
			generalInformation.setAccounttype(accountType);
			
		if(salescode!=null && !salescode.equals("") &&  !salescode.equals("0"))
		{
			salecode=genericCodeDAO.findById(Integer.parseInt(salescode));
				generalInformation.setSalesCodeName(salecode.getCodedesc());
				generalInformation.setSalescode(salecode);
				
				
		}
		if(maxdays!=null && !maxdays.equals("null")&& !maxdays.equals(""))
		{
			
			Integer maxday=Integer.parseInt(maxdays);
			generalInformation.setMaxDaysBetVisits(maxday);
		}
		
		if(einMaster!=null && einMaster.equals("on"))
		{
			generalInformation.setEinMaster("Y");
		}
		else
		{
			generalInformation.setEinMaster("N");
		}
		if(commodityMaster!=null && commodityMaster.equals("on"))
		{
			generalInformation.setCommodityMaster("Y");
		}
		else
		{
			generalInformation.setCommodityMaster("N");
		}
		if(importMaster!=null && importMaster.equals("on"))
		{
			generalInformation.setImportMaster("Y");
		}
		else
		{
			generalInformation.setImportMaster("N");
		}
		generalInformation.setInsuranceComment(insuranceComment);
		generalInformation.setAd1Phones(phone);
		generalInformation.setAd1Faxs(fax);
		generalInformation.setIdText(idText);
		generalInformation.setDunsNo(dunsNo);
		
		if(goalAcct!=null && goalAcct.equalsIgnoreCase("on"))
		{
			generalInformation.setGoalAcct("Y");
		}
		else
		{
			generalInformation.setGoalAcct("N");
		}
		generalInformation.setInventoryCode(inventoryCode);
		generalInformation.setUserName(userName);
		generalInformation.setPassword(password);
		
		if(poa!=null && poa.equalsIgnoreCase("on"))
		{
			generalInformation.setPoa("Y");
		}
		else 
		{
			generalInformation.setPoa("N");
		}
		
		//generalInformation.setMaxDaysBetVisits(Integer.parseInt(maxdays));
		generalInformation.setFwFmcNo(frieghtfmc);
		generalInformation.setFwChbNo(frieghtchb);
		generalInformation.setLdPwdActivated(generalInformation.getLdPwdActivated());
		
		/*java.util.Date javaDate=null;
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		if(lastDate!=null&&!lastDate.equals(""))
    {
    	try {
    		javaDate=dateFormat.parse(lastDate);
    		
    		generalInformation.setLdPwdActivated(javaDate);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }*/
		
		
		if(weblcl!=null && weblcl.equalsIgnoreCase("on"))
		{
			generalInformation.setAllowLclQuotes("Y");
		}
		else 
		{
			generalInformation.setAllowLclQuotes("N");
		}
		if(webfcl!=null && webfcl.equalsIgnoreCase("on"))
		{
			generalInformation.setAllowFclQuotes("Y");
		}
		else
		{
			generalInformation.setAllowFclQuotes("N");
		}
		if(faxSail!=null && faxSail.equalsIgnoreCase("on"))
		{
			generalInformation.setFaxSailingSchedule("Y");
		}
		else
		{
			generalInformation.setFaxSailingSchedule("N");
		}
		if(fclMail!=null && fclMail.equalsIgnoreCase("on"))
		{
			generalInformation.setFclMailingList("Y");
		}
		else 
		{
			generalInformation.setFclMailingList("N");
		}
		if(christmasCard!=null && christmasCard.equalsIgnoreCase("on"))
		{
			generalInformation.setChristmasCard("Y");
		}
		else
		{
			generalInformation.setChristmasCard("N");
		}
		generalInformation.setImportsCfs(importcfs);
		if(pbasurchrge!=null && pbasurchrge.equalsIgnoreCase("on"))
		{
			generalInformation.setPbaSurchrge("Y");
		}
		else
		{
			generalInformation.setPbaSurchrge("N");
		}
		
		generalInformation.setSpecialRemarks(spclRemark);
		generalInformation.setRoutingInstruction(defaultRoute);
		if(importTrack!=null && importTrack.equalsIgnoreCase("on"))
		{
			generalInformation.setImportTrackingScreen("Y");
		}
		else 
		{
			generalInformation.setImportTrackingScreen("N");
		}
		if(activatePassword!=null && activatePassword.equalsIgnoreCase("on"))
		{
			generalInformation.setActivatePwdQuotes("Y");
		}
		else
		{
			generalInformation.setActivatePwdQuotes("N");
		}
		if(active!=null && active.equalsIgnoreCase("on"))
		{
			generalInformation.setActive("Y");
		}
		else
		{
			generalInformation.setActive("N");
		}
		generalInformation.setAd1Phones(phone1);
		generalInformation.setAd1Faxs(fax1);
		List generalInfo=new ArrayList();
		generalInfo.add(generalInformation);
		session.setAttribute("generalInformation",generalInformation);
		session.setAttribute("generalinfo", generalInfo);
		forwardName="generalinfo";
		}
		
		
		else if(buttonValue.equals("note"))
		{
			if(session.getAttribute("generalInformation")!=null)
			{
				generalInformation=(GeneralInformation)session.getAttribute("generalInformation");
				
			}
			else
			{
				
				 generalInformation=new GeneralInformation();
			}
			
			ItemDAO itemDAO=new ItemDAO();
			Item item=new Item();
			String itemName="";
			if(session.getAttribute("processinfoforcustomer")!=null)
			{
				String itemId=(String)session.getAttribute("processinfoforcustomer");
				item=itemDAO.findById(Integer.parseInt(itemId));
				itemName=item.getItemDesc();
			}
			
		  forwardName="note";
		  AuditLogRecord auditLogRecord=new AuditLogRecordGeneralInformation();
		  NoteBean noteBean=new NoteBean();
		  noteBean.setItemName(itemName);
		  noteBean.setAuditLogRecord(auditLogRecord);
		  noteBean.setButtonValue(buttonValue);
		  //noteBean.setUser(user);
		  noteBean.setPageName("cancelgeneralinfo");
		  String noteId="";
		  if(generalInformation.getId()!=null && !generalInformation.getId().equals(""))
		  {
		   noteId=generalInformation.getId().toString();
		   noteBean.setNoteId(noteId);
			  noteBean.setReferenceId(noteId);
		  }
		  
		  List auditList=null;
		  auditList=dbUtil.getNoteInformation(noteId,auditLogRecord);
		  noteBean.setAuditList(auditList);
		  noteBean.setVoidednote("");
		  request.setAttribute("noteBean",noteBean);
		  String documentName="User";
		  
		  //session.setAttribute("document",documentName);
		  request.setAttribute("customernotes", "customernotes");
		  forwardName="note";
		
		}
	
		return mapping.findForward(forwardName);
		
		
	}

	}
