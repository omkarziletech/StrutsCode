/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordCustomer;
import com.gp.cong.logisoft.domain.AuditLogRecordTerminal;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.TradingPartner;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.RefTerminal;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerContactDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GeneralInformationDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.struts.form.EditCustomerForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 01-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editCustomer" name="editCustomerForm" input="/jsps/Tradingpartnermaintainance/EditCustomer.jsp" scope="request" validate="true"
 */
public class EditCustomerAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		EditCustomerForm editCustomerForm = (EditCustomerForm) form;// TODO Auto-generated method stub
		
		
		String acctType1=editCustomerForm.getAccountType1();
		String acctType2=editCustomerForm.getAccountType2();
		String acctType3=editCustomerForm.getAccountType3();
		String acctType4=editCustomerForm.getAccountType4();
		String acctType5=editCustomerForm.getAccountType5();
		String accountType=" ";
		String forwardName="";
		String buttonValue=editCustomerForm.getButtonValue();
		HttpSession session = ((HttpServletRequest)request).getSession();
		DBUtil dbUtil=new DBUtil();
		String coName=editCustomerForm.getCoName();
		
		
		
		String address1=editCustomerForm.getAddress1();
		String portName=editCustomerForm.getPortName();
		String schNum=editCustomerForm.getSchnum();
		String masterAddress=editCustomerForm.getMasterAddress();
		String city=editCustomerForm.getCity();
	
		String phone=editCustomerForm.getPhone();
		String contactName=editCustomerForm.getContactName();
		String zip=editCustomerForm.getZip();
		String fax=editCustomerForm.getFax();
				
		String extension=editCustomerForm.getExtension();
			
		String email1=editCustomerForm.getEmail1();
		String email2=editCustomerForm.getEmail2();
		Customer accountDetails=null;
		String phone1="";
		TradingPartner tradingpartner= new TradingPartner();
		
		
		
		/*List addressList=new ArrayList();
		if(session.getAttribute("AddressList")!=null)
		{
			addressList=(List)session.getAttribute("AddressList");
		}
		else
		{
			addressList=new ArrayList();
		}
		addressList.add(accountDetails);
		session.setAttribute("AddressList",addressList);
		*/
		if(request.getParameter("ind")!=null)
		{
			if(session.getAttribute("customerbean")!=null)
			{
				session.removeAttribute("customerbean");
			}
			List addressList=new ArrayList();
			int ind = Integer.parseInt(request.getParameter("ind"));
			addressList=(List)session.getAttribute("addressList");
			Customer cust=(Customer)addressList.get(ind);
			cust.setIndex(ind);
			session.setAttribute("adressCust", cust);
			String edit="edit";
			request.setAttribute("edit",edit);
			forwardName="editcustomer";
		}
		else
		{
		if(phone!=null)
		{
			phone1=dbUtil.stringtokenizer(phone);
		}
			
		String fax1="";
		if(fax!=null)
		{
			fax1=dbUtil.stringtokenizer(fax);
		}
			

		forwardName="";
		customerBean customerbean=new customerBean();
		customerbean.setAccountType1(acctType1);
		customerbean.setAccountType2(acctType2);
		customerbean.setAccountType3(acctType3);
		customerbean.setAccountType4(acctType4);
		customerbean.setAccountType5(acctType5);
		customerbean.setMasterAddress(masterAddress);
		if(session.getAttribute("customer")!=null)
		{
			accountDetails=(Customer)session.getAttribute("customer");
		}
		else
		{
			accountDetails=new Customer();
		}
		accountDetails.setCoName(coName);
		accountDetails.setAddress1(address1);
		
		accountDetails.setPhone(phone1);
		accountDetails.setContactName(contactName);
		accountDetails.setZip(zip);
		accountDetails.setFax(fax1);
		
		
		accountDetails.setExtension(extension);
		
		
		accountDetails.setEmail1(email1);
		accountDetails.setEmail2(email2);
		accountDetails.setCity2(city);
		tradingpartner.setType(accountType);
		
		session.setAttribute("customerbean", customerbean);
		accountDetails.setPhone(phone1);
		accountDetails.setFax(fax1);
		
		
		
		session.setAttribute("customer",accountDetails);
		
		
		List addressList=new ArrayList();
		if(buttonValue.equals("add"))
		{
			if(session.getAttribute("addressList")!=null)
			{
				addressList=(List)session.getAttribute("addressList");
			}
			else
			{
				addressList=new ArrayList();
			}
			addressList.add(accountDetails);
			session.setAttribute("addressList",addressList);
			
			
			
			if(session.getAttribute("customer")!=null)
			{
				session.removeAttribute("customer");
			}
			
		}
		
		
		
		
		if( !buttonValue.equals("note") )
		{
			
			
			if(masterAddress!=null && masterAddress.equals("on"))
			{
				tradingpartner.setMaster("Y");
			}
			else
			{
				tradingpartner.setMaster("N");
			}
			
			if(portName!=null && portName!="")
			{
				accountDetails.setPortName(portName);
			}
			
			/*if(schNum!=null && schNum!="")
			{
				accountDetails.setSchNum(schNum);
			}*/
			
			forwardName="editcustomer";
			
		}
		
		else if(buttonValue!=null && buttonValue.equals("note"))
		{
			ItemDAO itemDAO=new ItemDAO();
			Item item=new Item();
			String itemName="";
			if(session.getAttribute("processinfoforcustomer")!=null)
			{
				String itemId=(String)session.getAttribute("processinfoforcustomer");
				item=itemDAO.findById(Integer.parseInt(itemId));
				itemName=item.getItemDesc();
			}
			
		  forwardName="note";
		  AuditLogRecord auditLogRecord=new AuditLogRecordCustomer();
		  NoteBean noteBean=new NoteBean();
		  noteBean.setItemName(itemName);
		  noteBean.setAuditLogRecord(auditLogRecord);
		  noteBean.setButtonValue(buttonValue);
		  //noteBean.setUser(user);
		  noteBean.setPageName("cancelcustomer");
		  String noteId="";
		  if(accountDetails.getAccountNo()!=null && !accountDetails.getAccountNo().equals(""))
		  {
			  noteId=accountDetails.getAccountNo().toString();
			  noteBean.setNoteId(noteId);
			  noteBean.setReferenceId(noteId);
		  }
		
	
		  List auditList=null;
		  auditList=dbUtil.getNoteInformation(noteId,auditLogRecord);
		  noteBean.setAuditList(auditList);
		  noteBean.setVoidednote("");
		 request.setAttribute("noteBean",noteBean);
		  String documentName="User";
		  request.setAttribute("customernotes", "customernotes");
		  forwardName="note";
		}
		}
		request.setAttribute("buttonValue",buttonValue);
		//return mapping.findForward("addcustomer");
		return mapping.findForward(forwardName);
	}
}