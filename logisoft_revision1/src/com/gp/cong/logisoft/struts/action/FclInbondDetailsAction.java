
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import com.gp.cong.common.DateUtils;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.fcl.FclBlBC;
import com.gp.cong.logisoft.domain.FclInbondDetails;
import com.gp.cong.logisoft.hibernate.dao.FclInbondDetailsDAO;
import com.gp.cong.logisoft.struts.form.InbondDetailsForm;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cvst.logisoft.domain.FclBl;
import java.util.Date;
import org.apache.struts.util.LabelValueBean;

/**
 * MyEclipse Struts Creation date: 04-15-2009
 *
 * XDoclet definition:
 *
 * @struts.action path="/fclInbondDetails" name="InbondDetailsForm"
 * input="/jsps/fclQuotes/FclInbondDetails.jsp" scope="request" validate="true"
 */
public class FclInbondDetailsAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception {
        InbondDetailsForm inbondDetailsForm = (InbondDetailsForm) form;
        String buttonValue = inbondDetailsForm.getButtonValue();
        if (null != request.getParameter("bolid")) {
            inbondDetailsForm.setBolId(request.getParameter("bolid"));
        }
        if (null != request.getParameter("fileNo")) {
            inbondDetailsForm.setFileNo(request.getParameter("fileNo"));
        }
        if (request.getParameter("buttonValue") != null && request.getParameter("buttonValue").equals("fclbl")) {
            setRequest(inbondDetailsForm, request, getInbondDetailsList(inbondDetailsForm));
        } else {
            if (buttonValue.equals("Save")) {
                setRequest(inbondDetailsForm, request, saveInbondDetails(inbondDetailsForm));
            } else if (buttonValue.equals("delete")) {
                setRequest(inbondDetailsForm, request, deleteInbondDetails(inbondDetailsForm));
            } else if (buttonValue.equals("Update")) {
                setRequest(inbondDetailsForm, request, updateInbondDetails(inbondDetailsForm));
            }
        }
        
        request.setAttribute("inbondTypeList", inbondTypeList());
        return mapping.findForward("inbond");
    }

    public void setRequest(InbondDetailsForm inbondDetailsForm, HttpServletRequest request, List list) {
        request.setAttribute("inbondDetailsList", list);
        request.setAttribute("fileNo", inbondDetailsForm.getFileNo());
        request.setAttribute("bolId", inbondDetailsForm.getBolId());
        request.setAttribute("inbondPorts", inbondDetailsForm.getPodValues());
    }

    public List<FclInbondDetails> getInbondDetailsList(InbondDetailsForm inbondDetailsForm)throws Exception {
        List<FclInbondDetails> inbondDetailsList = null;
        Integer bol = (CommonFunctions.isNotNull(inbondDetailsForm.getBolId())) ? new Integer(inbondDetailsForm.getBolId()) : 0;
        FclBlBC fclBlBC = new FclBlBC();
        FclBl fclBl = fclBlBC.getFclBLObject(bol);
        if (CommonFunctions.isNotNullOrNotEmpty(fclBl.getFclInbondDetails())) {
            inbondDetailsList = new ArrayList(fclBl.getFclInbondDetails());
        }
        return inbondDetailsList;
    }

    public List<FclInbondDetails> saveInbondDetails(InbondDetailsForm inbondDetailsForm)throws Exception {
        FclInbondDetailsDAO fclInbondDetailsDAO = new FclInbondDetailsDAO();
        List<FclInbondDetails> inbondDetailsList = null;
        Integer bol = (CommonFunctions.isNotNull(inbondDetailsForm.getBolId())) ? new Integer(inbondDetailsForm.getBolId()) : 0;
        FclBlBC fclBlBC = new FclBlBC();
        FclInbondDetails fclInbondDetails = new FclInbondDetails();
        //This is for Inbond Details
        String ports = inbondDetailsForm.getInbondPort();
        if (CommonUtils.isNotEmpty(inbondDetailsForm.getInbondPort())
                && inbondDetailsForm.getInbondPort().indexOf("/") != -1) {
            ports = inbondDetailsForm.getInbondPort().substring(0, inbondDetailsForm.getInbondPort().indexOf("/"));
        }
        Date date = null;
        if (CommonUtils.isNotEmpty(inbondDetailsForm.getInbondDate())) {
                date = DateUtils.parseToDate(inbondDetailsForm.getInbondDate());
            fclInbondDetails.setInbondDate(date);
        }
        fclInbondDetails.setInbondNumber(inbondDetailsForm.getInbondNumber());
        fclInbondDetails.setInbondType(inbondDetailsForm.getInbondType());
        fclInbondDetails.setFileNumber(inbondDetailsForm.getFileNo());
        fclInbondDetails.setInbondPort(ports);
        fclInbondDetails.setBolId(bol);
        fclInbondDetailsDAO.save(fclInbondDetails);
        List l = fclInbondDetailsDAO.findByProperty("bolId", bol);
        return fclInbondDetailsDAO.findByProperty("bolId", bol);

    }

    public List<FclInbondDetails> updateInbondDetails(InbondDetailsForm inbondDetailsForm)throws Exception {
        FclInbondDetailsDAO fclInbondDetailsDAO = new FclInbondDetailsDAO();
        if (CommonUtils.isNotEmpty(inbondDetailsForm.getInbondId())) {
            FclInbondDetails fclInbondDetails = fclInbondDetailsDAO.findById(Integer.parseInt(inbondDetailsForm.getInbondId()));
            String ports = inbondDetailsForm.getInbondPort();
            if (CommonUtils.isNotEmpty(inbondDetailsForm.getInbondPort())
                    && inbondDetailsForm.getInbondPort().indexOf("/") != -1) {
                ports = inbondDetailsForm.getInbondPort().substring(0, inbondDetailsForm.getInbondPort().indexOf("/"));
            }
            Date date = null;
            if (CommonUtils.isNotEmpty(inbondDetailsForm.getInbondDate())) {
                    date = DateUtils.parseToDate(inbondDetailsForm.getInbondDate());
                fclInbondDetails.setInbondDate(date);
            }
            fclInbondDetails.setInbondNumber(inbondDetailsForm.getInbondNumber());
            fclInbondDetails.setInbondType(inbondDetailsForm.getInbondType());
            fclInbondDetails.setInbondPort(ports);
        }
        Integer bol = (CommonFunctions.isNotNull(inbondDetailsForm.getBolId())) ? new Integer(inbondDetailsForm.getBolId()) : 0;
        return fclInbondDetailsDAO.findByProperty("bolId", bol);
    }

    public List<FclInbondDetails> deleteInbondDetails(InbondDetailsForm inbondDetailsForm)throws Exception {
        FclInbondDetailsDAO fclInbondDetailsDAO = new FclInbondDetailsDAO();
        if (CommonUtils.isNotEmpty(inbondDetailsForm.getInbondId())) {
            FclInbondDetails fclInbondDetails = fclInbondDetailsDAO.findById(Integer.parseInt(inbondDetailsForm.getInbondId()));
            fclInbondDetailsDAO.delete(fclInbondDetails);
        }
        Integer bol = (CommonFunctions.isNotNull(inbondDetailsForm.getBolId())) ? new Integer(inbondDetailsForm.getBolId()) : 0;
        return fclInbondDetailsDAO.findByProperty("bolId", bol);
    }

    public List inbondTypeList() {
        List inbondTypeList = new ArrayList();
            inbondTypeList.add(new LabelValueBean("Select Inbond Type", ""));
            inbondTypeList.add(new LabelValueBean("IT", "IT"));
            inbondTypeList.add(new LabelValueBean("IE", "IE"));
            inbondTypeList.add(new LabelValueBean("TE", "TE"));
            inbondTypeList.add(new LabelValueBean("WDT", "WDT"));
            inbondTypeList.add(new LabelValueBean("WDIE", "WDIE"));
            inbondTypeList.add(new LabelValueBean("WDTE", "WDTE"));
            inbondTypeList.add(new LabelValueBean("IT/QP", "IT/QP"));
            inbondTypeList.add(new LabelValueBean("IE/QP", "IE/QP"));
            inbondTypeList.add(new LabelValueBean("TE/QP", "TE/QP"));
        return inbondTypeList;
    }
}