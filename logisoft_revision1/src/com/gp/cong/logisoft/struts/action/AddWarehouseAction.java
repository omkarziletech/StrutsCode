/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Warehouse;
import com.gp.cong.logisoft.domain.WarehouseTemp;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.hibernate.dao.WarehouseDAO;
import com.gp.cong.logisoft.struts.form.AddWarehouseForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 11-29-2007
 * @author Rohith
 * XDoclet definition:
 * @struts.action path="/addWarehouse" name="addWarehouseForm" input="/jsps/datareference/addWarehouse.jsp" scope="request" validate="true"
 */
public class AddWarehouseAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddWarehouseForm addWarehouseForm = (AddWarehouseForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        DBUtil dbUtil = new DBUtil();
        String warehouseCode = addWarehouseForm.getWarehouseCode();
        String warehouseName = addWarehouseForm.getWarehouseName();
        String managerName = addWarehouseForm.getManagerName();
        String address = addWarehouseForm.getAddress();
        String country = addWarehouseForm.getCountry();
        String city = addWarehouseForm.getCity();
        String state = addWarehouseForm.getState();
        String zip = addWarehouseForm.getZip();
        String phone = addWarehouseForm.getPhone();
        String extension = addWarehouseForm.getExtension();
        String fax = addWarehouseForm.getFax();
        String acWarehouse = addWarehouseForm.getGeneralAirCargo();
        String ipiVendor = addWarehouseForm.getIpiVendor();
        String ipiCommodity = addWarehouseForm.getIpiCommodity();
        String acAddress = addWarehouseForm.getAcAddress();
        String acCountry = addWarehouseForm.getAcCountry();
        String acCity = addWarehouseForm.getAcCity();
        String acState = addWarehouseForm.getAcState();
        String acZip = addWarehouseForm.getAcZip();
        String acPhone = addWarehouseForm.getAcPhone();
        String acExtension = addWarehouseForm.getAcExtension();
        String acFax = addWarehouseForm.getAcFax();
        String buttonValue = addWarehouseForm.getButtonValue();
        String type = addWarehouseForm.getWarehouseType();
        String forwardName = "";
        String message = "";
        Warehouse warehouse = null;
        Warehouse warehouse1 = null;
        UnLocationDAO locationDAO = new UnLocationDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        String phone1 = dbUtil.stringtokenizer(phone);
        String fax1 = dbUtil.stringtokenizer(fax);
        String acphone1 = dbUtil.stringtokenizer(acPhone);
        String acfax1 = dbUtil.stringtokenizer(acFax);
        if("saveWareHouse".equalsIgnoreCase(buttonValue)){
            User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
            WarehouseDAO warehouseDAO = new WarehouseDAO();
            warehouse = new Warehouse();
            warehouse.setWarehouseName(warehouseName);
            warehouse.setWarehouseNo(warehouseCode);
            warehouse.setAddress(address);
            warehouse.setZipCode(zip);
            warehouse.setPhone(phone);
            warehouse.setFax(fax);
            warehouse.setCity(city);
            warehouse.setState(state);
            warehouse.setExtension(extension);
            warehouse.setVendorNo(ipiVendor);
            warehouse.setCommodityNo(ipiCommodity);
            warehouse.setAcWarehouseName(acWarehouse);
            warehouse.setAcAddress(acAddress);
            warehouse.setAcZipCode(acZip);
            warehouse.setAcPhone(acPhone);
            warehouse.setAcFax(acFax);
            warehouse.setAirCity(acCity);
            warehouse.setAcState(acState);
            warehouse.setAcExtension(acExtension);
            warehouse.setWarehouseType(null != addWarehouseForm.getWarehouseType()?addWarehouseForm.getWarehouseType():"FCLE");
            warehouse.setCountryCode(genericCodeDAO.findByCodeDescName(country, 11));
            warehouse.setAcCountryCode(genericCodeDAO.findByCodeDescName(acCountry, 11));
            List list = locationDAO.findbyCity(city);
            List list1 = locationDAO.findbyCity(acCity);
            warehouse.setManager(addWarehouseForm.getManagerName());
            UnLocation location = null;
            UnLocation location1 = null;
            if (list != null && list.size() > 0) {
                location = (UnLocation) list.get(0);
                warehouse.setCityCode(location);
            }
            if (list1 != null && list1.size() > 0) {
                location1 = (UnLocation) list1.get(0);
                warehouse.setAcCity(location1);
            }
            warehouseDAO.save(warehouse, userId.getLoginName());
            message = "Warehouse details saved successfully";
            request.setAttribute("message", message);
            return mapping.findForward("booking");

        }else if (!buttonValue.equals("cancel") && !buttonValue.equals("searchcity") && !buttonValue.equals("searchaccity")) {
            if (session.getAttribute("warehouse") == null) {
                warehouse = new Warehouse();
            } else {
                warehouse = (Warehouse) session.getAttribute("warehouse");
            }
            WarehouseDAO warehouseDAO = new WarehouseDAO();
            warehouse.setWarehouseName(warehouseName);
            warehouse.setAddress(address);
            warehouse.setZipCode(zip);
            warehouse.setPhone(phone);
            warehouse.setFax(fax);
            warehouse.setExtension(extension);
            warehouse.setAcWarehouseName(acWarehouse);
            warehouse.setVendorNo(ipiVendor);
            warehouse.setCommodityNo(ipiCommodity);
            warehouse.setAcAddress(acAddress);
            warehouse.setAcZipCode(acZip);
            warehouse.setAcPhone(acPhone);
            warehouse.setAcFax(acFax);
            warehouse.setCity(city);
            warehouse.setWarehouseType(type);
            warehouse.setState(state);
            warehouse.setImportsCFSDevanning(addWarehouseForm.getImportCfsDevanning());
            warehouse.setCfsDevanningEmail(addWarehouseForm.getCfsDevanningEmail());
            warehouse.setCountryCode(genericCodeDAO.findByCodeDescName(country, 11));
            warehouse.setAcCountryCode(genericCodeDAO.findByCodeDescName(acCountry, 11));
            List list = locationDAO.findbyCity(city);
            UnLocation location = null;
            if (list != null && list.size() > 0) {
                location = (UnLocation) list.get(0);
            }
            if (location != null) {
                warehouse.setCityCode(location);
            }
            warehouse.setManager(addWarehouseForm.getManagerName());
            warehouse.setAirCity(acCity);
            warehouse.setAcExtension(acExtension);
            session.setAttribute("warehouse", warehouse);
            if (buttonValue.equals("add")) {
                warehouse.setPhone(phone1);
                warehouse.setFax(fax1);
                warehouse.setAcPhone(acphone1);
                warehouse.setAcFax(acfax1);
                session.setAttribute("warehouse", warehouse);
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                warehouseDAO.save(warehouse, userId.getLoginName());
                List warehouseList = new ArrayList();
                WarehouseTemp wareHouseTemp = new WarehouseTemp();
                wareHouseTemp.setWarehouseNo(warehouse.getWarehouseNo());
                wareHouseTemp.setCity(warehouse.getCity());
                wareHouseTemp.setWarehouseName(warehouse.getWarehouseName());
                wareHouseTemp.setId(warehouse.getId());
                warehouseList.add(wareHouseTemp);
                session.setAttribute("warehouseList", warehouseList);

                if (session.getAttribute("warehouse") != null) {
                    session.removeAttribute("warehouse");
                }
                message = "Warehouse details saved successfully";
                request.setAttribute("message", message);
                request.setAttribute("buttonValue", buttonValue);
                return mapping.findForward("cancel");

            }
            return mapping.findForward("addsave");
        }
        if (buttonValue.equals("cancel")) {
            if (session.getAttribute("warehouse") != null) {
                session.removeAttribute("warehouse");
            }
            forwardName = "cancel";
        }
        if (buttonValue.equals("searchcity")) {
            if (session.getAttribute("warehouse") != null) {
                warehouse = (Warehouse) session.getAttribute("warehouse");
            } else {
                warehouse = new Warehouse();
            }
            warehouse.setWarehouseName(warehouseName);

            warehouse.setAddress(address);

            warehouse.setZipCode(zip);
            warehouse.setPhone(phone);
            warehouse.setFax(fax);
            warehouse.setExtension(extension);

            warehouse.setAcWarehouseName(acWarehouse);
            warehouse.setVendorNo(ipiVendor);
            warehouse.setCommodityNo(ipiCommodity);
            warehouse.setAcAddress(acAddress);
            warehouse.setAcZipCode(acZip);
            warehouse.setAcPhone(acPhone);
            warehouse.setAcFax(acFax);
            //warehouse.setCity(city);
            //warehouse.setAirCity(acCity);
            warehouse.setAcExtension(acExtension);
            UnLocationDAO unLocationDAO = new UnLocationDAO();
            List searchcity = unLocationDAO.findbyCity(city);

            if (searchcity != null && searchcity.size() > 0) {
                UnLocation unLoc = (UnLocation) searchcity.get(0);
                warehouse.setCityCode(unLoc);
                warehouse.setCity(city);

            } else {
                warehouse.setCityCode(new UnLocation());
                warehouse.setCity(city);
            }
            session.setAttribute("warehouse", warehouse);
            return mapping.findForward("addsave");
        }
        if (buttonValue.equals("searchaccity")) {
            if (session.getAttribute("warehouse") != null) {
                warehouse = (Warehouse) session.getAttribute("warehouse");
            } else {
                warehouse = new Warehouse();
            }
            warehouse.setWarehouseName(warehouseName);

            warehouse.setAddress(address);

            warehouse.setZipCode(zip);
            warehouse.setPhone(phone);
            warehouse.setFax(fax);
            warehouse.setExtension(extension);

            warehouse.setAcWarehouseName(acWarehouse);
            warehouse.setVendorNo(ipiVendor);
            warehouse.setCommodityNo(ipiCommodity);
            warehouse.setAcAddress(acAddress);
            warehouse.setAcZipCode(acZip);
            warehouse.setAcPhone(acPhone);
            warehouse.setAcFax(acFax);
            warehouse.setAcExtension(acExtension);
            UnLocationDAO unLocationDAO = new UnLocationDAO();
            List searchaccity = unLocationDAO.findbyCity(acCity);
            if (searchaccity != null && searchaccity.size() > 0) {
                UnLocation unLoc = (UnLocation) searchaccity.get(0);
                warehouse.setAcCity(unLoc);
                warehouse.setAirCity(acCity);

            } else {
                warehouse.setAcCity(new UnLocation());
                warehouse.setAirCity(acCity);
            }
            session.setAttribute("warehouse", warehouse);
            return mapping.findForward("addsave");

        }

        return mapping.findForward(forwardName);
    }
}