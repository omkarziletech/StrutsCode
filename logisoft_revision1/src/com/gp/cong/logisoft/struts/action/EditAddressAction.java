/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.struts.form.EditAddressForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 07-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editAddress" name="editAddressForm" input="/jsps/Tradingpartnermaintainance/EditAddress.jsp" scope="request" validate="true"
 */
public class EditAddressAction extends Action {
   
    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditAddressForm editAddressForm = (EditAddressForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = editAddressForm.getButtonValue();
        String coName = editAddressForm.getCoName();
        String phone = editAddressForm.getPhone();
        String address = editAddressForm.getAddress1();
        String extension = editAddressForm.getExtension();
        String city = editAddressForm.getCity();
        String state = editAddressForm.getState();
        String country = editAddressForm.getCountry();
        String zip = editAddressForm.getZip();
        String contactName = editAddressForm.getContactName();
        String fax = editAddressForm.getFax();
        String primary = editAddressForm.getPrimary();
        String email1 = editAddressForm.getEmail1();
        String email2 = editAddressForm.getEmail2();
        List addressList = new ArrayList();
        Customer customer = new Customer();
        UnLocationDAO unlocationDAO = new UnLocationDAO();
        UnLocation uno = null;
        customerBean customerbean = new customerBean();
        DBUtil dbUtil = new DBUtil();
        String editAddress = "";
        String path = "";
        if (buttonValue != null && buttonValue.equals("editcitypopup"))//-----DOJO CODE FOR CITY------
        {
            if (session.getAttribute("adressCust") != null) {
                customer = (Customer) session.getAttribute("adressCust");
            } else {
                customer = new Customer();
            }
            if (city != null && !city.equals(" ") && !city.equals("%")) {

                List clist = unlocationDAO.findCity(city);
                if (clist != null && clist.size() > 0) {

                    uno = (UnLocation) clist.get(0);
                    customer.setCuntry(uno.getCountryId());
                    if (uno.getStateId() != null) {
                        customer.setState(uno.getStateId().getCode());
                    }

                    session.setAttribute("adressCust", customer);

                }
            }

        }

        if (session.getAttribute("adressCust") != null) {
            customer = (Customer) session.getAttribute("adressCust");
        }
        if (primary != null) {
            customer.setPrimary("on");
        } else {
            customer.setPrimary("off");
        }
        session.setAttribute("adressCust", customer);//----------------SESSION SET--------

        customerbean.setPrimary(primary);
        session.setAttribute("customerbean", customerbean);

        if (session.getAttribute("editAddress") != null) {
            editAddress = (String) session.getAttribute("editAddress");
            if (editAddress.equals("add")) {
                path = "/jsps/Tradingpartnermaintainance/Customer.jsp";
            } else if (editAddress.equals("edit")) {
                path = "/jsps/Tradingpartnermaintainance/EditCustomer.jsp";
            } else if (editAddress.equals("masteradd")) {
                path = "/jsps/Tradingpartnermaintainance/MasterCustomer.jsp";
            } else if (editAddress.equals("masteredit")) {
                path = "/jsps/Tradingpartnermaintainance/masterEditCustomer.jsp";
            }

            request.setAttribute("path1", path);
        }
        if (buttonValue.equals("add") || buttonValue.equals("popup")) {

            String phone1 = dbUtil.stringtokenizer(phone);
            String fax1 = dbUtil.stringtokenizer(fax);
            if (session.getAttribute("editAddress").equals("add") || session.getAttribute("editAddress").equals("edit")) {
                addressList = (List) session.getAttribute("addressList");
            } else if (session.getAttribute("editAddress").equals("masteradd") || session.getAttribute("editAddress").equals("masteredit")) {
                addressList = (List) session.getAttribute("masteraddressList");
            }
            if (session.getAttribute("customerbean") != null) {
                session.removeAttribute("customerbean");
            }
            if (addressList.size() > 1) {
                for (int i = 0; i < addressList.size(); i++) {
                    Customer cust = (Customer) addressList.get(i);
                    if (primary != null && primary.equalsIgnoreCase("on")) {
                        cust.setPrimary("off");
                    }
                    if (cust.getIndex() != null && customer.getIndex() != null) {
                        if (cust.getIndex().equals(customer.getIndex())) {
                            cust.setCoName(coName);
                            cust.setPhone(phone1);
                            cust.setAddress1(address);
                            cust.setExtension(extension);
                            cust.setCity2(city);
                            cust.setState(state);
                            cust.setZip(zip);
                            cust.setContactName(contactName);
                            cust.setFax(fax1);
                            cust.setEmail1(email1);
                            cust.setEmail2(email2);
                            if (primary != null && primary.equalsIgnoreCase("on")) {
                                cust.setPrimary("on");
                            }

                            if (buttonValue.equals("add")) {
                                request.setAttribute("editaddress", "editaddress");
                            }
                        }
                    }
                }
            } else if (addressList.size() == 1) {
                for (int i = 0; i < addressList.size(); i++) {
                    Customer cust = (Customer) addressList.get(i);
                    cust.setPrimary("on");
                    if (cust.getIndex() != null && customer.getIndex() != null) {
                        if (cust.getIndex().equals(customer.getIndex())) {
                            cust.setCoName(coName);
                            cust.setPhone(phone1);
                            cust.setAddress1(address);
                            cust.setExtension(extension);
                            cust.setCity2(city);
                            cust.setState(state);
                            cust.setZip(zip);
                            cust.setContactName(contactName);
                            cust.setFax(fax1);
                            cust.setEmail1(email1);
                            cust.setEmail2(email2);
                            if (buttonValue.equals("add")) {
                                request.setAttribute("editaddress", "editaddress");
                            }
                        }
                    }
                }
            }
            boolean flag = false;
            for (int i = 0; i < addressList.size(); i++) {
                Customer c1 = (Customer) addressList.get(i);
                if (c1.getPrimary().equalsIgnoreCase("on")) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                Customer c1 = (Customer) addressList.get(0);
                c1.setPrimary("on");
            }
        } else if (buttonValue.equals("delete")) {
            if (session.getAttribute("editAddress").equals("add") || session.getAttribute("editAddress").equals("edit")) {
                addressList = (List) session.getAttribute("addressList");
            } else if (session.getAttribute("editAddress").equals("masteradd") || session.getAttribute("editAddress").equals("masteredit")) {
                addressList = (List) session.getAttribute("masteraddressList");
            }
            for (int i = 0; i < addressList.size(); i++) {
                Customer cust = (Customer) addressList.get(i);
                if (cust.getIndex() != null && customer.getIndex() != null) {
                    if (cust.getIndex().equals(customer.getIndex())) {
                        addressList.remove(cust);
                    }
                }
            }
            request.setAttribute("editaddress", "editaddress");
        } else if (buttonValue.equals("cancel") || buttonValue.equals("cancelview")) {
            request.setAttribute("editaddress", "editaddress");
        }
        return mapping.findForward("edit");
    }
}