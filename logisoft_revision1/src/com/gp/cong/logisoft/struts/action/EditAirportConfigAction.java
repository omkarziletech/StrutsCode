 /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AirPortConfiguration;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordAir;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.Ports;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.form.EditAirportConfigForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 01-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editAirportConfig" name="editAirportConfigForm" input="/jsps/datareference/editAirportConfig.jsp" scope="request" validate="true"
 */
public class EditAirportConfigAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditAirportConfigForm editAirportConfigForm = (EditAirportConfigForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String buttonValue = editAirportConfigForm.getButtonValue();
        Ports portObj = null;
        DBUtil dbUtil = new DBUtil();
        GenericCode genObj = new GenericCode();
        GenericCode airCode = new GenericCode();
        GenericCodeDAO genericDAO = new GenericCodeDAO();
        AirPortConfiguration airPortObjConfig = new AirPortConfiguration();
        if (session.getAttribute("airPortObjConfigConfiguration") != null) {
            airPortObjConfig = (AirPortConfiguration) session.getAttribute("airPortObjConfigConfiguration");
        }
        Set airPortConfigSet = new HashSet<AirPortConfiguration>();
        String flight = editAirportConfigForm.getFlightScheduleRegion();
        forwardName = "editairportConfig";


        if (session.getAttribute("ports") != null) {

            portObj = (Ports) session.getAttribute("ports");
            airPortConfigSet = portObj.getAirPortConfigSet();
            Iterator iter = airPortConfigSet.iterator();
            while (iter.hasNext()) {
                airPortObjConfig = (AirPortConfiguration) iter.next();
            }
        }
        if (!buttonValue.equals("note")) {

            if (flight != null && !flight.equals("0")) {
                genObj = genericDAO.findById(Integer.parseInt(flight));
                airPortObjConfig.setFlightScheduleRegion(genObj);
            }

            if (editAirportConfigForm.getAirPortCode() != null && !editAirportConfigForm.getAirPortCode().equals("0")) {
                airCode = genericDAO.findById(Integer.parseInt(editAirportConfigForm.getAirPortCode()));
                airPortObjConfig.setAirPortId(airCode);
            }


            airPortObjConfig.setPrintOnAirFitSch(editAirportConfigForm.getPrintOnAirFitSch());
            airPortObjConfig.setServiceAir(editAirportConfigForm.getServiceAir());
            airPortObjConfig.setAirSplRemarksEnglish(editAirportConfigForm.getAirPortSplRemarksinEnglish());
            airPortObjConfig.setAirSplRemarksSpanish(editAirportConfigForm.getAirPortSplRemarksinSpanish());
            airPortObjConfig.setLclAirBlgoCollect(editAirportConfigForm.getLclAirBlgoCollect());
            airPortObjConfig.setLineManager(editAirportConfigForm.getLineManager());
            session.setAttribute("airPortObjConfigConfiguration", airPortObjConfig);

        } else if (buttonValue != null && buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforports") != null) {
                String itemId = (String) session.getAttribute("processinfoforports");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordAir();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            //noteBean.setUser(user);
            noteBean.setPageName("cancelair");
            String noteId = "";
            if (airPortObjConfig != null && airPortObjConfig.getId() != null) {
                noteId = airPortObjConfig.getId().toString();
            }
            noteBean.setNoteId(noteId);
            noteBean.setReferenceId(noteId);
            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            forwardName = "note";

        }
        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}