/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordRelay;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.LCLPortConfiguration;
import com.gp.cong.logisoft.domain.PortException;
import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.RelayDestination;
import com.gp.cong.logisoft.domain.RelayInquiry;
import com.gp.cong.logisoft.domain.RelayInquiryTemp;
import com.gp.cong.logisoft.domain.RelayOrigin;
import com.gp.cong.logisoft.domain.User;

import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.LCLPortConfigurationDAO;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.RelayInquiryDAO;

import com.gp.cong.logisoft.struts.form.EditRelayForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 12-13-2007
 * 
 * XDoclet definition:
 * @struts.action path="/addRelay" name="addRelayForm" input="/jsps/datareference/addRelay.jsp" scope="request" validate="true"
 */
public class EditRelayAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditRelayForm editRelayForm = (EditRelayForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();

        String pol = editRelayForm.getPol();
        String pod = editRelayForm.getPod();
        String status = editRelayForm.getStatus();
        String ttFromPolToPod = editRelayForm.getTtFromPolToPod();
        String cutOffDays = editRelayForm.getCutOffDays();
        String hourOfDay = editRelayForm.getHourOfDay();
        String printOnSs = editRelayForm.getPrintOnSs();
        String buttonValue = editRelayForm.getButtonValue();
        String comment = editRelayForm.getComment();
        String forwardName = "";
        String msg = "";
        String message = "";
        String loginname = "";
        RelayInquiry relay = null;
        List originList = null;
        List destinationList = null;
        DBUtil dbUtil = new DBUtil();
        PortsTemp portobj = null;
        PortsTemp portobj1 = null;
        RelayInquiryDAO relayInquiryDAO = new RelayInquiryDAO();
        PortsDAO portsDAO = new PortsDAO();

        if (printOnSs == null) {
            printOnSs = "N";
        } else {
            printOnSs = "Y";
        }
        if (request.getParameter("paramid") != null) {
            originList = (List) session.getAttribute("originList");
            if (originList != null && originList.size() > 0) {
                RelayOrigin relay1 = (RelayOrigin) originList.get(Integer.parseInt(request.getParameter("paramid")));
                session.setAttribute("relayOrigin", relay1);
                request.setAttribute("editorigin", "editorigin");
            }
            forwardName = "editRelay";
        } else if (request.getParameter("param") != null) {
            destinationList = (List) session.getAttribute("destinationList");
            if (destinationList != null && destinationList.size() > 0) {
                RelayDestination ralaydest = (RelayDestination) destinationList.get(Integer.parseInt(request.getParameter("param")));
                session.setAttribute("relayDestination", ralaydest);
                request.setAttribute("editdestination", "editdestination");

            }
            forwardName = "editRelay";
        } else {
            if (session.getAttribute("relay") == null) {
                relay = new RelayInquiry();
            } else {
                relay = (RelayInquiry) session.getAttribute("relay");
            }

            if (!buttonValue.equals("cancel") && !buttonValue.equals("cancelview") && !buttonValue.equals("note")) {
                if (status != null && !status.equals("0")) {
                    relay.setStatus(status);
                }
                if (ttFromPolToPod != null && ttFromPolToPod != "") {
                    relay.setTtFromPolToPod(Integer.parseInt(ttFromPolToPod));
                }
                if (cutOffDays != null && cutOffDays != "") {
                    relay.setCutOffDays(Integer.parseInt(cutOffDays));
                }
                if (hourOfDay != null && hourOfDay != "") {
                    relay.setHourOfDay(Integer.parseInt(hourOfDay));
                }
                relay.setPrintOnSs(printOnSs);
                if (comment != null) {
                    relay.setComments(comment);
                }
                if (buttonValue.equals("polselected")) {
                    portobj = portsDAO.findById1(Integer.parseInt(pol));
                    if (portobj != null) {
                        relay.setPolCode(portobj);
                    }
                }
                if (buttonValue.equals("podselected")) {
                    portobj1 = portsDAO.findById1(Integer.parseInt(pod));
                    if (portobj1 != null) {
                        relay.setPodCode(portobj1);
                    }
                }
                if (buttonValue.equals("addport")) {
                    return mapping.findForward("addport");
                }

                session.setAttribute("relay", relay);
                forwardName = "editRelay";
            }
            originList = (List) session.getAttribute("originList");
            Set originset = null;

            if (originList != null && originList.size() > 0) {
                originset = new HashSet<RelayOrigin>();
                for (int i = 0; i < originList.size(); i++) {

                    RelayOrigin ro = (RelayOrigin) originList.get(i);
                    originset.add(ro);
                }
            } else {
                originset = new HashSet<RelayOrigin>();
            }
            if (originset != null) {
                relay.setOriginSet(originset);
            }
            destinationList = (List) session.getAttribute("destinationList");
            Set destinationset = null;
            if (destinationList != null && destinationList.size() > 0) {
                destinationset = new HashSet<RelayDestination>();
                for (int j = 0; j < destinationList.size(); j++) {
                    RelayDestination rd = (RelayDestination) destinationList.get(j);
                    destinationset.add(rd);
                }
            } else {
                destinationset = new HashSet<RelayDestination>();
            }
            if (destinationset != null) {
                relay.setDestinationSet(destinationset);
            }

            List exceptionList = (List) session.getAttribute("portRelayList");

            Set exceptionset = null;
            if (exceptionList != null && exceptionList.size() > 0) {
                exceptionset = new HashSet<PortException>();
                for (int k = 0; k < exceptionList.size(); k++) {

                    PortException pe = (PortException) exceptionList.get(k);
                    exceptionset.add(pe);
                }
            } else {
                exceptionset = new HashSet<PortException>();
            }
            if (exceptionset != null) {
                relay.setPortExceptionSet(exceptionset);
            }
            if (buttonValue.equals("orgdelete")) {

                if (session.getAttribute("originList") == null) {
                    originList = new ArrayList();
                } else {
                    originList = (List) session.getAttribute("originList");
                }

                int index = editRelayForm.getInd();
                originList.remove(originList.get(index));

                session.setAttribute("originList", originList);

                forwardName = "editRelay";

            }
            if (buttonValue.equals("destdelete")) {

                if (session.getAttribute("destinationList") == null) {
                    destinationList = new ArrayList();
                } else {
                    destinationList = (List) session.getAttribute("destinationList");
                }

                int inx = editRelayForm.getInx();
                destinationList.remove(destinationList.get(inx));
                forwardName = "editRelay";

            }
            if (buttonValue.equals("addport")) {
                return mapping.findForward("addport");
            }
            if (buttonValue != null && buttonValue.equals("save")) {
                boolean flag = false;

                List relayList = (List) session.getAttribute("relayList");

                for (int r = 0; r < relayList.size(); r++) {
                    RelayInquiryTemp tempRelay = (RelayInquiryTemp) relayList.get(r);
                    if (tempRelay.getRelayId().equals(relay.getRelayId())) {
                        //Ports port1=relay.getPolCode();

                        tempRelay.setPolCode(relay.getPolCode());
                        //Ports port2=relay.getPodCode();
                        tempRelay.setPodCode(relay.getPodCode());
                        tempRelay.setStatus(relay.getStatus());
                        tempRelay.setTtFromPolToPod(relay.getTtFromPolToPod());
                        tempRelay.setCutOffDays(relay.getCutOffDays());
                        tempRelay.setHourOfDay(relay.getHourOfDay());
                        tempRelay.setPrintOnSs(relay.getPrintOnSs());
                        relayList = new ArrayList();
                        relayList.add(tempRelay);
                        session.setAttribute("relayList", relayList);


                        User userid = null;
                        if (session.getAttribute("loginuser") != null) {
                            userid = (User) session.getAttribute("loginuser");
                        }
                        if (relay.getOriginSet() != null && relay.getOriginSet().size() > 0) {
                            relay.setNoOfOrigins(relay.getOriginSet().size());
                        } else {
                            relay.setNoOfOrigins(null);
                        }

                        if (relay.getDestinationSet() != null && relay.getDestinationSet().size() > 0) {
                            relay.setNoOfDestns(relay.getDestinationSet().size());
                        } else {
                            relay.setNoOfDestns(null);
                        }
                        if (relay.getPortExceptionSet() != null && relay.getPortExceptionSet().size() > 0) {

                            relay.setNoOfPortExcptns(relay.getPortExceptionSet().size());
                        } else {
                            relay.setNoOfPortExcptns(null);
                        //relay.setNoOfPortExcptns(new Integer(0));
                        }
                        tempRelay.setNoOfDestns(relay.getNoOfDestns());
                        tempRelay.setNoOfOrigins(relay.getNoOfOrigins());
                        tempRelay.setNoOfPortExcptns(relay.getNoOfPortExcptns());

                        relayInquiryDAO.update(relay, userid.getLoginName());
                        session.setAttribute("tempRelay", tempRelay);

                        originList = new ArrayList();
                        originList = (List) session.getAttribute("originList");
                        destinationList = new ArrayList();
                        destinationList = (List) session.getAttribute("destinationList");
                        if (session.getAttribute("relay") != null) {
                            session.removeAttribute("relay");
                        }
                        if (session.getAttribute("tempRelay") != null) {
                            session.removeAttribute("tempRelay");
                        }
                        if (session.getAttribute("originList") != null) {
                            session.removeAttribute("originList");
                        }
                        if (session.getAttribute("destinationList") != null) {
                            session.removeAttribute("destinationList");
                        }
                        if (session.getAttribute("portRelayList") != null) {
                            session.removeAttribute("portRelayList");
                        }
                        if (session.getAttribute("portobj") != null) {
                            session.removeAttribute("portobj");
                        }
                        if (session.getAttribute("portobj1") != null) {
                            session.removeAttribute("portobj1");
                        }
                        if (session.getAttribute("view") != null) {
                            session.removeAttribute("view");
                        }

                        break;
                    }

                }

                String programid = null;
                programid = (String) session.getAttribute("processinfoforrelay");
                String recordid = "";
                if (relay != null && relay.getRelayId() != null) {
                    recordid = relay.getRelayId().toString();
                }
                dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");

                message = "Relay details updated successfully";
                request.setAttribute("message", message);
                return mapping.findForward("cancel");
            }

            if (buttonValue != null && buttonValue.equals("delete")) {
                boolean flag = false;
                List relayList1 = (List) session.getAttribute("relayList");
                RelayInquiry relayId = null;
                if (session.getAttribute("relay") != null) {
                    relayId = (RelayInquiry) session.getAttribute("relay");
                }
                String programid = null;
                programid = (String) session.getAttribute("processinfoforrelay");
                String recordid = "";
                if (relay != null && relay.getRelayId() != null) {
                    recordid = relay.getRelayId().toString();
                }
                for (int i = 0; i < relayList1.size(); i++) {
                    RelayInquiryTemp tempRelay = (RelayInquiryTemp) relayList1.get(i);
                    if (tempRelay.getRelayId().equals(relay.getRelayId())) {
                        relayList1.remove(tempRelay);
                        //session.setAttribute("relayList",relayList1);
                        flag = true;
                        break;

                    }
                }
                if (flag) {
                    RelayInquiryDAO relayInquiry1DAO = new RelayInquiryDAO();
                    User userId = null;
                    if (session.getAttribute("loginuser") != null) {
                        userId = (User) session.getAttribute("loginuser");
                    }
                    relayInquiry1DAO.delete(relay, userId.getLoginName());
                    dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
                    message = "Relay details deleted successfully";
                    request.setAttribute("message", message);
                    return mapping.findForward("cancel");
                }
            }


            if (buttonValue != null && buttonValue.equals("cancel")) {
                String programid = null;
                programid = (String) session.getAttribute("processinfoforrelay");
                String recordid = "";
                if (relay != null && relay.getRelayId() != null) {
                    recordid = relay.getRelayId().toString();
                }

                dbUtil.getProcessInfo(programid, recordid, "editcancelled", null);
                if (session.getAttribute("relay") != null) {
                    session.removeAttribute("relay");
                }
                if (session.getAttribute("tempRelay") != null) {
                    session.removeAttribute("tempRelay");
                }
                if (session.getAttribute("originList") != null) {
                    session.removeAttribute("originList");
                }
                if (session.getAttribute("destinationList") != null) {
                    session.removeAttribute("destinationList");
                }
                if (session.getAttribute("portRelayList") != null) {
                    session.removeAttribute("portRelayList");
                }
                if (session.getAttribute("noteBean") != null) {
                    session.removeAttribute("noteBean");
                }
                return mapping.findForward("cancel");
            }

            if (buttonValue != null && buttonValue.equals("cancelview")) {
                return mapping.findForward("cancel");
            }
            if (buttonValue != null && buttonValue.equals("note")) {
                ItemDAO itemDAO = new ItemDAO();
                Item item = new Item();
                String itemName = "";
                if (session.getAttribute("processinfoforrelay") != null) {
                    String itemId = (String) session.getAttribute("processinfoforrelay");
                    item = itemDAO.findById(Integer.parseInt(itemId));
                    itemName = item.getItemDesc();
                }

                forwardName = "note";
                AuditLogRecord auditLogRecord = new AuditLogRecordRelay();
                NoteBean noteBean = new NoteBean();
                noteBean.setItemName(itemName);
                noteBean.setAuditLogRecord(auditLogRecord);
                noteBean.setButtonValue(buttonValue);
                //noteBean.setUser(user);
                String noteId = relay.getRelayId().toString();
                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
                List auditList = null;
                auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
                noteBean.setAuditList(auditList);
                noteBean.setVoidednote("");
                noteBean.setPageName("cancelrelay");
                request.setAttribute("noteBean", noteBean);

                return mapping.findForward("note");
            }
            if (buttonValue.equals("check")) {

                List portCodeList = new ArrayList();
                List checkList = new ArrayList();
                LCLPortConfigurationDAO lclPortConfigDAO = new LCLPortConfigurationDAO();
                List onCarriageList = lclPortConfigDAO.findOnCarriage();
                if (session.getAttribute("destinationList") == null) {
                    destinationList = new ArrayList();
                } else {
                    destinationList = (List) session.getAttribute("destinationList");
                    for (int j = 0; j < destinationList.size(); j++) {
                        RelayDestination relayDest = new RelayDestination();
                        relayDest = (RelayDestination) destinationList.get(j);
                        checkList.add(relayDest);
                    }
                }
                portCodeList = dbUtil.getPortCodeListforcheck(destinationList, onCarriageList);

                for (int i = 0; i < portCodeList.size(); i++) {
                    RelayDestination relayDest = new RelayDestination();
                    LCLPortConfiguration lclPort = (LCLPortConfiguration) portCodeList.get(i);
                    PortsTemp ports = portsDAO.findById1(lclPort.getShedulenumber());
                    relayDest.setDestinationId(ports);
                    relayDest.setTtFromPodToFd(0);
                    if (relayDest != null) {
                        checkList.add(relayDest);

                    }
                }
                session.setAttribute("destinationList", checkList);
                forwardName = "editRelay";
            }
        }
        return mapping.findForward(forwardName);
    }
}