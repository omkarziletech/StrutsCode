  /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;


import com.gp.cong.logisoft.beans.PortsBean;
import com.gp.cong.logisoft.domain.AssociatedPort;
import com.gp.cong.logisoft.domain.LCLPortConfiguration;
import com.gp.cong.logisoft.domain.Ports;
import com.gp.cong.logisoft.struts.form.LclPortsConfigForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-27-2007
 * 
 * XDoclet definition:
 * @struts.action path="/lclPortsConfig" name="lclPortsConfigForm" input="/jsps/datareference/lclPortsConfig.jsp" scope="request" validate="true"
 */
public class LclPortsConfigAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        LclPortsConfigForm lclPortsConfigForm = (LclPortsConfigForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String defaultRate = lclPortsConfigForm.getDefaultRate();
        if (defaultRate == null) {
            defaultRate = "E";
        } else {
            defaultRate = "M";
        }
        String autoCalLclLoad = lclPortsConfigForm.getAutoCalLclLoad();
        if (autoCalLclLoad == null) {
            autoCalLclLoad = "N";
        } else {
            autoCalLclLoad = "Y";
        }
        String lclOceanbl = lclPortsConfigForm.getLclOceanbl();
        if (lclOceanbl == null) {
            lclOceanbl = "N";
        } else {
            lclOceanbl = "Y";
        }
       String calLclFaeUnitVoyage = lclPortsConfigForm.getCalLclFaeUnitVoyage();
        if (calLclFaeUnitVoyage == null) {
            calLclFaeUnitVoyage = "U";
        } else {
            calLclFaeUnitVoyage = "V";
        }
        String spanishDescOnBl = lclPortsConfigForm.getSpanishDescOnBl();
        if (spanishDescOnBl == null) {
            spanishDescOnBl = "N";
        } else {
            spanishDescOnBl = "Y";
        }
        String printOnSailingSch = lclPortsConfigForm.getPrintOnSailingSch();
        if (printOnSailingSch == null) {
            printOnSailingSch = "N";
        } else {
            printOnSailingSch = "Y";
        }
        String includeLclDocChargesBl = lclPortsConfigForm.getIncludeLclDocChargesBl();
        if (includeLclDocChargesBl == null) {
            includeLclDocChargesBl = "N";
        } else {
            includeLclDocChargesBl = "Y";
        }
        String persEffectBl = lclPortsConfigForm.getPersEffectBl();
        if (persEffectBl == null) {
            persEffectBl = "N";
        } else {
            persEffectBl = "Y";
        }
        String onCarriage = lclPortsConfigForm.getOnCarriage();
        if (onCarriage == null) {
            onCarriage = "N";
        } else {
            onCarriage = "O";
        }
        String insChargesLclBl = lclPortsConfigForm.getInsChargesLclBl();
        if (insChargesLclBl == null) {
            insChargesLclBl = "N";
        } else {
            insChargesLclBl = "Y";
        }
        String blNumbering = lclPortsConfigForm.getBlNumbering();
        if (blNumbering == null) {
            blNumbering = "N";
        } else {
            blNumbering = "Y";
        }
        String protectDefaultRoute = lclPortsConfigForm.getProtectDefaultRoute();
        if (protectDefaultRoute == null) {
            protectDefaultRoute = "N";
        } else {
            protectDefaultRoute = "Y";
        }
        String collectChargeOnLclBls = lclPortsConfigForm.getCollectChargeOnLclBls();
        if (collectChargeOnLclBls == null) {
            collectChargeOnLclBls = "N";
        } else {
            collectChargeOnLclBls = "Y";
        }

        Set associtedPortSet = new HashSet<AssociatedPort>();
        PortsBean portBean = new PortsBean();
        // set values for ports too

        portBean.setDefaultRate(defaultRate);
        portBean.setServiceOcean(lclPortsConfigForm.getSrvcOcean());
        portBean.setPrintOnSailing(printOnSailingSch);
        portBean.setCarriage(onCarriage);
        portBean.setCollectCharge(collectChargeOnLclBls);
        portBean.setLclLoadingCost(autoCalLclLoad);
        portBean.setLclUnit(calLclFaeUnitVoyage);
        portBean.setLcldoc(includeLclDocChargesBl);
        portBean.setInsCharge(insChargesLclBl);
        portBean.setProtectDefault(protectDefaultRoute);
        portBean.setPersonalEffects(persEffectBl);
        portBean.setSpanishDesc(spanishDescOnBl);
        portBean.setBlNumber(blNumbering);
        portBean.setLclcollect(lclOceanbl);
        List portList = null;


        LCLPortConfiguration lclPortobj = new LCLPortConfiguration();
        if (session.getAttribute("lclPortobj") != null) {
            lclPortobj = (LCLPortConfiguration) session.getAttribute("lclPortobj");
        } else {
            lclPortobj = new LCLPortConfiguration();
        }
        if (session.getAttribute("portList1") != null) {
            portList = (List) session.getAttribute("portList1");
            Iterator iter = portList.iterator();
            while (iter.hasNext()) {
                Ports port = (Ports) iter.next();
                AssociatedPort associatedPort = new AssociatedPort();
                associatedPort.setPortId(port);
                associtedPortSet.add(associatedPort);
            }
            lclPortobj.setAssociatedPort(associtedPortSet);
        }


        lclPortobj.setAltPortName(lclPortsConfigForm.getAlternatePortName());



        if (lclPortsConfigForm.getFtfFee() != null && !lclPortsConfigForm.getFtfFee().equals("")) {

            lclPortobj.setFtfFee(new Double(lclPortsConfigForm.getFtfFee()));
        }
        lclPortobj.setOriginalsRequired(lclPortsConfigForm.isOriginalsRequired());
        lclPortobj.setOriginalsReleasedAtDestination(lclPortsConfigForm.isOriginalsReleasedAtDestination());
        lclPortobj.setExpressRelease(lclPortsConfigForm.isExpressRelease());
        lclPortobj.setDoNotExpressRelease(lclPortsConfigForm.isDoNotExpressRelease());
        lclPortobj.setMemoHouseBillofLading(lclPortsConfigForm.isMemoHouseBillofLading());
        lclPortobj.setBillCollectsFdAgent(lclPortsConfigForm.isBillCollectsFdAgent());

        lclPortobj.setRoutingInstr(lclPortsConfigForm.getDefaultDomesticRoutingInstructions());
        lclPortobj.setDefaultRate(defaultRate);
        lclPortobj.setAutoCalLclLoad(autoCalLclLoad);
        lclPortobj.setLclOceanbl(lclOceanbl);
        lclPortobj.setSrvcOcean(lclPortsConfigForm.getSrvcOcean());
        lclPortobj.setCalLclFaeUnitVoyage(calLclFaeUnitVoyage);
        lclPortobj.setSpanishDescOnBl(spanishDescOnBl);
        lclPortobj.setPrintOnSailingSch(printOnSailingSch);
        lclPortobj.setIncludeLclDocChargesBl(includeLclDocChargesBl);
        lclPortobj.setPersEffectBl(persEffectBl);
        lclPortobj.setOnCarriage(onCarriage);
        lclPortobj.setInsChargesLclBl(insChargesLclBl);
        lclPortobj.setProtectDefaultRoute(protectDefaultRoute);
        lclPortobj.setCollectChargeOnLclBls(collectChargeOnLclBls);
        lclPortobj.setLclSplRemarksInEnglish(lclPortsConfigForm.getLclSplRemarksinEnglish());
        lclPortobj.setLclSplRemarksInSpanish(lclPortsConfigForm.getLclSplRemarksinSpanish());
        lclPortobj.setLaneField(lclPortsConfigForm.getLaneField());
        lclPortobj.setIntrmRemarks(lclPortsConfigForm.getIntrmRemarks());
        lclPortobj.setFrmRemarks(lclPortsConfigForm.getFrmRemarks());
        lclPortobj.setTranshipment(lclPortsConfigForm.getTranshipment());
        lclPortobj.setLineManager(lclPortsConfigForm.getLineManager());
        lclPortobj.setDefaultPortOfDischarge(lclPortsConfigForm.getDefaultPortOfDischarge());
        lclPortobj.setBlNumbering(lclPortsConfigForm.getBlNumbering());
        lclPortobj.setAsetup(lclPortsConfigForm.getAsetup());
        lclPortobj.setAsetupAcct(lclPortsConfigForm.getAsetupAcct());
        lclPortobj.setAsetupAcctName(lclPortsConfigForm.getAsetupAcctName());
        lclPortobj.setAcAccountPickup(lclPortsConfigForm.getAcAccountPickup());
        lclPortobj.setAcAccountPickupName(lclPortsConfigForm.getAcAccountPickupName());
        lclPortobj.setDomestic(lclPortsConfigForm.getDomestic());
        lclPortobj.setPrintOFdollars(lclPortsConfigForm.getPrintOFdollars());
        lclPortobj.setHazAllowed(lclPortsConfigForm.getHazAllowed());
        lclPortobj.setFtfWeight(lclPortsConfigForm.getFtfWeight());
        lclPortobj.setFtfMeasure(lclPortsConfigForm.getFtfMeasure());
        lclPortobj.setFtfMinimum(lclPortsConfigForm.getFtfMinimum());
        lclPortobj.setForceAgentReleasedDrLoading(lclPortsConfigForm.isForceAgentReleasedDrLoading());
        lclPortobj.setPrintImpOnMetric(lclPortsConfigForm.getPrintImpOnMetric());
        request.setAttribute("portBean", portBean);

        session.setAttribute("lclPortobj", lclPortobj);



        return mapping.findForward("lclConfig");
    }
}
