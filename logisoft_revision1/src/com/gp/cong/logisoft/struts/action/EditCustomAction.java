/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.CustomerAssociation;
import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.PaymentMethod;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Vendor;
import com.gp.cong.logisoft.hibernate.dao.CustomerAccountingDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GeneralInformationDAO;
import com.gp.cong.logisoft.struts.form.EditCustomForm;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.domain.TradingPartner;

/** 
 * MyEclipse Struts
 * Creation date: 01-09-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editCustom" name="editCustomForm" input="/jsps/Tradingpartnermaintainance/EditCustom.jsp" scope="request" validate="true"
 */
public class EditCustomAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditCustomForm editCustomForm = (EditCustomForm) form;// TODO Auto-generated method stub
        String buttonValue = editCustomForm.getButtonValue();
        String name = editCustomForm.getName();
        Set associateset = new HashSet<CustomerAssociation>();
        Set tradeset = new HashSet<Customer>();
        HttpSession session = ((HttpServletRequest) request).getSession();
        Set generalinfoset = new HashSet<GeneralInformation>();
        Set accountset = new HashSet<CustomerAccounting>();
        Set configset = new HashSet<CustomerContact>();
        Set vendset = new HashSet<Vendor>();
        Set paymentset = new HashSet<PaymentMethod>();
        CustomerDAO customerDAO = new CustomerDAO();
        Customer customer = null;
        GeneralInformationDAO generalInformationDAO = new GeneralInformationDAO();
        CustomerAccountingDAO customerAccountingDAO = new CustomerAccountingDAO();
        CustomerAccounting accounting = new CustomerAccounting();
        GeneralInformation generalInformation = new GeneralInformation();
        CustomerContact customerCont = new CustomerContact();
        Vendor vendorobj = new Vendor();
        PaymentMethod paymentobj = new PaymentMethod();
        String master = editCustomForm.getMaster();
        String forwardName = "";
        TradingPartner tradingpartner = new TradingPartner();
        String message = "";
        DBUtil dbUtil = new DBUtil();
        List customerlist = (List) session.getAttribute("customerList");

        if (buttonValue.equals("add") || buttonValue.equals("delete") || buttonValue.equals("cancel") || buttonValue.equals("cancelview")) {
            if (session.getAttribute("tradingpartner") != null) {
                tradingpartner = (TradingPartner) session.getAttribute("tradingpartner");
            } else {
                tradingpartner = new TradingPartner();
            }
            tradingpartner.setGeneralInformation(null);
            //tradingpartner.setCustomerset(null);
            tradingpartner.setAccounting(null);
            tradingpartner.setVendorset(null);
            tradingpartner.setCustomerContact(null);
            tradingpartner.setPaymentset(null);
        }
        if (master != null && !master.equals("0")) {
            TradingPartner c1 = customerDAO.findById(master);
            tradingpartner.setMaster(c1.getAccountno());

        }

        if (buttonValue.equals("add")) {
            tradingpartner.setAccountName(name);

            if (session.getAttribute("generalInformation") != null) {

                generalInformation = (GeneralInformation) session.getAttribute("generalInformation");
                generalinfoset.add(generalInformation);
                tradingpartner.setAcctType(generalInformation.getAccounttype());
                tradingpartner.setGeneralInformation(generalinfoset);

            }

            if (session.getAttribute("addressList") != null) {
                List addressList = (List) session.getAttribute("addressList");
                List primelist = new ArrayList();
                if (addressList != null && addressList.size() > 0) {
                    for (int i = 0; i < addressList.size(); i++) {
                        //-----DISPLAYING THE ADDRESS FROM CUSTOMER TABLE------------
                        CustomerTemp tempCustomer = new CustomerTemp();
                        customer = (Customer) addressList.get(i);
                        if (customer.getPrimary() != null && customer.getPrimary().equals("on")) {
                            tempCustomer.setAccountName(tradingpartner.getAccountName());
                            tempCustomer.setAccountNo(tradingpartner.getAccountno());
                            tempCustomer.setMasterAccountNo(tradingpartner.getMaster());
                            tempCustomer.setType(tradingpartner.getType());
                            tempCustomer.setAccountType(generalInformation.getAccounttype());
                            tempCustomer.setAddress1(customer.getAddress1());
                            tempCustomer.setCity2(customer.getCity2());
                            tempCustomer.setState(customer.getState());
                            primelist.add(tempCustomer);

                        }
                        session.setAttribute("customerList", primelist);//------USED FOR DISPLAY IN SEARCHCUSTOMER for primary record------------
                        customer.setAcctname(tradingpartner.getAccountName());
                        customer.setMasteracctno(tradingpartner.getMaster());
                        customer.setType(tradingpartner.getType());
                        customer.setAccounttype(generalInformation.getAccounttype());
                        tradeset.add(customer);
                    }

                }
            }


            if (session.getAttribute("accounting") != null) {

                accounting = (CustomerAccounting) session.getAttribute("accounting");
                accountset.add(accounting);
                tradingpartner.setAccounting(accountset);
            }
            if (session.getAttribute("VendorInfoList") != null)//----------------SAVING VENDOR INFOMATION--------
            {
                vendorobj = (Vendor) session.getAttribute("VendorInfoList");
                vendset.add(vendorobj);
                tradingpartner.setVendorset(vendset);
            }

            if (session.getAttribute("paymentList") != null)//-------------------------SAVING PAYMENT INFORMATION -------------
            {
                List payList = (List) session.getAttribute("paymentList");
                if (payList != null && payList.size() > 0) {
                    for (int j = 0; j < payList.size(); j++) {
                        paymentobj = (PaymentMethod) payList.get(j);
                        paymentset.add(paymentobj);
                    }
                }
                if (paymentset != null) {
                    tradingpartner.setPaymentset(paymentset);
                }
            }
            if (session.getAttribute("addConfig") != null) {
                List custConfig = (List) session.getAttribute("addConfig");
                if (custConfig != null && custConfig.size() > 0) {
                    for (int j = 0; j < custConfig.size(); j++) {
                        customerCont = (CustomerContact) custConfig.get(j);
                        configset.add(customerCont);

                    }
                }

                tradingpartner.setCustomerContact(new HashSet());
                tradingpartner.setCustomerContact(configset);
            }

            //customer.setExtendCredit(accounting.getExtendCredit());
            //customer.setInsurance(accounting.getInsure());
            tradingpartner.setHold(accounting.getHoldList());
        }
        if (buttonValue.equals("add")) {
            boolean flag = false;
            for (int i = 0; i < customerlist.size(); i++) {
                CustomerTemp tempCustomer = (CustomerTemp) customerlist.get(i);
                if (tempCustomer.getPrimary() != null && tempCustomer.getPrimary().equals("on")) {
                    if (tempCustomer.getAccountNo().equals(tradingpartner.getAccountno())) {
                        tempCustomer.setAccountNo(tradingpartner.getAccountno());
                        tempCustomer.setAccountName(tradingpartner.getAccountName());
                        tempCustomer.setAccountType(generalInformation.getAccounttype());
                        tempCustomer.setAddress1(customer.getAddress1());
                        tempCustomer.setCity2(customer.getCity2());
                        tempCustomer.setState(customer.getState());
                        if (generalInformation.getPassword() != null) {
                            tempCustomer.setPassword("Y");
                        } else {
                            tempCustomer.setPassword("N");
                        }
                        if (tradingpartner.getMaster() != null) {
                            tempCustomer.setMasterAccountNo(tradingpartner.getMaster());
                        }
                        List customerList1 = new ArrayList();
                        customerList1.add(tempCustomer);
                        session.setAttribute("customerList", customerList1);
                        flag = true;
                        break;

                    }
                }
            }

            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            customerDAO.update(tradingpartner, userId.getLoginName());//-------------UPDATE METHOD-------

            String programid = null;
            programid = (String) session.getAttribute("processinfoforcustomer");
            String recordid = "";
            if (tradingpartner != null && tradingpartner.getAccountno() != null) {
                recordid = tradingpartner.getAccountno().toString();
            }
            dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");//----not required here in add---
            if (session.getAttribute("customer") != null) {
                session.removeAttribute("customer");
            }
            if (session.getAttribute("processinfoforcustomer") != null) {
                session.removeAttribute("processinfoforcustomer");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("customernotes") != null) {
                session.removeAttribute("customernotes");
            }
            if (session.getAttribute("modifyforcustomer") != null) {
                session.removeAttribute("modifyforcustomer");
            }
            if (session.getAttribute("generalInformation") != null) {
                session.removeAttribute("generalInformation");
            }
            if (session.getAttribute("accounting") != null) {
                session.removeAttribute("accounting");
            }
            if (session.getAttribute("addConfig") != null) {
                session.removeAttribute("addConfig");
            }
            if (session.getAttribute("VendorInfoList") != null) {
                session.removeAttribute("VendorInfoList");
            }

            message = "Customer details updated successfully";
            session.setAttribute("trade", "searchcustomer");
            session.setAttribute("message", message);
        //forwardName="editcustom";
        } else if (buttonValue != null && buttonValue.equals("delete")) {
            String programid = null;
            programid = (String) session.getAttribute("processinfoforcustomer");
            String recordid = "";
            Boolean flag = false;
            if (tradingpartner != null && tradingpartner.getAccountno() != null) {
                recordid = tradingpartner.getAccountno().toString();
            }
            for (int i = 0; i < customerlist.size(); i++) {
                CustomerTemp customer1 = (CustomerTemp) customerlist.get(i);
                if (customer1.getAccountNo().equals(tradingpartner.getAccountno())) {
                    customerlist.remove(customer1);
                    session.setAttribute("customerList", customerlist);
                    flag = true;
                    break;

                }
            }
            if (flag) {
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                customerDAO.delete(tradingpartner, userId.getLoginName());
                dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");
                message = "Customer details deleted successfully";
                session.setAttribute("message", message);
                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }
                if (session.getAttribute("processinfoforcustomer") != null) {
                    session.removeAttribute("processinfoforcustomer");
                }
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }
                if (session.getAttribute("modifyforcustomer") != null) {
                    session.removeAttribute("modifyforcustomer");
                }
                if (session.getAttribute("generalInformation") != null) {
                    session.removeAttribute("generalInformation");
                }
                if (session.getAttribute("accounting") != null) {
                    session.removeAttribute("accounting");
                }
                if (session.getAttribute("addConfig") != null) {
                    session.removeAttribute("addConfig");
                }

            }
        //forwardName="searchcustomer";
        } else if (buttonValue.equals("cancel")) {
            String programid = null;
            programid = (String) session.getAttribute("processinfoforcustomer");
            String recordid = "";
            if (tradingpartner != null && tradingpartner.getAccountno() != null) {
                recordid = tradingpartner.getAccountno().toString();
            }
            dbUtil.getProcessInfo(programid, recordid, "editcancelled", null);
            if (session.getAttribute("customer") != null) {
                session.removeAttribute("customer");
            }
            if (session.getAttribute("noteBean") != null) {
                session.removeAttribute("noteBean");
            }
            if (session.getAttribute("processinfoforcustomer") != null) {
                session.removeAttribute("processinfoforcustomer");
            }

            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("modifyforcustomer") != null) {
                session.removeAttribute("modifyforcustomer");
            }
            if (session.getAttribute("generalInformation") != null) {
                session.removeAttribute("generalInformation");
            }
            if (session.getAttribute("accounting") != null) {
                session.removeAttribute("accounting");
            }
            if (session.getAttribute("addConfig") != null) {
                session.removeAttribute("addConfig");
            }
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");
            }
        //forwardName="searchcustomer";
        } else if (buttonValue.equals("cancelview")) {
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");
            }
        }

        session.setAttribute("trade", "searchcustomer");//forwardname="searchcustomer"(before)

        return mapping.findForward("searchcustomer");
    }
}