  /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AssociatedPort;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordLcl;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.LCLPortConfiguration;
import com.gp.cong.logisoft.domain.Ports;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.LCLPortConfigurationDAO;
import com.gp.cong.logisoft.hibernate.dao.TradingPartnerDAO;
import com.gp.cong.logisoft.struts.form.EditLclPortsConfigForm;
import com.gp.cong.logisoft.util.DBUtil;


/** 
 * MyEclipse Struts
 * Creation date: 01-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editLclPortsConfig" name="editLclPortsConfigForm" input="/jsps/datareference/editLclPortsConfig.jsp" scope="request" validate="true"
 */
public class EditLclPortsConfigAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EditLclPortsConfigForm editLclPortsConfigForm = (EditLclPortsConfigForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String buttonValue = editLclPortsConfigForm.getButtonValue();
        LCLPortConfiguration lclPortConfigurationObj = new LCLPortConfiguration();
//        String defaultRate = editLclPortsConfigForm.getDefaultRate();
//
//        if (defaultRate == null) {
//            defaultRate = "E";
//        } else {
//            defaultRate = "M";
//        }

        DBUtil dbUtil = new DBUtil();
        Set associtedPortSet = new HashSet<AssociatedPort>();
        List portList = null;
        if (session.getAttribute("lclPortConfigurationObj") != null) {
            lclPortConfigurationObj = (LCLPortConfiguration) session.getAttribute("lclPortConfigurationObj");

        }
        if (!buttonValue.equals("note")) {

            if (session.getAttribute("portList1") != null) {
                portList = (List) session.getAttribute("portList1");
                Iterator iter = portList.iterator();
                while (iter.hasNext()) {
                    Ports port = (Ports) iter.next();
                    AssociatedPort associatedPort = new AssociatedPort();
                    associatedPort.setPortId(port);
                    associtedPortSet.add(associatedPort);
                }
                lclPortConfigurationObj.setAssociatedPort(associtedPortSet);
            }

            if (editLclPortsConfigForm.getDrABBR() != null && !editLclPortsConfigForm.getDrABBR().equals("")) {
                lclPortConfigurationObj.setDrAbbr(Integer.parseInt(editLclPortsConfigForm.getDrABBR()));
            }
            if (CommonUtils.isNotEmpty(editLclPortsConfigForm.getFtfFee())){
            lclPortConfigurationObj.setFtfFee(Double.parseDouble(editLclPortsConfigForm.getFtfFee()));
            }else{
             lclPortConfigurationObj.setFtfFee(0.0);  
            }
            lclPortConfigurationObj.setAsetup(editLclPortsConfigForm.getAsetup());
            lclPortConfigurationObj.setAsetupAcct(editLclPortsConfigForm.getAsetupAcct());
            if(editLclPortsConfigForm.getAsetupAcct()!=""){
              String acctName= new TradingPartnerDAO().getAccountName(editLclPortsConfigForm.getAsetupAcct());
               editLclPortsConfigForm.setAsetupAcctName(acctName);
            }
             if(!"".equals(editLclPortsConfigForm.getDefaultPortOfDischarge())){
                String pod=editLclPortsConfigForm.getDefaultPortOfDischarge();
                String defaultPortUnloc ="";
               if (pod.lastIndexOf("(") > -1 && pod.lastIndexOf(")") > -1) {
                 defaultPortUnloc=pod.substring(pod.lastIndexOf("(") + 1,
                pod.lastIndexOf(")"));
                  lclPortConfigurationObj.setDefaultPortUnloc(defaultPortUnloc);
    }
             }if(!"".equals(editLclPortsConfigForm.getTranshipment())){
                 String trashmipment=editLclPortsConfigForm.getTranshipment();
                 String defaultTrashmipmentUnloc = "";
                 if (trashmipment.lastIndexOf("(") > -1 && trashmipment.lastIndexOf(")") > -1) {
                 defaultTrashmipmentUnloc=trashmipment.substring(trashmipment.lastIndexOf("(") + 1,
                trashmipment.lastIndexOf(")"));
                  lclPortConfigurationObj.setDefaultTrashipmentUnloc(defaultTrashmipmentUnloc);
    }
//                new LCLPortConfigurationDAO().updateDefaultPortUnloc(defaultPortUnloc,defaultTrashmipmentUnloc,editLclPortsConfigForm.getTerminalNo());
             }
            lclPortConfigurationObj.setAsetupAcctName(editLclPortsConfigForm.getAsetupAcctName());
            lclPortConfigurationObj.setAcAccountPickup(editLclPortsConfigForm.getAcAccountPickup());
             if(editLclPortsConfigForm.getAcAccountPickup()!=""){
              String acctName= new TradingPartnerDAO().getAccountName(editLclPortsConfigForm.getAcAccountPickup());
               editLclPortsConfigForm.setAcAccountPickupName(acctName);
            }
            lclPortConfigurationObj.setAcAccountPickupName(editLclPortsConfigForm.getAcAccountPickupName());
            lclPortConfigurationObj.setDomestic(editLclPortsConfigForm.getDomestic());
            lclPortConfigurationObj.setPrintOFdollars(editLclPortsConfigForm.getPrintOFdollars());
            lclPortConfigurationObj.setPrintInvoiceValue(editLclPortsConfigForm.isPrintInvoiceValue());
            lclPortConfigurationObj.setLockport(editLclPortsConfigForm.isLockport());
            lclPortConfigurationObj.setHazAllowed(editLclPortsConfigForm.getHazAllowed());
            lclPortConfigurationObj.setFtfWeight(editLclPortsConfigForm.getFtfWeight());
            lclPortConfigurationObj.setFtfMeasure(editLclPortsConfigForm.getFtfMeasure());
            lclPortConfigurationObj.setFtfMinimum(editLclPortsConfigForm.getFtfMinimum());
            lclPortConfigurationObj.setAltPortName(editLclPortsConfigForm.getAlternatePortName());
            lclPortConfigurationObj.setRoutingInstr(editLclPortsConfigForm.getDefaultDomesticRoutingInstructions());
            //set values for check boxes
            lclPortConfigurationObj.setDefaultRate(CommonUtils.isEmpty(editLclPortsConfigForm.getDefaultRate()) ? null : editLclPortsConfigForm.getDefaultRate());

            lclPortConfigurationObj.setAutoCalLclLoad(CommonUtils.isEmpty(editLclPortsConfigForm.getAutoCalLclLoad()) ? "N" : "Y");
            lclPortConfigurationObj.setLclOceanbl(CommonUtils.isEmpty(editLclPortsConfigForm.getLclOceanbl()) ? "N" : "Y");
            lclPortConfigurationObj.setSrvcOcean(editLclPortsConfigForm.getSrvcOcean());

            lclPortConfigurationObj.setCalLclFaeUnitVoyage(CommonUtils.isEmpty(editLclPortsConfigForm.getCalLclFaeUnitVoyage()) ? "U" : "V");
            lclPortConfigurationObj.setSpanishDescOnBl(CommonUtils.isEmpty(editLclPortsConfigForm.getSpanishDescOnBl()) ? "N" : "Y");
            lclPortConfigurationObj.setPrintOnSailingSch(CommonUtils.isEmpty(editLclPortsConfigForm.getPrintOnSailingSch()) ? "N" : "Y");
            lclPortConfigurationObj.setIncludeLclDocChargesBl(CommonUtils.isEmpty(editLclPortsConfigForm.getIncludeLclDocChargesBl()) ? "N" : "Y");

            lclPortConfigurationObj.setOriginalsRequired(editLclPortsConfigForm.isOriginalsRequired());
            lclPortConfigurationObj.setOriginalsReleasedAtDestination(editLclPortsConfigForm.isOriginalsReleasedAtDestination());
            lclPortConfigurationObj.setExpressRelease(editLclPortsConfigForm.isExpressRelease());
            lclPortConfigurationObj.setDoNotExpressRelease(editLclPortsConfigForm.isDoNotExpressRelease());
            lclPortConfigurationObj.setMemoHouseBillofLading(editLclPortsConfigForm.isMemoHouseBillofLading());
            lclPortConfigurationObj.setBillCollectsFdAgent(editLclPortsConfigForm.isBillCollectsFdAgent());
            lclPortConfigurationObj.setForceAgentReleasedDrLoading(editLclPortsConfigForm.isForceAgentReleasedDrLoading());
            lclPortConfigurationObj.setPrintImpOnMetric(null!=editLclPortsConfigForm.getPrintImpOnMetric() ? editLclPortsConfigForm.getPrintImpOnMetric() : false);

            lclPortConfigurationObj.setPersEffectBl(CommonUtils.isEmpty(editLclPortsConfigForm.getPersEffectBl()) ? "N" : "Y");
            lclPortConfigurationObj.setOnCarriage(CommonUtils.isEmpty(editLclPortsConfigForm.getOnCarriage()) ? "N" : "O");
            lclPortConfigurationObj.setInsChargesLclBl(CommonUtils.isEmpty(editLclPortsConfigForm.getInsChargesLclBl()) ? "N" : "Y");
            lclPortConfigurationObj.setBlNumbering(CommonUtils.isEmpty(editLclPortsConfigForm.getBlNumbering())?"N" :"Y");
            lclPortConfigurationObj.setProtectDefaultRoute(CommonUtils.isEmpty(editLclPortsConfigForm.getProtectDefaultRoute()) ? "N" : "Y");
            lclPortConfigurationObj.setCollectChargeOnLclBls(CommonUtils.isEmpty(editLclPortsConfigForm.getCollectChargeOnLclBls()) ? "N" : "Y");

            lclPortConfigurationObj.setLclSplRemarksInEnglish(editLclPortsConfigForm.getLclSplRemarksinEnglish());
            lclPortConfigurationObj.setLclSplRemarksInSpanish(editLclPortsConfigForm.getLclSplRemarksinSpanish());
            lclPortConfigurationObj.setLaneField(editLclPortsConfigForm.getLaneField());
            lclPortConfigurationObj.setIntrmRemarks(editLclPortsConfigForm.getIntrmRemarks());
            lclPortConfigurationObj.setFrmRemarks(editLclPortsConfigForm.getFrmRemarks());
            lclPortConfigurationObj.setTranshipment(editLclPortsConfigForm.getTranshipment());
            lclPortConfigurationObj.setLineManager(editLclPortsConfigForm.getLineManager());
            lclPortConfigurationObj.setDefaultPortOfDischarge(editLclPortsConfigForm.getDefaultPortOfDischarge());
            session.setAttribute("lclPortConfigurationObj", lclPortConfigurationObj);
            forwardName = "editlclConfig";
        } else if (buttonValue != null && buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforports") != null) {
                String itemId = (String) session.getAttribute("processinfoforports");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordLcl();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            //noteBean.setUser(user);
            noteBean.setPageName("cancellcl");
            String noteId = "";
            if (lclPortConfigurationObj != null && lclPortConfigurationObj.getId() != null) {
                noteId = lclPortConfigurationObj.getId().toString();
            }
            noteBean.setNoteId(noteId);
            noteBean.setReferenceId(noteId);
            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);

            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            forwardName = "note";

        }

        return mapping.findForward(forwardName);
    }
}
