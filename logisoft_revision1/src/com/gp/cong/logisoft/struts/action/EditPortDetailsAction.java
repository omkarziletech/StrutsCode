  /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordPorts;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.Ports;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.struts.form.EditPortDetailsForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 01-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editPortDetails" name="editPortDetailsForm" input="/jsps/datareference/editPortDetails.jsp" scope="request" validate="true"
 */
public class EditPortDetailsAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		EditPortDetailsForm editPortDetailsForm = (EditPortDetailsForm) form;// TODO Auto-generated method stub
		HttpSession session = ((HttpServletRequest)request).getSession();
		String portname=editPortDetailsForm.getPortName();
		String forwardName="";
		UnLocation unobj=null;
		String unCityCode=editPortDetailsForm.getUnCityCode();
		String buttonValue=editPortDetailsForm.getButtonValue();
		Ports portObj=null;
		PortsDAO portsDAO=new PortsDAO();
		GenericCode genObj=null;
		String type=editPortDetailsForm.getType();
		if(type==null)
		{
			type="D";
		}else
		{
			type="K";
		}
		GenericCodeDAO  genDAO = new GenericCodeDAO();
		DBUtil dbUtil=new DBUtil();
		UnLocationDAO unLocationDAO=new UnLocationDAO();
		if(session.getAttribute("ports")!=null)
		{
			portObj=(Ports)session.getAttribute("ports");
		}else {
                    portObj=new Ports();
                }
		Ports portobject=new Ports();
		
		if(!buttonValue.equals("note") && !buttonValue.equals("searchcity")){
		   if(editPortDetailsForm.getRegionCodes()!=null){
			 genObj= (GenericCode)genDAO.findById(new Integer(editPortDetailsForm.getRegionCodes()));
		    }
                                portObj.setDrABBR(editPortDetailsForm.getPortNameAbbr());
				portObj.setPiercode(editPortDetailsForm.getPierCode());
				portObj.setEciportcode(editPortDetailsForm.getEciPortCode());
				portObj.setPortCity(editPortDetailsForm.getPortCity());
                                portObj.setOmit2LetterCountryCode(editPortDetailsForm.getOmit2LetterCountryCode());
				portObj.setCountryName(editPortDetailsForm.getCountry());
				portObj.setRegioncode(genObj);
				portObj.setIsocode(editPortDetailsForm.getCountryISO());
                                portObj.setType(type);
				portObj.setPortname(editPortDetailsForm.getPortName());
				portObj.setRatePortName(editPortDetailsForm.getRatePortName());
				portObj.setRateControlNo(editPortDetailsForm.getRateControlNo());
				portObj.setUncitycode(portObj.getUncitycode());
				portObj.setRateFromPierCode(portObj.getRateFromPierCode());
                                portObj.setHscode(editPortDetailsForm.getHscode());
				portObj.setNcmno(editPortDetailsForm.getNcmno());
				if(session.getAttribute("portobject")!=null){
				portobject=(Ports)session.getAttribute("portobject");
				portObj.setRateFromPierCode(portobject);
				portObj.setRateControlNo(portobject.getControlNo());
				portObj.setRatePortName(portobject.getPortname());
				}
				session.setAttribute("ports", portObj);
				forwardName="editportDetails";
		}
		else if(buttonValue!=null && buttonValue.equals("note")){
			ItemDAO itemDAO=new ItemDAO();
			Item item=new Item();
			String itemName="";
			if(session.getAttribute("processinfoforports")!=null){
				String itemId=(String)session.getAttribute("processinfoforports");
				item=itemDAO.findById(Integer.parseInt(itemId));
				itemName=item.getItemDesc();
			}
		  forwardName="note";
		  AuditLogRecord auditLogRecord=new AuditLogRecordPorts();
		  NoteBean noteBean=new NoteBean();
		  noteBean.setItemName(itemName);
		  noteBean.setAuditLogRecord(auditLogRecord);
		  noteBean.setButtonValue(buttonValue);
		  noteBean.setPageName("cancelport");
		  String noteId=portObj.getId().toString();
		  noteBean.setNoteId(noteId);
		  noteBean.setReferenceId(noteId);
		  List auditList=null;
		  auditList=dbUtil.getNoteInformation(noteId,auditLogRecord);
		  noteBean.setAuditList(auditList);
		  noteBean.setVoidednote("");
		 request.setAttribute("noteBean",noteBean);
		  String documentName="User";
		  forwardName="note";
		
		}
		
		if(buttonValue.equals("searchcity")){
			List searchcity=unLocationDAO.findbyCity(portname);
			if(session.getAttribute("portobj")!=null){
				portObj=(Ports)session.getAttribute("portobj");
				
			}
			else{
				portObj=new Ports();
			}
			if(searchcity!=null && searchcity.size()>0){
				UnLocation unLoc=(UnLocation)searchcity.get(0);
				
				portObj.setUncitycode(unLoc);
				portObj.setPortname(portname);
				portObj.setCountryName(unLoc.getCountryId().getCodedesc());
			}
			else{
				portObj.setUncitycode(new UnLocation());
				portObj.setPortname(portname);
				portObj.setCountryName("");
				
			}
			session.setAttribute("portobj",portObj);
			forwardName="editportDetails";
			
		}
		
				request.setAttribute("buttonValue",buttonValue);
                                return mapping.findForward(forwardName);
	}
}