/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.form.MasterGeneralInformationForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 03-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterGeneralInformation" name="masterGeneralInformationForm" input="/jsps/Tradingpartnermaintainance/MasterGeneralInformation.jsp" scope="request" validate="true"
 */
public class MasterGeneralInformationAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterGeneralInformationForm masterGeneralInformationForm = (MasterGeneralInformationForm) form;// TODO Auto-generated method stub
        String idType = masterGeneralInformationForm.getIdType();

        String idText = masterGeneralInformationForm.getIdtext();
        String dunsNo = masterGeneralInformationForm.getDunsNo();
        customerBean customerbean = new customerBean();
        DBUtil dbUtil = new DBUtil();
        String buttonValue = masterGeneralInformationForm.getButtonValue();
        String commodity = masterGeneralInformationForm.getCommodity();
        String commodityDesc = masterGeneralInformationForm.getCommDesc();
        String impCommodity = masterGeneralInformationForm.getImpCommodity();
        String impCommodityDesc = masterGeneralInformationForm.getImpCommodityDesc();
        String phone = masterGeneralInformationForm.getPhone1();
        String goalAcct = masterGeneralInformationForm.getGoalAcct();
        String fax = masterGeneralInformationForm.getFax1();
        String phone1 = dbUtil.stringtokenizer(phone);
        String fax1 = dbUtil.stringtokenizer(fax);
        String inventoryCode = masterGeneralInformationForm.getInventoryCode();
        String userName = masterGeneralInformationForm.getUserName();
        String password = masterGeneralInformationForm.getPassword();
        String poa = masterGeneralInformationForm.getPoa();
        String maxdays = masterGeneralInformationForm.getMaxDay();
        String salescode = masterGeneralInformationForm.getSalesCode();
        String frieghtfmc = masterGeneralInformationForm.getFrieghtFmc();
        String frieghtchb = masterGeneralInformationForm.getFrieghtChb();

        String spclRemark = masterGeneralInformationForm.getSpclRemark();
        String defaultRoute = masterGeneralInformationForm.getDefaultRoute();
        String importTrack = masterGeneralInformationForm.getImportTrackingScreen();
        String activatePassword = masterGeneralInformationForm.getActivatePwdQuotes();
        String weblcl = masterGeneralInformationForm.getAllowLclQuotes();
        String webfcl = masterGeneralInformationForm.getAllowFclQuotes();
        String reserved = masterGeneralInformationForm.getReservedForFuture();
        String faxSail = masterGeneralInformationForm.getFaxSailingSchedule();
        String fclMail = masterGeneralInformationForm.getFclMailingList();
        String christmasCard = masterGeneralInformationForm.getChristmasCard();
        String importcfs = masterGeneralInformationForm.getImportsCfs();
        String pbasurchrge = masterGeneralInformationForm.getPbaSurchrge();
        String einmaster = masterGeneralInformationForm.getEinmaster();
        String commoditymaster = masterGeneralInformationForm.getCommoditymaster();
        String importmaster = masterGeneralInformationForm.getImportmaster();

        String accounttype = masterGeneralInformationForm.getAccounttype();
        String acctType1 = masterGeneralInformationForm.getAccountType1();
        String acctType2 = masterGeneralInformationForm.getAccountType2();
        String acctType3 = masterGeneralInformationForm.getAccountType3();
        String acctType4 = masterGeneralInformationForm.getAccountType4();
        String acctType5 = masterGeneralInformationForm.getAccountType5();
        String acctType6 = masterGeneralInformationForm.getAccountType6();
        String acctType7 = masterGeneralInformationForm.getAccountType7();
        String acctType8 = masterGeneralInformationForm.getAccountType8();
        String acctType9 = masterGeneralInformationForm.getAccountType9();
        String acctType10 = masterGeneralInformationForm.getAccountType10();
        String acctType11 = masterGeneralInformationForm.getAccountType11();
        String accountType = "";
        String active = masterGeneralInformationForm.getActive();
        String insure = masterGeneralInformationForm.getInsure();
        String insurancecomment = masterGeneralInformationForm.getInsuranceComment();

        //String arcontactCode=generalInformationForm.getArCode();
        String lastDate = masterGeneralInformationForm.getLastDate();
        HttpSession session = ((HttpServletRequest) request).getSession();
        GeneralInformation generalInformation = null;

        GenericCode salecode = null;
        GenericCode gen = null;

        customerbean.setGoalAcct(goalAcct);
        customerbean.setPoa(poa);
        customerbean.setInsure(insure);
        customerbean.setImportTrack(importTrack);
        customerbean.setIdType(idType);
        customerbean.setWebQuotes(activatePassword);
        customerbean.setWebFcl(webfcl);
        customerbean.setWebLcl(weblcl);
        customerbean.setReserved(reserved);
        customerbean.setFaxSail(faxSail);
        customerbean.setFclMail(fclMail);
        customerbean.setChristmas(christmasCard);
        customerbean.setImportCfs(importcfs);
        customerbean.setPba(pbasurchrge);
        customerbean.setAccountType1(acctType1);
        customerbean.setAccountType2(acctType2);
        customerbean.setAccountType3(acctType3);
        customerbean.setAccountType4(acctType4);
        customerbean.setAccountType5(acctType5);
        customerbean.setAccountType6(acctType6);
        customerbean.setAccountType7(acctType7);
        customerbean.setAccountType8(acctType8);
        customerbean.setAccountType9(acctType9);
        customerbean.setAccountType10(acctType10);
        customerbean.setAccountType11(acctType11);
        customerbean.setActive(active);

        session.setAttribute("customerbean", customerbean);
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();

        if (acctType1 != null && acctType1.equalsIgnoreCase("on")) {
            accountType = "S,";
        }
        if (acctType2 != null && acctType2.equalsIgnoreCase("on")) {
            accountType = accountType + "F,";
        }
        if (acctType3 != null && acctType3.equalsIgnoreCase("on")) {
            accountType = accountType + "N,";

        }
        if (acctType4 != null && acctType4.equalsIgnoreCase("on")) {
            accountType = accountType + "C,";
        }
        if (acctType5 != null && acctType5.equalsIgnoreCase("on")) {
            accountType = accountType + "SS,";
        }
        if (acctType6 != null && acctType6.equalsIgnoreCase("on")) {
            accountType = accountType + "T,";
        }
        if (acctType7 != null && acctType7.equalsIgnoreCase("on")) {
            accountType = accountType + "A,";
        }
        if (acctType8 != null && acctType8.equalsIgnoreCase("on")) {
            accountType = accountType + "I,";
        }
        if (acctType9 != null && acctType9.equalsIgnoreCase("on")) {
            accountType = accountType + "E,";
        }
        if (acctType10 != null && acctType10.equalsIgnoreCase("on")) {
            accountType = accountType + "V,";
        }
        if (acctType11 != null && acctType11.equalsIgnoreCase("on")) {
            accountType = accountType + "O,";
        }

        if (accountType.length() > 0) {
            accountType = accountType.substring(0, accountType.length() - 1);
        }


        if (buttonValue != null && buttonValue.equals("popupsearch")) {
            if (session.getAttribute("mastergeneralInformation") != null) {
                generalInformation = (GeneralInformation) session.getAttribute("mastergeneralInformation");
            } else {
                generalInformation = new GeneralInformation();
            }


            if (commodity != null && !commodity.equals("") && !commodity.equals("%")) {

                List comList = genericCodeDAO.findForGenericCode(commodity);
                if (comList != null && comList.size() > 0) {

                    gen = (GenericCode) comList.get(0);

                    generalInformation.setGenericCode(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            if (commodityDesc != null && !commodityDesc.equals("")) {

                List codeList = genericCodeDAO.findForAirRates(null, commodityDesc);
                if (codeList != null && codeList.size() > 0) {
                    gen = (GenericCode) codeList.get(0);
                    generalInformation.setGenericCode(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            if (impCommodity != null && !impCommodity.equals("")) {
                List comList = genericCodeDAO.findForGenericCode(impCommodity);
                if (comList != null && comList.size() > 0) {

                    gen = (GenericCode) comList.get(0);

                    generalInformation.setImpCommodity(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

            if (impCommodityDesc != null && !impCommodityDesc.equals("")) {

                List codeList = genericCodeDAO.findForAirRates(null, impCommodityDesc);
                if (codeList != null && codeList.size() > 0) {
                    gen = (GenericCode) codeList.get(0);
                    generalInformation.setImpCommodity(gen);
                    session.setAttribute("mastergeneralInformation", generalInformation);
                }
            }

        }

        if (!buttonValue.equals("cancel")) {
            if (session.getAttribute("mastergeneralInformation") != null) {
                generalInformation = (GeneralInformation) session.getAttribute("mastergeneralInformation");
            } else {
                generalInformation = new GeneralInformation();
            }

            if (insure != null && insure.equalsIgnoreCase("on")) {
                generalInformation.setInsure("Y");
            } else if (insure != null && insure.equalsIgnoreCase("off")) {
                generalInformation.setInsure("N");
            }

        }



        if (session.getAttribute("mastergeneralInformation") != null) {
            generalInformation = (GeneralInformation) session.getAttribute("mastergeneralInformation");
        } else {
            generalInformation = new GeneralInformation();
        }

        generalInformation.setAccounttype(accountType);
        generalInformation.setIdType(idType);
        generalInformation.setIdType(idType);
        generalInformation.setAd1Phones(phone);
        generalInformation.setAd1Faxs(fax);
        generalInformation.setInsuranceComment(insurancecomment);

        if (goalAcct != null && goalAcct.equalsIgnoreCase("on")) {
            generalInformation.setGoalAcct("Y");
        } else if (goalAcct != null && goalAcct.equalsIgnoreCase("off")) {
            generalInformation.setGoalAcct("N");
        }
        generalInformation.setInventoryCode(inventoryCode);
        generalInformation.setUserName(userName);
        generalInformation.setPassword(password);
        if (poa != null && poa.equalsIgnoreCase("on")) {
            generalInformation.setPoa("Y");
        } else if (poa != null && poa.equalsIgnoreCase("off")) {
            generalInformation.setPoa("N");
        }

        generalInformation.setFwFmcNo(frieghtfmc);
        generalInformation.setFwChbNo(frieghtchb);
        if (masterGeneralInformationForm.getMaxDay() != null && !masterGeneralInformationForm.getMaxDay().equals("")) {
            String max = masterGeneralInformationForm.getMaxDay();
            generalInformation.setMaxDaysBetVisits(Integer.parseInt(max));
        }
        if (einmaster != null && einmaster.equals("on")) {
            generalInformation.setEinMaster("Y");
        } else {
            generalInformation.setEinMaster("N");
        }
        if (commoditymaster != null && commoditymaster.equals("on")) {
            generalInformation.setCommodityMaster("Y");
        } else {
            generalInformation.setCommodityMaster("N");
        }
        if (importmaster != null && importmaster.equals("on")) {
            generalInformation.setImportMaster("Y");
        } else {
            generalInformation.setImportMaster("N");
        }

        java.util.Date javaDate = null;
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

        if (lastDate != null && !lastDate.equals("")) {
                javaDate = dateFormat.parse(lastDate);
                generalInformation.setLdPwdActivated(javaDate);
        }

        if (weblcl != null && weblcl.equalsIgnoreCase("on")) {
            generalInformation.setAllowLclQuotes("Y");
        } else {
            generalInformation.setAllowLclQuotes("N");
        }
        if (webfcl != null && webfcl.equalsIgnoreCase("on")) {
            generalInformation.setAllowFclQuotes("Y");
        } else {
            generalInformation.setAllowFclQuotes("N");
        }
        if (faxSail != null && faxSail.equalsIgnoreCase("on")) {
            generalInformation.setFaxSailingSchedule("Y");
        } else {
            generalInformation.setFaxSailingSchedule("N");
        }
        if (fclMail != null && fclMail.equalsIgnoreCase("on")) {
            generalInformation.setFclMailingList("Y");
        } else {
            generalInformation.setFclMailingList("N");
        }
        if (christmasCard != null && christmasCard.equalsIgnoreCase("on")) {
            generalInformation.setChristmasCard("Y");
        } else {
            generalInformation.setChristmasCard("N");
        }
        if (pbasurchrge != null && pbasurchrge.equalsIgnoreCase("on")) {
            generalInformation.setPbaSurchrge("Y");
        } else {
            generalInformation.setPbaSurchrge("N");
        }

        generalInformation.setImportsCfs(importcfs);
        generalInformation.setSpecialRemarks(spclRemark);
        generalInformation.setRoutingInstruction(defaultRoute);
        if (importTrack != null && importTrack.equalsIgnoreCase("on")) {
            generalInformation.setImportTrackingScreen("Y");
        } else {
            generalInformation.setImportTrackingScreen("N");
        }
        if (activatePassword != null && activatePassword.equalsIgnoreCase("on")) {
            generalInformation.setActivatePwdQuotes("Y");
        } else {
            generalInformation.setActivatePwdQuotes("N");
        }
        if (active != null && active.equalsIgnoreCase("on")) {
            generalInformation.setActive("Y");
        } else {
            generalInformation.setActive("N");
        }
        generalInformation.setAd1Phones(phone1);
        generalInformation.setIdText(idText);
        generalInformation.setDunsNo(dunsNo);
        generalInformation.setAd1Faxs(fax1);




        if (salescode != null && !salescode.equals("0")) {
            salecode = genericCodeDAO.findById(Integer.parseInt(salescode));

            generalInformation.setSalesCodeName(salecode.getCodedesc());
            generalInformation.setSalescode(salecode);
        }


        if (maxdays != null && !maxdays.equals("")) {
            Integer maxday = Integer.parseInt(maxdays);
            generalInformation.setMaxDaysBetVisits(maxday);
        }

        List generalInfo = new ArrayList();
        generalInfo.add(generalInformation);
        session.setAttribute("mastergeneralInformation", generalInformation);
        session.setAttribute("generalinfo", generalInfo);


        return mapping.findForward("generalinfo");
    }
}