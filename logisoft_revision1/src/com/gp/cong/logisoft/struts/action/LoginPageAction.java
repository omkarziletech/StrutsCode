/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import javax.servlet.ServletContext;
import java.util.Vector;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.LoginPageForm;
import com.gp.cong.logisoft.util.DBUtil;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.gp.cong.logisoft.beans.LoginUser;
import com.gp.cong.logisoft.hibernate.dao.RoleDAO;
import com.gp.cvst.logisoft.hibernate.dao.ArBatchDAO;

/**
 * 
 * @struts.action path="/loginPage" name="loginPageForm" input="/jsps/login.jsp"
 *                scope="request" validate="true"
 */
public class LoginPageAction extends Action {

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        LoginPageForm loginPageForm = (LoginPageForm) form;
        HttpSession session = ((HttpServletRequest) request).getSession();
        String loginName = loginPageForm.getUsername();
        String forwardName = "failure";
        String buttonValue = loginPageForm.getButtonValue();
        int userId = 0;
        ServletContext servletContext = getServlet().getServletContext();
        String password = loginPageForm.getPassword();

        User userHelper = new User();
        userHelper.setLoginName(loginName);
        userHelper.setPassword(password);
        UserDAO userDAO = new UserDAO();
        RoleDAO roleDAO = new RoleDAO();
        User user = userDAO.findByUserName(loginName.toUpperCase(), password);
        LoginUser loginUser = null;
        if (user == null) {
            String msg = "UserName and Password does not match. Please enter correct Username and Password";
            request.setAttribute("message", msg);
        } else {
            userId = user.getUserId();
            String userID = Integer.toString(userId);
            if (servletContext.getAttribute("loginUser") != null) {
                loginUser = (LoginUser) servletContext.getAttribute("loginUser");
            } else {
                loginUser = new LoginUser();
            }
            if (buttonValue != null && buttonValue.equals("useralreadyloggedin")) {
                loginUser.removeUser(userID);
                request.setAttribute("login", "login");
                session.setAttribute("loginuser", user);
                session.setAttribute("roleDuty", roleDAO.getRoleDuty(user.getRole().getRoleId()));
                Vector userDetails = new Vector();
                userDetails.add(user.getLoginName());
                userDetails.add(request.getRemoteAddr());
                loginUser.loginUser(Integer.toString(userId), userDetails);
                servletContext.setAttribute("loginUser", loginUser);
            } else {
                if (loginUser.userAlreadyLoggedOn(userID)) {
                    request.setAttribute("userHelper", userHelper);
                    String message = "User is already logged on";
                    request.setAttribute("message", message);
                } else {
                    request.setAttribute("login", "login");
                    session.setAttribute("loginuser", user);
                    session.setAttribute("roleDuty", roleDAO.getRoleDuty(user.getRole().getRoleId()));
                    Vector userDetails = new Vector();
                    userDetails.add(user.getLoginName());
                    userDetails.add(request.getRemoteAddr());
                    loginUser.loginUser(Integer.toString(userId), userDetails);
                    servletContext.setAttribute("loginUser", loginUser);
                }

            }
            if (session.getAttribute("loginuser") != null) {
                user = (User) session.getAttribute("loginuser");
                ArBatchDAO arBatchDAO = new ArBatchDAO();
                arBatchDAO.unLockBatchforUser(user.getUserId());
                DBUtil dbUtil = new DBUtil();
                dbUtil.tabProcessInfo(user.getUserId());
            }
        }

        return mapping.findForward(forwardName);
    }
}
