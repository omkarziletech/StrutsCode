/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.form.GeneralInformationForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 12-24-2007
 * 
 * XDoclet definition:
 * @struts.action path="/generalInformation" name="generalInformationForm" input="/jsps/Tradingpartnermaintainance/GeneralInformation.jsp" scope="request" validate="true"
 */
public class GeneralInformationAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form	 * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception{
        GeneralInformationForm generalInformationForm = (GeneralInformationForm) form;// TODO Auto-generated method stub
        String idType = generalInformationForm.getIdType();

        String idText = generalInformationForm.getIdtext();
        String dunsNo = generalInformationForm.getDunsNo();


        customerBean customerbean = new customerBean();
        DBUtil dbUtil = new DBUtil();
        String buttonValue = generalInformationForm.getButtonValue();
        String commodity = generalInformationForm.getCommodity();
        String impCommodity = generalInformationForm.getImpCommodity();
        String commodityDesc = generalInformationForm.getCommDesc();

        String impcommodityDesc = generalInformationForm.getImpCommodityDesc();

        String phone = generalInformationForm.getPhone1();
        String goalAcct = generalInformationForm.getGoalAcct();
        String fax = generalInformationForm.getFax1();
        String phone1 = dbUtil.stringtokenizer(phone);
        String fax1 = dbUtil.stringtokenizer(fax);
        String inventoryCode = generalInformationForm.getInventoryCode();
        String userName = generalInformationForm.getUserName();
        String password = generalInformationForm.getPassword();
        String poa = generalInformationForm.getPoa();
        String maxdays = generalInformationForm.getMaxDay();
        String salescode = generalInformationForm.getSalesCode();
        String frieghtfmc = generalInformationForm.getFrieghtFmc();
        String frieghtchb = generalInformationForm.getFrieghtChb();

        String spclRemark = generalInformationForm.getSpclRemark();
        String defaultRoute = generalInformationForm.getDefaultRoute();
        String importTrack = generalInformationForm.getImportTrackingScreen();
        String activatePassword = generalInformationForm.getActivatePwdQuotes();
        String weblcl = generalInformationForm.getAllowLclQuotes();
        String webfcl = generalInformationForm.getAllowFclQuotes();
        String reserved = generalInformationForm.getReservedForFuture();
        String faxSail = generalInformationForm.getFaxSailingSchedule();
        String fclMail = generalInformationForm.getFclMailingList();
        String christmasCard = generalInformationForm.getChristmasCard();
        String importcfs = generalInformationForm.getImportsCfs();
        String pbasurchrge = generalInformationForm.getPbaSurchrge();
        String einmaster = generalInformationForm.getEinmaster();
        String commoditymaster = generalInformationForm.getCommoditymaster();
        String importmaster = generalInformationForm.getImportmaster();
        //String arcontactCode=generalInformationForm.getArCode();
        String lastDate = generalInformationForm.getLastDate();

        String accounttype = generalInformationForm.getAccounttype();
        String acctType1 = generalInformationForm.getAccountType1();
        String acctType2 = generalInformationForm.getAccountType2();
        String acctType3 = generalInformationForm.getAccountType3();
        String acctType4 = generalInformationForm.getAccountType4();
        String acctType5 = generalInformationForm.getAccountType5();
        String acctType6 = generalInformationForm.getAccountType6();
        String acctType7 = generalInformationForm.getAccountType7();
        String acctType8 = generalInformationForm.getAccountType8();
        String acctType9 = generalInformationForm.getAccountType9();
        String acctType10 = generalInformationForm.getAccountType10();
        String acctType11 = generalInformationForm.getAccountType11();
        String accountType = "";
        String active = generalInformationForm.getActive();
        String insure = generalInformationForm.getInsure();
        String CFCL=generalInformationForm.getCFCL();
        String insurancecomment = generalInformationForm.getInsuranceComment();


        HttpSession session = ((HttpServletRequest) request).getSession();
        GeneralInformation generalInformation = null;

        GenericCode salecode = null;
        GenericCode gen = null;

        customerbean.setInsure(insure);
        customerbean.setCFCL(CFCL);
        customerbean.setGoalAcct(goalAcct);
        customerbean.setPoa(poa);
        customerbean.setImportTrack(importTrack);
        customerbean.setWebQuotes(activatePassword);
        customerbean.setWebFcl(webfcl);
        customerbean.setWebLcl(weblcl);
        customerbean.setReserved(reserved);
        customerbean.setFaxSail(faxSail);
        customerbean.setFclMail(fclMail);
        customerbean.setChristmas(christmasCard);
        customerbean.setImportCfs(importcfs);
        customerbean.setPba(pbasurchrge);
        customerbean.setEinmaster(einmaster);
        customerbean.setDunsNo(dunsNo);
        customerbean.setCommoditymaster(commoditymaster);
        customerbean.setImportmaster(importmaster);
        customerbean.setIdType(idType);
        customerbean.setAccountType1(acctType1);
        customerbean.setAccountType2(acctType2);
        customerbean.setAccountType3(acctType3);
        customerbean.setAccountType4(acctType4);
        customerbean.setAccountType5(acctType5);
        customerbean.setAccountType6(acctType6);
        customerbean.setAccountType7(acctType7);
        customerbean.setAccountType8(acctType8);
        customerbean.setAccountType9(acctType9);
        customerbean.setAccountType10(acctType10);
        customerbean.setAccountType11(acctType11);
        customerbean.setActive(active);
        session.setAttribute("customerbean", customerbean);
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();

        if (acctType1 != null && acctType1.equalsIgnoreCase("on")) {
            accountType = "S,";
        }
        if (acctType2 != null && acctType2.equalsIgnoreCase("on")) {
            accountType = accountType + "F,";
        }
        if (acctType3 != null && acctType3.equalsIgnoreCase("on")) {
            accountType = accountType + "N,";
        }
        if (acctType4 != null && acctType4.equalsIgnoreCase("on")) {
            accountType = accountType + "C,";
        }
        if (acctType5 != null && acctType5.equalsIgnoreCase("on")) {
            accountType = accountType + "SS,";
        }
        if (acctType6 != null && acctType6.equalsIgnoreCase("on")) {
            accountType = accountType + "T,";
        }
        if (acctType7 != null && acctType7.equalsIgnoreCase("on")) {
            accountType = accountType + "A,";
        }
        if (acctType8 != null && acctType8.equalsIgnoreCase("on")) {
            accountType = accountType + "I,";
        }
        if (acctType9 != null && acctType9.equalsIgnoreCase("on")) {
            accountType = accountType + "E,";
        }
        if (acctType10 != null && acctType10.equalsIgnoreCase("on")) {
            accountType = accountType + "V,";
        }
        if (acctType11 != null && acctType11.equalsIgnoreCase("on")) {
            accountType = accountType + "O,";
        }

        if (accountType.length() > 0) {
            accountType = accountType.substring(0, accountType.length() - 1);
        }


        if (buttonValue != null && buttonValue.equals("popupsearch"))//-----CODE FOR DOJO-----
        {
            if (session.getAttribute("generalInformation") != null) {
                generalInformation = (GeneralInformation) session.getAttribute("generalInformation");
            } else {
                generalInformation = new GeneralInformation();
            }

            if (commodity != null && !commodity.equals("") && !commodity.equals("%")) {
                List comlist = genericCodeDAO.findForGenericCode(commodity);

                if (comlist != null && comlist.size() > 0) {
                    gen = (GenericCode) comlist.get(0);
                    generalInformation.setGenericCode(gen);
                    session.setAttribute("generalInformation", generalInformation);
                }
            }

            if (commodityDesc != null && !commodityDesc.equals("")) {
                List cdlist = genericCodeDAO.findByCodedesc(commodityDesc);
                if (cdlist != null && cdlist.size() > 0) {
                    gen = (GenericCode) cdlist.get(0);
                    generalInformation.setGenericCode(gen);
                    session.setAttribute("generalInformation", generalInformation);
                }

            }
            if (impCommodity != null && !impCommodity.equals("") && !impCommodity.equals("%")) {
                List implist = genericCodeDAO.findForGenericCode(impCommodity);

                if (implist != null && implist.size() > 0) {
                    gen = (GenericCode) implist.get(0);
                    generalInformation.setImpCommodity(gen);
                    session.setAttribute("generalInformation", generalInformation);
                }
            }
            if (impcommodityDesc != null && !impcommodityDesc.equals("")) {
                List idlist = genericCodeDAO.findByCodedesc(impcommodityDesc);
                if (idlist != null && idlist.size() > 0) {
                    gen = (GenericCode) idlist.get(0);
                    generalInformation.setImpCommodity(gen);
                    session.setAttribute("generalInformation", generalInformation);
                }

            }


        }

        if (!buttonValue.equals("cancel")) {
            if (session.getAttribute("generalInformation") != null) {
                generalInformation = (GeneralInformation) session.getAttribute("generalInformation");
            } else {
                generalInformation = new GeneralInformation();
            }

            if (insure != null && insure.equalsIgnoreCase("on")) {
                generalInformation.setInsure("Y");
            } else {
                generalInformation.setInsure("N");
            }
             if (CFCL!= null && CFCL.equalsIgnoreCase("on")) {
           generalInformation.setCFCL("Y");
        } else {
           generalInformation.setCFCL("N");
        }

        }
        //customerbean.setInsuranceComment(insurancecomment);



        if (session.getAttribute("generalInformation") != null) {
            generalInformation = (GeneralInformation) session.getAttribute("generalInformation");
        } else {
            generalInformation = new GeneralInformation();
        }



        generalInformation.setAccounttype(accountType);


        generalInformation.setIdType(idType);
        generalInformation.setAd1Phones(phone);
        generalInformation.setAd1Faxs(fax);
        generalInformation.setInsuranceComment(insurancecomment);

        if (goalAcct != null && goalAcct.equalsIgnoreCase("on")) {
            generalInformation.setGoalAcct("Y");
        } else {
            generalInformation.setGoalAcct("N");
        }
        generalInformation.setInventoryCode(inventoryCode);

        generalInformation.setUserName(userName);
        generalInformation.setPassword(password);


        if (poa != null && poa.equalsIgnoreCase("on")) {
            generalInformation.setPoa("Y");
        } else {
            generalInformation.setPoa("N");
        }

        generalInformation.setFwFmcNo(frieghtfmc);
        generalInformation.setFwChbNo(frieghtchb);
        if (generalInformationForm.getMaxDay() != null && !generalInformationForm.getMaxDay().equals("")) {
            String max = generalInformationForm.getMaxDay();
            generalInformation.setMaxDaysBetVisits(Integer.parseInt(max));
        }
        if (einmaster != null && einmaster.equals("on")) {
            generalInformation.setEinMaster("Y");
        } else {
            generalInformation.setEinMaster("N");
        }
        if (commoditymaster != null && commoditymaster.equals("on")) {
            generalInformation.setCommodityMaster("Y");
        } else {
            generalInformation.setCommodityMaster("N");
        }
        if (importmaster != null && importmaster.equals("on")) {
            generalInformation.setImportMaster("Y");
        } else {
            generalInformation.setImportMaster("N");
        }

        java.util.Date javaDate = null;
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        if (lastDate != null && !lastDate.equals("")) {
                javaDate = dateFormat.parse(lastDate);
                generalInformation.setLdPwdActivated(javaDate);
        }
        if (weblcl != null && weblcl.equalsIgnoreCase("on")) {
            generalInformation.setAllowLclQuotes("Y");
        } else {
            generalInformation.setAllowLclQuotes("N");
        }
        if (webfcl != null && webfcl.equalsIgnoreCase("on")) {
            generalInformation.setAllowFclQuotes("Y");
        } else {

            generalInformation.setAllowFclQuotes("N");
        }
        if (faxSail != null && faxSail.equalsIgnoreCase("on")) {
            generalInformation.setFaxSailingSchedule("Y");
        } else {
            generalInformation.setFaxSailingSchedule("N");
        }
        if (fclMail != null && fclMail.equalsIgnoreCase("on")) {
            generalInformation.setFclMailingList("Y");
        } else {
            generalInformation.setFclMailingList("N");
        }
        if (christmasCard != null && christmasCard.equalsIgnoreCase("on")) {
            generalInformation.setChristmasCard("Y");
        } else {
            generalInformation.setChristmasCard("N");
        }
        if (pbasurchrge != null && pbasurchrge.equalsIgnoreCase("on")) {
            generalInformation.setPbaSurchrge("Y");
        } else {
            generalInformation.setPbaSurchrge("N");
        }
        generalInformation.setImportsCfs(importcfs);
        generalInformation.setSpecialRemarks(spclRemark);
        generalInformation.setRoutingInstruction(defaultRoute);
        if (importTrack != null && importTrack.equalsIgnoreCase("on")) {
            generalInformation.setImportTrackingScreen("Y");
        } else {
            generalInformation.setImportTrackingScreen("N");
        }
        if (activatePassword != null && activatePassword.equalsIgnoreCase("on")) {
            generalInformation.setActivatePwdQuotes("Y");
        } else {
            generalInformation.setActivatePwdQuotes("N");
        }

        if (active != null && active.equalsIgnoreCase("on")) {
            generalInformation.setActive("Y");
        } else {
            generalInformation.setActive("N");
        }


        generalInformation.setAd1Phones(phone1);
        generalInformation.setIdText(idText);
        generalInformation.setDunsNo(dunsNo);
        generalInformation.setAd1Faxs(fax1);

        if (salescode != null && !salescode.equals("0")) {
            salecode = genericCodeDAO.findById(Integer.parseInt(salescode));

            generalInformation.setSalesCodeName(salecode.getCodedesc());
            generalInformation.setSalescode(salecode);
        }
        if (maxdays != null && maxdays != "") {
            Integer maxday = Integer.parseInt(maxdays);
            generalInformation.setMaxDaysBetVisits(maxday);
        }

        List generalInfo = new ArrayList();
        generalInfo.add(generalInformation);
        session.setAttribute("generalInformation", generalInformation);
        session.setAttribute("generalinfo", generalInfo);



        return mapping.findForward("generalinfo");
    }
}