/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.LabelValueBean;

import com.gp.cong.logisoft.bc.scheduler.EmailSchedulerBC;
import com.gp.cong.logisoft.domain.EmailSchedulerVO;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.EmailschedulerDAO;
import com.gp.cong.logisoft.jobscheduler.EMailScheduler;
import com.gp.cong.logisoft.struts.form.EmailSchedulerForm;
import com.gp.cvst.logisoft.beans.MailMessageVO;

/**
 * MyEclipse Struts
 * Creation date: 12-10-2008
 *
 * XDoclet definition:
 * @struts.action path="/emailScheduler" name="emailSchedulerForm" input="/jsps/admin/EmailScheduler.jsp" scope="request" validate="true"
 */
public class EmailSchedulerAction extends Action {
    /*
     * Generated Methods
     */
    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
    private static final String TODAY = "TODAY";
    private static final String YESTERDAY = "YESTERDAY";
    private static final String THIS_WEEK = "THIS_WEEK";
    private static final String LAST_WEEK = "LAST_WEEK";
    private static final String THIS_MONTH = "THIS_MONTH";
    private static final String THIS_YEAR = "THIS_YEAR";
    private static final String PENDING = "PENDING";
    private static final String COMPLETED = "COMPLETED";
    private static final String SENDLATER = "SENDLATER";
    private static final String SENDIMMEDIATELY = "SENDIMMEDIATELY";

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        EmailSchedulerForm emailSchedulerForm = (EmailSchedulerForm) form;// TODO Auto-generated method stub

        EmailSchedulerBC emailSchedulerBC = new EmailSchedulerBC();
        EmailSchedulerVO emailScheduler = new EmailSchedulerVO();
        String sortBy = emailSchedulerForm.getSortBy();
        String status = emailSchedulerForm.getStatus();
        String startDate = emailSchedulerForm.getStartDate();
        String endDate = emailSchedulerForm.getEndDate();
        String action = emailSchedulerForm.getAction();
        String check[] = emailSchedulerForm.getMailCheck();
        String sendStatus = emailSchedulerForm.getSendStatus();
        String userName = emailSchedulerForm.getUserName();
//        String moduleName = emailSchedulerForm.getModuleName();
        String fileName = emailSchedulerForm.getFileName();
        Date sDate = null;
        Date eDate = null;
        String moduleId="";
        String screenName="";
        if (action == null) {
            HttpSession session = request.getSession();
            if (request.getParameter("mailId") != null) {
                String index = request.getParameter("mailId");
                EmailschedulerDAO emailschedulerDAO = new EmailschedulerDAO();
                EmailSchedulerVO emailSchedulerVO = null;
                emailSchedulerVO = emailschedulerDAO.findById(new Integer(index));
                request.setAttribute("emailSchedulerVO", emailSchedulerVO);
                return mapping.findForward("viewEmailTransaction");
            }
            if (request.getParameter("moduleId") != null && !request.getParameter("moduleId").equalsIgnoreCase("")) {
                if(!"BL".equalsIgnoreCase(request.getParameter("moduleName")) && !"LCLImpUnits".equalsIgnoreCase(request.getParameter("moduleName"))){
                    moduleId = request.getParameter("moduleId").substring(-1 != request.getParameter("moduleId").indexOf("-")?
                        request.getParameter("moduleId").indexOf("-")+1:0);
                }else{
                    moduleId = null != request.getParameter("moduleId") ? request.getParameter("moduleId"): "";
                }
                emailSchedulerForm.setFileName(moduleId);
            }
//            if (request.getParameter("moduleName") != null && !request.getParameter("moduleName").equalsIgnoreCase("")) {
//                screenName = request.getParameter("moduleName");
//                emailSchedulerForm.setModuleName(screenName);
//            }
            String[] dates = emailSchedulerBC.getDatesForCriteria("TODAY");
            List<EmailSchedulerVO> emailList = emailSchedulerBC.searchMail(dates[0], dates[1], "", "", "COMPLETED", "All", moduleId,emailSchedulerForm.getToEmailOrFax());
            emailScheduler.setEmailList(emailList);
            request.setAttribute("emailList", emailScheduler);
            request.setAttribute("calenderList", getCalenderList());
            request.setAttribute("statusList", getStatusList());
            request.setAttribute("sendList", getSendList());
            request.setAttribute("moduleId", moduleId);
//            request.setAttribute("moduleName", screenName);
            User user = (User) session.getAttribute("loginuser");
            emailSchedulerForm.setUserName("All");
            request.setAttribute("emailSchedulerForm", emailSchedulerForm);
            return mapping.findForward("email");
        } else if (action != null && action.equals("sendMail")) {
            String path = null;
            String reportName = null;
            EmailSchedulerVO emailSchedulerVO = null;
            MailMessageVO mailMessageVO = null;
            EMailScheduler scheduler = new EMailScheduler();
            EmailschedulerDAO emailschedulerDAO = new EmailschedulerDAO();
            if (check != null) {
                for (int i = 0; i < check.length; i++) {
                    String string = check[i];
                    emailSchedulerVO = emailschedulerDAO.findById(new Integer(string));
                    if (emailSchedulerVO != null && !emailSchedulerVO.equals("")) {
                        mailMessageVO = new MailMessageVO(emailSchedulerVO.getToName(), emailSchedulerVO.getToAddress(), emailSchedulerVO.getFromName(), emailSchedulerVO.getFromAddress(), emailSchedulerVO.getCcAddress(), emailSchedulerVO.getBccAddress(), emailSchedulerVO.getSubject(), emailSchedulerVO.getHtmlMessage());
                    }
                    scheduler.createHtmlEmail(path, emailSchedulerVO.getFileLocation(), mailMessageVO, emailSchedulerVO.getName());
                }
            }
            request.setAttribute("calenderList", getCalenderList());
            request.setAttribute("statusList", getStatusList());
            request.setAttribute("sendList", getSendList());
            return mapping.findForward("email");
        } else if (action != null && action.equals("search")) {
            List<EmailSchedulerVO> emailList = emailSchedulerBC.searchMail(emailSchedulerForm);
            emailScheduler.setEmailList(emailList);
            request.setAttribute("emailList", emailScheduler);
            request.setAttribute("emailSchedulerForm", emailSchedulerForm);
            request.setAttribute("calenderList", getCalenderList());
            request.setAttribute("statusList", getStatusList());
            request.setAttribute("sendList", getSendList());
        } else if ("showAttachements".equals(action)) {
            List<String> files = new ArrayList<String>();
            if (null != fileName) {
                String[] fileArray = fileName.split(";");
                for (int i = 0; i < fileArray.length; i++) {
                    files.add(fileArray[i]);
                }
            }
            request.setAttribute("attachments", files);
            return mapping.findForward("showEmailAttachments");
        }
        return mapping.findForward("email");

    }

    /**
     * @return
     */
    private  List<LabelValueBean> getSendList() {
    List<LabelValueBean> sendList = new ArrayList<LabelValueBean>();
        if (sendList.size() == 0) {
            sendList.add(new LabelValueBean("Send Later", SENDLATER));
            sendList.add(new LabelValueBean("Send Immediately", SENDIMMEDIATELY));
        }
        return sendList;
    }

    private  List<LabelValueBean> getCalenderList() {
         List<LabelValueBean> calenderList = new ArrayList<LabelValueBean>();
        if (calenderList.size() == 0) {
            calenderList.add(new LabelValueBean("1 DAY", TODAY));
            calenderList.add(new LabelValueBean("7 DAYS", LAST_WEEK));
        }
        return calenderList;
    }

    /**
     * @return
     */
    private  List<LabelValueBean> getStatusList() {
        List<LabelValueBean> statusList = new ArrayList<LabelValueBean>();
        if (statusList.size() == 0) {
            statusList.add(new LabelValueBean("Completed", COMPLETED));
            statusList.add(new LabelValueBean("Pending", PENDING));
        }
        return statusList;
    }
}
