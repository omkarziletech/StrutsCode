/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.SearchWarehouseBean;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Warehouse;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.hibernate.dao.WarehouseDAO;
import com.gp.cong.logisoft.struts.form.SearchWarehouseForm;

/** 
 * MyEclipse Struts
 * Creation date: 11-29-2007
 * @author Rohith
 * XDoclet definition:
 * @struts.action input="/jsps/datareference/SearchWarehouse.jsp" validate="true"
 */
public class SearchWarehouseAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        // TODO Auto-generated method stub

        SearchWarehouseForm searchWhForm = (SearchWarehouseForm) form;
        HttpSession session = ((HttpServletRequest) request).getSession();

        String warehouseCode = searchWhForm.getWarehouseCode();
        String warehouseName = searchWhForm.getWarehouseName();
        String city = searchWhForm.getCity();
        String type = searchWhForm.getWarehouseType();
        String airCargo = searchWhForm.getAirCargo();
        String buttonValue = searchWhForm.getButtonValue();
        String match = searchWhForm.getMatch();
        String forwardName = "";
        String msg = "";
        String message = "";
        String loginname = "";

        SearchWarehouseBean swBean = new SearchWarehouseBean();
        session.setAttribute("caption", "List of Warehouses");
        swBean.setWarehouseCode(warehouseCode);
        swBean.setWarehouseName(warehouseName);
        swBean.setCity(city);
        swBean.setType(type);
        swBean.setAirCargo(airCargo);
        swBean.setMatch(match);
        /* Name:Rohith Date:12/04/2007 ----> Getting id from display column
        ----> Setting lock functionality
        ----> Setting user in session
         */

        if (request.getParameter("paramid") != null && !request.getParameter("paramid").equals("")) {
            WarehouseDAO warehouse1 = new WarehouseDAO();
            Warehouse warehouse = warehouse1.findById(Integer.parseInt(request.getParameter("paramid")));
            User userid = null;
            UserDAO user1 = new UserDAO();
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");

            }
            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
            ProcessInfo pi = new ProcessInfo();
            String programid = null;
            programid = (String) session.getAttribute("processinfoforwarehouse");
            String recordid = ""+warehouse.getId();
            String editstatus = "startedited";
            String deletestatus = "startdeleted";
            ProcessInfo processinfoobj = processinfoDAO.findById(Integer.parseInt(programid), recordid, deletestatus, editstatus);

            if (processinfoobj != null) {

                String view = "3";
                User loginuser = user1.findById(processinfoobj.getUserid());
                loginname = loginuser.getLoginName();
                msg = "This record is being used by ";
                message = msg + loginname;
                request.setAttribute("message", message);
                session.setAttribute("view", view);
                forwardName = "editWarehouse";
            } else {
                pi.setUserid(userid.getUserId());
                pi.setProgramid(Integer.parseInt(programid));
                java.util.Date currdate = new java.util.Date();
                pi.setProcessinfodate(currdate);
                pi.setEditstatus(editstatus);
                pi.setRecordid(recordid);
                processinfoDAO.save(pi);
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }
                if (session.getAttribute("warehouse") != null) {
                    session.removeAttribute("warehouse");
                }
                if (session.getAttribute("warehouse1") != null) {
                    session.removeAttribute("warehouse1");
                }
            }
            session.setAttribute("warehouse2", warehouse);
            forwardName = "editWarehouse";
        } else if (request.getParameter("param") != null && !request.getParameter("param").equals("")) {
            WarehouseDAO warehouse1 = new WarehouseDAO();
            Warehouse warehouse = warehouse1.findById(Integer.parseInt(request.getParameter("param")));

            String view = "3";
            session.setAttribute("view", view);
            if (session.getAttribute("warehouse") != null) {
                session.removeAttribute("warehouse");
            }
            if (session.getAttribute("warehouse1") != null) {
                session.removeAttribute("warehouse1");
            }
            session.setAttribute("warehouse2", warehouse);
            forwardName = "editWarehouse";
        } else {
            if (buttonValue.equals("search")) {
                request.setAttribute("swBean", swBean);
                WarehouseDAO warehouseDAO = new WarehouseDAO();
                List warehouseList = warehouseDAO.searchWarehouse(warehouseCode, warehouseName, city, type);
                session.setAttribute("warehouseList", warehouseList);
                forwardName = "searchWarehouse";
            }
            if (buttonValue != null && buttonValue.equals("searchall")) {
                WarehouseDAO warehouseDAO = new WarehouseDAO();
                List warehouseList = warehouseDAO.findAllWarehouses();
                session.setAttribute("warehouseList", warehouseList);
                forwardName = "searchWarehouse";
            }
            if (buttonValue.equals("add")) {
                forwardName = "addWarehouse";
            }
        }
        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}
