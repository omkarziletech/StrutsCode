/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.RefTerminal;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.struts.form.NewTerminalForm;
import com.gp.cong.logisoft.util.CommonFunctions;
import com.gp.cong.logisoft.util.DBUtil;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/** 
 * MyEclipse Struts
 * Creation date: 11-30-2007
 * 
 * XDoclet definition:
 * @struts.action path="/newTerminal" name="newTerminalForm" input="/jsps/datareference/NewTerminal.jsp" scope="request" 

validate="true"
 */
public class NewTerminalAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        NewTerminalForm newTerminalForm = (NewTerminalForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = newTerminalForm.getButtonValue();
        String message = "";
        String termNo = newTerminalForm.getTermNo();
        String name = newTerminalForm.getName();
        String unLocCode = newTerminalForm.getUnLocCode();
        String unLocationCode1 = newTerminalForm.getUnLocationCode1();
        String terminalType = newTerminalForm.getTerminalType();
        String city = newTerminalForm.getCity();
        String address1 = newTerminalForm.getAddressLine1();
        String address2 = newTerminalForm.getAddressLine2();
        String zip = newTerminalForm.getZip();
        String phoneNo1 = newTerminalForm.getPhoneNo1();
        String phoneNo2 = newTerminalForm.getPhoneNo2();
        String phoneNo3 = newTerminalForm.getPhoneNo3();
        String extension1 = newTerminalForm.getExtension1();
        String extension2 = newTerminalForm.getExtension2();
        String extension3 = newTerminalForm.getExtension3();
        String faxNo1 = newTerminalForm.getFaxNo1();
        String faxNo2 = newTerminalForm.getFaxNo2();
        String faxNo3 = newTerminalForm.getFaxNo3();
        String faxNo4 = newTerminalForm.getFaxNo4();
        String faxNo5 = newTerminalForm.getFaxNo5();
        String terminalLocation = newTerminalForm.getTerminalLocation();
        String ledgerno = newTerminalForm.getGeneralLedger();
        String careof = newTerminalForm.getCareof();
        String scheduleSuffix = newTerminalForm.getScheduleSuffix();
        String contactEmail = newTerminalForm.getImportsContacts();
        String printerModel = newTerminalForm.getPrinterModel();
        String acf = newTerminalForm.getAcf();
        String govSchCode = newTerminalForm.getGovSchCode();
        String notes = newTerminalForm.getNotes();
        String airsrvc = newTerminalForm.getAirsrvc();
        String chargeCode = newTerminalForm.getChargeCode();
        String brlChargeCode = newTerminalForm.getBrlChargeCode();
        String ovr10kChgCode = newTerminalForm.getOvr10kChgCode();
        String ovr20kChgCode = newTerminalForm.getOvr20kChgCode();
        String docChargeCode = newTerminalForm.getDocChargeCode();
        String Tpacctno=newTerminalForm.getAcctno();
        String exportsBillingTerminalEmail=newTerminalForm.getExportsBillingTerminalEmail();
        String fclExportIssuingTerminal=newTerminalForm.getFclExportIssuingTerminal();
        String docDeptEmail=newTerminalForm.getDocDeptEmail();
        String forwardName = "";
        DBUtil dbUtil = new DBUtil();
        UnLocationDAO unLocationDAO = new UnLocationDAO();
        RefTerminal terminal1 = null;
        UnLocation unLocation = null;
//        String phone1 = dbUtil.stringtokenizer(phoneNo1);
//        String phone2 = dbUtil.stringtokenizer(phoneNo2);
//        String phone3 = dbUtil.stringtokenizer(phoneNo3);
//        String fax1 = dbUtil.stringtokenizer(faxNo1);
//        String fax2 = dbUtil.stringtokenizer(faxNo2);
//        String fax3 = dbUtil.stringtokenizer(faxNo3);
//        String fax4 = dbUtil.stringtokenizer(faxNo4);
//        String fax5 = dbUtil.stringtokenizer(faxNo5);

        String phone1 = phoneNo1;
        String phone2 = phoneNo2;
        String phone3 = phoneNo3;
        String fax1 = faxNo1;
        String fax2 = faxNo2;
        String fax3 = faxNo3;
        String fax4 = faxNo4;
        String fax5 = faxNo5;

        RefTerminalDAO terminalDAO = new RefTerminalDAO();
        RefTerminal terminal = null;
        if (!buttonValue.equals("cancel") && !buttonValue.equals("searchcity")) {
            if (session.getAttribute("terminal") != null) {
                terminal = (RefTerminal) session.getAttribute("terminal");
            } else {
                terminal = new RefTerminal();
            }


            GenericCode genericCode = new GenericCode();
            GenericCodeDAO genericCodeDAO = new GenericCodeDAO();

            if (airsrvc == null) {
                airsrvc = "N";

            } else {
                airsrvc = "Y";
            }

            terminal.setTrmnum(termNo);
            terminal.setTrmnam(name);
            terminal.setDocDeptEmail(docDeptEmail);
            terminal.setAddres1(address1);
            terminal.setAddres2(address2);
            terminal.setZipcde(zip);
            terminal.setPhnnum1(phoneNo1);
            terminal.setPhnnum2(phoneNo2);
            terminal.setPhnnum3(phoneNo3);
            terminal.setExtension1(extension1);
            terminal.setExtension2(extension2);
            terminal.setExtension3(extension3);
            terminal.setFaxnum1(faxNo1);
            terminal.setFaxnum2(faxNo2);
            terminal.setFaxnum3(faxNo3);
            terminal.setFaxnum4(faxNo4);
            terminal.setFaxnum5(faxNo5);
            terminal.setPrintermodel(printerModel);
            terminal.setActyon(acf);
            terminal.setNotes(notes);
            terminal.setGovSchCode(govSchCode);
            terminal.setAirsrvc(airsrvc);
            terminal.setTerminalLocation(terminalLocation);
            terminal.setLedgerNo(ledgerno);
            terminal.setCareof(careof);
            terminal.setScheduleSuffix(scheduleSuffix);
            terminal.setImportsContactEmail(contactEmail);
            terminal.setCountry(terminal.getCountry());
            terminal.setState(terminal.getState());
            terminal.setUnLocation(terminal.getUnLocation());
            terminal.setExportsBillingTerminalEmail(exportsBillingTerminalEmail);
            terminal.setFclExportIssuingTerminal(fclExportIssuingTerminal);
            unLocation = new UnLocationDAO().getUnlocation(unLocCode);
            if(unLocation!=null){
                terminal.setUnLocation(unLocation);
            }
            terminal.setCity1(city);
            terminal.setUnLocCode(unLocCode);
            terminal.setUnLocationCode1(unLocationCode1);

            if(CommonFunctions.isNotNull(chargeCode)){
            	genericCode=genericCodeDAO.getId(chargeCode);
            	terminal.setGenericCode1(genericCode);
            }
             if(CommonFunctions.isNotNull(brlChargeCode)){
            	genericCode=genericCodeDAO.getId(brlChargeCode);
            	terminal.setGenericCode2(genericCode);
            }
             if(CommonFunctions.isNotNull(ovr10kChgCode)){
            	genericCode=genericCodeDAO.getId(ovr10kChgCode);
            	terminal.setGenericCode3(genericCode);
            }
             if(CommonFunctions.isNotNull(ovr20kChgCode)){
            	genericCode=genericCodeDAO.getId(ovr20kChgCode);
            	terminal.setGenericCode4(genericCode);
            }
             if(CommonFunctions.isNotNull(docChargeCode)){
            	genericCode=genericCodeDAO.getId(docChargeCode);
            	terminal.setGenericCode5(genericCode);
            }
            if (terminalType != null && terminalType != "0") {
                genericCode = genericCodeDAO.findById(Integer.parseInt(terminalType));
                terminal.setCodeDesc(terminalType);
                terminal.setGenericCode(genericCode);
            }

            session.setAttribute("terminal", terminal);
            forwardName = "addterminal";
        }
        if (buttonValue.equals("add")) {
            terminal.setDocDeptEmail(docDeptEmail);
            terminal.setPhnnum1(phone1);
            terminal.setPhnnum2(phone2);
            terminal.setPhnnum3(phone3);
            terminal.setExtension1(extension1);
            terminal.setExtension2(extension2);
            terminal.setExtension3(extension3);
            terminal.setFaxnum1(fax1);
            terminal.setFaxnum2(fax2);
            terminal.setFaxnum3(fax3);
            terminal.setFaxnum4(fax4);
            terminal.setFaxnum5(fax5);
            terminal.setTpacctno(Tpacctno);
            terminal.setAirsrvc(airsrvc);
            terminal.setExportsBillingTerminalEmail(exportsBillingTerminalEmail);
            terminal.setFclExportIssuingTerminal(fclExportIssuingTerminal);
            session.setAttribute("terminal", terminal);

            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            terminalDAO.save(terminal, userId.getLoginName());
            List terminalList = new ArrayList();
            RefTerminalTemp refTerminalTemp = new RefTerminalTemp();
            refTerminalTemp.setCity1(terminal.getCity1());
            refTerminalTemp.setUnLocCode(terminal.getUnLocCode());
            refTerminalTemp.setUnLocationCode1(terminal.getUnLocationCode1());
            refTerminalTemp.setCodeDesc(terminal.getCodeDesc());

            refTerminalTemp.setGenericCode(terminal.getGenericCode());
            refTerminalTemp.setTerminalLocation(terminal.getTerminalLocation());
            refTerminalTemp.setTerminalType(terminal.getTerminalType());
            refTerminalTemp.setTrmnam(terminal.getTrmnam());
            refTerminalTemp.setTrmnum(terminal.getTrmnum());
            refTerminalTemp.setDocDeptEmail(terminal.getDocDeptEmail());
            terminalList.add(refTerminalTemp);
            session.setAttribute("terminalList", terminalList);
            if (session.getAttribute("contactAddList") != null) {
                session.removeAttribute("contactAddList");
            }
            message = "Terminal details saved successfully";
            request.setAttribute("message", message);
            request.setAttribute("buttonValue", buttonValue);
            forwardName = "searchterminal";
        } else if (buttonValue.equals("cancel")) {
            if (session.getAttribute("terminal") != null) {
                session.removeAttribute("terminal");
            }
            if (session.getAttribute("contactAddList") != null) {
                session.removeAttribute("contactAddList");
            }
            forwardName = "searchterminal";
        }

        if (buttonValue.equals("searchcity")) {
            List searchcity = unLocationDAO.findbyCity(city);
            if (session.getAttribute("terminal") != null) {
                terminal1 = (RefTerminal) session.getAttribute("terminal");

            } else {
                terminal1 = new RefTerminal();
            }
            if (searchcity != null && searchcity.size() > 0) {
                UnLocation unLoc = (UnLocation) searchcity.get(0);
                terminal1.setUnLocation(unLoc);
                terminal1.setCity1(city);
                terminal1.setUnLocCode(unLocCode);
                terminal1.setUnLocationCode1(unLocationCode1);
            } else {
                UnLocation unLoc = null;
                terminal1.setUnLocation(unLoc);
                terminal1.setCity1(city);
                terminal1.setUnLocCode(unLocCode);
                terminal1.setUnLocationCode1(unLocationCode1);
            }
            session.setAttribute("terminal", terminal1);
            return mapping.findForward("addterminal");

        }
        return mapping.findForward(forwardName);
    }
}
 