/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordCustomer;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.form.MasterEditCustomerForm;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.domain.TradingPartner;

/** 
 * MyEclipse Struts
 * Creation date: 04-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterEditCustomer" name="masterEditCustomerForm" input="/jsps/Tradingpartnermaintainance/masterEditCustomer.jsp" scope="request" validate="true"
 */
public class MasterEditCustomerAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterEditCustomerForm masterEditCustomerForm = (MasterEditCustomerForm) form;// TODO Auto-generated method stub
        String buttonValue = masterEditCustomerForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();
        DBUtil dbUtil = new DBUtil();
        String coName = masterEditCustomerForm.getCoName();
        String acctType1 = masterEditCustomerForm.getAccountType1();
        String acctType2 = masterEditCustomerForm.getAccountType2();
        String acctType3 = masterEditCustomerForm.getAccountType3();
        String acctType4 = masterEditCustomerForm.getAccountType4();
        String acctType5 = masterEditCustomerForm.getAccountType5();
        String accountType = "";
        String address1 = masterEditCustomerForm.getAddress1();
        String portName = masterEditCustomerForm.getPortName();
        String masterAddress = masterEditCustomerForm.getMasterAddress();
        String city = masterEditCustomerForm.getCity();
        String phone = masterEditCustomerForm.getPhone();
        String contactName = masterEditCustomerForm.getContactName();
        String zip = masterEditCustomerForm.getZip();
        String fax = masterEditCustomerForm.getFax();
        String extension = masterEditCustomerForm.getExtension();
        String email1 = masterEditCustomerForm.getEmail1();
        String email2 = masterEditCustomerForm.getEmail2();
        Customer accountDetails = null;
        String phone1 = "";
        TradingPartner tradingpartner = new TradingPartner();

        String forwardName = "";
        customerBean customerbean = new customerBean();

        customerbean.setMasterAddress(masterAddress);
        session.setAttribute("customerbean", customerbean);
        forwardName = "mastereditcustomer";
        if (request.getParameter("ind") != null) {
            if (session.getAttribute("customerbean") != null) {
                session.removeAttribute("customerbean");
            }
            List addressList = new ArrayList();
            int ind = Integer.parseInt(request.getParameter("ind"));
            addressList = (List) session.getAttribute("masteraddressList");
            Customer cust = (Customer) addressList.get(ind);
            cust.setIndex(ind);
            session.setAttribute("adressCust", cust);
            String edit = "edit";
            request.setAttribute("edit", edit);
        } else {
            if (phone != null) {
                phone1 = dbUtil.stringtokenizer(phone);
            }

            String fax1 = "";
            if (fax != null) {
                fax1 = dbUtil.stringtokenizer(fax);
            }

            if (session.getAttribute("customer") != null) {
                accountDetails = (Customer) session.getAttribute("customer");
            } else {
                accountDetails = new Customer();
            }
            accountDetails.setCoName(coName);
            accountDetails.setAddress1(address1);

            accountDetails.setPhone(phone1);
            accountDetails.setContactName(contactName);
            accountDetails.setZip(zip);
            accountDetails.setFax(fax1);
            accountDetails.setExtension(extension);
            accountDetails.setEmail1(email1);
            accountDetails.setEmail2(email2);
            accountDetails.setCity2(city);
            tradingpartner.setType(accountType);


            accountDetails.setPhone(phone1);
            accountDetails.setFax(fax1);

            session.setAttribute("customer", accountDetails);


            List addressList = new ArrayList();
            if (buttonValue.equals("add")) {
                if (session.getAttribute("masteraddressList") != null) {
                    addressList = (List) session.getAttribute("masteraddressList");
                } else {
                    addressList = new ArrayList();
                }
                addressList.add(accountDetails);
                session.setAttribute("masteraddressList", addressList);



                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }

            }
            if (buttonValue != null && !buttonValue.equals("note")) {
                if (acctType1 != null && acctType1.equalsIgnoreCase("on")) {
                    accountType = "S,";
                }
                if (acctType2 != null && acctType2.equalsIgnoreCase("on")) {
                    accountType = accountType + "F,";
                }
                if (acctType3 != null && acctType3.equalsIgnoreCase("on")) {
                    accountType = accountType + "O,";
                }
                if (acctType4 != null && acctType4.equalsIgnoreCase("on")) {
                    accountType = accountType + "C,";
                }
                if (acctType5 != null && acctType5.equalsIgnoreCase("on")) {
                    accountType = accountType + "V,";
                }
                if (accountType.length() > 0) {
                    accountType = accountType.substring(0, accountType.length() - 1);
                }
                if (masterAddress != null && masterAddress.equals("on")) {
                    tradingpartner.setMaster("Y");
                }

                if (portName != null && portName != "") {
                    accountDetails.setPortName(portName);
                }

                forwardName = "mastereditcustomer";

            } else if (buttonValue != null && buttonValue.equals("note")) {
                ItemDAO itemDAO = new ItemDAO();
                Item item = new Item();
                String itemName = "";
                if (session.getAttribute("processinfoforcustomer") != null) {
                    String itemId = (String) session.getAttribute("processinfoforcustomer");
                    item = itemDAO.findById(Integer.parseInt(itemId));
                    itemName = item.getItemDesc();
                }

                forwardName = "note";
                AuditLogRecord auditLogRecord = new AuditLogRecordCustomer();
                NoteBean noteBean = new NoteBean();
                noteBean.setItemName(itemName);
                noteBean.setAuditLogRecord(auditLogRecord);
                noteBean.setButtonValue(buttonValue);
                //noteBean.setUser(user);
                noteBean.setPageName("cancelmastercustomer");
                String noteId = "";

                if (accountDetails.getAccountNo() != null && !accountDetails.getAccountNo().equals("")) {
                    noteId = accountDetails.getAccountNo().toString();
                    noteBean.setNoteId(noteId);
                    noteBean.setReferenceId(noteId);
                }
                List auditList = null;
                auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
                noteBean.setAuditList(auditList);
                noteBean.setVoidednote("");
                request.setAttribute("noteBean", noteBean);
                String documentName = "User";
                request.setAttribute("customernotes", "customernotes");
                forwardName = "note";
            }
        }
        return mapping.findForward(forwardName);

    }
}