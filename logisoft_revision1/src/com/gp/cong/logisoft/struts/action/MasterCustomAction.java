
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.CustomerAssociation;
import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.PaymentMethod;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Vendor;
import com.gp.cong.logisoft.hibernate.dao.CustomerAccountingDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerContactDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GeneralInformationDAO;
import com.gp.cong.logisoft.struts.form.MasterCustomForm;
import com.gp.cong.logisoft.domain.TradingPartner;

/** 
 * MyEclipse Struts
 * Creation date: 03-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterCustom" name="masterCustomForm" input="/jsps/Tradingpartnermaintainance/MasterCustom.jsp" scope="request" validate="true"
 */
public class MasterCustomAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterCustomForm masterCustomForm = (MasterCustomForm) form;// TODO Auto-generated method stub
        String buttonValue = masterCustomForm.getButtonValue();
        String name = masterCustomForm.getName();
        HttpSession session = ((HttpServletRequest) request).getSession();
        Set generalinfoset = new HashSet<GeneralInformation>();
        Set associateset = new HashSet<CustomerAssociation>();
        Set accountset = new HashSet<CustomerAccounting>();
        Set configset = new HashSet<CustomerContact>();
        Set tradeset = new HashSet<Customer>();
        Set vendorInfoset = new HashSet<Vendor>();
        Set paymentset = new HashSet<PaymentMethod>();
        CustomerDAO customerDAO = new CustomerDAO();
        GeneralInformation generalInformation = new GeneralInformation();
        CustomerAccounting accounting = new CustomerAccounting();
        CustomerContact customerCont = new CustomerContact();
        Vendor vendorInfo = new Vendor();
        PaymentMethod paymentobj = new PaymentMethod();
        GeneralInformationDAO generalInformationDAO = new GeneralInformationDAO();
        CustomerAccountingDAO customerAccountingDAO = new CustomerAccountingDAO();
        CustomerContactDAO customerContactDAO = new CustomerContactDAO();
        Customer customer = null;
        TradingPartner tradingpartner = new TradingPartner();
        String message = "";
        String accountNo = "";
        String customerid = "";
        String master = masterCustomForm.getMaster();
        if (buttonValue.equals("add")) {
            if (session.getAttribute("MasterTradingPartner") != null) {
                tradingpartner = (TradingPartner) session.getAttribute("MasterTradingPartner");
            } else {
                tradingpartner = new TradingPartner();
            }
            String a1 = "";
            int a2 = 0;
            int a4 = 0;
            String a5 = "";


            if (name != null && name.length() > 0) {
                for (int i = 0; i < name.length(); i++) {
                    if (name.charAt(i) == ' ') {
                        a2++;
                        if (a2 == 1 && a4 == 0) {
                            if (a1.length() >= 3) {
                                a1 = a1.substring(0, 3);
                            }
                        }
                    } else if (name.charAt(i) == '.') {
                        a4++;
                    } else {
                        if (a2 == 0) {
                            a1 = a1.concat(String.valueOf(name.charAt(i)));

                        } else if (a2 > 0) {
                            a5 = a5.concat(String.valueOf(name.charAt(i)));
                        }
                    }

                    if (a2 >= 2) {
                        break;
                    }
                }
                if (a5.length() > 3) {
                    a5 = a5.substring(0, 3);
                }

                a1 = a1.concat(a5);
                if (a2 == 0 && a1.length() >= 3 && a4 == 0) {
                    a1 = a1.substring(0, 3);
                }


                if (a1.length() == 1) {
                    a1 = a1 + "AAAAA";
                } else if (a1.length() == 2) {
                    a1 = a1 + "AAAA";
                } else if (a1.length() == 3) {
                    a1 = a1 + "AAA";
                } else if (a1.length() == 4) {
                    a1 = a1 + "AA";
                } else if (a1.length() == 5) {
                    a1 = a1 + "A";
                }
                if (a1.length() > 6) {
                    a1 = a1.substring(0, 6);
                }

                if (a1 != null) {
                    accountNo = a1 + "0000";
                }
            }

            TradingPartner cust = customerDAO.findById(accountNo);
            if (cust != null) {
                String amsg = "This Account Number is used by some other User";
                session.setAttribute("amsg", amsg);
                return mapping.findForward("customercode");//---------Returning to jsp----------
            }
            if (request.getAttribute("msg") == null) {
                tradingpartner.setAccountName(name);
                tradingpartner.setAccountno(accountNo);
                tradingpartner.setAccountPrefix("");
                tradingpartner.setType("master");

                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                CustomerTemp customer1 = null;

                if (session.getAttribute("generalinfo") != null) {

                    List generalInfo = (List) session.getAttribute("generalinfo");
                    if (generalInfo != null && generalInfo.size() > 0) {
                        for (int i = 0; i < generalInfo.size(); i++) {
                            generalInformation = (GeneralInformation) generalInfo.get(i);
                            generalinfoset.add(generalInformation);
                            tradingpartner.setAcctType(generalInformation.getAccounttype());

                        }
                    }

                    if (generalinfoset != null) {
                        tradingpartner.setGeneralInformation(generalinfoset);
                    }
                }
                if (session.getAttribute("masteraddressList") != null) {
                    List addressList = (List) session.getAttribute("masteraddressList");
                    List primelist = new ArrayList();
                    if (addressList != null && addressList.size() > 0) {

                        for (int i = 0; i < addressList.size(); i++) {
                            CustomerTemp tempCustomer = new CustomerTemp();
                            customer = (Customer) addressList.get(i);
                            if (customer.getPrimary() != null && customer.getPrimary().equals("on")) {
                                tempCustomer.setAccountName(tradingpartner.getAccountName());
                                tempCustomer.setAccountNo(tradingpartner.getAccountno());
                                tempCustomer.setMasterAccountNo(tradingpartner.getMaster());
                                tempCustomer.setType(tradingpartner.getType());
                                tempCustomer.setAccountType(generalInformation.getAccounttype());
                                tempCustomer.setAddress1(customer.getAddress1());
                                tempCustomer.setCity2(customer.getCity2());
                                tempCustomer.setState(customer.getState());
                                primelist.add(tempCustomer);
                            }
                            session.setAttribute("mastercustomerList", primelist);//------USED FOR DISPLAY IN SEARCHCUSTOMER for primary record------------
                            customer.setAcctname(tradingpartner.getAccountName());
                            customer.setAccounttype(generalInformation.getAccounttype());
                            customer.setType(tradingpartner.getType());
                            customer.setAccounttype(generalInformation.getAccounttype());
                            customer.setMasteracctno(tradingpartner.getMaster());
                            tradeset.add(customer);
                        }


                    }
                }

                List customerList = null;
                if (session.getAttribute("assocList") != null) {
                    customerList = (List) session.getAttribute("assocList");

                    if (customerList != null && customerList.size() > 0) {

                        for (int j = 0; j < customerList.size(); j++) {
                            CustomerAssociation customerAssociation = new CustomerAssociation();
                            customer1 = new CustomerTemp();
                            customer1 = (CustomerTemp) customerList.get(j);

                            customerAssociation.setAssocid(customer1.getAccountNo());
                            customerAssociation.setCustomerid(tradingpartner.getAccountno());

                            associateset.add(customerAssociation);
                        }
                    }
                    tradingpartner.setAssociateCustomer(associateset);
                }
                if (session.getAttribute("masteraccounting") != null) {
                    //CustomerAccountingDAO customer
                    accounting = (CustomerAccounting) session.getAttribute("masteraccounting");
                    accountset.add(accounting);
                    tradingpartner.setAccounting(accountset);
                }

                if (session.getAttribute("MasterVendorInfoList") != null)//-------FOR SAVING VENDOR INFORMATION------
                {

                    vendorInfo = (Vendor) session.getAttribute("MasterVendorInfoList");
                    vendorInfoset.add(vendorInfo);
                    tradingpartner.setVendorset(vendorInfoset);
                }
                if (session.getAttribute("paymentList") != null)//-------------------------SAVING PAYMENT INFORMATION -------------
                {
                    List payList = (List) session.getAttribute("paymentList");
                    if (payList != null && payList.size() > 0) {
                        for (int j = 0; j < payList.size(); j++) {
                            paymentobj = (PaymentMethod) payList.get(j);
                            paymentset.add(paymentobj);
                        }
                    }
                    if (paymentset != null) {
                        tradingpartner.setPaymentset(paymentset);
                    }
                }

                if (session.getAttribute("addConfig") != null) {
                    List custConfig = (List) session.getAttribute("addConfig");
                    if (custConfig != null && custConfig.size() > 0) {
                        for (int j = 0; j < custConfig.size(); j++) {
                            customerCont = (CustomerContact) custConfig.get(j);
                            configset.add(customerCont);
                        }
                    }
                    tradingpartner.setCustomerContact(configset);
                }

                List records = new ArrayList();//to retrive the record been added
                records.add(tradingpartner);

                //-----------SAVE METHOD------------------------------------------------------------

                customerDAO.save(tradingpartner, userId.getLoginName());
                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }
                if (session.getAttribute("masteraddressList") != null) {
                    session.removeAttribute("masteraddressList");
                }
                if (session.getAttribute("mastergeneralInformation") != null) {
                    session.removeAttribute("mastergeneralInformation");
                }

                if (session.getAttribute("MasterVendorInfoList") != null) {
                    session.removeAttribute("MasterVendorInfoList");
                }

                message = "Customer details saved successfully and Account No is" + accountNo + "";
                session.setAttribute("trade", "mastercustomer");
                session.setAttribute("MtradingPartner", tradingpartner);//session set for the added record
                session.setAttribute("msg", message);
            }


        } else if (buttonValue.equals("cancel")) {
            session.setAttribute("trade", "mastercustomer");
        }
        return mapping.findForward("searchcustomer");
    }
}

