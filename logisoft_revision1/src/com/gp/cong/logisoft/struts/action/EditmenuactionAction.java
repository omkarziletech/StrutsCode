/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordItem;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.form.EditmenuactionForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 11-03-2007
 * 
 * XDoclet definition:
 * @struts.action path="/editmenuaction" name="editmenuactionForm" input="/jsps/admin/editmenuaction.jsp" scope="request" validate="true"
 */
public class EditmenuactionAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = ((HttpServletRequest) request).getSession();
        EditmenuactionForm editmenuactionForm = (EditmenuactionForm) form;// TODO Auto-generated method stub
        String buttonValue = editmenuactionForm.getButtonValue();
        String forwardName = "";
        String itemname = editmenuactionForm.getItemname();
        String programname = editmenuactionForm.getProgramname();
        String predecessor = editmenuactionForm.getPredecessor();
        String message = "";
        DBUtil dbUtil = new DBUtil();
        Item item = (Item) session.getAttribute("item");
        String editView = editmenuactionForm.getEditView();
        if (buttonValue != null && buttonValue.equals("save")) {
            String programid = null;
            programid = (String) session.getAttribute("processinfoformenu");
            String recordid = item.getItemId().toString();
            dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");
            ItemDAO itemDAO = new ItemDAO();
            List itemduplicate = itemDAO.findItemNameforEdit(itemname, item.getItemDesc());
            if (itemduplicate != null && itemduplicate.size() > 0) {
                message = "Please enter different Item name, This Item name already exists";
                request.setAttribute("message", message);
                return mapping.findForward("editmenuaction");

            }
            int itemid = item.getItemId();
            item.setItemDesc(itemname);
            item.setProgramName(programname);
            User userid = null;
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            itemDAO.update(item, userid.getLoginName());
            message = "Item details updated successfully";
            request.setAttribute("message", message);
            forwardName = "searchmenuaction";
        }
        if (buttonValue != null && buttonValue.equals("cancelview")) {
            if (session.getAttribute("item") != null) {
                session.removeAttribute("item");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            forwardName = "searchmenuaction";
        }

        if (buttonValue != null && buttonValue.equals("cancel")) {
            //Move to Process_info_history
            String programid = null;
            programid = (String) session.getAttribute("processinfoformenu");
            String recordid = item.getItemId().toString();
            dbUtil.getProcessInfo(programid, recordid, "editcancelled", null);
            if (session.getAttribute("item") != null) {
                session.removeAttribute("item");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            forwardName = "searchmenuaction";
        }

        if (buttonValue != null && buttonValue.equals("delete")) {

            ItemDAO itemDAO = new ItemDAO();
            List itemList = (List) session.getAttribute("itemList");
            User userid = null;
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }

            String programid = null;
            programid = (String) session.getAttribute("processinfoformenu");
            String recordid = item.getItemId().toString();
            List item1 = itemDAO.findItemName(item);
            List item2 = itemDAO.findRoleAssociation(item);

            if (item1 != null && item1.size() > 0) {
                message = "Item cannot be deleted";
                request.setAttribute("message", message);
                return mapping.findForward("searchmenuaction");

            } else if (item2 != null && item2.size() > 0) {
                message = "Item cannot be deleted";
                request.setAttribute("message", message);
                return mapping.findForward("searchmenuaction");

            } else {
                for (int i = 0; i < itemList.size(); i++) {
                    Item itemtemp = (Item) itemList.get(i);
                    if (itemtemp.getItemId().equals(item.getItemId())) {
                        itemList.remove(i);
                        break;
                    }
                }
                //session.setAttribute("ItemList",itemList);
                User userid1 = null;
                if (session.getAttribute("loginuser") != null) {
                    userid1 = (User) session.getAttribute("loginuser");
                }
                itemDAO.delete(item, userid1.getLoginName());
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
                message = "Item details deleted successfully";
                request.setAttribute("message", message);
            }
            forwardName = "searchmenuaction";
        } else if (buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item1 = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoformenu") != null) {
                String itemId = (String) session.getAttribute("processinfoformenu");
                item1 = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item1.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordItem();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            //noteBean.setUser(user);
            noteBean.setPageName("cancelmenu");
            String noteId = "";
            if (item.getItemId() != null && !item.getItemId().equals("")) {
                noteId = item.getItemId().toString();
                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }
            noteBean.setVoidednote("");
            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            request.setAttribute("noteBean", noteBean);
        }
        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}