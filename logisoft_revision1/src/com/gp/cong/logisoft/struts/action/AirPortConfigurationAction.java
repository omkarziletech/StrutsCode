  /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.PortsBean;
import com.gp.cong.logisoft.domain.AirPortConfiguration;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.RefTerminal;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.AirPortConfigurationForm;

/** 
 * MyEclipse Struts
 * Creation date: 01-05-2008
 * 
 * XDoclet definition:
 * @struts.action path="/airPortConfiguration" name="airPortConfigurationForm" input="/jsps/datareference/airPortConfiguration.jsp" scope="request" validate="true"
 */
public class AirPortConfigurationAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AirPortConfigurationForm airPortConfigurationForm = (AirPortConfigurationForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String message = "";
        String termNo = "";
        String airportCode = "";
        String buttonValue = airPortConfigurationForm.getButtonValue();
        String airportCityName = airPortConfigurationForm.getAirPortCityName();
        if (airPortConfigurationForm.getTerminalNo() != null) {
            termNo = airPortConfigurationForm.getTerminalNo();
        }

        RefTerminalDAO refTreminalDAO = new RefTerminalDAO();
        RefTerminal terminalObj = new RefTerminal();
        GenericCode genObj = new GenericCode();
        GenericCode airCode = new GenericCode();
        GenericCodeDAO genericDAO = new GenericCodeDAO();
        RefTerminal termObj = null;
        UserDAO userDAO = new UserDAO();
        User userObj = null;
        String printOnAirFitSch = airPortConfigurationForm.getPrintOnAirFitSch();

        if (printOnAirFitSch == null) {
            printOnAirFitSch = "N";

        } else {
            printOnAirFitSch = "Y";

        }
        String lclAirBlgoCollect = airPortConfigurationForm.getLclAirBlgoCollect();
        if (lclAirBlgoCollect == null) {
            lclAirBlgoCollect = "N";
        } else {
            lclAirBlgoCollect = "Y";
        }
        PortsBean portBean = new PortsBean();
        portBean.setPrintAir(printOnAirFitSch);
        portBean.setServiceAir(airPortConfigurationForm.getServiceAir());
        portBean.setLclairbl(lclAirBlgoCollect);
        AirPortConfiguration airPortObj = new AirPortConfiguration();
        if (session.getAttribute("airPortObj") != null) {
            airPortObj = (AirPortConfiguration) session.getAttribute("airPortObj");
        }
        String flight = airPortConfigurationForm.getFlightScheduleRegion();

        if (flight != null && !flight.equals("0")) {
            genObj = genericDAO.findById(Integer.parseInt(flight));
            airPortObj.setFlightScheduleRegion(genObj);
        }
        if (airPortConfigurationForm.getAirPortCode() != null && !airPortConfigurationForm.getAirPortCode().equals("0")) {
            airCode = genericDAO.findById(Integer.parseInt(airPortConfigurationForm.getAirPortCode()));
            airPortObj.setAirPortId(airCode);
        }
        airPortObj.setPrintOnAirFitSch(printOnAirFitSch);
        airPortObj.setServiceAir(airPortConfigurationForm.getServiceAir());
        airPortObj.setLclAirBlgoCollect(lclAirBlgoCollect);
        airPortObj.setAirSplRemarksEnglish(airPortConfigurationForm.getAirPortSplRemarksinEnglish());
        airPortObj.setAirSplRemarksSpanish(airPortConfigurationForm.getAirPortSplRemarksinSpanish());
        airPortObj.setLineManager(airPortConfigurationForm.getLineManager());

        request.setAttribute("portBean", portBean);
        session.setAttribute("airPortObj", airPortObj);

        return mapping.findForward("airportConfig");
    }
}
