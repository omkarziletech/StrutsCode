/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.bc.admin.AdminConstants;
import com.gp.cong.logisoft.bc.admin.PrinterBC;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.PrintConfigDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.PrinterForm;
import java.awt.print.PrinterJob;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.print.DocFlavor;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.attribute.AttributeSet;
import javax.print.attribute.HashAttributeSet;
import javax.print.attribute.standard.Media;
import javax.print.attribute.standard.MediaTray;
import javax.print.attribute.standard.PrinterName;
import org.apache.struts.util.LabelValueBean;

;

/**
 * MyEclipse Struts Creation date: 11-16-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/printer" name="printerForm"
 *                input="/jsps/admin/Printer.jsp" scope="request"
 *                validate="true"
 */
public class PrinterAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = ((HttpServletRequest) request).getSession();
        PrinterForm printerForm = (PrinterForm) form;// TODO Auto-generated
        String buttonValue = printerForm.getButtonValue();
        PrinterBC printerBC = new PrinterBC();
        User user = null;
        user = (User) session.getAttribute("user");
        if ("save".equals(buttonValue)) {
            request.setAttribute(AdminConstants.PRINTER, printerBC.savePrinterInformation(printerForm, user));
            user = new UserDAO().findById(user.getUserId());
            printerForm.setPrinterName("0");
            printerForm.setPrinterTray("0");
        } else if ("delete".equals(buttonValue)) {
            request.setAttribute(AdminConstants.PRINTER, printerBC.deletPrinterInformation(printerForm, user));
            user = new UserDAO().findById(user.getUserId());
        }
        request.setAttribute("trayList", getPrinterTrayList(printerForm));
        request.setAttribute(AdminConstants.PRINTER, user.getAssocitedPrinter());
        session.removeAttribute("user");
        session.setAttribute("user", user);
        request.setAttribute("documentList", getDocuments(user.getUserId()));
        request.setAttribute("printerList", getPrinters());
        request.setAttribute("printerName", "0");
        request.setAttribute("documentId", "0");
        return mapping.findForward("addprinter");
    }

    private List<LabelValueBean> getPrinters() {
        PrintService[] printServices = PrinterJob.lookupPrintServices();
        List<LabelValueBean> printersList = new ArrayList<LabelValueBean>();
        printersList.add(new LabelValueBean("Select One", "0"));
        for (PrintService printService : printServices) {
            printersList.add(new LabelValueBean(printService.getName(), printService.getName()));
        }
        return printersList;
    }

    private List<LabelValueBean> getDocuments(Integer userId) {
        return new PrintConfigDAO().findAllPrintConfigForUser(userId);
    }

    private List<LabelValueBean> getPrinterTrayList(PrinterForm printerForm) {
        List<LabelValueBean> printersList = new ArrayList<LabelValueBean>();
        if (!"0".equalsIgnoreCase(printerForm.getPrinterName())) {
            AttributeSet aset = new HashAttributeSet();
            aset.add(new PrinterName(printerForm.getPrinterName(), null));
            PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, aset);
            DocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PAGEABLE;
            Map<Integer, Media> trayMap = new HashMap<Integer, Media>();
            for (PrintService printer : printServices) {
                Object mediaTrayObj = printer.getSupportedAttributeValues(Media.class, flavor, null);
                if (mediaTrayObj != null && mediaTrayObj.getClass().isArray()) {
                    for (Media media : (Media[]) mediaTrayObj) {
                        // we collect the MediaTray av.ailable
                        if (media instanceof MediaTray) {
                            if (media != null) {
                                trayMap.put(media.getValue(), media);
                            }
                        }
                    }
                }
            }
            for (Map.Entry<Integer, Media> entry : trayMap.entrySet()) {
                String value = entry.getKey() + ":" + entry.getValue().toString();
                printersList.add(new LabelValueBean(value, value));
            }
        } else {
            printersList.add(new LabelValueBean("Select One", ""));
        }
        return printersList;
    }
}
