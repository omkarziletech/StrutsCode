/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordAccounting;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.MasterEditAccountingForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 04-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterEditAccounting" name="masterEditAccountingForm" input="/jsps/Tradingpartnermaintainance/masterEditAccounting.jsp" scope="request" validate="true"
 */
public class MasterEditAccountingAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterEditAccountingForm masterEditAccountingForm = (MasterEditAccountingForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = masterEditAccountingForm.getButtonValue();
        String contact = masterEditAccountingForm.getContact();
        String arPhone = masterEditAccountingForm.getArPhone();
        String arFax = masterEditAccountingForm.getArFax();
        String acctReceive = masterEditAccountingForm.getAcctReceive();
        String statement = masterEditAccountingForm.getStatements();
        String creditLimit = masterEditAccountingForm.getCreditLimit();
        DBUtil dbUtil = new DBUtil();
        String creditRate = masterEditAccountingForm.getCreditRate();
        String forwardName = "";
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        UserDAO userDAO = new UserDAO();
        GenericCode creditRt = null;
        String holdList = masterEditAccountingForm.getHoldList();
        String suspendCredit = masterEditAccountingForm.getSuspendCredit();
        String legal = masterEditAccountingForm.getLegal();
        String extendCredit = masterEditAccountingForm.getExtendCredit();
        String insure = masterEditAccountingForm.getInsure();
        String email = masterEditAccountingForm.getEmail();
        String company = masterEditAccountingForm.getCompanyName();
        String attention = masterEditAccountingForm.getAttention();
        String address1 = masterEditAccountingForm.getAddress1();
        String address2 = masterEditAccountingForm.getAddress2();
        String arcode = masterEditAccountingForm.getArCode();
        String zipCode = masterEditAccountingForm.getZipCode();
        String ffCompany = masterEditAccountingForm.getFfcompany();
        String ffAttention = masterEditAccountingForm.getFfattention();
        String ffaddress1 = masterEditAccountingForm.getFfaddress1();
        String ffaddress2 = masterEditAccountingForm.getFfaddress2();
        String creditStatus = masterEditAccountingForm.getCreditStatus();
        String city = masterEditAccountingForm.getCity();
        String companyMaster = masterEditAccountingForm.getCompanyMaster();
        String addressMaster = masterEditAccountingForm.getAddressMaster();
        String ffCity = masterEditAccountingForm.getFfcity();
        String holdComment = masterEditAccountingForm.getHoldComment();
        String insuranceComment = masterEditAccountingForm.getInsuranceComment();
        String ffZip = masterEditAccountingForm.getFfzipCode();

        String agent = masterEditAccountingForm.getIncludeagent();
        String cbalance = masterEditAccountingForm.getCreditbalance();
        String cinvoice = masterEditAccountingForm.getCreditinvoice();
        String schedule_Stmt = masterEditAccountingForm.getSchedulestmt();

        CustomerAccounting accounting = null;
        String phone = "";

        if (arPhone != null) {
            phone = dbUtil.stringtokenizer(arPhone);
        }

        String fax = "";
        if (arFax != null) {
            fax = dbUtil.stringtokenizer(arFax);
        }

        customerBean customerbean = new customerBean();
        forwardName = "editaccount";
        if (session.getAttribute("masteraccounting") != null) {
            accounting = (CustomerAccounting) session.getAttribute("masteraccounting");
        } else {
            accounting = new CustomerAccounting();
        }
        if (buttonValue != null && !buttonValue.equals("note")) {
            customerbean.setStatements(statement);
            customerbean.setHoldList(holdList);
            customerbean.setSuspendCredit(suspendCredit);
            customerbean.setLegal(legal);
            customerbean.setExtendCredit(extendCredit);
            customerbean.setInsure(insure);
            customerbean.setAddressMaster(addressMaster);
            customerbean.setCompanyMaster(companyMaster);
            customerbean.setIncludeagent(agent);
            customerbean.setCreditbalance(cbalance);
            customerbean.setCreditinvoice(cinvoice);
            if (creditRate != null && creditRate != "0") {
                creditRt = genericCodeDAO.findById(Integer.parseInt(creditRate));
                accounting.setCreditRate(creditRt);
            }
            session.setAttribute("customerbean", customerbean);
            //accounting.setContact(contact);
            //accounting.setArPhone(arPhone);
            //accounting.setArFax(arFax);
            //accounting.setAcctRecEmail(email);
            GenericCode stmt = new GenericCode();
            if (statement != null && statement != "0") {
                stmt = genericCodeDAO.findById(Integer.parseInt(statement));
                accounting.setStatements(stmt);
            }
            User arContact = new User();
            if (arcode != null && arcode != "0") {
                arContact = userDAO.findById(Integer.parseInt(arcode));
                accounting.setArcode(arContact);
            }
            if (creditLimit != null && creditLimit != "") {
                accounting.setCreditLimit(Double.parseDouble(creditLimit));
            }
            if (addressMaster != null && addressMaster.equals("on")) {
                accounting.setAddressMaster("Y");
            }
            if (companyMaster != null && companyMaster.equals("on")) {
                accounting.setCompanyMaster("Y");
            }
            if (extendCredit != null && extendCredit.equalsIgnoreCase("on")) {
                accounting.setExtendCredit("Y");
            } else {
                accounting.setExtendCredit("N");
            }
            if (holdList != null && holdList.equalsIgnoreCase("on")) {
                accounting.setHoldList("Y");
            } else {
                accounting.setHoldList("N");
            }

            if (suspendCredit != null && suspendCredit.equalsIgnoreCase("on")) {
                accounting.setSuspendCredit("Y");
            } else if (suspendCredit != null && suspendCredit.equalsIgnoreCase("off")) {
                accounting.setSuspendCredit("N");
            }

            if (legal != null && legal.equalsIgnoreCase("on")) {
                accounting.setLegal("Y");
            } else if (legal != null && legal.equalsIgnoreCase("off")) {
                accounting.setLegal("N");
            }
            if (agent != null && agent.equalsIgnoreCase("on")) {
                accounting.setIncludeagent("Y");
            } else if (agent != null && agent.equalsIgnoreCase("off")) {
                accounting.setIncludeagent("N");
            }
            if (cbalance != null && cbalance.equalsIgnoreCase("on")) {
                accounting.setCreditbalance("Y");
            } else if (cbalance != null && cbalance.equalsIgnoreCase("off")) {
                accounting.setCreditbalance("N");
            }
            if (cinvoice != null && cinvoice.equalsIgnoreCase("on")) {
                accounting.setCreditinvoice("Y");
            } else if (cinvoice != null && cinvoice.equalsIgnoreCase("off")) {
                accounting.setCreditinvoice("N");
            }

            if (creditStatus != null && !creditStatus.equals("0")) {
                GenericCode gen = genericCodeDAO.findById(Integer.parseInt(creditStatus));
                accounting.setCreditStatus(gen);
            }
            accounting.setComment(acctReceive);
            accounting.setZip(zipCode);
            accounting.setPayZip(ffZip);
            accounting.setSchedulestmt(schedule_Stmt);
            session.setAttribute("masteraccounting", accounting);
            forwardName = "editaccount";
        } else if (buttonValue != null && buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoformastercustomer") != null) {
                String itemId = (String) session.getAttribute("processinfoformastercustomer");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordAccounting();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            //noteBean.setUser(user);
            noteBean.setPageName("cancelmasteraccounting");
            String noteId = "";
            if (accounting != null && accounting.getId() != null && !accounting.getId().equals("")) {
                noteId = accounting.getId().toString();
                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }

            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);

            request.setAttribute("customernotes", "customernotes");
            forwardName = "note";

        }

        if (buttonValue != null && buttonValue.equals("editchecked")) {
            CustomerDAO customerDAO = new CustomerDAO();
            List id = customerDAO.findId();
            Iterator it = id.iterator();
            List list = new ArrayList();
            while (it.hasNext()) {

                Customer customer = customerDAO.findById2(new Integer(it.next().toString()));

                session.setAttribute("addressMaster", customer);
                list.add(customer);

            }
            session.setAttribute("masteraddressList", list);
            request.setAttribute("openwindow", "openwindow");//----FOR ADDRESS POPUP PAGE-----
            //}
            request.setAttribute("close", "close");//----FOR CONTACTPOPUP PAGE------
        }
        return mapping.findForward(forwardName);

    }
}