/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.struts.form.AddCustomerForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 08-27-2008
 * 
 * XDoclet definition:
 * @struts.action path="/addCustomer" name="addCustomerForm" input="/jsps/Tradingpartnermaintainance/addCustomer.jsp" scope="request" validate="true"
 */
public class AddCustomerAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddCustomerForm addCustomerForm = (AddCustomerForm) form;// TODO Auto-generated method stub
        String buttonValue = addCustomerForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();

        String coName = addCustomerForm.getCoName();

        String address1 = addCustomerForm.getAddress1();
        String portName = addCustomerForm.getPortName();
        //String schNum=customerForm.getSchnum();

        String portid = addCustomerForm.getPortid();

        String phone = addCustomerForm.getPhone();
        String contactName = addCustomerForm.getContactName();
        String zip = addCustomerForm.getZip();

        String extension = addCustomerForm.getExtension();

        String fax = addCustomerForm.getFax();
        String email1 = addCustomerForm.getEmail1();
        String email2 = addCustomerForm.getEmail2();
        String schNum = addCustomerForm.getSchNum();
        String primary = addCustomerForm.getPrimary();
//		String accountMaster=addCustomerForm.getMasterAddress();
        DBUtil dbUtil = new DBUtil();
        customerBean customerbean = new customerBean();
        String phone1 = dbUtil.stringtokenizer(phone);
        String fax1 = dbUtil.stringtokenizer(fax);
        String city = addCustomerForm.getCity();
        Customer accountdetails = null;
        UnLocationDAO unlocationDAO = new UnLocationDAO();
        GenericCode gen = null;
        UnLocation uno = null;

        if (buttonValue != null && buttonValue.equals("citypopup"))//-----DOJO CODE FOR CITY------
        {
            if (session.getAttribute("customer") != null) {
                accountdetails = (Customer) session.getAttribute("customer");
            } else {
                accountdetails = new Customer();
            }
            if (city != null && !city.equals(" ") && !city.equals("%")) {

                List clist = unlocationDAO.findCity(city);
                if (clist != null && clist.size() > 0) {

                    uno = (UnLocation) clist.get(0);
                    accountdetails.setCuntry(uno.getCountryId());
                    if (uno.getStateId() != null) {
                        accountdetails.setState(uno.getStateId().getCode());
                    }

                    session.setAttribute("customer", accountdetails);

                }
            }

        }


        if (session.getAttribute("customer") != null) {
            accountdetails = (Customer) session.getAttribute("customer");
        } else {
            accountdetails = new Customer();
        }

        accountdetails.setCoName(coName);
        accountdetails.setAddress1(address1);
        accountdetails.setPhone(phone1);
        accountdetails.setContactName(contactName);
        accountdetails.setZip(zip);
        accountdetails.setFax(fax1);

        accountdetails.setExtension(extension);

        accountdetails.setEmail1(email1);
        accountdetails.setEmail2(email2);
        accountdetails.setPhone(phone1);
        accountdetails.setFax(fax1);
        accountdetails.setCity2(addCustomerForm.getCity());

        if (primary != null) {
            accountdetails.setPrimary("on");
        } else {
            accountdetails.setPrimary("off");
        }
        session.setAttribute("customer", accountdetails);

        customerbean.setPrimary(primary);
        session.setAttribute("customerbean", customerbean);

        if (session.getAttribute("addCustomer") != null && session.getAttribute("addCustomer").equals("add") && buttonValue.equals("add")) {


            List addressList = new ArrayList();
            int index = 0;
            if (buttonValue.equals("add")) {
                if (session.getAttribute("addressList") != null) {
                    addressList = (List) session.getAttribute("addressList");
                    if (addressList.size() > 0 && accountdetails.getPrimary().equalsIgnoreCase("on")) {
                        for (int i = 0; i < addressList.size(); i++) {
                            Customer cust = (Customer) addressList.get(i);
                            cust.setPrimary("off");
                            if (cust.getIndex() != null) {
                                if (cust.getIndex() > index) {
                                    index = cust.getIndex();
                                }
                            }
                        }
                    }
                    index++;
                } else {
                    addressList = new ArrayList();
                    accountdetails.setPrimary("on");
                    index++;
                }
                accountdetails.setIndex(index);
                //accountdetails.setPrimary("on");
                addressList.add(accountdetails);
                session.setAttribute("addressList", addressList);

                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }

            }



            session.removeAttribute("addCustomer");
            request.setAttribute("add", "add");

        } else if (session.getAttribute("addCustomer") != null && session.getAttribute("addCustomer").equals("addMaster") && buttonValue.equals("add")) {

            List addressList = new ArrayList();
            int index = 0;
            if (buttonValue.equals("add")) {
                if (session.getAttribute("masteraddressList") != null) {
                    addressList = (List) session.getAttribute("masteraddressList");
                    if (addressList.size() > 0 && primary != null && primary.equalsIgnoreCase("on")) {
                        for (int i = 0; i < addressList.size(); i++) {
                            Customer cust = (Customer) addressList.get(i);
                            cust.setPrimary("off");
                            if (cust.getIndex() != null) {
                                if (cust.getIndex() > index) {
                                    index = cust.getIndex();
                                }
                            }
                        }
                    }
                    index++;
                } else {
                    accountdetails.setPrimary("on");
                    addressList = new ArrayList();
                    index++;
                }
                accountdetails.setIndex(index);
                addressList.add(accountdetails);
                session.setAttribute("masteraddressList", addressList);


                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }


            }

            session.removeAttribute("addCustomer");
            request.setAttribute("addMaster", "addMaster");

        }


        return mapping.findForward("addCustomer");
    }
}