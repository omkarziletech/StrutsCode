/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.form.CustomerCodeForm;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.domain.TradingPartner;

/**
 * MyEclipse Struts Creation date: 02-22-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/customerCode" name="customerCodeForm"
 *                input="/jsps/Tradingpartnermaintainance/CustomerCode.jsp"
 *                scope="request" validate="true"
 */
public class CustomerCodeAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        CustomerCodeForm customerCodeForm = (CustomerCodeForm) form;// TODO
        // Auto-generated
        // method
        // stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String name = customerCodeForm.getName();
        String buttonValue = customerCodeForm.getButtonValue();
        CustomerDAO customerDAO = new CustomerDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        GenericCode account = new GenericCode();
        customerBean customerBean = new customerBean();
        DBUtil dbUtil = new DBUtil();
        TradingPartner tradingpartner = new TradingPartner();
        String accountNo = "";
        if (buttonValue.equals("search")) {
            List accountno = customerDAO.findAccountNumber(name);
            if (accountno != null) {
                if (accountno.size() > 0) {
                    request.setAttribute("account", "sameaccount");
                } else {
                    request.setAttribute("account", "account");
                }
            }
            Customer customer = null;
            tradingpartner.setAccountName(name);
            String stringTokenone = "";
            int stringTokenTwo = 0;
            int stringTokenThree = 0;
            String stringTokenFour = "";
            if (name != null && name.length() > 0) {
                for (int i = 0; i < name.length(); i++) {
                    if (name.charAt(i) == ' ') {
                        stringTokenTwo++;
                        if (stringTokenTwo == 1 && stringTokenThree == 0) {
                            if (stringTokenone.length() >= 3) {
                                stringTokenone = stringTokenone.substring(0, 3);
                            }
                        }
                    } else if (name.charAt(i) == '.') {
                        stringTokenThree++;
                    } else {
                        if (stringTokenTwo == 0) {
                            stringTokenone = stringTokenone.concat(String.valueOf(name.charAt(i)));
                        } else if (stringTokenTwo > 0) {
                            stringTokenFour = stringTokenFour.concat(String.valueOf(name.charAt(i)));
                        }
                    }
                    if (stringTokenTwo >= 2) {
                        break;
                    }
                }
                if (stringTokenFour.length() > 3) {
                    stringTokenFour = stringTokenFour.substring(0, 3);
                }
                stringTokenone = stringTokenone.concat(stringTokenFour);
                if (stringTokenTwo == 0 && stringTokenone.length() >= 3 && stringTokenThree == 0) {
                    stringTokenone = stringTokenone.substring(0, 3);
                }
            }
            if (stringTokenone.length() == 1) {
                stringTokenone = stringTokenone + "AAAAA";
            } else if (stringTokenone.length() == 2) {
                stringTokenone = stringTokenone + "AAAA";
            } else if (stringTokenone.length() == 3) {
                stringTokenone = stringTokenone + "AAA";
            } else if (stringTokenone.length() == 4) {
                stringTokenone = stringTokenone + "AA";
            } else if (stringTokenone.length() == 5) {
                stringTokenone = stringTokenone + "A";
            }
            if (stringTokenone.length() > 6) {
                stringTokenone = stringTokenone.substring(0, 6);
            }
            if (stringTokenone != null) {
                String acctno = "";
                List customerList = customerDAO.findAccountPrefix(stringTokenone);
                if (customerList != null && customerList.size() > 0) {
                    CustomerTemp c1 = (CustomerTemp) customerList.get(0);
                    String acctNo = c1.getAccountNo();
                    for (int i = acctNo.length() - 4; i < acctNo.length(); i++) {
                        boolean check = Character.isDigit(acctNo.charAt(i));
                        if (check) {
                            acctno = acctno + acctNo.charAt(i);
                        }
                    }
                    Integer a3 = Integer.parseInt(acctno);
                    a3 = a3 + 1;
                    if (a3.toString().length() == 1) {
                        accountNo = "000" + a3;
                    } else if (a3.toString().length() == 2) {
                        accountNo = "00" + a3;
                    } else if (a3.toString().length() == 3) {
                        accountNo = "0" + a3;
                    }
                    accountNo = stringTokenone + accountNo;
                } else {
                    accountNo = stringTokenone + "0001";
                }
            }
            String accountPrefix = accountNo;
            tradingpartner.setAccountPrefix(accountPrefix);

            session.setAttribute("TradingPartner", tradingpartner);
            if (session.getAttribute("generalInformation") != null) {
                session.removeAttribute("generalInformation");
            }
            if (session.getAttribute("addConfig") != null) {
                session.removeAttribute("addConfig");
            }
            if (session.getAttribute("customerList") != null) {
                session.removeAttribute("customerList");
            }
            if (session.getAttribute("cust") != null) {
                session.removeAttribute("cust");
            }

            if (session.getAttribute("assocList") != null) {
                session.removeAttribute("assocList");
            }

            if (session.getAttribute("masterassoc") != null) {
                session.removeAttribute("masterassoc");
            }
            if (session.getAttribute("accounting") != null) {
                session.removeAttribute("accounting");
            }
            if (session.getAttribute("customerbean") != null) {
                session.removeAttribute("customerbean");
            }
            if (session.getAttribute("customerBean") != null) {
                session.removeAttribute("customerBean");
            }
            if (session.getAttribute("addressList") != null) {
                session.removeAttribute("addressList");
            }

            if (session.getAttribute("accounting") != null) {
                session.removeAttribute("accounting");
            }
            if (session.getAttribute("masteraddressList") != null) {
                session.removeAttribute("masteraddressList");
            }
            if (session.getAttribute("mastergeneralInformation") != null) {
                session.removeAttribute("mastergeneralInformation");
            }
            if (session.getAttribute("masteraccounting") != null) {
                session.removeAttribute("masteraccounting");
            }
            if (session.getAttribute("customer") != null) {
                session.removeAttribute("customer");
            }
            if (session.getAttribute("custConfig") != null) {
                session.removeAttribute("custConfig");
            }
            if (session.getAttribute("paymentList") != null) {
                session.removeAttribute("paymentList");
            }
            if (session.getAttribute("CPlist") != null) {
                session.removeAttribute("CPlist");
            }
            if (session.getAttribute("VendorInfoList") != null) {
                session.removeAttribute("VendorInfoList");
            }
            if (session.getAttribute("addressList") != null) {
                session.removeAttribute("addressList");
            }
            if (session.getAttribute("masteraddressList") != null) {
                session.removeAttribute("masteraddressList");
            }
            GeneralInformation generalInformation = new GeneralInformation();
            Date date = new Date(System.currentTimeMillis());

            generalInformation.setLdPwdActivated(date);
            session.setAttribute("generalInformation", generalInformation);
        }
        return mapping.findForward("customercode");
    }
}