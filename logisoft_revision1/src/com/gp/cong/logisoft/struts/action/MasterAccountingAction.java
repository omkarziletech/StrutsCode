/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.MasterAccountingForm;
import com.gp.cong.logisoft.domain.GeneralInformation;

/** 
 * MyEclipse Struts
 * Creation date: 03-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterAccounting" name="masterAccountingForm" input="/jsps/Tradingpartnermaintainance/MasterAccounting.jsp" scope="request" validate="true"
 */
public class MasterAccountingAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterAccountingForm masterAccountingForm = (MasterAccountingForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();

        String buttonValue = masterAccountingForm.getButtonValue();
        String creditRate = masterAccountingForm.getCreditRate();
        String creditStatus = masterAccountingForm.getCreditStatus();
        String acctReceive = masterAccountingForm.getAcctReceive();
        String statement = masterAccountingForm.getStatements();
        String creditLimit = masterAccountingForm.getCreditLimit();
        String holdList = masterAccountingForm.getHoldList();
        String suspendCredit = masterAccountingForm.getSuspendCredit();
        String legal = masterAccountingForm.getLegal();
        String extendCredit = masterAccountingForm.getExtendCredit();
        String insure = masterAccountingForm.getInsure();
        String arCode = masterAccountingForm.getArCode();
        String zipCode = masterAccountingForm.getZipCode();
        String addressMaster = masterAccountingForm.getAddressMaster();
        String companyMaster = masterAccountingForm.getCompanyMaster();
        String ffZip = masterAccountingForm.getFfzipCode();
        GeneralInformation generalInformation = new GeneralInformation();
        String insuranceComment = masterAccountingForm.getInsuranceComment();
        String agent = masterAccountingForm.getIncludeagent();
        String cbalance = masterAccountingForm.getCreditbalance();
        String cinvoice = masterAccountingForm.getCreditinvoice();
        String schedule_Stmt = masterAccountingForm.getSchedulestmt();

        CustomerAccounting accounting = null;
        customerBean customerbean = new customerBean();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        UserDAO userDAO = new UserDAO();
        GenericCode creditRt = null;
        GenericCode creditSt = null;
        if (!buttonValue.equals("cancel")) {
            if (session.getAttribute("masteraccounting") != null) {
                accounting = (CustomerAccounting) session.getAttribute("masteraccounting");
            } else {
                accounting = new CustomerAccounting();
            }
            customerbean.setStatements(statement);
            customerbean.setHoldList(holdList);
            customerbean.setSuspendCredit(suspendCredit);
            customerbean.setLegal(legal);
            customerbean.setExtendCredit(extendCredit);
            customerbean.setInsure(insure);
            customerbean.setCompanyMaster(companyMaster);
            customerbean.setAddressMaster(addressMaster);
            customerbean.setIncludeagent(agent);
            customerbean.setCreditbalance(cbalance);
            customerbean.setCreditinvoice(cinvoice);

            session.setAttribute("customerbean", customerbean);//--------CUSTOMER BEAN SESSION-----------

            generalInformation.setInsuranceComment(insuranceComment);
            if (addressMaster != null && addressMaster.equals("on")) {
                accounting.setAddressMaster("Y");
            }
            if (companyMaster != null && companyMaster.equals("on")) {
                accounting.setCompanyMaster("Y");
            }
            GenericCode stmt = new GenericCode();
            if (statement != null && statement != "0") {
                stmt = genericCodeDAO.findById(Integer.parseInt(statement));
                accounting.setStatements(stmt);
            }
            User arContact = new User();
            if (arCode != null && arCode != "0") {
                arContact = userDAO.findById(Integer.parseInt(arCode));
                accounting.setArcode(arContact);
            }
            if (creditLimit != null && creditLimit != "") {
                accounting.setCreditLimit(Double.parseDouble(creditLimit));
            }
            if (creditRate != null && creditRate != "0") {
                creditRt = genericCodeDAO.findById(Integer.parseInt(creditRate));
                accounting.setCreditRate(creditRt);
            }
            if (creditStatus != null && creditStatus != "0") {
                creditSt = genericCodeDAO.findById(Integer.parseInt(creditStatus));
                accounting.setCreditStatus(creditSt);
            }
            if (extendCredit != null && extendCredit.equalsIgnoreCase("on")) {
                accounting.setExtendCredit("Y");
            } else {
                accounting.setExtendCredit("N");
            }
            if (holdList != null && holdList.equalsIgnoreCase("on")) {
                accounting.setHoldList("Y");
            } else {
                accounting.setHoldList("N");
            }

            if (suspendCredit != null && suspendCredit.equalsIgnoreCase("on")) {
                accounting.setSuspendCredit("Y");
            } else {
                accounting.setSuspendCredit("N");
            }

            if (legal != null && legal.equalsIgnoreCase("on")) {
                accounting.setLegal("Y");
            } else {
                accounting.setLegal("N");
            }
            if (agent != null && agent.equalsIgnoreCase("on")) {
                accounting.setIncludeagent("Y");
            } else {
                accounting.setIncludeagent("N");
            }

            if (cbalance != null && cbalance.equalsIgnoreCase("on")) {
                accounting.setCreditbalance("Y");
            } else {
                accounting.setCreditbalance("N");
            }
            if (cinvoice != null && cinvoice.equalsIgnoreCase("on")) {
                accounting.setCreditinvoice("Y");
            } else {
                accounting.setCreditinvoice("N");
            }

            accounting.setComment(acctReceive);
            accounting.setZip(zipCode);
            accounting.setPayZip(ffZip);
            accounting.setSchedulestmt(schedule_Stmt);

            session.setAttribute("masteraccounting", accounting);

        }
        if (buttonValue != null && buttonValue.equals("checked")) {
            CustomerDAO customerDAO = new CustomerDAO();
            List id = customerDAO.findId();

            Iterator it = id.iterator();
            List list = new ArrayList();
            while (it.hasNext()) {


                Customer customer = customerDAO.findById2(new Integer(it.next().toString()));

                session.setAttribute("addressMaster", customer);
                list.add(customer);

            }
            session.setAttribute("masteraddressList", list);
            request.setAttribute("openwindow", "openwindow");//----FOR ADDRESS POPUP PAGE-----


            request.setAttribute("close", "close");//----FOR CONTACTPOPUP PAGE------
        }


        return mapping.findForward("addaccount");
    }
}