/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.DataExchangeUsecases;
import com.gp.cong.logisoft.domain.Usecases;
import com.gp.cong.logisoft.hibernate.dao.DataExchangeDAO;
import com.gp.cong.logisoft.hibernate.dao.UsecasesDAO;
import com.gp.cong.logisoft.struts.form.ConfigurationForm;

/** 
 * MyEclipse Struts
 * Creation date: 10-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/newUser" name="newUserForm" input="/jsps/admin/NewUser.jsp" scope="request" validate="true"
 */
public class ConfigurationAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = ((HttpServletRequest) request).getSession();
        ConfigurationForm configurationForm = (ConfigurationForm) form;// TODO Auto-generated method stub
        String usecase = configurationForm.getUsecase();
        String flowForm = configurationForm.getTestFlowFrom();
        String buttonValue = configurationForm.getButtonValue();
        request.setAttribute("buttonValue", buttonValue);
        if (buttonValue.equals("usecaseselected")) {
            request.setAttribute("usecase", usecase);
        } else if (buttonValue.equals("save")) {
            if (usecase != null && !usecase.equals("")) {
                UsecasesDAO usecaseDAO = new UsecasesDAO();
                Usecases usecases = usecaseDAO.findById(Integer.parseInt(usecase));
                DataExchangeUsecases dataExchangeUsecases = new DataExchangeUsecases();
                dataExchangeUsecases.setFlowFrom(flowForm);
                dataExchangeUsecases.setUsecaseId(usecases);
                DataExchangeDAO dataExchangeDAO = new DataExchangeDAO();
                dataExchangeDAO.save(dataExchangeUsecases);
            }
        } else if (buttonValue.equals("delete")) {
            int index = configurationForm.getIndex();
            DataExchangeDAO dataExchangeDAO = new DataExchangeDAO();
            DataExchangeUsecases dataExc = dataExchangeDAO.findById(index);
            dataExchangeDAO.delete(dataExc);

        }
        return mapping.findForward("configuration");
    }
}