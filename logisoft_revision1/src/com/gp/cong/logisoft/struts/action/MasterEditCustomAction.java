/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.Customer;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.CustomerAssociation;
import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.PaymentMethod;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Vendor;
import com.gp.cong.logisoft.hibernate.dao.CustomerAccountingDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerContactDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.GeneralInformationDAO;
import com.gp.cong.logisoft.struts.form.MasterEditCustomForm;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cong.logisoft.domain.TradingPartner;

/** 
 * MyEclipse Struts
 * Creation date: 04-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterEditCustom" name="masterEditCustomForm" input="/jsps/Tradingpartnermaintainance/masterEditCustom.jsp" scope="request" validate="true"
 */
public class MasterEditCustomAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterEditCustomForm masterEditCustomForm = (MasterEditCustomForm) form;// TODO Auto-generated method stub
        String buttonValue = masterEditCustomForm.getButtonValue();
        String name = masterEditCustomForm.getName();
        Set associateset = new HashSet<CustomerAssociation>();
        HttpSession session = ((HttpServletRequest) request).getSession();
        Set generalinfoset = new HashSet<GeneralInformation>();
        Set accountset = new HashSet<CustomerAccounting>();
        Set configset = new HashSet<CustomerContact>();
        Set vendorInfoset = new HashSet<Vendor>();
        Set paymentset = new HashSet<PaymentMethod>();
        CustomerDAO customerDAO = new CustomerDAO();
        Customer customer = new Customer();
        CustomerAccounting customerAccounting = null;
        CustomerTemp tempCustomer = new CustomerTemp();
        GeneralInformationDAO generalInformationDAO = new GeneralInformationDAO();
        CustomerAccountingDAO customerAccountingDAO = new CustomerAccountingDAO();
        CustomerAccounting accounting = new CustomerAccounting();
        GeneralInformation generalInformation = new GeneralInformation();
        Vendor vendorInfoObj = new Vendor();
        PaymentMethod paymentobj = new PaymentMethod();
        CustomerContact customerCont = new CustomerContact();
        Set tradeset = new HashSet<Customer>();
        String master = masterEditCustomForm.getMaster();
        TradingPartner tradingpartner = new TradingPartner();
        String message = "";
        String forwardName = "";
        DBUtil dbUtil = new DBUtil();
        List customerlist = (List) session.getAttribute("mastercustomerList");
        CustomerContactDAO customerContactDAO = new CustomerContactDAO();
        if (buttonValue.equals("add") || buttonValue.equals("delete") || buttonValue.equals("cancel") || buttonValue.equals("cancelview")) {
            if (session.getAttribute("MasterTradingPartner") != null) {
                tradingpartner = (TradingPartner) session.getAttribute("MasterTradingPartner");
            } else {
                tradingpartner = new TradingPartner();
                tradingpartner.setGeneralInformation(null);//---USED TO UPDATE THE EXISTING RECORD AND PREVENT THE INSERTION AS NEW RECORD------
                //tradingpartner.setCustomerset(null);
                tradingpartner.setAccounting(null);
                tradingpartner.setVendorset(null);
                tradingpartner.setCustomerContact(null);
                tradingpartner.setPaymentset(null);


            }
        }
        if (buttonValue.equals("add")) {
            CustomerTemp customer1 = null;
            CustomerAssociation customerAssociation = new CustomerAssociation();
            List customerList = null;
            tradingpartner.setAccountName(name);
            if (session.getAttribute("assocList") != null) {
                customerList = (List) session.getAttribute("assocList");
                if (customerList != null && customerList.size() > 0) {
                    for (int j = 0; j < customerList.size(); j++) {
                        customerAssociation = new CustomerAssociation();
                        customer1 = new CustomerTemp();
                        customer1 = (CustomerTemp) customerList.get(j);
                        customerAssociation.setAssocid(customer1.getAccountNo());
                        customerAssociation.setCustomerid(tradingpartner.getAccountno());

                        associateset.add(customerAssociation);
                    }
                }
                tradingpartner.setAssociateCustomer(associateset);
            }
            if (session.getAttribute("mastergeneralInformation") != null) {

                generalInformation = (GeneralInformation) session.getAttribute("mastergeneralInformation");
                generalinfoset.add(generalInformation);
                tradingpartner.setAcctType(generalInformation.getAccounttype());
                tradingpartner.setGeneralInformation(generalinfoset);
            //}
            }
            if (session.getAttribute("masteraddressList") != null) {

                List addressList = (List) session.getAttribute("masteraddressList");
                List primelist = new ArrayList();
                if (addressList != null && addressList.size() > 0) {
                    for (int i = 0; i < addressList.size(); i++)//------------DISPLAYING ADDRESS FROM CUSTOMER ADDRESS TABLE---------------
                    {
                        customer = (Customer) addressList.get(i);
                        if (customer.getPrimary() != null && customer.getPrimary().equals("on")) {
                            tempCustomer.setAccountName(tradingpartner.getAccountName());
                            tempCustomer.setAccountNo(tradingpartner.getAccountno());
                            tempCustomer.setMasterAccountNo(tradingpartner.getMaster());
                            tempCustomer.setType(tradingpartner.getType());
                            tempCustomer.setAccountType(generalInformation.getAccounttype());
                            tempCustomer.setAddress1(customer.getAddress1());
                            tempCustomer.setCity2(customer.getCity2());
                            tempCustomer.setState(customer.getState());
                            primelist.add(tempCustomer);

                        }
                        session.setAttribute("mastercustomerList", primelist);//------USED FOR DISPLAY IN SEARCHCUSTOMER for primary record------------
                        customer.setAcctname(tradingpartner.getAccountName());
                        customer.setAccounttype(generalInformation.getAccounttype());
                        customer.setType(tradingpartner.getType());
                        customer.setAccounttype(generalInformation.getAccounttype());//
                        tradeset.add(customer);

                    }
                }
            }
            if (session.getAttribute("masteraccounting") != null) {

                accounting = (CustomerAccounting) session.getAttribute("masteraccounting");
                accountset.add(accounting);
                tradingpartner.setAccounting(accountset);
            }

            if (session.getAttribute("MasterVendorInfoList") != null)//-------FOR SAVING EDITED VENDOR INFORMATION------
            {

                vendorInfoObj = (Vendor) session.getAttribute("MasterVendorInfoList");
                vendorInfoset.add(vendorInfoObj);
                tradingpartner.setVendorset(vendorInfoset);
            }

            if (session.getAttribute("paymentList") != null)//-------------------------SAVING PAYMENT INFORMATION -------------
            {
                List payList = (List) session.getAttribute("paymentList");
                if (payList != null && payList.size() > 0) {
                    for (int j = 0; j < payList.size(); j++) {
                        paymentobj = (PaymentMethod) payList.get(j);
                        paymentset.add(paymentobj);
                    }
                }
                if (paymentset != null) {
                    tradingpartner.setPaymentset(paymentset);
                }
            }

            if (session.getAttribute("addConfig") != null) {
                List custConfig = (List) session.getAttribute("addConfig");
                if (custConfig != null && custConfig.size() > 0) {
                    for (int j = 0; j < custConfig.size(); j++) {
                        customerCont = (CustomerContact) custConfig.get(j);
                        configset.add(customerCont);

                    }
                }

                tradingpartner.setCustomerContact(new HashSet());
                tradingpartner.setCustomerContact(configset);
            }
            if (generalInformation.getPassword() != null) {
                tradingpartner.setPassword("Y");
            } else {
                tradingpartner.setPassword("N");
            }
            tradingpartner.setHold(accounting.getHoldList());
        }
        if (buttonValue.equals("add")) {
            boolean flag = false;
            for (int i = 0; i < customerlist.size(); i++) {
                tempCustomer = (CustomerTemp) customerlist.get(i);
                //CustomerAccounting tempCustomerAccounting=(CustomerAccounting)
                if (tempCustomer.getPrimary() != null && tempCustomer.getPrimary().equals("on")) {

                    if (tempCustomer.getAccountNo().equals(tradingpartner.getAccountno())) {
                        tempCustomer.setAccountNo(tradingpartner.getAccountno());
                        tempCustomer.setAccountName(tradingpartner.getAccountName());
                        tempCustomer.setAccountType(tradingpartner.getAcctType());
                        if (session.getAttribute("masteraddressList") != null) {

                            List addressList = (List) session.getAttribute("masteraddressList");
                            if (addressList != null && addressList.size() > 0) {
                                for (int j = 0; j < addressList.size(); j++) {
                                    customer = (Customer) addressList.get(j);
                                    if (customer.getPrimary() != null && customer.getPrimary().equals("on")) {
                                        tempCustomer.setAddress1(customer.getAddress1());
                                        tempCustomer.setCity2(customer.getCity2());
                                        tempCustomer.setState(customer.getState());
                                        break;
                                    }
                                }
                            }
                        }
                        if (generalInformation.getPassword() != null) {
                            tempCustomer.setPassword("Y");
                        } else {
                            tempCustomer.setPassword("N");
                        }
                        List customerList1 = new ArrayList();
                        customerList1.add(tempCustomer);
                        session.setAttribute("mastercustomerList", customerList1);
                        flag = true;
                        break;
                    }
                }
            }


            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            customerDAO.update(tradingpartner, userId.getLoginName());
            String programid = null;
            programid = (String) session.getAttribute("processinfoformastercustomer");
            String recordid = "";
            if (tradingpartner != null && tradingpartner.getAccountno() != null) {
                recordid = tradingpartner.getAccountno().toString();
            }
            dbUtil.getProcessInfo(programid, recordid, "edited", "deleted");//--no needed here in add---
            if (session.getAttribute("customer") != null) {
                session.removeAttribute("customer");
            }
            if (session.getAttribute("processinfoformastercustomer") != null) {
                session.removeAttribute("processinfoformastercustomer");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("customernotes") != null) {
                session.removeAttribute("customernotes");
            }
            if (session.getAttribute("modifyforcustomer") != null) {
                session.removeAttribute("modifyforcustomer");
            }
            if (session.getAttribute("generalInformation") != null) {
                session.removeAttribute("generalInformation");
            }
            if (session.getAttribute("accounting") != null) {
                session.removeAttribute("accounting");
            }
            if (session.getAttribute("addConfig") != null) {
                session.removeAttribute("addConfig");
            }
            if (session.getAttribute("mastergeneralInformation") != null) {
                session.removeAttribute("mastergeneralInformation");
            }
            if (session.getAttribute("masteraddressList") != null) {
                session.removeAttribute("masteraddressList");
            }
            if (session.getAttribute("masteraccounting") != null) {
                session.removeAttribute("masteraccounting");
            }
            if (session.getAttribute("MasterVendorInfoList") != null) {
                session.removeAttribute("MasterVendorInfoList");
            }
            message = "Customer details updated successfully";
            session.setAttribute("trade", "searchcustomer");
            session.setAttribute("msg", message);
        //forwardName="mastereditcustom";
        } else if (buttonValue != null && buttonValue.equals("delete")) {
            boolean flag = false;
            String programid = null;
            programid = (String) session.getAttribute("processinfoformastercustomer");
            String recordid = "";
            if (tradingpartner != null && tradingpartner.getAccountno() != null) {
                recordid = tradingpartner.getAccountno().toString();
            }
            for (int i = 0; i < customerlist.size(); i++) {
                CustomerTemp customer2 = (CustomerTemp) customerlist.get(i);
                if (customer2.getAccountNo().equals(tradingpartner.getAccountno())) {
                    customerlist.remove(customer2);
                    session.setAttribute("mastercustomerList", customerlist);


                    flag = true;
                    break;
                }
            }
            if (flag) {
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");

                }
                customerDAO.delete(tradingpartner, userId.getLoginName());

                message = "Customer details deleted successfully";
                session.setAttribute("msg", message);
                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }
                if (session.getAttribute("processinfoformastercustomer") != null) {
                    session.removeAttribute("processinfoformastercustomer");
                }
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }
                if (session.getAttribute("modifyforcustomer") != null) {
                    session.removeAttribute("modifyforcustomer");
                }
                if (session.getAttribute("generalInformation") != null) {
                    session.removeAttribute("generalInformation");
                }
                if (session.getAttribute("accounting") != null) {
                    session.removeAttribute("accounting");
                }
                if (session.getAttribute("addConfig") != null) {
                    session.removeAttribute("addConfig");
                }
                if (session.getAttribute("msg") != null) {
                    session.removeAttribute("msg");
                }
            }
        //forwardName="searchcustomer";
        } else if (buttonValue.equals("cancel")) {
            String programid = null;
            programid = (String) session.getAttribute("processinfoformastercustomer");
            String recordid = "";

            if (tradingpartner != null && tradingpartner.getAccountno() != null) {
                recordid = tradingpartner.getAccountno().toString();
            }

            dbUtil.getProcessInfo(programid, recordid, "editcancelled", null);

            if (session.getAttribute("customer") != null) {
                session.removeAttribute("customer");
            }
            if (session.getAttribute("noteBean") != null) {
                session.removeAttribute("noteBean");
            }

            if (session.getAttribute("processinfoformastercustomer") != null) {
                session.removeAttribute("processinfoformastercustomer");
            }
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("modifyforcustomer") != null) {
                session.removeAttribute("modifyforcustomer");
            }
            if (session.getAttribute("generalInformation") != null) {
                session.removeAttribute("generalInformation");
            }
            if (session.getAttribute("accounting") != null) {
                session.removeAttribute("accounting");
            }
            if (session.getAttribute("addConfig") != null) {
                session.removeAttribute("addConfig");
            }
            if (session.getAttribute("msg") != null) {
                session.removeAttribute("msg");
            }
        //forwardName="searchcustomer";
        } else if (buttonValue.equals("cancelview")) {
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("msg") != null) {
                session.removeAttribute("msg");
            }
        }
        session.setAttribute("trade", "mastercustomer");
        return mapping.findForward("searchcustomer");

    }
}