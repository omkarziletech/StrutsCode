  /*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.text.SimpleDateFormat;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.beans.PortsBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordFcl;
import com.gp.cong.logisoft.domain.FCLPortConfiguration;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.form.EditFclPortsConfigForm;
import com.gp.cong.logisoft.util.DBUtil;
import com.gp.cvst.logisoft.hibernate.dao.SystemRulesDAO;

/** 
 * MyEclipse Struts
 * Creation date: 01-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editFclPortsConfig" name="editFclPortsConfigForm" input="/jsps/datareference/editFclPortsConfig.jsp" scope="request" validate="true"
 */
public class EditFclPortsConfigAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception {
        EditFclPortsConfigForm editFclPortsConfigForm = (EditFclPortsConfigForm) form;// TODO Auto-generated method stub
        String buttonValue = editFclPortsConfigForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String temporaryDate = editFclPortsConfigForm.getTxtCal();
        String expirationDate = editFclPortsConfigForm.getTxtCal1();
        String temporaryText = editFclPortsConfigForm.getTemporaryText();
        String originRemarks = editFclPortsConfigForm.getOriginRemarks();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        DBUtil dbUtil = new DBUtil();
        String companyCode = new SystemRulesDAO().getSystemRulesByCode("CompanyCode");
        String srvcFcl = editFclPortsConfigForm.getSrvcFcl();       
        if(null!=srvcFcl && "Y".equals(srvcFcl)){
             srvcFcl = "Y";
        }else{
             srvcFcl = "N";
        }
        //source changed
        String cubeWtMandatoryFcl = editFclPortsConfigForm.getCubeWtMandatoryFcl();
        if (null!=cubeWtMandatoryFcl && "Y".equals(cubeWtMandatoryFcl)) {
            cubeWtMandatoryFcl = "Y";
        } else {
            cubeWtMandatoryFcl = "N";

        }
        String fclSsBlGoCollect = editFclPortsConfigForm.getFclSsBlGoCollect();
        if (null!=fclSsBlGoCollect && "Y".equals(fclSsBlGoCollect)) {
            fclSsBlGoCollect = "Y";
        } else if(null!=fclSsBlGoCollect && "X".equals(fclSsBlGoCollect)){
            fclSsBlGoCollect = "X";
        }else{
            fclSsBlGoCollect = "N";
        }
        String insuranceAllowed=editFclPortsConfigForm.getInsuranceAllowed();
        if(null!=insuranceAllowed && "N".equals(insuranceAllowed)) {
            insuranceAllowed="N";
        } else {
            insuranceAllowed="Y";
        }
        String fclHouseBlGoCollect = editFclPortsConfigForm.getFclHouseBlGoCollect();
        if (null!=fclHouseBlGoCollect && "Y".equals(fclHouseBlGoCollect)) {
            fclHouseBlGoCollect = "Y";
        } else {
            fclHouseBlGoCollect = "N";
        }
        String specialRemarks = editFclPortsConfigForm.getSpecialRemarks();
        if (specialRemarks == null) {
            specialRemarks = "N";

        } else {
            specialRemarks = "Y";

        }
        String defaultMasterSettings = editFclPortsConfigForm.getDefaultMasterSettings();
        if(null!=defaultMasterSettings && "N".equals(defaultMasterSettings)){
             defaultMasterSettings = "N";
        }else{
             defaultMasterSettings = "Y";
        }
        String brandField = editFclPortsConfigForm.getBrandField();
        if(brandField == null){
           brandField = "Ecu Worldwide";
        } else if(brandField.equals("Econocaribe") && ("03").equals(companyCode)){
           brandField = "Econocaribe";
        } else if(brandField.equals("OTI")&& ("02").equals(companyCode)){
            brandField = "OTI";
        }
        GenericCode genObj = null;
        GenericCode genObjRuleRouteByAgentAdmin = null;
        GenericCode genObjRuleRouteByAgentCommn = null;
        GenericCode genObjRuleRouteNotAgentAdmin = null;
        GenericCode genObjRuleRouteNotAgentCommn = null;
        FCLPortConfiguration fclPortObj = null;
        forwardName = "editfclConfig";
        PortsBean portBean = new PortsBean();
        portBean.setServiceFcl(srvcFcl);
        portBean.setCubewt(cubeWtMandatoryFcl);
        portBean.setFclssbl(fclSsBlGoCollect);
        portBean.setFclhousebl(fclHouseBlGoCollect);
        portBean.setInsuranceAllowed(insuranceAllowed);
        portBean.setSpclRemark(specialRemarks);
        portBean.setQuoteClause(editFclPortsConfigForm.getQuoteClause());
        portBean.setTxtCal(temporaryDate);
        portBean.setDefaultMasterSettings(defaultMasterSettings);
        portBean.setBrandField(brandField);
        request.setAttribute("portBean", portBean);

        if (!buttonValue.equals("terminalSelected")) {
            if (session.getAttribute("fclPortObjConfiguration") != null) {
                fclPortObj = (FCLPortConfiguration) session.getAttribute("fclPortObjConfiguration");
            }
        }
        if (!buttonValue.equals("terminalSelected") && !buttonValue.equals("note")) {
            // port fcl values
            if (session.getAttribute("fclPortObjConfiguration") != null) {
                fclPortObj = (FCLPortConfiguration) session.getAttribute("fclPortObjConfiguration");
            } else {
                fclPortObj = new FCLPortConfiguration();
            }
            fclPortObj.setSrvcFcl(srvcFcl);
            fclPortObj.setCubeWtMandatoryFcl(cubeWtMandatoryFcl);
            fclPortObj.setFclSsBlGoCollect(fclSsBlGoCollect);
            fclPortObj.setFclHouseBlGoCollect(fclHouseBlGoCollect);
            fclPortObj.setInsuranceAllowed(insuranceAllowed);
            fclPortObj.setQuoteClause(editFclPortsConfigForm.getQuoteClause());
            fclPortObj.setTemporaryText(temporaryText);
            fclPortObj.setOriginRemarks(originRemarks);
            fclPortObj.setDefaultMasterSettings(defaultMasterSettings);
            fclPortObj.setBrandField(brandField);
            if (temporaryDate != null && temporaryDate != "") {
                java.util.Date javaDate = null;
                    javaDate = sdf.parse(temporaryDate);
                fclPortObj.setTemporaryDate(javaDate);
            }
             if (expirationDate != null && expirationDate != "") {
                java.util.Date expJavaDate = null;
                    expJavaDate = sdf.parse(expirationDate);
                fclPortObj.setExpirationDate(expJavaDate);
            }
            if (editFclPortsConfigForm.getBlClauses() != null && !editFclPortsConfigForm.getBlClauses().equals("0")) {
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                genObj = genericDAO.findById(new Integer(editFclPortsConfigForm.getBlClauses()));
                fclPortObj.setBlClauseId(genObj);

            }
            if (editFclPortsConfigForm.getAmountRouteByAgentAdmin() != null && !editFclPortsConfigForm.getAmountRouteByAgentAdmin().equals("")) {
                fclPortObj.setRadmAm(new Double(editFclPortsConfigForm.getAmountRouteByAgentAdmin()));
            }
            if (editFclPortsConfigForm.getTierAmountRouteByAgentAdmin() != null && !editFclPortsConfigForm.getTierAmountRouteByAgentAdmin().equals("")) {
                if (editFclPortsConfigForm.getTierAmountRouteByAgentAdmin() != null && !editFclPortsConfigForm.getTierAmountRouteByAgentAdmin().equals("")) {
                    fclPortObj.setRadmTierAmt(new Double(editFclPortsConfigForm.getTierAmountRouteByAgentAdmin()));
                }
            }
            if (editFclPortsConfigForm.getRuleRouteByAgentAdmin() != null && !editFclPortsConfigForm.getRuleRouteByAgentAdmin().equals("")) {
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                genObjRuleRouteByAgentAdmin = genericDAO.findById(new Integer(editFclPortsConfigForm.getRuleRouteByAgentAdmin()));
                fclPortObj.setRadmRule(genObjRuleRouteByAgentAdmin);
            }
            if (editFclPortsConfigForm.getAmountRouteByAgentCommn() != null && !editFclPortsConfigForm.getAmountRouteByAgentCommn().equals("")) {
                fclPortObj.setRcomAm(new Double(editFclPortsConfigForm.getAmountRouteByAgentCommn()));
            }
            if (editFclPortsConfigForm.getTierAmountRouteByAgentCommn() != null && !editFclPortsConfigForm.getTierAmountRouteByAgentCommn().equals("")) {
                fclPortObj.setRcomTierAmt(new Double(editFclPortsConfigForm.getTierAmountRouteByAgentCommn()));
            }
            if (editFclPortsConfigForm.getRuleRouteByAgentCommn() != null && !editFclPortsConfigForm.getRuleRouteByAgentCommn().equals("")) {
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                genObjRuleRouteByAgentCommn = genericDAO.findById(new Integer(editFclPortsConfigForm.getRuleRouteByAgentCommn()));
                fclPortObj.setRcomRule(genObjRuleRouteByAgentCommn);
            }
            if (editFclPortsConfigForm.getAmountRouteNotAgentAdmin() != null && !editFclPortsConfigForm.getAmountRouteNotAgentAdmin().equals("")) {
                fclPortObj.setNadmAm(new Double(editFclPortsConfigForm.getAmountRouteNotAgentAdmin()));
            }
            if (editFclPortsConfigForm.getTierAmountRouteNotAgentAdmin() != null && !editFclPortsConfigForm.getTierAmountRouteNotAgentAdmin().equals("")) {
                fclPortObj.setNadmTierAmt(new Double(editFclPortsConfigForm.getTierAmountRouteNotAgentAdmin()));
            }
            if (editFclPortsConfigForm.getRuleRouteNotAgentAdmin() != null && !editFclPortsConfigForm.getRuleRouteNotAgentAdmin().equals("")) {
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                genObjRuleRouteNotAgentAdmin = genericDAO.findById(new Integer(editFclPortsConfigForm.getRuleRouteNotAgentAdmin()));
                fclPortObj.setNadmRule(genObjRuleRouteNotAgentAdmin);
            }
            if (editFclPortsConfigForm.getAmountRouteNotAgentCommn() != null && !editFclPortsConfigForm.getAmountRouteNotAgentCommn().equals("")) {
                fclPortObj.setNcomAm(new Double(editFclPortsConfigForm.getAmountRouteNotAgentCommn()));
            }
            if (editFclPortsConfigForm.getTierAmountRouteNotAgentCommn() != null && !editFclPortsConfigForm.getTierAmountRouteNotAgentCommn().equals("")) {
                fclPortObj.setNcomTierAmt(new Double(editFclPortsConfigForm.getTierAmountRouteNotAgentCommn()));
            }
            if (editFclPortsConfigForm.getRuleRouteNotAgentCommn() != null && !editFclPortsConfigForm.getRuleRouteNotAgentCommn().equals("")) {
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                genObjRuleRouteNotAgentCommn = genericDAO.findById(new Integer(editFclPortsConfigForm.getRuleRouteNotAgentCommn()));
                fclPortObj.setNcomRule(genObjRuleRouteNotAgentCommn);
            }
            if (editFclPortsConfigForm.getAmountCurrentAdjFactor() != null && !editFclPortsConfigForm.getAmountCurrentAdjFactor().equals("")) {
                fclPortObj.setCurrentAdjFactor(new Double(editFclPortsConfigForm.getAmountCurrentAdjFactor()));
            }

            fclPortObj.setSpecialRemarks(specialRemarks);
            fclPortObj.setSpecialRemarksForQuot(editFclPortsConfigForm.getSpecialRemarksforQuotation());
            fclPortObj.setTranshipment(editFclPortsConfigForm.getTranshipment());
            fclPortObj.setLineManager(editFclPortsConfigForm.getLineManager());
            fclPortObj.setDefaultPortOfDischarge(editFclPortsConfigForm.getDefaultPortOfDischarge());
            session.setAttribute("fclPortObjConfiguration", fclPortObj);
        }

        if (buttonValue != null && buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforports") != null) {
                String itemId = (String) session.getAttribute("processinfoforports");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordFcl();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            noteBean.setPageName("cancelfcl");
            String noteId = "";
            if (fclPortObj != null && fclPortObj.getId() != null) {
                noteId = fclPortObj.getId().toString();
            }
            noteBean.setNoteId(noteId);
            noteBean.setReferenceId(noteId);
            List auditList = null;
            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            forwardName = "note";

        }
        return mapping.findForward(forwardName);
    }
}