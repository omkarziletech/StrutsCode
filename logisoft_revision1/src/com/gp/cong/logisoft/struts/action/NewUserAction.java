/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import com.gp.cong.common.CommonUtils;
import com.gp.cong.logisoft.beans.SearchUserBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.Role;
import com.gp.cong.logisoft.domain.RefTerminal;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.RoleDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.lcl.LclSearchTemplateDAO;
import com.gp.cong.logisoft.struts.form.NewUserForm;
import com.gp.cong.logisoft.util.DBUtil;

/**
 * MyEclipse Struts Creation date: 10-25-2007
 *
 * XDoclet definition:
 *
 * @struts.action path="/newUser" name="newUserForm"
 * input="/jsps/admin/NewUser.jsp" scope="request" validate="true"
 */
public class NewUserAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     *
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = ((HttpServletRequest) request).getSession();
        NewUserForm newUserForm = (NewUserForm) form;// TODO Auto-generated method stub
        String firstName = newUserForm.getFirstName();
        String lastName = newUserForm.getLastName();
        String telephone = newUserForm.getTelephone();
        String address1 = newUserForm.getAddress1();
        String address2 = newUserForm.getAddress2();
        String city = newUserForm.getCity();
        String zipcode = newUserForm.getZipCode();
        String loginName = newUserForm.getLoginName();
        String role = newUserForm.getRole();
        // String match=newUserForm.getMatch();
        String extension = newUserForm.getExtension();
        String fax = newUserForm.getFax();
        DBUtil dbUtil = new DBUtil();
        String phone1 = dbUtil.stringtokenizer(telephone);
        String fax1 = dbUtil.stringtokenizer(fax);
        String terminal = newUserForm.getTerminal();
        String importTerminal = newUserForm.getImportTerminal();
        String billingTermianl = newUserForm.getBillingTerminal();
        UnLocationDAO UnLocationDAO = new UnLocationDAO();
        String officeCityLocation = newUserForm.getOfficeCityLocation();
        Date userCreatedDate = new Date(System.currentTimeMillis());
        String password = newUserForm.getPassword();
        String status = newUserForm.getStatus();
        String email = newUserForm.getEmail();
        String outsourceEmail = newUserForm.getOutsourceEmail();
        String diffLclBookedDimsActual = newUserForm.getDifflclBookedDimsActual();
        String templateId = newUserForm.getTemplateId();
        String message = "";
        String buttonValue = newUserForm.getButtonValue();
        String forwardName = "newuser";
        String warehouseNo = newUserForm.getWarehouseNo();
        User user = null;
        RefTerminal terminalobj = null;
        RefTerminal impterminalobj = null;
        RefTerminal billterminalobj = null;
        if (!buttonValue.equals("cancel") && !buttonValue.equals("searchcity")) {
            RefTerminalDAO terminalDAO = new RefTerminalDAO();
            if (session.getAttribute("user") == null) {
                user = new User();
            } else {
                user = (User) session.getAttribute("user");
            }
            if (terminal != null && !terminal.equals("0")) {
                terminalobj = terminalDAO.findById(terminal);
                user.setTelephone(terminalobj.getPhnnum1());
                user.setOfficeCityLOcation(terminalobj.getGovSchCode());
                user.setFax(terminalobj.getFaxnum1());
                user.setTerminal(terminalobj);
            } else {
                user.setTerminal(terminalobj);
                user.setOfficeCityLOcation(officeCityLocation);
                user.setFax(fax);
                user.setTelephone(telephone);
            }
            if (importTerminal != null && !importTerminal.equals("0")) {
                impterminalobj = terminalDAO.impfindById(importTerminal);

                user.setImportTerminal(impterminalobj);
            } else {
                user.setImportTerminal(impterminalobj);

            }
            if (billingTermianl != null && !billingTermianl.equalsIgnoreCase("0")) {
                billterminalobj = terminalDAO.impfindById(billingTermianl);
                user.setBillingTerminal(billterminalobj);
            } else {
                user.setBillingTerminal(billterminalobj);
            }
            if (null != newUserForm.getSignatureImageOutput()
                    && newUserForm.getSignatureImageOutput().getFileData() != null
                    && newUserForm.getSignatureImageOutput().getFileData().length > 0) {
                user.setSignatureImage(newUserForm.getSignatureImageOutput().getFileData());
            }
            if (CommonUtils.isNotEmpty(templateId)) {
                user.setUserTemplate(new LclSearchTemplateDAO().findById(Integer.parseInt(templateId)));
            }
            user.setFirstName(firstName);
            user.setLastName(lastName);

            user.setAddress1(address1);
            user.setAddress2(address2);
            user.setWarehouse(newUserForm.getWarehouse());

            user.setZipCode(zipcode);
            user.setOutsourceEmail(outsourceEmail);
            user.setDifflclBookedDimsActual(diffLclBookedDimsActual);
            user.setLoginName(loginName);
            user.setPassword(password);
            user.setStatus(status);
            user.setEmail(email);
            user.setExtension(extension);
            user.setCity(city);
            user.setAchApprover(newUserForm.isAchApprover());
            user.setSearchScreenReset(newUserForm.isSearchScreenReset());
            if (role != null && role != "0") {
                RoleDAO roleDAO = new RoleDAO();
                Role role1 = roleDAO.findById(Integer.parseInt(role));
                user.setRole(role1);
            }
            user.setUserCreatedDate(userCreatedDate);
            session.setAttribute("user", user);
        }
        if (buttonValue.equals("save")) {
            Role roleId = null;
            RoleDAO roleDAO = new RoleDAO();
            if (role != null || !role.equals("0")) {
                roleId = roleDAO.findById(Integer.parseInt(role));
                user.setRole(roleId);
            }
            user.setTelephone(phone1);
            user.setFax(fax1);
            session.setAttribute("user", user);
            //  request.setAttribute("match", match);
            UserDAO userDAO = new UserDAO();

            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            if (CommonUtils.isNotEmpty(warehouseNo)) {
                user.setWarehouseNo(warehouseNo);
            } else {
                user.setWarehouseNo(null);
            }
            userDAO.save(user, userId.getLoginName());
            List userList = new ArrayList();
            userList.add(user);
            session.setAttribute("userList", userList);
            if (session.getAttribute("user") != null) {
                session.removeAttribute("user");
            }
            if (session.getAttribute("printerAddList") != null) {
                session.removeAttribute("printerAddList");
            }

            message = "User details saved successfully";
            request.setAttribute("message", message);
            //request.setAttribute("match", match);
            SearchUserBean suBean = (SearchUserBean) session.getAttribute("suBean");
            request.setAttribute("userList", new UserDAO().getUserList(suBean));
            request.setAttribute("statuslist", dbUtil.getStatusList());
            request.setAttribute("rolelist", dbUtil.getRoleList());
            forwardName = "cancel";
        }

        if (buttonValue.equals("cancel")) {
            if (session.getAttribute("user") != null) {
                session.removeAttribute("user");
            }
            if (session.getAttribute("printerAddList") != null) {
                session.removeAttribute("printerAddList");
            }
            SearchUserBean suBean = (SearchUserBean) session.getAttribute("suBean");
            request.setAttribute("userList", new UserDAO().getUserList(suBean));
            request.setAttribute("statuslist", dbUtil.getStatusList());
            request.setAttribute("rolelist", dbUtil.getRoleList());
            forwardName = "cancel";

        }

        if (buttonValue.equals("searchcity")) {
            List searchcity = UnLocationDAO.findbyCity(city);
            if (session.getAttribute("user") != null) {
                user = (User) session.getAttribute("user");
            } else {
                user = new User();

            }
            if (searchcity != null && searchcity.size() > 0) {
                UnLocation unl = (UnLocation) searchcity.get(0);
                user.setUnLocation(unl);
                user.setCity(city);
            } else {

                user.setUnLocation(new UnLocation());
                user.setCity(city);
            }
            session.setAttribute("user", user);
            return mapping.findForward("newuser");
        }
        return mapping.findForward(forwardName);
    }
}
