/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.customerBean;
import com.gp.cong.logisoft.domain.CustomerAccounting;
import com.gp.cong.logisoft.domain.CustomerAssociation;
import com.gp.cong.logisoft.domain.CustomerContact;
import com.gp.cong.logisoft.domain.CustomerTemp;
import com.gp.cong.logisoft.domain.GeneralInformation;
import com.gp.cong.logisoft.domain.PaymentMethod;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.TradingPartner;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.domain.Vendor;
import com.gp.cong.logisoft.hibernate.dao.CustomerAssociationDAO;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.form.MasterSearchCustomerForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/masterSearchCustomer" name="masterSearchCustomerForm" input="/jsps/Tradingpartnermaintainance/MasterSearchCustomer.jsp" scope="request" validate="true"
 */
public class MasterSearchCustomerAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        MasterSearchCustomerForm masterSearchCustomerForm = (MasterSearchCustomerForm) form;// TODO Auto-generated method stub
        String buttonValue = masterSearchCustomerForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String loginName = "";
        String msg = "";
        String message = "";
        String account = masterSearchCustomerForm.getAccount();
        String name = masterSearchCustomerForm.getName();
        String accountType1 = masterSearchCustomerForm.getAccountType1();
        String accountType2 = masterSearchCustomerForm.getAccountType2();
        String accountType3 = masterSearchCustomerForm.getAccountType3();
        String accountType4 = masterSearchCustomerForm.getAccountType4();
        String accountType5 = masterSearchCustomerForm.getAccountType5();
        String accountType6 = masterSearchCustomerForm.getAccountType5();
        String accountType7 = masterSearchCustomerForm.getAccountType5();
        String accountType8 = masterSearchCustomerForm.getAccountType5();
        String accountType9 = masterSearchCustomerForm.getAccountType5();
        String accountType10 = masterSearchCustomerForm.getAccountType5();
        String accountType11 = masterSearchCustomerForm.getAccountType5();
        String accountType = "";
        String match = masterSearchCustomerForm.getMatch();
        customerBean customerbean = new customerBean();
        CustomerDAO customerDAO1 = new CustomerDAO();
        CustomerTemp customerTemp = new CustomerTemp();



        if (request.getParameter("paramid") != null) {
            if (session.getAttribute("paymentList") != null) {
                session.removeAttribute("paymentList");
            }
            CustomerDAO customerDAO = new CustomerDAO();
            TradingPartner tradingpartner = customerDAO.findById(request.getParameter("paramid"));
            if (tradingpartner != null) {
                String acctType = tradingpartner.getAcctType();
                if (acctType != null) {
                    for (int i = 0; i < acctType.length(); i++) {
                        if (acctType.length() > i) {
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'S') {
                                customerbean.setAccountType1("on");
                            }

                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'F') {
                                customerbean.setAccountType2("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'N') {
                                customerbean.setAccountType3("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'C') {
                                customerbean.setAccountType4("on");
                            }
                            if (acctType.length() > (i + 1)) {
                                if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'S' && acctType.charAt(i + 1) == 'S') {
                                    customerbean.setAccountType5("on");
                                }
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'T') {
                                customerbean.setAccountType6("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'A') {
                                customerbean.setAccountType7("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'I') {
                                customerbean.setAccountType8("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'E') {
                                customerbean.setAccountType9("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'V') {
                                customerbean.setAccountType10("on");
                            }
                            if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'O') {
                                customerbean.setAccountType11("on");
                            }
                        }
                    }
                }
                if (tradingpartner.getMaster() != null && tradingpartner.getMaster().equalsIgnoreCase("Y")) {
                    customerbean.setMasterAddress("on");
                }
                session.setAttribute("customerbean", customerbean);
            }
            User userid = null;
            UserDAO user1 = new UserDAO();
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
            ProcessInfo pi = new ProcessInfo();
            String programid = null;
            programid = (String) session.getAttribute("processinfoformastercustomer");
            String recordid = tradingpartner.getAccountno().toString();
            String editstatus = "startedited";
            String deletestatus = "startdeleted";

            ProcessInfo processinfoobj = processinfoDAO.findById(Integer.parseInt(programid), recordid, deletestatus, editstatus);
            if (processinfoobj != null) {
                String view = "3";
                User loginuser = user1.findById(processinfoobj.getUserid());
                loginName = loginuser.getLoginName();
                msg = "This record is being used by ";
                message = msg + loginName;
                session.setAttribute("msg", message);
                session.setAttribute("view", view);
                forwardName = "editcustomer";
            } else {
                pi.setUserid(userid.getUserId());
                pi.setProgramid(Integer.parseInt(programid));
                java.util.Date currdate = new java.util.Date();
                pi.setProcessinfodate(currdate);
                pi.setEditstatus(editstatus);
                pi.setRecordid(recordid);
                processinfoDAO.save(pi);
            }

            List assocList = new ArrayList();
            if (tradingpartner.getAssociateCustomer() != null) {

                Iterator iter = tradingpartner.getAssociateCustomer().iterator();
                while (iter.hasNext()) {
                    CustomerAssociation customerAssoc = (CustomerAssociation) iter.next();
                    if (customerAssoc.getAssocid() != null) {
                        CustomerTemp c5 = customerDAO.findById1(customerAssoc.getAssocid());
                        assocList.add(c5);
                    }
                }
                session.setAttribute("assocList", assocList);
            //session.setAttribute("cList",assocList);
            }



            List custAddrList = new ArrayList();


            CustomerAssociationDAO customerAssocDAO = new CustomerAssociationDAO();

            if (tradingpartner.getGeneralInformation() != null) {
                Iterator iter = tradingpartner.getGeneralInformation().iterator();
                while (iter.hasNext()) {
                    GeneralInformation generalInfo = (GeneralInformation) iter.next();
                    customerbean.setIdType(generalInfo.getIdType());
                    if (generalInfo.getGoalAcct() != null && generalInfo.getGoalAcct().equalsIgnoreCase("Y")) {
                        customerbean.setGoalAcct("on");
                    }
                    if (generalInfo.getPoa() != null && generalInfo.getPoa().equalsIgnoreCase("Y")) {
                        customerbean.setPoa("on");
                    }
                    if (generalInfo.getImportTrackingScreen() != null && generalInfo.getImportTrackingScreen().equalsIgnoreCase("Y")) {
                        customerbean.setImportTrack("on");
                    }
                    if (generalInfo.getActivatePwdQuotes() != null && generalInfo.getActivatePwdQuotes().equalsIgnoreCase("Y")) {
                        customerbean.setWebQuotes("on");
                    }
                    if (generalInfo.getAllowFclQuotes() != null && generalInfo.getAllowFclQuotes().equalsIgnoreCase("Y")) {
                        customerbean.setWebFcl("on");
                    }

                    if (generalInfo.getAllowLclQuotes() != null && generalInfo.getAllowLclQuotes().equalsIgnoreCase("Y")) {
                        customerbean.setWebLcl("on");
                    }
                    if (generalInfo.getFaxSailingSchedule() != null && generalInfo.getFaxSailingSchedule().equalsIgnoreCase("Y")) {
                        customerbean.setFaxSail("on");
                    }
                    if (generalInfo.getFclMailingList() != null && generalInfo.getFclMailingList().equalsIgnoreCase("Y")) {
                        customerbean.setFclMail("on");
                    }
                    if (generalInfo.getChristmasCard() != null && generalInfo.getChristmasCard().equalsIgnoreCase("Y")) {
                        customerbean.setChristmas("on");
                    }
                    customerbean.setImportCfs(generalInfo.getImportsCfs());
                    if (generalInfo.getPbaSurchrge() != null && generalInfo.getPbaSurchrge().equalsIgnoreCase("Y")) {
                        customerbean.setPba("on");
                    }
                    if (generalInfo.getEinMaster() != null && generalInfo.getEinMaster().equalsIgnoreCase("Y")) {
                        customerbean.setEinmaster("on");
                    }
                    if (generalInfo.getCommodityMaster() != null && generalInfo.getCommodityMaster().equalsIgnoreCase("Y")) {
                        customerbean.setCommoditymaster("on");
                    }
                    if (generalInfo.getImportMaster() != null && generalInfo.getImportMaster().equalsIgnoreCase("Y")) {
                        customerbean.setImportmaster("on");
                    }
                    if (generalInfo.getInsure() != null && generalInfo.getInsure().equalsIgnoreCase("Y")) {
                        customerbean.setInsure("on");
                    }
                    if (generalInfo.getActive() != null && generalInfo.getActive().equalsIgnoreCase("Y")) {
                        customerbean.setActive("on");
                    }
                    session.setAttribute("customerbean", customerbean);
                    session.setAttribute("mastergeneralInformation", generalInfo);
                }
            }
            if (tradingpartner.getAccounting() != null) {
                Iterator iter = tradingpartner.getAccounting().iterator();
                while (iter.hasNext()) {
                    CustomerAccounting accounting = (CustomerAccounting) iter.next();
                    if (accounting.getHoldList() != null && accounting.getHoldList().equalsIgnoreCase("Y")) {
                        customerbean.setHoldList("on");
                    }
                    if (accounting.getSuspendCredit() != null && accounting.getSuspendCredit().equalsIgnoreCase("Y")) {
                        customerbean.setSuspendCredit("on");
                    }
                    if (accounting.getLegal() != null && accounting.getLegal().equalsIgnoreCase("Y")) {
                        customerbean.setLegal("on");
                    }
                    if (accounting.getExtendCredit() != null && accounting.getExtendCredit().equalsIgnoreCase("Y")) {
                        customerbean.setExtendCredit("on");
                    }
                    if (accounting.getAddressMaster() != null && accounting.getAddressMaster().equalsIgnoreCase("Y")) {
                        customerbean.setAddressMaster("on");
                    }
                    if (accounting.getCompanyMaster() != null && accounting.getCompanyMaster().equalsIgnoreCase("Y")) {
                        customerbean.setCompanyMaster("on");
                    }
                    if (accounting.getIncludeagent() != null && accounting.getIncludeagent().equalsIgnoreCase("Y")) {
                        customerbean.setIncludeagent("on");
                    }
                    if (accounting.getCreditbalance() != null && accounting.getCreditbalance().equalsIgnoreCase("Y")) {
                        customerbean.setCreditbalance("on");
                    }
                    if (accounting.getCreditinvoice() != null && accounting.getCreditinvoice().equalsIgnoreCase("Y")) {
                        customerbean.setCreditinvoice("on");
                    }
                    session.setAttribute("customerbean", customerbean);
                    session.setAttribute("masteraccounting", accounting);
                }
            }
            if (tradingpartner.getCustomerContact() != null)//-------------FOR CONTACT CONFIGURATION------
            {
                List custometContact = new ArrayList();
                Iterator iter = tradingpartner.getCustomerContact().iterator();
                while (iter.hasNext()) {
                    CustomerContact custCont = (CustomerContact) iter.next();
                    custometContact.add(custCont);
                    session.setAttribute("addConfig", custometContact);
                }
            }

            if (tradingpartner.getVendorset() != null)//-------------FOR VENDOR INFORAMATION-------------
            {

                Iterator iter = tradingpartner.getVendorset().iterator();
                while (iter.hasNext()) {
                    Vendor vendorobj = (Vendor) iter.next();
                    if (vendorobj.getDeactivate() != null && vendorobj.getDeactivate().equalsIgnoreCase("on")) {
                        customerbean.setDeactivate("on");
                    }
                    if (vendorobj.getCredit() != null && vendorobj.getCredit().equalsIgnoreCase("on")) {
                        customerbean.setCredit("on");
                    }
                    if (vendorobj.getWfile() != null && vendorobj.getWfile().equalsIgnoreCase("on")) {
                        customerbean.setWfile("on");
                    }
                    session.setAttribute("customerbean", customerbean);
                    session.setAttribute("MasterVendorInfoList", vendorobj);
                }
            }
            if (tradingpartner.getPaymentset() != null)//------------------FOR PAYMENT INFORMATION--------
            {
                List paylist = new ArrayList();
                Iterator iter = tradingpartner.getPaymentset().iterator();
                while (iter.hasNext()) {
                    PaymentMethod payobj = (PaymentMethod) iter.next();
                    paylist.add(payobj);
                    session.setAttribute("paymentList", paylist);
                }
            }
            session.setAttribute("MasterTradingPartner", tradingpartner);
            forwardName = "editcustomer";
        } else if (request.getParameter("param") != null) {
            CustomerDAO customerDAO = new CustomerDAO();
            TradingPartner tradingpartner = customerDAO.findById(request.getParameter("param"));
            String view = "3";
            session.setAttribute("view", view);

            if (tradingpartner.getGeneralInformation() != null) {
                Iterator iter = tradingpartner.getGeneralInformation().iterator();
                while (iter.hasNext()) {
                    GeneralInformation generalInfo = (GeneralInformation) iter.next();
                    if (generalInfo != null) {
                        String acctType = generalInfo.getAccounttype();
                        if (acctType != null) {
                            for (int i = 0; i < acctType.length(); i++) {
                                if (acctType.length() > i) {
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'S') {
                                        customerbean.setAccountType1("on");
                                    }

                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'F') {
                                        customerbean.setAccountType2("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'N') {
                                        customerbean.setAccountType3("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'C') {
                                        customerbean.setAccountType4("on");
                                    }
                                    if (acctType.length() > (i + 1)) {
                                        if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'S' && acctType.charAt(i + 1) == 'S') {
                                            customerbean.setAccountType5("on");
                                        }
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'T') {
                                        customerbean.setAccountType6("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'A') {
                                        customerbean.setAccountType7("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'I') {
                                        customerbean.setAccountType8("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'E') {
                                        customerbean.setAccountType9("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'V') {
                                        customerbean.setAccountType10("on");
                                    }
                                    if (acctType.charAt(i) != ',' && acctType.charAt(i) == 'O') {
                                        customerbean.setAccountType11("on");
                                    }
                                }
                            }
                        }
                        if (tradingpartner.getMaster() != null && tradingpartner.getMaster().equalsIgnoreCase("Y")) {
                            customerbean.setMasterAddress("on");
                        }
                        session.setAttribute("customerbean", customerbean);
                    }
                    customerbean.setIdType(generalInfo.getIdType());
                    if (generalInfo.getGoalAcct() != null && generalInfo.getGoalAcct().equalsIgnoreCase("Y")) {
                        customerbean.setGoalAcct("on");
                    }
                    if (generalInfo.getPoa() != null && generalInfo.getPoa().equalsIgnoreCase("Y")) {
                        customerbean.setPoa("on");
                    }
                    if (generalInfo.getImportTrackingScreen() != null && generalInfo.getImportTrackingScreen().equalsIgnoreCase("Y")) {
                        customerbean.setImportTrack("on");
                    }
                    if (generalInfo.getActivatePwdQuotes() != null && generalInfo.getActivatePwdQuotes().equalsIgnoreCase("Y")) {
                        customerbean.setWebQuotes("on");
                    }
                    if (generalInfo.getAllowFclQuotes() != null && generalInfo.getAllowFclQuotes().equalsIgnoreCase("Y")) {
                        customerbean.setWebFcl("on");
                    }

                    if (generalInfo.getAllowLclQuotes() != null && generalInfo.getAllowLclQuotes().equalsIgnoreCase("Y")) {
                        customerbean.setWebLcl("on");
                    }
                    if (generalInfo.getFaxSailingSchedule() != null && generalInfo.getFaxSailingSchedule().equalsIgnoreCase("Y")) {
                        customerbean.setFaxSail("on");
                    }
                    if (generalInfo.getFclMailingList() != null && generalInfo.getFclMailingList().equalsIgnoreCase("Y")) {
                        customerbean.setFclMail("on");
                    }
                    if (generalInfo.getChristmasCard() != null && generalInfo.getChristmasCard().equalsIgnoreCase("Y")) {
                        customerbean.setChristmas("on");
                    }
                    customerbean.setImportCfs(generalInfo.getImportsCfs());
                    if (generalInfo.getPbaSurchrge() != null && generalInfo.getPbaSurchrge().equalsIgnoreCase("Y")) {
                        customerbean.setPba("on");
                    }
                    if (generalInfo.getEinMaster() != null && generalInfo.getEinMaster().equalsIgnoreCase("Y")) {
                        customerbean.setEinmaster("on");
                    }
                    if (generalInfo.getCommodityMaster() != null && generalInfo.getCommodityMaster().equalsIgnoreCase("Y")) {
                        customerbean.setCommoditymaster("on");
                    }
                    if (generalInfo.getImportMaster() != null && generalInfo.getImportMaster().equalsIgnoreCase("Y")) {
                        customerbean.setImportmaster("on");
                    }
                    if (generalInfo.getInsure() != null && generalInfo.getInsure().equalsIgnoreCase("Y")) {
                        customerbean.setInsure("on");
                    }
                    if (generalInfo.getActive() != null && generalInfo.getActive().equalsIgnoreCase("Y")) {
                        customerbean.setActive("on");
                    }
                    session.setAttribute("customerbean", customerbean);
                    session.setAttribute("mastergeneralInformation", generalInfo);
                }
            }
            List customerList = new ArrayList();
            List assocList = new ArrayList();
            List custAddrList = new ArrayList();


            if (tradingpartner.getVendorset() != null)//-------------FOR VENDOR INFORMATION-------------
            {

                Iterator iter = tradingpartner.getVendorset().iterator();
                while (iter.hasNext()) {
                    Vendor vendorobj = (Vendor) iter.next();
                    if (vendorobj.getWfile() != null && vendorobj.getWfile().equalsIgnoreCase("on")) {
                        customerbean.setWfile("on");
                    }

                    if (vendorobj.getDeactivate() != null && vendorobj.getDeactivate().equalsIgnoreCase("on")) {
                        customerbean.setDeactivate("on");
                    }
                    if (vendorobj.getCredit() != null && vendorobj.getCredit().equalsIgnoreCase("on")) {
                        customerbean.setCredit("on");
                    }
                    session.setAttribute("MasterVendorInfoList", vendorobj);
                }
            }
            if (tradingpartner.getPaymentset() != null)//------------------FOR PAYMENT INFORMATION--------
            {
                List paylist = new ArrayList();
                Iterator iter = tradingpartner.getPaymentset().iterator();
                while (iter.hasNext()) {
                    PaymentMethod payobj = (PaymentMethod) iter.next();
                    paylist.add(payobj);
                    session.setAttribute("paymentList", paylist);
                }
            }
            if (session.getAttribute("customerList") != null) {
                customerList = (List) session.getAttribute("customerList");
            }
            if (tradingpartner.getAssociateCustomer() != null) {
                Iterator iter = tradingpartner.getAssociateCustomer().iterator();
                while (iter.hasNext()) {
                    CustomerAssociation customerAssoc = (CustomerAssociation) iter.next();

                    CustomerTemp c5 = customerDAO.findById1(customerAssoc.getAssocid());
                    assocList.add(c5);


                }
                session.setAttribute("assocList", assocList);
            }

            if (tradingpartner.getAccounting() != null) {
                Iterator iter = tradingpartner.getAccounting().iterator();
                while (iter.hasNext()) {
                    CustomerAccounting accounting = (CustomerAccounting) iter.next();

                    customerbean.setHoldList(accounting.getHoldList());
                    customerbean.setSuspendCredit(accounting.getSuspendCredit());
                    customerbean.setLegal(accounting.getLegal());
                    customerbean.setExtendCredit(accounting.getExtendCredit());
                    if (accounting.getIncludeagent() != null && accounting.getIncludeagent().equalsIgnoreCase("Y")) {
                        customerbean.setIncludeagent("on");
                    }
                    if (accounting.getCreditbalance() != null && accounting.getCreditbalance().equalsIgnoreCase("Y")) {
                        customerbean.setCreditbalance("on");
                    }
                    if (accounting.getCreditinvoice() != null && accounting.getCreditinvoice().equalsIgnoreCase("Y")) {
                        customerbean.setCreditinvoice("on");
                    }
                    session.setAttribute("customerbean", customerbean);
                    session.setAttribute("masteraccounting", accounting);
                }
            }
            if (tradingpartner.getCustomerContact() != null) {
                List custometContact = new ArrayList();
                Iterator iter = tradingpartner.getCustomerContact().iterator();
                while (iter.hasNext()) {
                    CustomerContact custCont = (CustomerContact) iter.next();
                    custometContact.add(custCont);
                    session.setAttribute("addConfig", custometContact);
                }
            }
            if (session.getAttribute("msg") != null) {
                session.removeAttribute("msg");
            }
            session.setAttribute("MasterTradingPartner", tradingpartner);
            forwardName = "editcustomer";
        } else {
            if (buttonValue.equals("add")) {
                if (session.getAttribute("customer") != null) {
                    session.removeAttribute("customer");
                }
                if (session.getAttribute("generalInformation") != null) {
                    session.removeAttribute("generalInformation");
                }
                if (session.getAttribute("accounting") != null) {
                    session.removeAttribute("accounting");
                }
                if (session.getAttribute("addConfig") != null) {
                    session.removeAttribute("addConfig");
                }
                if (session.getAttribute("msg") != null) {
                    session.removeAttribute("msg");
                }
                if (session.getAttribute("MasterVendorInfoList") != null) {
                    session.removeAttribute("MasterVendorInfoList");
                }
                if (session.getAttribute("VMasteraddress") != null) {
                    session.removeAttribute("VMasteraddress");
                }
                customerbean.setIdText("EIN");
                session.setAttribute("customerbean", customerbean);

                forwardName = "addcustomer";
            }


            if (buttonValue.equals("search")) {


                if (accountType1 != null) {
                    accountType = "S,";

                }
                if (accountType2 != null) {
                    accountType = accountType + "F,";


                }
                if (accountType3 != null) {
                    accountType = accountType + "N,";

                }
                if (accountType4 != null) {
                    accountType = accountType + "C,";
                }
                if (accountType5 != null) {
                    accountType = accountType + "SS,";

                }
                if (accountType6 != null) {
                    accountType = accountType + "T,";

                }
                if (accountType7 != null) {
                    accountType = accountType + "A,";

                }
                if (accountType8 != null) {
                    accountType = accountType + "I,";

                }
                if (accountType9 != null) {
                    accountType = accountType + "E,";

                }
                if (accountType10 != null) {
                    accountType = accountType + "V,";

                }
                if (accountType11 != null) {
                    accountType = accountType + "O,";

                }

                if (accountType != null && accountType.length() > 0) {
                    accountType = accountType.substring(0, accountType.length() - 1);
                }
                if (session.getAttribute("msg") != null) {
                    session.removeAttribute("msg");
                }
                customerbean.setAccountNo(account);
                customerbean.setName(name);
                customerbean.setAccountType1(accountType1);
                customerbean.setAccountType2(accountType2);
                customerbean.setAccountType3(accountType3);
                customerbean.setAccountType4(accountType4);
                customerbean.setAccountType5(accountType5);
                customerbean.setMatch(match);
                session.setAttribute("customerbean", customerbean);
                CustomerDAO customerDAO = new CustomerDAO();
                String type = "master";
                if (match.equals("match")) {
                    StringTokenizer st;
                    String st1 = "";
                    st = new StringTokenizer(accountType, ",");
                    while (st.hasMoreTokens()) {
                        st1 = st1 + "%" + st.nextToken();
                    }
                    st1 = st1 + "%";
                    List customerList = customerDAO.findForManagement(account, name, st1, type);
                    session.setAttribute("mastercustomerList", customerList);
                    session.setAttribute("mastercaption", "List of Forwarder/Shipper/Others {Match Only}");
                    if (customerList.size() == 0) //if the name to be searched isnt present in db
                    {
                        session.setAttribute("Notfound", name);
                    }
                } else if (match.equals("starts")) {
                    List customerList = customerDAO.findForManagementaction(account, name, accountType, type);
                    session.setAttribute("mastercustomerList", customerList);
                    session.setAttribute("mastercaption", "List of Forwarder/Shipper/Others {Start List At}");
                }
                forwardName = "searchcustomer";
            }
            if (buttonValue.equals("searchall")) {
                if (session.getAttribute("msg") != null) {
                    session.removeAttribute("msg");
                }
                customerbean.setAccountNo("");
                customerbean.setName("");
                customerbean.setAccountPrefix("");

                session.setAttribute("customerbean", customerbean);
                forwardName = "searchcustomer";
            }

            if (buttonValue != null && buttonValue.equals("popupsearch")) {
                if (name != null && !name.equals("") && !name.equals("%")) {

                    List customerList = customerDAO1.findmasterAccountName(name, "master");
                    if (customerList != null && customerList.size() > 0) {

                        customerTemp = (CustomerTemp) customerList.get(0);
                        customerbean.setAccountNo(customerTemp.getAccountNo());
                        customerbean.setName(customerTemp.getAccountName());
                        session.setAttribute("customerbean", customerbean);
                        session.setAttribute("mastercustomerList", customerList);
                    }
                }

                if (account != null && !account.equals("") && !account.equals("%")) {

                    List customerList = customerDAO1.findmasterAccountNumber(account, "master");
                    if (customerList != null && customerList.size() > 0) {

                        customerTemp = (CustomerTemp) customerList.get(0);
                        customerbean.setAccountNo(customerTemp.getAccountNo());
                        customerbean.setName(customerTemp.getAccountName());
                        session.setAttribute("customerbean", customerbean);
                        session.setAttribute("mastercustomerList", customerList);
                    }
                }

                forwardName = "searchcustomer";
            }


        }


        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}