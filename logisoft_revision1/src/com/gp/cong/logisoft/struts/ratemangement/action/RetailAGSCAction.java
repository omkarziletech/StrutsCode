/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.SimpleDateFormat;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.RetailStandardCharges1;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.RetailAGSCForm;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class RetailAGSCAction extends Action {

	java.util.Date javaDate = null;

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		RetailAGSCForm retailAGSCForm = (RetailAGSCForm) form;// TODO
		HttpSession session = ((HttpServletRequest) request).getSession();
		RetailStandardCharges1 retailStandardCharges = new RetailStandardCharges1();
		String code = retailAGSCForm.getCharge();
		String codeDesc = retailAGSCForm.getDesc();
		String buttonValue = retailAGSCForm.getButtonValue();
		String standard = retailAGSCForm.getStandard();
		String asFreighted = retailAGSCForm.getAsFrfgted();
		String exclude = retailAGSCForm.getExclude();
		GenericCode genericCodeObj = new GenericCode();
		GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
		GenericCode genObj = new GenericCode();
		String type = retailAGSCForm.getChargeType();
		int index = 0;
		String forwardName = null;
		List agssList = new ArrayList();
		if (request.getParameter("ind") != null) {
			RetailStandardCharges1 retailStandard = new RetailStandardCharges1();
			int ind = Integer.parseInt(request.getParameter("ind"));
			List codeList1 = (List) session.getAttribute("retailagssAdd");
			retailStandard = (RetailStandardCharges1) codeList1.get(ind);
			session.setAttribute("retailStandardCharges", retailStandard);
			forwardName = "agssEdit";
		}else {
			if (session.getAttribute("retailStandardCharges") != null) {
				retailStandardCharges = (RetailStandardCharges1) session
						.getAttribute("retailStandardCharges");
			} else {
				retailStandardCharges = new RetailStandardCharges1();
			}
			genericCodeObj = null;
			GenericCodeDAO genericDAO = new GenericCodeDAO();
			List codeList = genericDAO.findGenericCode("36", code);
			if (codeList.size() > 0) {
				genericCodeObj = (GenericCode) codeList.get(0);
			}
			if (genericCodeObj != null) {
				retailStandardCharges.setChargeCode(genericCodeObj);
				session.setAttribute("retailStandardCharges",
						retailStandardCharges);
			}
			
			AirRatesBean airRatesBean = new AirRatesBean();
			airRatesBean.setStandard(retailAGSCForm.getStandard());
			airRatesBean.setAsFrfgted(retailAGSCForm.getAsFrfgted());
			request.setAttribute("airRatesBean", airRatesBean);
			if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
				retailStandardCharges.setAsFrfgted("X");
			} else if (asFreighted == null) {
				retailStandardCharges.setAsFrfgted(null);
			}
			forwardName = "agssAdd";
			if (type != null && !type.equals("0")) {
				genObj = genericCodeDAO.findById(Integer.parseInt(type));
				retailStandardCharges.setChargeType(genObj);
			}
			// --agsslist----- -------------
			if (standard != null && standard.equalsIgnoreCase("on")) {
				retailStandardCharges.setStandard("Y");
			} else if (standard == null) {
				retailStandardCharges.setStandard("N");
			}
			if (exclude != null && exclude.equalsIgnoreCase("on")) {
				retailStandardCharges.setExclude("Y");
			} else if (exclude == null) {
				retailStandardCharges.setExclude("N");
			}
			if (retailAGSCForm.getInsuranceRate() != null
					&& !retailAGSCForm.getInsuranceRate().equals("")) {
				retailStandardCharges.setInsuranceRate(retailAGSCForm
						.getInsuranceRate());
			} else {
				retailStandardCharges.setInsuranceRate(0.0);
			}
			if (retailAGSCForm.getInsuranceAmt() != null
					&& !retailAGSCForm.getInsuranceAmt().equals("")) {
				retailStandardCharges.setInsuranceAmt(retailAGSCForm
						.getInsuranceAmt());
			} else {
				retailStandardCharges.setInsuranceAmt(0.0);
			}
			if (retailAGSCForm.getAmtPerCft() != null
					&& !retailAGSCForm.getAmtPerCft().equals("")) {
				retailStandardCharges.setAmtPerCft(retailAGSCForm
						.getAmtPerCft());
			} else {
				retailStandardCharges.setAmtPerCft(0.0);
			}
			if (retailAGSCForm.getAmtPer100lbs() != null
					&& !retailAGSCForm.getAmtPer100lbs().equals("")) {
				retailStandardCharges.setAmtPer100lbs(retailAGSCForm
						.getAmtPer100lbs());
			} else {
				retailStandardCharges.setAmtPer100lbs(0.0);
			}
			if (retailAGSCForm.getAmtPerCbm() != null
					&& !retailAGSCForm.getAmtPerCbm().equals("")) {
				retailStandardCharges.setAmtPerCbm(retailAGSCForm
						.getAmtPerCbm());
			} else {
				retailStandardCharges.setAmtPerCbm(0.0);
			}
			if (retailAGSCForm.getAmtPer1000kg() != null
					&& !retailAGSCForm.getAmtPer1000kg().equals("")) {
				retailStandardCharges.setAmtPer1000kg(retailAGSCForm
						.getAmtPer1000kg());
			} else {
				retailStandardCharges.setAmtPer1000kg(0.0);
			}
			if (retailAGSCForm.getAmount() != null
					&& !retailAGSCForm.getAmount().equals("")) {
				retailStandardCharges.setAmount(retailAGSCForm.getAmount());
			} else {
				retailStandardCharges.setAmount(0.0);
			}
			if (retailAGSCForm.getPercentage() != null
					&& !retailAGSCForm.getPercentage().equals("")) {
				double d = Double.parseDouble(retailAGSCForm.getPercentage());
				retailStandardCharges.setPercentage(d / 1000);
			} else {
				retailStandardCharges.setPercentage(0.0000);
			}
			User userId = null;
			if (session.getAttribute("loginuser") != null) {
				userId = (User) session.getAttribute("loginuser");
			}
			if (userId != null) {
				retailStandardCharges.setWhoChanged(userId.getLoginName());
			}
			if (retailAGSCForm.getMinAmt() != null
					&& !retailAGSCForm.getMinAmt().equals("")) {
				retailStandardCharges.setMinAmt(retailAGSCForm.getMinAmt());
			} else {
				retailStandardCharges.setMinAmt(0.0);
			}
			if (retailAGSCForm.getTxtItemcreatedon() != null
					&& retailAGSCForm.getTxtItemcreatedon() != "") {
					SimpleDateFormat sdf = new SimpleDateFormat(
							"MM/dd/yyyy hh:mm aaa");
					SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
					javaDate = sdf.parse(retailAGSCForm.getTxtItemcreatedon()+ " " + sdf1.format(new Date()));
				retailStandardCharges.setEffectiveDate(javaDate);
			}
			session.setAttribute("retailStandardCharges",retailStandardCharges);

		}
		if (buttonValue != null && buttonValue.equals("add")) {
			if (session.getAttribute("retailagssAdd") != null) {
				agssList = (List) session.getAttribute("retailagssAdd");
				for (int i = 0; i < agssList.size(); i++) {
					RetailStandardCharges1 retailStandard = (RetailStandardCharges1) agssList.get(i);
					if (retailStandard.getIndex() != null) {
						if (retailStandard.getIndex() > index) {
							index = retailStandard.getIndex();
						}
					} else {
						index = agssList.size() - 1;
					}
				}
				index++;
			}else {
				agssList = new ArrayList();
				index++;
			}
			retailStandardCharges.setIndex(index);
			if (retailStandardCharges.getChargeCode() != null) {
				agssList.add(retailStandardCharges);
			} else {
				String msg = "Please enter the proper Charge Code...";
				request.setAttribute("exist", msg);
			}
			session.setAttribute("retailagssAdd", agssList);

			session.setAttribute("retailStandardCharges",retailStandardCharges);
			forwardName = "agssAdd";
			request.setAttribute("buttonValue", buttonValue);

			if (session.getAttribute("retailStandardCharges") != null) {
				session.removeAttribute("retailStandardCharges");
			}
			if (session.getAttribute("url") != null) {
				session.removeAttribute("url");// -------session of url
			}
			if (session.getAttribute("listofitem") != null) {
				session.removeAttribute("listofitem");
			}
		}
		if (buttonValue != null && buttonValue.equals("coloumnadd")) {
			session.setAttribute("listofitem", "listofitem");
		}
		if (buttonValue != null && buttonValue.equals("chargeCode")){// for DOJO
			boolean flag = true;
			List list = new ArrayList();
			String msg = "Charge Code already exists... ";

			if (session.getAttribute("retailagssAdd") != null) {
				list = (List) session.getAttribute("retailagssAdd");

				for (int i = 0; i < list.size(); i++) {
					retailStandardCharges = (RetailStandardCharges1) list
							.get(i);
					if (retailStandardCharges.getChargeCode().getCode().equals(
							code)) {
						request.setAttribute("exist", msg);
						flag = false;
					}
					if (retailStandardCharges.getChargeCode().getCodedesc()
							.equals(codeDesc)) {
						request.setAttribute("exist", msg);
						flag = false;
					}
				}
			}
			if (request.getAttribute("exist") == null
					&& (code != null || !code.equals(""))) {
				RetailStandardCharges1 retailStandardCharges1 = null;
				if (session.getAttribute("retailStandardCharges") != null) {
					retailStandardCharges1 = (RetailStandardCharges1) session
							.getAttribute("retailStandardCharges");
				} else {
					retailStandardCharges1 = new RetailStandardCharges1();
				}

				genericCodeObj = null;
				GenericCodeDAO genericDAO = new GenericCodeDAO();
				List codeList = genericDAO.findGenericCode("36", code);
				if (codeList.size() > 0) {
					genericCodeObj = (GenericCode) codeList.get(0);
				}
				if (genericCodeObj != null) {
					retailStandardCharges1.setChargeCode(genericCodeObj);
					session.setAttribute("retailStandardCharges",
							retailStandardCharges1);
				}
			}
			if (request.getAttribute("exist") == null
					&& (codeDesc != null || !codeDesc.equals(""))) {
				RetailStandardCharges1 retailStandardCharges1 = null;
				if (session.getAttribute("retailStandardCharges") != null) {
					retailStandardCharges1 = (RetailStandardCharges1) session
							.getAttribute("retailStandardCharges");
				} else {
					retailStandardCharges1 = new RetailStandardCharges1();
				}

				genericCodeObj = null;
				GenericCodeDAO genericDAO = new GenericCodeDAO();
				List codeList = genericDAO.findByCodedesc(codeDesc);
				if (codeList.size() > 0) {
					genericCodeObj = (GenericCode) codeList.get(0);
				}
				if (genericCodeObj != null) {
					retailStandardCharges1.setChargeCode(genericCodeObj);
					session.setAttribute("retailStandardCharges",
							retailStandardCharges1);
				}
			}
		}
		if (buttonValue != null && buttonValue.equals("delete")) {
			if (session.getAttribute("retailagssAdd") != null) {
				agssList = (List) session.getAttribute("retailagssAdd");
			}
			for (int i = 0; i < agssList.size(); i++) {
				RetailStandardCharges1 retailStandard = (RetailStandardCharges1) agssList
						.get(i);
				if (retailStandard.getChargeCode() != null) {
				}
				if (retailStandard.getChargeCode() != null
						&& retailAGSCForm.getRetailAGSCId() != null
						&& retailStandard.getChargeCode().getCode().equals(retailAGSCForm.getRetailAGSCId())) {
					agssList.remove(retailStandard);
				}
				session.setAttribute("retailagssAdd", agssList);
			}
			if (session.getAttribute("retailStandardCharges") != null) {
				session.removeAttribute("retailStandardCharges");
			}
			forwardName = "agssAdd";
		}
		if (session.getAttribute("recommonList") != null) {
			session.setAttribute("recommonList", session
					.getAttribute("retailagssAdd"));
		}
		return mapping.findForward(forwardName);

	}
}