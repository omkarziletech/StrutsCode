/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.LCLColoadMaster;
import com.gp.cong.logisoft.domain.PortsTemp;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.PortsDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;

import org.apache.struts.action.Action;

import java.util.List;
import java.util.ArrayList;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.struts.ratemangement.form.AddLclColoadPopupForm;
import com.gp.cong.logisoft.util.DBUtil;

public class AddLclColoadPopupAction extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		AddLclColoadPopupForm addLclColoadPopupForm = (AddLclColoadPopupForm) form;// TODO
																					// Auto-generated
																					// method
																					// stub
		String buttonValue = addLclColoadPopupForm.getButtonValue();
		HttpSession session = ((HttpServletRequest) request).getSession();
		LCLColoadMaster lCLColoadMaster = new LCLColoadMaster();
		DBUtil dbutil = new DBUtil();
		List list = new ArrayList();
		String common = addLclColoadPopupForm.getCommon();
		RefTerminalDAO refTerminalDAO = new RefTerminalDAO();
		RefTerminalTemp refTerminal1 = null;
		PortsTemp destObj = null;
		PortsDAO portsDAO = new PortsDAO();
		String trmNum = addLclColoadPopupForm.getTerminalNumber();
		String portName = addLclColoadPopupForm.getDestAirportname();
		String portNum = addLclColoadPopupForm.getDestSheduleNumber();
		String tername = addLclColoadPopupForm.getTerminalName();
		String comCodedesc = addLclColoadPopupForm.getComDescription();
		String comCode = addLclColoadPopupForm.getComCode();
		AirRatesBean airRatesBean = new AirRatesBean();
		GenericCode gen1 = null;
		String FORWARD = null;
		LCLColoadMaster re = null;
		String defaultRate = "";
		airRatesBean.setCommon(common);
		request.setAttribute("airRatesBean", airRatesBean);
		GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
		UnLocationDAO unLocationDAO = new UnLocationDAO();
		UnLocation unLocation = new UnLocation();
		String enable = "";
		if (session.getAttribute("addlclColoadMaster") != null) {
			lCLColoadMaster = (LCLColoadMaster) session
					.getAttribute("addlclColoadMaster");
		}
		if (buttonValue != null && buttonValue.equals("search")) {
			
			if (trmNum != null && !trmNum.equals("")) {
				List unLocationList = unLocationDAO.findForManagement(trmNum,tername);
				if (unLocationList != null && unLocationList.size()>0) {
					unLocation=(UnLocation)unLocationList.get(0);
					lCLColoadMaster.setOriginTerminal(unLocation.getUnLocationCode());
					lCLColoadMaster.setOriginTerminalName(unLocation.getUnLocationName());
				}
			}

			if (portNum != null && !portNum.equals("")) {
				List portsList = unLocationDAO.findForManagement(portNum, null);
				if (portsList != null && portsList.size() > 0) {
					unLocation = (UnLocation) portsList.get(0);
					lCLColoadMaster.setDestinationPort(unLocation.getUnLocationCode());
					lCLColoadMaster.setDestinationPortName(unLocation.getUnLocationName());
				}
			}
			if (comCode != null && !comCode.equals("")) {
				List comList = genericCodeDAO.findForGenericCode(comCode);
				if (comList != null && comList.size() > 0) {
					GenericCode gen = (GenericCode) comList.get(0);
					lCLColoadMaster.setCommodityCode(gen.getCode());
					lCLColoadMaster.setCommodityCodeName(gen.getCodedesc());
					if (gen.getCode().equals("000000")) {
						session.setAttribute("setLCLColoadTabEnable", "enable");
					} else {
						session.removeAttribute("setLCLColoadTabEnable");
					}
				}
			}
			session.setAttribute("addlclColoadMaster", lCLColoadMaster);
			if (session.getAttribute("searchlclColoadMaster") != null) {

				re = (LCLColoadMaster) session
						.getAttribute("searchlclColoadMaster");
			}
			/*if (re.getDestinationPort() != null
					&& re.getDestinationPort().getId() != null) {
				Ports ports = portDAO.findById(re.getDestinationPort().getId());
				if (ports.getLclPortConfigSet() != null) {
					Iterator iter = ports.getLclPortConfigSet().iterator();
					while (iter.hasNext()) {
						LCLPortConfiguration lcl = (LCLPortConfiguration) iter.next();
						if (lcl.getDefaultRate() != null) {
							defaultRate = lcl.getDefaultRate();
							session.setAttribute("lcldefaultRate", defaultRate);
							break;
						}
					}
				}
			}*/
			request.setAttribute("lclcoloadrate", "addlclcoloadrate");
			session.setAttribute("editrecord", "save");
			if (request.getAttribute("update") == null) {
				list = dbutil.getCoLoadDetails(lCLColoadMaster
						.getOriginTerminal(), lCLColoadMaster
						.getDestinationPort(), lCLColoadMaster
						.getCommodityCode());
				if (list != null && list.size() > 0) {
					request.setAttribute("update",	"This Combination is already exist");
					FORWARD = "addlclcoloadpopup";
				} else{
					FORWARD = "popupForwardPage";
				}
				if (session.getAttribute("view") != null) {
					session.removeAttribute("view");
				}
				if (session.getAttribute("lclairRatesBean") != null) {
					session.removeAttribute("lclairRatesBean");
				}
				if (session.getAttribute("lcldocChargesAdd") != null) {
					session.removeAttribute("lcldocChargesAdd");
				}
				if (session.getAttribute("lclcoloaddetails") != null) {
					session.removeAttribute("lclcoloaddetails");
				}
				if (session.getAttribute("coStandardCharges") != null) {
					session.removeAttribute("coStandardCharges");
				}
				if (session.getAttribute("cssList") != null) {
					session.removeAttribute("cssList");
				}
				if (session.getAttribute("applylclcoloadcharges") != null) {
					session.removeAttribute("applylclcoloadcharges");
				}
				if (session.getAttribute("includedList") != null) {
					session.removeAttribute("includedList");
				}
				if (session.getAttribute("coStandardCharges") != null) {
					session.removeAttribute("coStandardCharges");
				}
				if (session.getAttribute("message") != null) {
					session.removeAttribute("message");
				}
				if (session.getAttribute("includedList") != null) {
					session.removeAttribute("includedList");
				}
				if (session.getAttribute("addlclcoloadcommodity") != null) {
					session.removeAttribute("addlclcoloadcommodity");
				}
				if (session.getAttribute("lclcoloadcssList") != null) {
					session.removeAttribute("lclcoloadcssList");
				}
				if (session.getAttribute("coagssAdd") != null) {
					session.removeAttribute("coagssAdd");
				}
				session.setAttribute("lclcoloadrate", "save");
			}
			
		}
		
		return mapping.findForward(FORWARD);
	}
}