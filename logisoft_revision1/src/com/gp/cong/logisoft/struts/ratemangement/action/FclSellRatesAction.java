/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import com.gp.cong.logisoft.bc.ratemanagement.FclSellRatesBC;
import com.gp.cong.logisoft.domain.FclBuy;
import com.gp.cong.logisoft.domain.FclConsolidator;
import com.gp.cong.logisoft.domain.FclOrgDestMiscData;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.TradingPartnerTemp;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.struts.ratemangement.form.SearchFCLForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-19-2008
 * 
 * XDoclet definition:
 * @struts.action input="/jsps/ratemanagement/FclSellRates.jsp" validate="true"
 */
public class FclSellRatesAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        // TODO Auto-generated method stub
        SearchFCLForm searchFCLForm = (SearchFCLForm) form;// TODO
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = searchFCLForm.getButtonValue();
        String hiddenOriginalTerminal = searchFCLForm.getTerminalNumber();
        String hiddenSsline = searchFCLForm.getSslinenumber();
        String hiddenDestinationTerminal = searchFCLForm.getDestSheduleNumber();
        String orgRegion = searchFCLForm.getOrgRegion();
        String terminalNumber = searchFCLForm.getTerminalNumber();
        String destSheduleNumber = searchFCLForm.getDestSheduleNumber();
        String comCode = searchFCLForm.getComCode();
        String sslinenumber = searchFCLForm.getSslinenumber();
        String destRegion = searchFCLForm.getDestRegion();
        String terminalName = searchFCLForm.getTerminalName();
        String destAirportname = searchFCLForm.getDestAirportname();
        String comDescription = searchFCLForm.getComDescription();
        String sslinename = searchFCLForm.getSslinename();
        String unitType[] = searchFCLForm.getUnitType();
        Integer transitTime = searchFCLForm.getDaysInTransit();
        String localDrayage = searchFCLForm.getLocaldryage();
        FclConsolidator setfclConsolidator = new FclConsolidator();
        String remarks = searchFCLForm.getRemarks();
        MessageResources messageResources = getResources(request);
        List fclConsolidatorList = null;
        if (unitType == null) {
            unitType = new String[10];
            unitType[0] = "0";
        }
        FclSellRatesBC fclSellRatesBC = new FclSellRatesBC();
        FclBuy fclBuy = null;
        FclOrgDestMiscData fclOrgDestMiscData = new FclOrgDestMiscData();
        String forwardName = null;
        request.setAttribute("unittypelist", fclSellRatesBC.getUnitTypes());

        if (buttonValue == null || buttonValue.equals("")) {
            if (session.getAttribute("fclconsolidator") != null) {
                fclConsolidatorList = (List) session.getAttribute("fclconsolidator");
            } else {
                fclConsolidatorList = fclSellRatesBC.getConsolidatorList(messageResources);
                session.setAttribute("fclconsolidator", fclConsolidatorList);
            }
            if (request.getParameter("button") != null && request.getParameter("button").equals("remarkspage")) {

                request.setAttribute("originalTerminal", request.getParameter("originalTerminal"));
                request.setAttribute("destinationPort", request.getParameter("destinationPort"));
                request.setAttribute("ssline", request.getParameter("ssline"));
                UnLocation unLocation = fclSellRatesBC.getUncodeDesc(request.getParameter("originalTerminal"), null);
                UnLocation unLocation1 = fclSellRatesBC.getUncodeDesc(request.getParameter("destinationPort"), null);
                TradingPartnerTemp tradingPartnerTemp = fclSellRatesBC.getSSLine(request.getParameter("ssline"));
                List orgdestmiscdatelist = fclSellRatesBC.getorgdestmiscdate(unLocation, unLocation1, tradingPartnerTemp);
                if (orgdestmiscdatelist != null & orgdestmiscdatelist.size() > 0) {
                    FclOrgDestMiscData fclOrgDestData = (FclOrgDestMiscData) orgdestmiscdatelist.get(0);
                    request.setAttribute("fclOrgDestData", fclOrgDestData);
                } else {
                    UnLocation unLocation3 = fclSellRatesBC.getUncodeDesc(hiddenOriginalTerminal, null);
                    fclOrgDestMiscData.setOriginalTerminal(unLocation3);
                    unLocation3 = fclSellRatesBC.getUncodeDesc(hiddenDestinationTerminal, null);
                    fclOrgDestMiscData.setDestinationPort(unLocation3);
                }
                return mapping.findForward("fclorgdest");
            }

        } else {
            if (request.getAttribute("fclSellRatesDojo") != null) {
                fclBuy = (FclBuy) request.getAttribute("fclSellRatesDojo");
            } else {
                fclBuy = new FclBuy();

            }
            fclBuy.setOriginalRegion(orgRegion);
            fclBuy.setDestinationRegion(destRegion);

            if (buttonValue != null && buttonValue.equals("dojosearch") || buttonValue.equals("search")) {
                if (terminalNumber != null && !terminalNumber.equals("null") && !terminalNumber.equals("")) {
                    UnLocation unLocation = fclSellRatesBC.getUncodeDesc(terminalNumber, null);
                    fclBuy.setOriginTerminal(unLocation);
                }

                if (destSheduleNumber != null && !destSheduleNumber.equals("null") && !destSheduleNumber.equals("")) {
                    UnLocation unLocation = fclSellRatesBC.getUncodeDesc(destSheduleNumber, null);
                    fclBuy.setDestinationPort(unLocation);
                }
                if (terminalName != null && !terminalName.equals("null") && !terminalName.equals("")) {
                    String trmNum = "";
                    String stringTokens[] = StringUtils.splitPreserveAllTokens(terminalName, '-');
                    if (stringTokens != null && stringTokens.length > 1) {
                        terminalName = stringTokens[0];
                        trmNum = stringTokens[1];
                    }
                    UnLocation unLocation = fclSellRatesBC.getUncodeDesc(trmNum, terminalName);
                    fclBuy.setOriginTerminal(unLocation);
                }
                if (destAirportname != null && !destAirportname.equals("null") && !destAirportname.equals("")) {
                    String portNum = "";
                    String stringTokens[] = StringUtils.splitPreserveAllTokens(destAirportname, '-');
                    if (stringTokens != null && stringTokens.length > 1) {
                        destAirportname = stringTokens[0];
                        portNum = stringTokens[1];
                    }
                    UnLocation unLocation = fclSellRatesBC.getUncodeDesc(portNum, destAirportname);
                    fclBuy.setDestinationPort(unLocation);
                }
                if (comCode != null && !comCode.equals("null") && !comCode.equals("")) {
                    GenericCode genericCode = fclSellRatesBC.getCommodityCode(comCode);
                    fclBuy.setComNum(genericCode);

                }
                if (comDescription != null && !comDescription.equals("null") && !comDescription.equals("")) {
                    GenericCode genericCode = fclSellRatesBC.getCommodityCodeDescription(null, comDescription);
                    fclBuy.setComNum(genericCode);
                }
                if (sslinenumber != null && !sslinenumber.equals("null") && !sslinenumber.equals("")) {
                    TradingPartnerTemp carriersOrLineTemp = fclSellRatesBC.getSslineNumber(sslinenumber);
                    fclBuy.setSslineNo(carriersOrLineTemp);
                }
                if (sslinename != null && !sslinename.equals("null") && !sslinename.equals("")) {
                    TradingPartnerTemp carriersOrLineTemp = fclSellRatesBC.getSslineName(null, sslinename);
                    fclBuy.setSslineNo(carriersOrLineTemp);

                }
                request.setAttribute("fclSellRatesDojo", fclBuy);
            }
            if (buttonValue != null && buttonValue.equals("search")) {
                List fclSellRatesList = new ArrayList();
                if (session.getAttribute("fclconsolidator") != null) {
                    List consolidatorList = (List) session.getAttribute("fclconsolidator");
                    fclSellRatesList = fclSellRatesBC.displayRecordsForConsolidator(orgRegion, destRegion, terminalNumber, destSheduleNumber, comCode, sslinenumber, unitType, consolidatorList);

                    setfclConsolidator.setFclConsolidatorList(null);
                } else {
                    fclSellRatesList = fclSellRatesBC.displayRecords(orgRegion, destRegion, terminalNumber, destSheduleNumber, comCode, sslinenumber, unitType);
                }
                request.setAttribute("displayList", fclSellRatesList);
                session.setAttribute("pageCollapse", "pageCollapse");
            }
            if (buttonValue != null && buttonValue.equals("clear")) {
                if (session.getAttribute("pageCollapse") != null) {
                    session.removeAttribute("pageCollapse");
                }
            }
            if (buttonValue != null && buttonValue.equals("saveForRemarksPage")) {
                request.setAttribute("closeRemarksPage", "closeRemarksPage");

                UnLocation unLocation = fclSellRatesBC.getUncodeDesc(hiddenOriginalTerminal, null);
                UnLocation unLocation1 = fclSellRatesBC.getUncodeDesc(hiddenDestinationTerminal, null);
                TradingPartnerTemp tradingPartnerTemp = fclSellRatesBC.getSSLine(hiddenSsline);
                List orgdestmiscdatelist = fclSellRatesBC.getorgdestmiscdate(unLocation, unLocation1, tradingPartnerTemp);
                if (orgdestmiscdatelist != null & orgdestmiscdatelist.size() > 0) {
                    FclOrgDestMiscData fclOrgDestData = (FclOrgDestMiscData) orgdestmiscdatelist.get(0);
                    fclOrgDestData.setDaysInTransit(transitTime);
                    fclOrgDestData.setLocalDrayage(localDrayage);
                    fclOrgDestData.setRemarks(remarks);
                    fclSellRatesBC.save(fclOrgDestData);
                } else {
                    FclOrgDestMiscData fclOrgDestData = new FclOrgDestMiscData();
                    UnLocation unLocation3 = fclSellRatesBC.getUncodeDesc(hiddenOriginalTerminal, null);
                    fclOrgDestData.setOriginalTerminal(unLocation3);
                    unLocation3 = fclSellRatesBC.getUncodeDesc(hiddenDestinationTerminal, null);
                    fclOrgDestData.setDestinationPort(unLocation3);
                    fclOrgDestData.setLocalDrayage(localDrayage);
                    fclOrgDestData.setDaysInTransit(transitTime);
                    fclOrgDestData.setSslineNo(tradingPartnerTemp);
                    fclOrgDestData.setRemarks(remarks);
                    fclSellRatesBC.save(fclOrgDestData);

                }

            }

        }
        return mapping.findForward("fclSellRatesjsp");
    }
}