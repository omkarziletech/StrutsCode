/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.LCLColoadCommodityCharges;
import com.gp.cong.logisoft.domain.AirStandardCharges;
import com.gp.cong.logisoft.domain.LCLColoadMaster;
import com.gp.cong.logisoft.domain.LCLColoadStandardCharges;
import com.gp.cong.logisoft.struts.ratemangement.form.ApplyGeneralStandardChargesForm;
import com.gp.cong.logisoft.struts.ratemangement.form.ApplyLclCoChargesForm;

/** 
 * MyEclipse Struts
 * Creation date: 06-10-2008
 * 
 * XDoclet definition:
 * @struts.action path="/applyLclCoCharges" name="applyLclCoChargesForm" input="jsps/ratemanagement/applyLclCoCharges.jsp" scope="request" validate="true"
 */
public class ApplyLclCoChargesAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApplyLclCoChargesForm applyGeneralStandardChargesForm = (ApplyLclCoChargesForm) form;// TODO Auto-generated method stub
		HttpSession session = ((HttpServletRequest)request).getSession();
		String buttonValue=applyGeneralStandardChargesForm.getButtonValue();
		String index=applyGeneralStandardChargesForm.getIndex();
		String forwardName="";
		List applylclcoList=new ArrayList();
		LCLColoadStandardCharges lCLColoadStandardCharges=new LCLColoadStandardCharges();
		List includedList=new ArrayList();
		List csssList=new ArrayList();
		boolean flag=false;
		
			if(request.getParameter("ind")!=null )
		{
			
			int ind = Integer.parseInt(request.getParameter("ind"));
			applylclcoList=(List)session.getAttribute("applylclcoloadcharges");
			lCLColoadStandardCharges=(LCLColoadStandardCharges)applylclcoList.get(ind);
			if(session.getAttribute("lclcoloadcssList")!=null)
			{
				
				csssList=(List)session.getAttribute("lclcoloadcssList");
			}
			if(session.getAttribute("lclcolaodincludedList")==null)
			   {
				 includedList=new ArrayList();
			   }
			   else
			   {
				   includedList=(List)session.getAttribute("lclcolaodincludedList");
			   }
			if(csssList != null)
			{
				
				
				for(int i=0;i<csssList.size();i++)
				{
					LCLColoadCommodityCharges lCLColoadCommodityCharges=(LCLColoadCommodityCharges)csssList.get(i);
					if(lCLColoadCommodityCharges.getChargeCode().getCode().equals(lCLColoadStandardCharges.getChargeCode().getCode()) &&
							lCLColoadCommodityCharges.getChargeType().getId().equals(lCLColoadStandardCharges.getChargeType().getId()))		
					{
						flag=true;
						session.setAttribute("getrecord",lCLColoadStandardCharges);
						
						includedList.remove(lCLColoadStandardCharges);
						break;
							
					}
				}
				
				if(flag){
					request.setAttribute("message", "This charge code is already exist");
					}
				
				else{includedList.add(lCLColoadStandardCharges);
				applylclcoList.remove(lCLColoadStandardCharges);
				
				session.setAttribute("lclcolaodincludedList",includedList);	}
			}//if
			else
			{
				
				includedList.add(lCLColoadStandardCharges);
				applylclcoList.remove(lCLColoadStandardCharges);
			
			session.setAttribute("lclcolaodincludedList",includedList);	
					
			}
			
		}
		else
		{
			if(buttonValue.equals("accept")){
				
				if(session.getAttribute("getrecord")!=null){
				
					lCLColoadStandardCharges=(LCLColoadStandardCharges)session.getAttribute("getrecord");
					if(session.getAttribute("lclcolaodincludedList")==null)
					   {
						 includedList=new ArrayList();
					   }
					   else
					   {
						   includedList=(List)session.getAttribute("lclcolaodincludedList");
					   }
					includedList.add(lCLColoadStandardCharges);
					applylclcoList=(List)session.getAttribute("applylclcoloadcharges");
					if(csssList != null)
					{
						csssList = (List) session.getAttribute("lclcoloadcssList");
						for(int i=0;i<csssList.size();i++)
						{
							LCLColoadCommodityCharges lCLColoadCommodityCharges=(LCLColoadCommodityCharges)csssList.get(i);
							if(lCLColoadCommodityCharges.getChargeCode().getId().equals(lCLColoadStandardCharges.getChargeCode().getId()))
							{
							csssList.remove(lCLColoadCommodityCharges);
							break;
							}
						}
					}
						
					applylclcoList.remove(lCLColoadStandardCharges);
					session.setAttribute("includedList",includedList);	
			}
			}
			if(buttonValue.equals("delete"))
			{
				 if(session.getAttribute("lclcolaodincludedList")==null)
				   {
					 includedList=new ArrayList();
				   }
				   else
				   {
					   includedList=(List)session.getAttribute("lclcolaodincludedList");
				   }
				   applylclcoList=(List)session.getAttribute("applylclcoloadcharges");
				   LCLColoadStandardCharges ChargestoRemove=(LCLColoadStandardCharges)includedList.get(Integer.parseInt(index));
					includedList.remove(ChargestoRemove);
					applylclcoList.add(ChargestoRemove);
					List cssList=new ArrayList();
					if(session.getAttribute("lclcoloadcssList")!=null)
					{
						cssList=(List)session.getAttribute("lclcoloadcssList");
						for(int i=0;i<cssList.size();i++)
						{
							LCLColoadCommodityCharges lclCom=(LCLColoadCommodityCharges)cssList.get(i);
							if(lclCom.getFlag()!=null && lclCom.getFlag().equals("Y"))
							{
								if(lclCom.getChargeCode().getId().equals(ChargestoRemove.getChargeCode().getId()) && 
										lclCom.getChargeType().getId().equals(ChargestoRemove.getChargeType().getId()))
								{
									cssList.remove(lclCom);
									break;
								}
							}
						}
					}
					session.setAttribute("lclcolaodincludedList", includedList);
			}
			else if(buttonValue.equals("cancel"))
			{
				List includedList1=new ArrayList();
				List cssList=new ArrayList();
				if(session.getAttribute("lclcoloadcssList")!=null)
				{
					cssList=(List)session.getAttribute("lclcoloadcssList");
				}
				boolean flag1=false;
				if(session.getAttribute("lclcolaodincludedList")!=null)
				{
					includedList1=(List)session.getAttribute("lclcolaodincludedList");
					for(int i=0;i<includedList1.size();i++)
					{
						LCLColoadStandardCharges coStd=(LCLColoadStandardCharges)includedList1.get(i);
						
						if(cssList!=null && cssList.size()>0)
						{
						for(int j=0;j<cssList.size();j++)
						{
							LCLColoadCommodityCharges lclco=(LCLColoadCommodityCharges)cssList.get(j);
							
							if(coStd.getChargeCode().getId().equals(lclco.getChargeCode().getId()) && coStd.getChargeType().getId().equals(lclco.getChargeType().getId()))
							{
								flag1=true;
								break;
							}
							else
							{
								flag1=false;
							}
						}
						if(!flag1)
						{
							LCLColoadCommodityCharges lclcoCom=new LCLColoadCommodityCharges();
							lclcoCom.setChargeCode(coStd.getChargeCode());
							lclcoCom.setChargeType(coStd.getChargeType());
							lclcoCom.setStandard(coStd.getStandard());
							lclcoCom.setAmount(coStd.getAmount());
							lclcoCom.setAmtPer1000kg(coStd.getAmtPer1000Kg());
							lclcoCom.setAmtPer100lbs(coStd.getAmtPer100lbs());
							lclcoCom.setAmtPerCbm(coStd.getAmtPerCbm());
							lclcoCom.setAmtPerCft(coStd.getAmtPerCft());
							lclcoCom.setAsFrfgted(coStd.getAsFrfgted());
							lclcoCom.setChangedDate(coStd.getChangedDate());
							lclcoCom.setEffectiveDate(coStd.getEffectiveDate());
							lclcoCom.setInsuranceAmt(coStd.getInsuranceAmt());
							lclcoCom.setInsuranceRate(coStd.getInsuranceRate());
							lclcoCom.setMinAmt(coStd.getMinAmt());
							lclcoCom.setPercentage(coStd.getPercentage());
							lclcoCom.setWhoChanged(coStd.getWhoChanged());
							lclcoCom.setFlag("Y");
							cssList.add(lclcoCom);
						}
					}
					else
					{
						LCLColoadCommodityCharges lclcoCom=new LCLColoadCommodityCharges();
						lclcoCom.setChargeCode(coStd.getChargeCode());
						lclcoCom.setChargeType(coStd.getChargeType());
						lclcoCom.setStandard(coStd.getStandard());
						lclcoCom.setAmount(coStd.getAmount());
						lclcoCom.setAmtPer1000kg(coStd.getAmtPer1000Kg());
						lclcoCom.setAmtPer100lbs(coStd.getAmtPer100lbs());
						lclcoCom.setAmtPerCbm(coStd.getAmtPerCbm());
						lclcoCom.setAmtPerCft(coStd.getAmtPerCft());
						lclcoCom.setAsFrfgted(coStd.getAsFrfgted());
						lclcoCom.setChangedDate(coStd.getChangedDate());
						lclcoCom.setEffectiveDate(coStd.getEffectiveDate());
						lclcoCom.setInsuranceAmt(coStd.getInsuranceAmt());
						lclcoCom.setInsuranceRate(coStd.getInsuranceRate());
						lclcoCom.setMinAmt(coStd.getMinAmt());
						lclcoCom.setPercentage(coStd.getPercentage());
						lclcoCom.setWhoChanged(coStd.getWhoChanged());
						lclcoCom.setFlag("Y");
						cssList.add(lclcoCom);
						}
						
					}
				}
				session.setAttribute("lclcoloadcssList",cssList);
				String option="";
				if(session.getAttribute("option")!=null)
				{
					option=(String)session.getAttribute("option");
				}
				if(option.equals("addcomcode"))
				{
				request.setAttribute("cancel", "cancel");
				}
				else if(option.equals("edit"))
				{
					request.setAttribute("cancel", "editcancel");
				}
				
				
				
			}
		}
		
		return mapping.findForward("applyGeneralStandardCharges");
	}
}