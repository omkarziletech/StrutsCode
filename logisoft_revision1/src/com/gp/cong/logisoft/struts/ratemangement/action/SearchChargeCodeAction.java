/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.List;
import java.util.ArrayList;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.UniverseCommodityChrg;
import com.gp.cong.logisoft.domain.AirCommodityCharges;
import com.gp.cong.logisoft.domain.AirStandardCharges;
import com.gp.cong.logisoft.domain.FTFCommodityCharges;
import com.gp.cong.logisoft.domain.FTFDocumentCharges;
import com.gp.cong.logisoft.domain.FTFStandardCharges;
import com.gp.cong.logisoft.domain.LCLColoadDocumentCharges;
import com.gp.cong.logisoft.domain.AirFreightDocumentCharges;
import com.gp.cong.logisoft.domain.LCLColoadStandardCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.ImportPortConfiguration;
import com.gp.cong.logisoft.domain.LCLColoadCommodityCharges;
import com.gp.cong.logisoft.domain.RefTerminal;
import com.gp.cong.logisoft.domain.RetailCommodityCharges;
import com.gp.cong.logisoft.domain.RetailFreightDocumentCharges;
import com.gp.cong.logisoft.domain.RetailStandardCharges1;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.SearchChargeCodeForm;
import com.gp.cvst.logisoft.domain.Payments;

/** 
 * MyEclipse Struts
 * Creation date: 03-19-2008
 * 
 * XDoclet definition:
 * @struts.action path="/searchChargeCode" name="searchChargeCodeForm" input="/jsps/ratemanagement/searchChargeCode.jsp" scope="request" validate="true"
 */
public class SearchChargeCodeAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        SearchChargeCodeForm searchChargeCodeForm = (SearchChargeCodeForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = searchChargeCodeForm.getButtonValue();
        String code = searchChargeCodeForm.getChargeCode();
        String codeDesc = searchChargeCodeForm.getCodeDescription();
        GenericCodeDAO genericDAO = new GenericCodeDAO();
        GenericCode genericCodeObj = new GenericCode();
        String search = "";
        String path1 = "";
        String chargeCode = null;
        List docList = new ArrayList();
        List agssAdd = new ArrayList();
        if (session.getAttribute("searchCode") != null) {
            search = (String) session.getAttribute("searchCode");
        }
        if (request.getParameter("index") != null) {
            int ind = Integer.parseInt(request.getParameter("index"));
            List codeList1 = (List) session.getAttribute("chargeCodeCodeList");



            if (search.equals("agss")) {
                if (session.getAttribute("agssAdd") != null) {
                    agssAdd = (List) session.getAttribute("agssAdd");
                }
                genericCodeObj = new GenericCode();
                genericCodeObj = (GenericCode) codeList1.get(ind);

                AirStandardCharges airStandardCharges = new AirStandardCharges();
                if (session.getAttribute("airStandardCharges") == null) {
                    airStandardCharges = new AirStandardCharges();
                } else {
                    airStandardCharges = (AirStandardCharges) session.getAttribute("airStandardCharges");
                }

                session.setAttribute("airStandardCharges", airStandardCharges);
                boolean flag = false;
                if (agssAdd != null && agssAdd.size() > 0) {
                    for (int i = 0; i < agssAdd.size(); i++) {
                        AirStandardCharges airDoc = (AirStandardCharges) agssAdd.get(i);
                        if (airDoc.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {

                    airStandardCharges.setChargeCode(genericCodeObj);
                }

                if (search.equals("agss")) {
                    path1 = "jsps/ratemanagement/aGSS.jsp";
                }

            }
            //LCL DO LOAD STANDARAD CHARGES COM CODE
            if (search.equals("coagss")) {
                genericCodeObj = new GenericCode();
                List cssList = new ArrayList();
                genericCodeObj = (GenericCode) codeList1.get(ind);
                LCLColoadStandardCharges lCLColoadStandardCharges = new LCLColoadStandardCharges();
                if (session.getAttribute("lclcoloadcssList") != null) {
                    cssList = (List) session.getAttribute("lclcoloadcssList");
                }
                if (session.getAttribute("coStandardCharges") == null) {
                    lCLColoadStandardCharges = new LCLColoadStandardCharges();
                } else {
                    lCLColoadStandardCharges = (LCLColoadStandardCharges) session.getAttribute("coStandardCharges");
                }

                boolean flag = false;
                if (cssList != null && cssList.size() > 0) {
                    for (int i = 0; i < cssList.size(); i++) {
                        LCLColoadStandardCharges airComm = (LCLColoadStandardCharges) cssList.get(i);
                        if (airComm.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {
                    request.setAttribute("message", "This ChargeCode is already added");
                } else {
                    lCLColoadStandardCharges.setChargeCode(genericCodeObj);
                }
                session.setAttribute("airCommodityCharges", lCLColoadStandardCharges);
                path1 = "jsps/ratemanagement/coAgss.jsp";

            }
            //for Account Receivables Apply Payments


            //for FTF Standard Charges
            if (search.equals("ftfagss")) {
                genericCodeObj = new GenericCode();
                List cssList = new ArrayList();
                genericCodeObj = (GenericCode) codeList1.get(ind);
                FTFStandardCharges ftfStandardCharges = new FTFStandardCharges();
                if (session.getAttribute("ftfcssList") != null) {
                    cssList = (List) session.getAttribute("ftfcssList");
                }
                if (session.getAttribute("ftfStandardCharges") == null) {
                    ftfStandardCharges = new FTFStandardCharges();
                } else {
                    ftfStandardCharges = (FTFStandardCharges) session.getAttribute("ftfStandardCharges");
                }

                boolean flag = false;
                if (cssList != null && cssList.size() > 0) {
                    for (int i = 0; i < cssList.size(); i++) {
                        FTFStandardCharges ftfComm = (FTFStandardCharges) cssList.get(i);
                        if (ftfComm.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {
                    request.setAttribute("message", "This ChargeCode is already added");
                } else {
                    ftfStandardCharges.setChargeCode(genericCodeObj);
                }
                session.setAttribute("ftfCommodityCharges", ftfStandardCharges);
                path1 = "jsps/ratemanagement/agscFTF.jsp";

            }




            if (search.equals("retailsearchchargecode") || search.equals("editGSS")) {
                genericCodeObj = new GenericCode();
                RetailStandardCharges1 retailStandardCharges = new RetailStandardCharges1();
                if (session.getAttribute("retailStandardCharges") == null) {
                    retailStandardCharges = new RetailStandardCharges1();
                } else {
                    retailStandardCharges = (RetailStandardCharges1) session.getAttribute("retailStandardCharges");
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                retailStandardCharges.setChargeCode(genericCodeObj);
                session.setAttribute("retailStandardCharges", retailStandardCharges);
                if (session.getAttribute("retailagssAdd") != null) {
                    docList = (List) session.getAttribute("retailagssAdd");
                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        RetailStandardCharges1 docCharges1 = (RetailStandardCharges1) docList.get(i);
                        if (docCharges1.getChargeCode() != null && docCharges1.getChargeCode().getId() != null && docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    retailStandardCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("retailStandardCharges", retailStandardCharges);

                }

                if (search.equals("retailsearchchargecode")) {
                    path1 = "jsps/ratemanagement/retailAGSC.jsp";
                } else if (search.equals("editGSS")) {
                    path1 = "jsps/ratemanagement/aGSSEdit.jsp";
                }
            } else if (search.equals("searchchargecodecss") || search.equals("editchargecodecss")) {
                List cssList = new ArrayList();
                if (session.getAttribute("cssList") != null) {
                    cssList = (List) session.getAttribute("cssList");
                }
                genericCodeObj = new GenericCode();
                AirCommodityCharges airCommodityCharges = new AirCommodityCharges();
                if (session.getAttribute("airCommodityCharges") == null) {
                    airCommodityCharges = new AirCommodityCharges();
                } else {
                    airCommodityCharges = (AirCommodityCharges) session.getAttribute("airCommodityCharges");
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                boolean flag = false;
                if (cssList != null && cssList.size() > 0) {
                    for (int i = 0; i < cssList.size(); i++) {
                        AirCommodityCharges airComm = (AirCommodityCharges) cssList.get(i);
                        if (airComm.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {
                    request.setAttribute("message", "This ChargeCode is already added");
                } else {
                    airCommodityCharges.setChargeCode(genericCodeObj);
                }
                session.setAttribute("airCommodityCharges", airCommodityCharges);
                if (search.equals("searchchargecodecss")) {
                    path1 = "jsps/ratemanagement/cSSS.jsp";
                }
                if (search.equals("editchargecodecss")) {
                    path1 = "jsps/ratemanagement/EditCSSS.jsp";
                }
            } //SEARCH CHARGE CODE FOR UNIVERSAL CHARGE CODE
            else if (search.equals("searchchargecodeunicss")) {
                List cssList = new ArrayList();
                if (session.getAttribute("unicssList") != null) {
                    cssList = (List) session.getAttribute("unicssList");
                }
                genericCodeObj = new GenericCode();
                UniverseCommodityChrg uniCommodityChrg = new UniverseCommodityChrg();
                if (session.getAttribute("uniCommodityCharges") == null) {
                    uniCommodityChrg = new UniverseCommodityChrg();
                } else {
                    uniCommodityChrg = (UniverseCommodityChrg) session.getAttribute("uniCommodityCharges");
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                boolean flag = false;
                if (cssList != null && cssList.size() > 0) {
                    for (int i = 0; i < cssList.size(); i++) {
                        UniverseCommodityChrg airComm = (UniverseCommodityChrg) cssList.get(i);
                        if (airComm.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {
                    request.setAttribute("message", "This ChargeCode is already added");
                } else {
                    uniCommodityChrg.setChargeCode(genericCodeObj);
                }
                session.setAttribute("uniCommodityCharges", uniCommodityChrg);
                path1 = "jsps/ratemanagement/universalCommodity.jsp";


            } //SELECTING CHARGE CODE FOR COMMODITY SPECIFIC ACESSORIAL CHARGES
            else if (search.equals("retailsearchchargecodecss") || search.equals("retaileditchargecodecss")) {
                genericCodeObj = new GenericCode();
                RetailCommodityCharges retailCommodityCharges = new RetailCommodityCharges();
                if (session.getAttribute("retailCommodityCharges") == null) {
                    retailCommodityCharges = new RetailCommodityCharges();
                } else {
                    retailCommodityCharges = (RetailCommodityCharges) session.getAttribute("retailCommodityCharges");
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                retailCommodityCharges.setChargeCode(genericCodeObj);
                session.setAttribute("retailCommodityCharges", retailCommodityCharges);
                if (session.getAttribute("retailcssList") != null) {
                    docList = (List) session.getAttribute("retailcssList");
                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        RetailCommodityCharges docCharges1 = (RetailCommodityCharges) docList.get(i);
                        if (docCharges1.getChargeCode() != null) {
                            if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                                flag = true;
                                break;
                            }
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    retailCommodityCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("retailCommodityCharges", retailCommodityCharges);

                }

                if (search.equals("retailsearchchargecodecss")) {
                    path1 = "jsps/ratemanagement/retailCSSC.jsp";
                }
                if (search.equals("retaileditchargecodecss")) {
                    path1 = "jsps/ratemanagement/retailEditCSSC.jsp";
                }
            }//---------------------------this is for lcl doc charge----------------------------------------------------
            else if (search != null && search.equals("lcldocumentCharges")) {
                genericCodeObj = new GenericCode();
                LCLColoadDocumentCharges docCharges = new LCLColoadDocumentCharges();
                if (session.getAttribute("lcldocumentCharges") != null) {
                    docCharges = (LCLColoadDocumentCharges) session.getAttribute("lcldocumentCharges");
                } else {
                    docCharges = new LCLColoadDocumentCharges();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);

                if (session.getAttribute("lcldocChargesAdd") != null) {
                    docList = (List) session.getAttribute("lcldocChargesAdd");

                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        LCLColoadDocumentCharges docCharges1 = (LCLColoadDocumentCharges) docList.get(i);
                        if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    docCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("lcldocumentCharges", docCharges);

                }
                path1 = "jsps/ratemanagement/lclCoDocumentCharges.jsp";
                if (session.getAttribute("ratebutton") != null) {
                    session.removeAttribute("ratebutton");
                }

            } //-------------------------------------------------------------------------------------------------------------
            //for ftf document charges
            else if (search != null && search.equals("ftfdocumentCharges")) {
                genericCodeObj = new GenericCode();
                FTFDocumentCharges docCharges = new FTFDocumentCharges();
                if (session.getAttribute("ftfdocumentCharges") != null) {
                    docCharges = (FTFDocumentCharges) session.getAttribute("ftfdocumentCharges");
                } else {
                    docCharges = new FTFDocumentCharges();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);

                if (session.getAttribute("ftfdocChargesAdd") != null) {
                    docList = (List) session.getAttribute("ftfdocChargesAdd");

                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        FTFDocumentCharges docCharges1 = (FTFDocumentCharges) docList.get(i);
                        if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    docCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("ftfdocumentCharges", docCharges);

                }
                path1 = "jsps/ratemanagement/documentChargesFTF.jsp";
                if (session.getAttribute("ratebutton") != null) {
                    session.removeAttribute("ratebutton");
                }

            } else if (search.equals("documentCharges") || search.equals("editdocumentCharges")) {
                genericCodeObj = new GenericCode();
                AirFreightDocumentCharges docCharges = new AirFreightDocumentCharges();
                if (session.getAttribute("documentCharges") != null) {
                    docCharges = (AirFreightDocumentCharges) session.getAttribute("documentCharges");
                } else {
                    docCharges = new AirFreightDocumentCharges();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                //----------------------------inseert code---------------------------------
                if (session.getAttribute("docChargesAdd") != null) {
                    docList = (List) session.getAttribute("docChargesAdd");
                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        AirFreightDocumentCharges docCharges1 = (AirFreightDocumentCharges) docList.get(i);
                        if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    docCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("documentCharges", docCharges);

                }

                if (session.getAttribute("ratebutton") != null) {
                    session.removeAttribute("ratebutton");
                }
                if (search.equals("documentCharges")) {
                    path1 = "jsps/ratemanagement/documentCharges.jsp";
                } else if (search.equals("editdocumentCharges")) {
                    path1 = "jsps/ratemanagement/docChargesEdit.jsp";
                }
            } //CHARGE CODE FOR LCL CO LOAD COMMODITY AND STANDRAD CHARGES
            else if (search.equals("lclColoadCommodity")) {
                genericCodeObj = new GenericCode();
                LCLColoadCommodityCharges lclColoadCommodity = new LCLColoadCommodityCharges();
                if (session.getAttribute("addlclcoloadcommodity") != null) {
                    lclColoadCommodity = (LCLColoadCommodityCharges) session.getAttribute("addlclcoloadcommodity");
                } else {
                    lclColoadCommodity = new LCLColoadCommodityCharges();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                //----------------------------inseert code---------------------------------
                if (session.getAttribute("lclcoloadcssList") != null) {
                    docList = (List) session.getAttribute("lclcoloadcssList");

                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        LCLColoadCommodityCharges docCharges1 = (LCLColoadCommodityCharges) docList.get(i);
                        if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    lclColoadCommodity.setChargeCode(genericCodeObj);

                    session.setAttribute("addlclcoloadcommodity", lclColoadCommodity);
                }
                if (search.equals("lclColoadCommodity")) {
                    path1 = "jsps/ratemanagement/AddLclColoadCommodity.jsp";
                }

            } //
            else if (search.equals("ftfCommodity")) {
                genericCodeObj = new GenericCode();
                FTFCommodityCharges ftfCommodity = new FTFCommodityCharges();
                if (session.getAttribute("addftfcommodity") != null) {
                    ftfCommodity = (FTFCommodityCharges) session.getAttribute("addftfcommodity");

                } else {
                    ftfCommodity = new FTFCommodityCharges();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                //----------------------------inseert code---------------------------------
                if (session.getAttribute("ftfcssList") != null) {
                    docList = (List) session.getAttribute("ftfcssList");

                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        FTFCommodityCharges docCharges1 = (FTFCommodityCharges) docList.get(i);
                        if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    ftfCommodity.setChargeCode(genericCodeObj);

                    session.setAttribute("addftfcommodity", ftfCommodity);
                }
                if (search.equals("ftfCommodity")) {
                    path1 = "jsps/ratemanagement/addFTFCommodity.jsp";
                }

            } //retailDocumentCharges
            else if (search.equals("retaildocumentCharges") || search.equals("editdocumentCharges")) {
                genericCodeObj = new GenericCode();
                RetailFreightDocumentCharges docCharges = new RetailFreightDocumentCharges();
                if (session.getAttribute("retaildocumentCharges") != null) {
                    docCharges = (RetailFreightDocumentCharges) session.getAttribute("retaildocumentCharges");
                } else {
                    docCharges = new RetailFreightDocumentCharges();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                docCharges.setChargeCode(genericCodeObj);
                session.setAttribute("retaildocumentCharges", docCharges);
                if (session.getAttribute("retaildocChargesAdd") != null) {
                    docList = (List) session.getAttribute("retaildocChargesAdd");
                }
                boolean flag = false;
                if (docList != null && docList.size() > 0) {
                    for (int i = 0; i < docList.size(); i++) {
                        RetailFreightDocumentCharges docCharges1 = (RetailFreightDocumentCharges) docList.get(i);
                        if (docCharges1.getChargeCode().getId().equals(genericCodeObj.getId())) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {

                    request.setAttribute("message", "This charge code is already added");
                } else {
                    docCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("retaildocumentCharges", docCharges);

                }
                if (search.equals("retaildocumentCharges")) {
                    path1 = "jsps/ratemanagement/retailDocumentCharges.jsp";
                } else if (search.equals("editdocumentCharges")) {
                    path1 = "jsps/ratemanagement/docChargesEdit.jsp";
                }

            } else if (search.equals("import")) {
                ImportPortConfiguration importPortObj = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("importPortObj") == null) {
                    importPortObj = new ImportPortConfiguration();
                } else {
                    importPortObj = (ImportPortConfiguration) session.getAttribute("importPortObj");
                }

                path1 = "jsps/datareference/imports.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                importPortObj.setOfChargeCode(genericCodeObj);
                session.setAttribute("importPortObj", importPortObj);
            } else if (search.equals("editimport")) {
                ImportPortConfiguration importPortObj = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("impPortObjConfiguration") == null) {
                    importPortObj = new ImportPortConfiguration();
                } else {
                    importPortObj = (ImportPortConfiguration) session.getAttribute("impPortObjConfiguration");
                }

                path1 = "jsps/datareference/editImportConfig.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                importPortObj.setOfChargeCode(genericCodeObj);
                session.setAttribute("impPortObjConfiguration", importPortObj);
            } else if (search.equals("chargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/NewTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode1(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("editchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/EditTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode1(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("brlchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/NewTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode2(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("editbrlchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/EditTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode2(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("ovr10kchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/NewTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode3(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("editovr10kchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/EditTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode3(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("ovr20kchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/NewTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode4(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("adj")) {
                Payments payments = null;
                if (session.getAttribute("payments") != null) {
                    payments = (Payments) session.getAttribute("payments");
                } else {
                    payments = new Payments();
                }
                genericCodeObj = (GenericCode) codeList1.get(ind);
                payments.setChargeCode(genericCodeObj.getCode());
                session.setAttribute("payments", payments);
                path1 = "/jsps/AccountsRecievable/adjustment.jsp";
            } else if (search.equals("editovr20kchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/EditTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode4(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("docchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/NewTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode5(genericCodeObj);
                session.setAttribute("terminal", terminal);
            } else if (search.equals("editdocchargecode")) {
                RefTerminal terminal = null;
                genericCodeObj = new GenericCode();
                if (session.getAttribute("terminal") == null) {
                    terminal = new RefTerminal();
                } else {
                    terminal = (RefTerminal) session.getAttribute("terminal");
                }

                path1 = "jsps/datareference/EditTerminal.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);
                terminal.setGenericCode5(genericCodeObj);
                session.setAttribute("terminal", terminal);
            }// added by chandu
            else if (search.equals("searchApInChargecode")) {

                path1 = "jsps/AccountsPayable/ApInvoice.jsp";

                genericCodeObj = (GenericCode) codeList1.get(ind);

                session.setAttribute("genericobjs", genericCodeObj);
            }
            if (session.getAttribute("codeList") != null) {
                session.removeAttribute("codeList");
            }
            request.setAttribute("path1", path1);
            request.setAttribute("buttonValue", "completed");

        } else {
            if (buttonValue.equals("search")) {
                /*String codeType="2";
                List codeList=genericDAO.findForChargeCodesForAirRates(code, codeDesc,codeType);
                session.setAttribute("chargeCodeCodeList", codeList);*/
                if (search.equals("retaildocumentCharges") || search.equals("documentCharges") || search.equals("lcldocumentCharges") || search.equals("ftfdocumentCharges")) {
                    String codeType = "35";
                    List codeList = genericDAO.findForChargeCodesForAirRates(code, codeDesc, codeType);
                    session.setAttribute("chargeCodeCodeList", codeList);
                } else {
                    String codeType = "2";
                    List codeList = genericDAO.findForChargeCodesForAirRates(code, codeDesc, codeType);
                    session.setAttribute("chargeCodeCodeList", codeList);
                }

            }

        }
        return mapping.findForward("searchchargecd");
    }
}