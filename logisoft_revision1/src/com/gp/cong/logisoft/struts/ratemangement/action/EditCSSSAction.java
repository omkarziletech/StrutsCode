/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.AirCommodityCharges;
import com.gp.cong.logisoft.struts.ratemangement.form.EditCSSSForm;

public class EditCSSSAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception {
        EditCSSSForm editCSSSForm = (EditCSSSForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        AirCommodityCharges airCommodityCharges = new AirCommodityCharges();

        String buttonValue = editCSSSForm.getButtonValue();
        String standard = editCSSSForm.getStandard();
        String asFreighted = editCSSSForm.getAsFrfgted();

        int index = 0;
        AirRatesBean airRatesBean = new AirRatesBean();
        airRatesBean.setStandard(editCSSSForm.getStandard());
        airRatesBean.setAsFrfgted(editCSSSForm.getAsFrfgted());
        request.setAttribute("airRatesBean", airRatesBean);
        List csssList = new ArrayList();
        if (session.getAttribute("airCommodityCharges") != null) {
            airCommodityCharges = (AirCommodityCharges) session.getAttribute("airCommodityCharges");
        } else {
            airCommodityCharges = new AirCommodityCharges();
        }
        if (!buttonValue.equals("cancel")) {
            if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
                airCommodityCharges.setAsFrfgted("X");
            } else if (asFreighted == null) {
                airCommodityCharges.setAsFrfgted(null);
            }


            String type = editCSSSForm.getChargeType();

            forwardName = "csssEdit";


            if (standard != null && standard.equalsIgnoreCase("on")) {
                airCommodityCharges.setStandard("Y");
            } else if (standard == null) {
                airCommodityCharges.setStandard("N");
            }
            if (editCSSSForm.getInsuranceRate() != null) {
                airCommodityCharges.setInsuranceRate(editCSSSForm.getInsuranceRate());
            } else {
                airCommodityCharges.setInsuranceRate(0.0);
            }
            if (editCSSSForm.getInsuranceAmt() != null) {
                airCommodityCharges.setInsuranceAmt(editCSSSForm.getInsuranceAmt());
            } else {
                airCommodityCharges.setInsuranceAmt(0.0);
            }
            if (editCSSSForm.getAmtPerCft() != null) {
                airCommodityCharges.setAmtPerCft(editCSSSForm.getAmtPerCft());
            } else {
                editCSSSForm.setAmtPerCft(0.0);
            }
            if (editCSSSForm.getAmtPer100lbs() != null) {
                airCommodityCharges.setAmtPer100lbs(editCSSSForm.getAmtPer100lbs());
            } else {
                airCommodityCharges.setAmtPer100lbs(0.0);
            }
            if (editCSSSForm.getPercentage() != null) {
                double d = Double.parseDouble(editCSSSForm.getPercentage());
                airCommodityCharges.setPercentage(d / 1000);
            }
            if (editCSSSForm.getAmtPerCbm() != null) {
                airCommodityCharges.setAmtPerCbm(editCSSSForm.getAmtPerCbm());

            } else {
                airCommodityCharges.setAmtPerCbm(0.0);
            }
            if (editCSSSForm.getAmtPer1000kg() != null) {
                airCommodityCharges.setAmtPer1000kg(editCSSSForm.getAmtPer1000kg());
            } else {
                airCommodityCharges.setAmtPer1000kg(0.0);
            }
            if (editCSSSForm.getAmount() != null) {
                airCommodityCharges.setAmount(editCSSSForm.getAmount());
            } else {
                airCommodityCharges.setAmount(0.0);
            }
            if (editCSSSForm.getPercentage() != null) {
                double d = Double.parseDouble(editCSSSForm.getPercentage());
                airCommodityCharges.setPercentage(d / 1000);

            } else {
                airCommodityCharges.setPercentage(0.0);
            }
            if (editCSSSForm.getMinAmt() != null) {
                airCommodityCharges.setMinAmt(editCSSSForm.getMinAmt());
            } else {
                airCommodityCharges.setMinAmt(0.0);
            }
            if (editCSSSForm.getTxtItemcreatedon() != null && editCSSSForm.getTxtItemcreatedon() != "") {
                java.util.Date javaDate = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    javaDate = sdf.parse(editCSSSForm.getTxtItemcreatedon());
                airCommodityCharges.setEffectiveDate(javaDate);
            }

            session.setAttribute("airCommodityCharges", airCommodityCharges);
        }
        if (buttonValue != null && buttonValue.equals("add")) {
            if (session.getAttribute("cssList") != null) {
                csssList = (List) session.getAttribute("cssList");

                for (int i = 0; i < csssList.size(); i++) {
                    AirCommodityCharges airComm = (AirCommodityCharges) csssList.get(i);


                    if (airComm.getChargeCode().getId() == airCommodityCharges.getChargeCode().getId()) {

                        airCommodityCharges.setIndex(airComm.getIndex());
                        csssList.remove(airComm);
                        break;
                    }
                }
            }


            csssList.add(airCommodityCharges);
            session.setAttribute("cssList", csssList);

            forwardName = "csssAdd";
            request.setAttribute("buttonValue", buttonValue);
            if (session.getAttribute("airCommodityCharges") != null) {
                session.removeAttribute("airCommodityCharges");
            }

        } else if (buttonValue.equals("delete")) {
            List cssList = new ArrayList();
            List applyGeneralStandardList = new ArrayList();
            if (session.getAttribute("cssList") != null) {
                cssList = (List) session.getAttribute("cssList");
            }
            for (int i = 0; i < cssList.size(); i++) {
                AirCommodityCharges airCommodity = (AirCommodityCharges) cssList.get(i);
                List includedList1 = new ArrayList();
                if (airCommodity.getChargeCode().getId() == airCommodityCharges.getChargeCode().getId()) {
                    cssList.remove(airCommodity);
                    if (session.getAttribute("applyGeneralStandardList") != null) {
                        applyGeneralStandardList = (List) session.getAttribute("applyGeneralStandardList");
                    }

                    if (session.getAttribute("includedList") != null) {
                        includedList1 = (List) session.getAttribute("includedList");
                    }

                }

                session.setAttribute("cssList", cssList);

            }
            if (session.getAttribute("airCommodityCharges") != null) {
                session.removeAttribute("airCommodityCharges");
            }
            forwardName = "csssAdd";
        } else if (buttonValue.equals("cancel")) {
            if (session.getAttribute("airCommodityCharges") != null) {
                session.removeAttribute("airCommodityCharges");
            }
            forwardName = "csssAdd";
        }
        return mapping.findForward(forwardName);
    }
}