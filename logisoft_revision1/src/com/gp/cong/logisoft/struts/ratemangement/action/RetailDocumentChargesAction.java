/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.RetailFreightDocumentCharges;
import com.gp.cong.logisoft.domain.RetailStandardCharges;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.RetailDocumentChargesForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/retailDocumentCharges" name="retailDocumentChargesForm" input="/jsps/ratemanagement/retailDocumentCharges.jsp" scope="request" validate="true"
 */
public class RetailDocumentChargesAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        RetailDocumentChargesForm retailDocumentChargesForm = (RetailDocumentChargesForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String code = retailDocumentChargesForm.getCharge();
        String codeDesc = retailDocumentChargesForm.getDesc();
        String buttonValue = retailDocumentChargesForm.getButtonValue();
        RetailFreightDocumentCharges documentCharges = null;
        GenericCode genericCodeObj = new GenericCode();
        RetailFreightDocumentCharges docChargesObj = null;
        List docChargesList = new ArrayList();
        int index = 0;
        if (request.getParameter("index") != null && !request.getParameter("index").equals("")) {

            int ind = Integer.parseInt(request.getParameter("index"));

            List codeList1 = (List) session.getAttribute("retaildocChargesAdd");
            docChargesObj = (RetailFreightDocumentCharges) codeList1.get(ind);
            session.setAttribute("retaildocumentCharges", docChargesObj);
            forwardName = "docChargesEdit";
        } else {
            RetailStandardCharges standardChrg = new RetailStandardCharges();
            if (session.getAttribute("retailstandardCharges") == null) {
                standardChrg = new RetailStandardCharges();
            } else {
                standardChrg = (RetailStandardCharges) session.getAttribute("retailstandardCharges");
            }
            if (retailDocumentChargesForm.getMaxDocCharge() != null && !retailDocumentChargesForm.getMaxDocCharge().equals("")) {
                standardChrg.setMaxDocCharge(new Double(retailDocumentChargesForm.getMaxDocCharge()));
            } else {
                standardChrg.setMaxDocCharge(0.0);
            }
            if (retailDocumentChargesForm.getFfCommision() != null && !retailDocumentChargesForm.getFfCommision().equals("")) {
                standardChrg.setFfCommission(new Double(retailDocumentChargesForm.getFfCommision()));
            } else {
                standardChrg.setFfCommission(0.0);
            }
            if (retailDocumentChargesForm.getBlBottomLine() != null && !retailDocumentChargesForm.getBlBottomLine().equals("")) {
                standardChrg.setBlBottomLine(new Double(retailDocumentChargesForm.getBlBottomLine()));
            } else {
                standardChrg.setBlBottomLine(0.0);
            }

            if (retailDocumentChargesForm.getCocbm() != null && !retailDocumentChargesForm.getCocbm().equals("")) {
                standardChrg.setCostCbm(new Double(retailDocumentChargesForm.getCocbm()));
            } else {
                standardChrg.setCostCbm(0.0);
            }
            session.setAttribute("retailstandardCharges", standardChrg);

            if (session.getAttribute("retaildocumentCharges") != null) {
                documentCharges = (RetailFreightDocumentCharges) session.getAttribute("retaildocumentCharges");
            } else {
                documentCharges = new RetailFreightDocumentCharges();
            }
            if (retailDocumentChargesForm.getAmount() != null && !retailDocumentChargesForm.getAmount().equals("")) {
                documentCharges.setAmount(new Double(retailDocumentChargesForm.getAmount()));
            } else {
                documentCharges.setAmount(0.0);
            }
            if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                genericCodeObj = null;
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                List codeList = genericDAO.findByCodedesc(codeDesc);
                if (codeList.size() > 0) {
                    genericCodeObj = (GenericCode) codeList.get(0);
                }
                if (genericCodeObj != null) {
                    documentCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("retaildocumentCharges", documentCharges);
                }
            }
            forwardName = "docChargesAdd";
            if (buttonValue.equals("add")) {


                if (session.getAttribute("retaildocChargesAdd") != null) {
                    docChargesList = (List) session.getAttribute("retaildocChargesAdd");
                    for (int i = 0; i < docChargesList.size(); i++) {
                        RetailFreightDocumentCharges docCharges = (RetailFreightDocumentCharges) docChargesList.get(i);
                        if (docCharges.getIndex() != null) {
                            if (docCharges.getIndex() > index) {
                                index = docCharges.getIndex();
                            }
                        } else {
                            index = docChargesList.size() - 1;
                        }
                    }
                    index++;
                } else {
                    index++;
                    docChargesList = new ArrayList();

                }

                if (documentCharges.getChargeCode() != null) {
                    docChargesList.add(documentCharges);
                } else {
                    String msg = "Please enter the proper Charge Code...";
                    request.setAttribute("exist", msg);
                }
                session.setAttribute("retaildocChargesAdd", docChargesList);
                if (session.getAttribute("retaildocumentCharges") != null) {
                    session.removeAttribute("retaildocumentCharges");
                }
                forwardName = "docChargesAdd";

            }
            if (buttonValue != null && buttonValue.equals("chargeCode")) {
                List list = new ArrayList();
                String msg = "Charge Code already exists... ";

                if (session.getAttribute("retaildocChargesAdd") != null) {
                    list = (List) session.getAttribute("retaildocChargesAdd");

                    for (int i = 0; i < list.size(); i++) {
                        documentCharges = (RetailFreightDocumentCharges) list.get(i);
                        if (documentCharges.getChargeCode().getCode().equals(code)) {
                            request.setAttribute("exist", msg);
                        }
                        if (documentCharges.getChargeCode().getCodedesc().equals(codeDesc)) {
                            request.setAttribute("exist", msg);
                        }
                    }
                }

                if (request.getAttribute("exist") == null && (code != null || !code.equals(""))) {
                    genericCodeObj = null;
                    RetailFreightDocumentCharges retailFreightDocumentCharges = new RetailFreightDocumentCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findGenericCode("35", code);
                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }
                    if (genericCodeObj != null) {
                        retailFreightDocumentCharges.setChargeCode(genericCodeObj);
                        session.setAttribute("retaildocumentCharges", retailFreightDocumentCharges);
                    }
                }
                if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                    genericCodeObj = null;
                    RetailFreightDocumentCharges retailFreightDocumentCharges = new RetailFreightDocumentCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findByCodedesc(codeDesc);
                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }
                    if (genericCodeObj != null) {
                        retailFreightDocumentCharges.setChargeCode(genericCodeObj);
                        session.setAttribute("retaildocumentCharges", retailFreightDocumentCharges);
                    }
                }

            }
        }

        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);

    }
}