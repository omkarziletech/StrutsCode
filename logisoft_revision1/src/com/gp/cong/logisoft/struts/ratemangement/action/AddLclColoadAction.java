/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.HistoryLogInterceptor;
import com.gp.cong.hibernate.HibernateSessionFactory;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordLclCoRates;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.LCLColoadDetails;
import com.gp.cong.logisoft.domain.LCLColoadCommodityCharges;
import com.gp.cong.logisoft.domain.UnLocation;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import com.gp.cong.logisoft.domain.LCLColoadDocumentCharges;
import org.apache.struts.action.ActionMapping;
import com.gp.cong.logisoft.domain.LCLColoadStandardCharges;
import com.gp.cong.logisoft.domain.LCLColoadMaster;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.LCLColoadMasterDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;

import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.struts.ratemangement.form.AddLclColoadForm;
import com.gp.cong.logisoft.util.DBUtil;

public class AddLclColoadAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddLclColoadForm addLclColoadForm = (AddLclColoadForm) form;// TODO
        LCLColoadMaster lCLColoadMaster = new LCLColoadMaster();
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = addLclColoadForm.getButtonValue();
        String FORWARD = null;
        LCLColoadMasterDAO lCLColoadMasterDAO = new LCLColoadMasterDAO();
        UnLocationDAO unLocationDAO = new UnLocationDAO();
        UnLocation unLocation = new UnLocation();
        List lclCoList = new ArrayList();
        String programid = null;
        String recordid = "";
        String message = "";
        String forwardName = "";
        HistoryLogInterceptor historyLogInterceptor = new HistoryLogInterceptor();
        DBUtil dbUtil = new DBUtil();
        if (buttonValue != null && buttonValue.equals("edit")) {
            programid = (String) session.getAttribute("processinfoforcoLoad");

            if (session.getAttribute("addlclColoadMaster") != null) {
                lCLColoadMaster = (LCLColoadMaster) session.getAttribute("addlclColoadMaster");
            }

            if (lCLColoadMaster.getId() != null) {
            }
            List lclCodetails = new ArrayList();
            Set airlclCodetails = new HashSet<LCLColoadDetails>();
            if (session.getAttribute("lclcoloaddetails") != null) {

                LCLColoadDetails lCLColoadDetails = (LCLColoadDetails) session.getAttribute("lclcoloaddetails");
                historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                if (lCLColoadDetails.getId() != null) {
                    User userId = null;
                    if (session.getAttribute("loginuser") != null) {
                        userId = (User) session.getAttribute("loginuser");

                    }
                    historyLogInterceptor.setUserName(userId.getLoginName());
                    historyLogInterceptor.setOrgTerm(lCLColoadMaster.getOriginTerminal());
                    historyLogInterceptor.setDisport(lCLColoadMaster.getDestinationPort());
                    boolean flag = historyLogInterceptor.onFlushDirty(
                            lCLColoadDetails, lCLColoadDetails.getId(), null,
                            null, null, null);
                    if (flag) {
                        // /docCharges.setChangedDate(new Date());
                        // docCharges.setWhoChanged(userId.getLoginName());
                    }

                    airlclCodetails.add(lCLColoadDetails);
                }
                lCLColoadMaster.setLclColoadDetailsSet(airlclCodetails);
            }
            List cossList = new ArrayList();
            Set coSList = new HashSet<LCLColoadCommodityCharges>();
            if (session.getAttribute("lclcoloadcssList") != null) {

                cossList = (List) session.getAttribute("lclcoloadcssList");

                for (int j = 0; j < cossList.size(); j++) {
                    LCLColoadCommodityCharges LclCssListd = (LCLColoadCommodityCharges) cossList.get(j);
                    historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                    if (LclCssListd.getId() != null) {

                        User userId = null;
                        if (session.getAttribute("loginuser") != null) {
                            userId = (User) session.getAttribute("loginuser");
                        }
                        historyLogInterceptor.setUserName(userId.getLoginName());
                        historyLogInterceptor.setOrgTerm(lCLColoadMaster.getOriginTerminal());
                        historyLogInterceptor.setDisport(lCLColoadMaster.getDestinationPort());
                        boolean flag = historyLogInterceptor.onFlushDirty(
                                LclCssListd, LclCssListd.getId(), null, null,
                                null, null);

                    }
                    coSList.add(LclCssListd);

                }
                lCLColoadMaster.setLclColoadCommChgSet(coSList);
            }
            List docList = new ArrayList();
            Set docSList = new HashSet<LCLColoadDocumentCharges>();
            if (session.getAttribute("lcldocChargesAdd") != null) {
                docList = (List) session.getAttribute("lcldocChargesAdd");
                for (int k = 0; k < docList.size(); k++) {
                    LCLColoadDocumentCharges docCharges = (LCLColoadDocumentCharges) docList.get(k);
                    docSList.add(docCharges);
                }
                lCLColoadMaster.setLclColoadDocumentSet(docSList);
            }

            List coagssList = new ArrayList();
            Set cossSList = new HashSet<LCLColoadDocumentCharges>();

            // STANDARD CHARGES
            if (session.getAttribute("coagssAdd") != null) {
                coagssList = (List) session.getAttribute("coagssAdd");
                for (int i = 0; i < coagssList.size(); i++) {
                    LCLColoadStandardCharges coss1 = (LCLColoadStandardCharges) coagssList.get(i);
                    historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                    if (coss1.getId() != null) {
                        User userId = null;
                        if (session.getAttribute("loginuser") != null) {
                            userId = (User) session.getAttribute("loginuser");
                        }
                        historyLogInterceptor.setUserName(userId.getLoginName());
                        historyLogInterceptor.setOrgTerm(lCLColoadMaster.getOriginTerminal());
                        historyLogInterceptor.setDisport(lCLColoadMaster.getDestinationPort());
                        boolean flag = historyLogInterceptor.onFlushDirty(
                                coss1, coss1.getId(), null, null, null, null);

                        if (flag) {
                            coss1.setChangedDate(new Date());
                            coss1.setWhoChanged(userId.getLoginName());
                        }
                    }
                    cossSList.add(coss1);

                }
                lCLColoadMaster.setLclColoadStdChgSet(cossSList);
            }

            List coratesList = new ArrayList();
            // String programid=null;
            programid = (String) session.getAttribute("processinfoforairRates");
            // String recordid="";
            if (lCLColoadMaster != null && lCLColoadMaster.getId() != null) {
                recordid = lCLColoadMaster.getId().toString();
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            lCLColoadMasterDAO.update(lCLColoadMaster, userId.getLoginName());
            List newList = new ArrayList();
            if (lCLColoadMaster.getCommodityCode() != null && !lCLColoadMaster.getCommodityCode().equals("000000")) {
                newList = (List) session.getAttribute("llnoncommonList");
                for (int i = 0; i < newList.size(); i++) {
                    LCLColoadMaster aStandardCharges11 = (LCLColoadMaster) newList.get(i);// parent
                    if (aStandardCharges11.getCommodityCode() != null && lCLColoadMaster.getCommodityCode() != null && aStandardCharges11.getCommodityCode() != null && lCLColoadMaster.getCommodityCode() != null && aStandardCharges11.getCommodityCode().equals(
                            lCLColoadMaster.getCommodityCode())) {
                        newList.set(i, lCLColoadMaster);
                    }

                }
                session.setAttribute("llnoncommonList", newList);
                session.setAttribute("lclUpdateRecords", lCLColoadMaster);

            } else {
                GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
                GenericCode genObj = genericCodeDAO.findById(11292);
                List list = dbUtil.getCoLoadDetails(lCLColoadMaster.getOriginTerminal(), lCLColoadMaster.getDestinationPort(), genObj.getCode());
                if (list != null && list.size() > 0) {
                    LCLColoadMaster lclGetStd = (LCLColoadMaster) list.get(0);

                    if (lclGetStd.getLclColoadStdChgSet() != null) {

                        Iterator iter = (Iterator) lclGetStd.getLclColoadStdChgSet().iterator();
                        while (iter.hasNext()) {
                            LCLColoadStandardCharges retailStdChild = (LCLColoadStandardCharges) iter.next();
                            retailStdChild.setLclCoLoadId(lclGetStd.getId());
                            newList.add(retailStdChild);

                        }

                        session.setAttribute("lclcommonListCaps",
                                "Common Accessorial Charges (All)");
                        session.setAttribute("llcommonList", newList);
                    }
                }

            }
            programid = (String) session.getAttribute("processinfoforcoLoad");
            if (programid != null) {
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
            }
            message = "Lcl Co Load  details Edited successfully";

            session.setAttribute("lclmessage", message);

            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("lcldefaultRate") != null) {
                session.removeAttribute("lcldefaultRate");
            }
            if (session.getAttribute("addlclColoadMaster") != null) {

                session.removeAttribute("addlclColoadMaster");
            }
            if (session.getAttribute("lclcoloadcssList") != null) {

                session.removeAttribute("lclcoloadcssList");
            }
            if (session.getAttribute("getEdit") != null) {

                session.removeAttribute("getEdit");
            }
            if (session.getAttribute("lcldocChargesAdd") != null) {

                session.removeAttribute("lcldocChargesAdd");
            }
            if (session.getAttribute("coagssAdd") != null) {

                session.removeAttribute("coagssAdd");
            }
            if (session.getAttribute("lclcoloaddetails") != null) {
                session.removeAttribute("lclcoloaddetails");
            }
            if (session.getAttribute("coStandardCharges") != null) {

                session.removeAttribute("coStandardCharges");
            }
            if (session.getAttribute("getAgsss") != null) {

                session.removeAttribute("getAgsss");
            }
            if (session.getAttribute("getDoc") != null) {

                session.removeAttribute("getDoc");
            }
            if (session.getAttribute("listLclAgssitem") != null) {

                session.removeAttribute("listLclAgssitem");
            }

            session.setAttribute("trade", "addairrates");
        }

        if (buttonValue != null && buttonValue.equals("save")) {
            List cossList = new ArrayList();
            Set coSList = new HashSet<LCLColoadCommodityCharges>();
            if (session.getAttribute("lclcoloadcssList") != null) {
                cossList = (List) session.getAttribute("lclcoloadcssList");
                for (int j = 0; j < cossList.size(); j++) {
                    LCLColoadCommodityCharges LclCssListd = (LCLColoadCommodityCharges) cossList.get(j);
                    coSList.add(LclCssListd);
                }
                lCLColoadMaster.setLclColoadCommChgSet(coSList);
            }// if
            List docList = new ArrayList();
            Set docSList = new HashSet<LCLColoadDocumentCharges>();
            if (session.getAttribute("lcldocChargesAdd") != null) {
                docList = (List) session.getAttribute("lcldocChargesAdd");
                for (int k = 0; k < docList.size(); k++) {
                    LCLColoadDocumentCharges docCharges = (LCLColoadDocumentCharges) docList.get(k);
                    docSList.add(docCharges);
                }
                lCLColoadMaster.setLclColoadDocumentSet(docSList);
            }
            List coagssList = new ArrayList();
            Set cossSList = new HashSet<LCLColoadDocumentCharges>();
            if (session.getAttribute("coagssAdd") != null) {
                coagssList = (List) session.getAttribute("coagssAdd");
                for (int i = 0; i < coagssList.size(); i++) {
                    LCLColoadStandardCharges coss1 = (LCLColoadStandardCharges) coagssList.get(i);
                    cossSList.add(coss1);
                }
                lCLColoadMaster.setLclColoadStdChgSet(cossSList);
            }
            List lclCodetails = new ArrayList();
            Set airlclCodetails = new HashSet<LCLColoadDetails>();
            if (session.getAttribute("lclcoloaddetails") != null) {
                LCLColoadDetails document1 = (LCLColoadDetails) session.getAttribute("lclcoloaddetails");
                airlclCodetails.add(document1);
                lCLColoadMaster.setLclColoadDetailsSet(airlclCodetails);
            }

            if (session.getAttribute("addlclColoadMaster") != null) {
                LCLColoadMaster lclCoMaster = (LCLColoadMaster) session.getAttribute("addlclColoadMaster");
                lCLColoadMaster.setOriginTerminal(lclCoMaster.getOriginTerminal());
                lCLColoadMaster.setDestinationPort(lclCoMaster.getDestinationPort());
                lCLColoadMaster.setCommodityCode(lclCoMaster.getCommodityCode());
                lCLColoadMaster.setFfCommission(lclCoMaster.getFfCommission());
                lCLColoadMaster.setMaxDocCharge(lclCoMaster.getMaxDocCharge());
                lCLColoadMaster.setBlBottomLine(lclCoMaster.getBlBottomLine());
                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }
                if (lCLColoadMaster.getOriginTerminal() != null && !lCLColoadMaster.getOriginTerminal().equals("")) {
                    List unLocationList = unLocationDAO.findForManagement(lCLColoadMaster.getOriginTerminal(), null);
                    if (unLocationList != null && unLocationList.size() > 0) {
                        unLocation = (UnLocation) unLocationList.get(0);
                        lCLColoadMaster.setOriginTerminalName(unLocation.getUnLocationName());
                    }
                }

                if (lCLColoadMaster.getDestinationPort() != null && !lCLColoadMaster.getDestinationPort().equals("")) {
                    List portsList = unLocationDAO.findForManagement(lCLColoadMaster.getDestinationPort(), null);
                    if (portsList != null && portsList.size() > 0) {
                        unLocation = (UnLocation) portsList.get(0);
                        lCLColoadMaster.setDestinationPortName(unLocation.getUnLocationName());
                    }
                }
                if (lCLColoadMaster.getCommodityCode() != null && !lCLColoadMaster.getCommodityCode().equals("")) {
                    GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
                    List comList = genericCodeDAO.findForGenericCode(lCLColoadMaster.getCommodityCode());
                    if (comList != null && comList.size() > 0) {
                        GenericCode gen = (GenericCode) comList.get(0);
                        lCLColoadMaster.setCommodityCodeName(gen.getCodedesc());
                    }
                }
                session.setAttribute("searchlclColoadMaster", lCLColoadMaster);
                lCLColoadMasterDAO.save(lCLColoadMaster, userId.getLoginName());
                lclCoList.add(lCLColoadMaster);
                if (session.getAttribute("lclCoList") != null) {

                    lclCoList = (List) session.getAttribute("lclCoList");
                    lclCoList.add(lCLColoadMaster);
                }
                message = "Co CoLoads  details added successfully";
                session.setAttribute("lclmessage", message);
            }// if

            List newList = new ArrayList();
            if (lCLColoadMaster.getCommodityCode() != null && !lCLColoadMaster.getCommodityCode().equals(
                    "000000")) {
                if (session.getAttribute("llnoncommonList") != null) {
                    newList = (List) session.getAttribute("llnoncommonList");
                } else {
                    newList = new ArrayList();
                }
                newList.add(lCLColoadMaster);
                session.setAttribute("llnoncommonList", newList);
                session.setAttribute("lclUpdateRecords", lCLColoadMaster);

            } else {
                boolean flag = false;
                LCLColoadMaster getSS = lCLColoadMasterDAO.findById(lCLColoadMaster.getId());
                if (getSS.getLclColoadStdChgSet() != null) {
                    Iterator iter = (Iterator) getSS.getLclColoadStdChgSet().iterator();
                    while (iter.hasNext()) {

                        LCLColoadStandardCharges retailStdChild = (LCLColoadStandardCharges) iter.next();
                        retailStdChild.setLclCoLoadId(getSS.getId());
                        newList.add(retailStdChild);

                        flag = true;
                    }
                    session.setAttribute("llcommonList", newList);
                    session.setAttribute("lclcommonListCaps",
                            "Common Accessorial Charges (All)");
                }
                if (!flag) {
                    session.setAttribute("lclcommonListCaps",
                            "No Accessorial Add");
                }
            }
            if (session.getAttribute("addlclColoadMaster") != null) {
                session.removeAttribute("addlclColoadMaster");
            }
            if (session.getAttribute("lclcoloadcssList") != null) {
                session.removeAttribute("lclcoloadcssList");
            }
            if (session.getAttribute("lcldocChargesAdd") != null) {
                session.removeAttribute("lcldocChargesAdd");
            }
            if (session.getAttribute("coagssAdd") != null) {
                session.removeAttribute("coagssAdd");
            }
            if (session.getAttribute("lclcoloaddetails") != null) {
                session.removeAttribute("lclcoloaddetails");
            }
            if (session.getAttribute("coStandardCharges") != null) {

                session.removeAttribute("coStandardCharges");
            }

            if (session.getAttribute("lcldefaultRate") != null) {
                session.removeAttribute("lcldefaultRate");
            }
            if (session.getAttribute("getAgsss") != null) {

                session.removeAttribute("getAgsss");
            }
            if (session.getAttribute("getDoc") != null) {

                session.removeAttribute("getDoc");
            }
            if (session.getAttribute("getEdit") != null) {

                session.removeAttribute("getEdit");
            }
            if (session.getAttribute("listLclAgssitem") != null) {

                session.removeAttribute("listLclAgssitem");
            }
        }// ------------------------------------------------------------------------------------------
        else if (buttonValue != null && buttonValue.equals("delete")) {
            if (session.getAttribute("addlclColoadMaster") != null) {
                lCLColoadMaster = (LCLColoadMaster) session.getAttribute("addlclColoadMaster");
            }
            programid = (String) session.getAttribute("processinfoforcoLoad");
            if (lCLColoadMaster != null && lCLColoadMaster.getId() != null) {
                recordid = lCLColoadMaster.getId().toString();
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            List newList = new ArrayList();
            if (lCLColoadMaster.getCommodityCode() != null && !lCLColoadMaster.getCommodityCode().equals(
                    "000000")) {
                newList = (List) session.getAttribute("llnoncommonList");
                for (int i = 0; i < newList.size(); i++) {
                    LCLColoadMaster aStandardCharges11 = (LCLColoadMaster) newList.get(i);// parent
                    if (aStandardCharges11.getCommodityCode() != null && lCLColoadMaster.getCommodityCode() != null && aStandardCharges11.getCommodityCode() != null && lCLColoadMaster.getCommodityCode() != null && aStandardCharges11.getCommodityCode().equals(
                            lCLColoadMaster.getCommodityCode())) {

                        newList.remove(i);
                    }

                }
                session.setAttribute("llnoncommonList", newList);

            } else {
                if (session.getAttribute("llcommonList") != null) {
                    session.removeAttribute("llcommonList");
                }
                if (session.getAttribute("lclcommonListCaps") != null) {
                    session.removeAttribute("lclcommonListCaps");
                }

            }
            lCLColoadMasterDAO.delete(lCLColoadMaster, userId.getLoginName());

            message = "Lcl Co Load  details Deleted successfully";
            session.setAttribute("lclmessage", message);

            if (session.getAttribute("addlclColoadMaster") != null) {

                session.removeAttribute("addlclColoadMaster");
            }

            if (session.getAttribute("coagssAdd") != null) {
                session.removeAttribute("coagssAdd");
            }
            if (session.getAttribute("lcldocumentCharges") != null) {
                session.removeAttribute("lcldocumentCharges");
            }
            if (session.getAttribute("applylclcoloadcharges") != null) {
                session.removeAttribute("applylclcoloadcharges");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }

            if (session.getAttribute("getAgsss") != null) {

                session.removeAttribute("getAgsss");
            }
            if (session.getAttribute("getDoc") != null) {

                session.removeAttribute("getDoc");
            }

            if (session.getAttribute("searchLCLColoadList") != null) {
                session.removeAttribute("searchLCLColoadList");

            }

            if (session.getAttribute("getEdit") != null) {

                session.removeAttribute("getEdit");
            }
            if (session.getAttribute("listLclAgssitem") != null) {

                session.removeAttribute("listLclAgssitem");
            }
            session.setAttribute("trade", "addairrates");
        } // ---------------------------------------------------------------------------------------------------
        else if (buttonValue != null && buttonValue.equals("note")) {
            if (session.getAttribute("addlclColoadMaster") != null) {
                lCLColoadMaster = (LCLColoadMaster) session.getAttribute("addlclColoadMaster");
            }

            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforcoLoad") != null) {
                String itemId = (String) session.getAttribute("processinfoforcoLoad");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();

            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordLclCoRates();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            // noteBean.setUser(user);
            noteBean.setPageName("cancelLclcodetails");
            String noteId = "";

            if (lCLColoadMaster.getId() != null) {
                noteId = lCLColoadMaster.getId().toString();

                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }

            List auditList = null;

            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            String documentName = "User";
            request.setAttribute("buttonValue", buttonValue);

            return mapping.findForward("note");

        } else if (buttonValue != null && buttonValue.equals("savecancel")) {
            if (session.getAttribute("getAgsss") != null) {

                session.removeAttribute("getAgsss");
            }
            if (session.getAttribute("getDoc") != null) {

                session.removeAttribute("getDoc");
            }
            if (session.getAttribute("lcldefaultRate") != null) {
                session.removeAttribute("lcldefaultRate");
            }
            if (session.getAttribute("lCLColoadMaster") != null) {
                session.removeAttribute("lCLColoadMaster");
            }
            if (session.getAttribute("lcldocChargesAdd") != null) {
                session.removeAttribute("lcldocChargesAdd");
            }
            if (session.getAttribute("lclcoloaddetails") != null) {
                session.removeAttribute("lclcoloaddetails");
            }
            if (session.getAttribute("coStandardCharges") != null) {
                session.removeAttribute("coStandardCharges");
            }

            if (session.getAttribute("cssList") != null) {
                session.removeAttribute("cssList");
            }

            if (session.getAttribute("applylclcoloadcharges") != null) {
                session.removeAttribute("applylclcoloadcharges");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("coStandardCharges") != null) {

                session.removeAttribute("coStandardCharges");
            }

            if (session.getAttribute("lclmessage") != null) {
                session.removeAttribute("lclmessage");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("addlclColoadMaster") != null) {

                session.removeAttribute("addlclColoadMaster");
            }
            if (session.getAttribute("getEdit") != null) {

                session.removeAttribute("getEdit");
            }
            if (session.getAttribute("listLclAgssitem") != null) {

                session.removeAttribute("listLclAgssitem");
            }
        } else if (buttonValue != null && buttonValue.equals("cancelview")) {

            if (session.getAttribute("getAgsss") != null) {

                session.removeAttribute("getAgsss");
            }
            if (session.getAttribute("getEdit") != null) {

                session.removeAttribute("getEdit");
            }
            if (session.getAttribute("getDoc") != null) {

                session.removeAttribute("getDoc");
            }
            if (session.getAttribute("lcldefaultRate") != null) {
                session.removeAttribute("lcldefaultRate");
            }
            if (session.getAttribute("lCLColoadMaster") != null) {
                session.removeAttribute("lCLColoadMaster");
            }
            if (session.getAttribute("lcldocChargesAdd") != null) {
                session.removeAttribute("lcldocChargesAdd");
            }
            if (session.getAttribute("lclcoloaddetails") != null) {
                session.removeAttribute("lclcoloaddetails");
            }
            if (session.getAttribute("coStandardCharges") != null) {
                session.removeAttribute("coStandardCharges");
            }

            if (session.getAttribute("cssList") != null) {
                session.removeAttribute("cssList");
            }
            if (session.getAttribute("searchLCLColoadList") != null) {
                session.removeAttribute("searchLCLColoadList");
            }

            if (session.getAttribute("applylclcoloadcharges") != null) {
                session.removeAttribute("applylclcoloadcharges");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("coStandardCharges") != null) {

                session.removeAttribute("coStandardCharges");
            }

            if (session.getAttribute("lclmessage") != null) {
                session.removeAttribute("lclmessage");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("addlclColoadMaster") != null) {

                session.removeAttribute("addlclColoadMaster");
            }
            if (session.getAttribute("listLclAgssitem") != null) {

                session.removeAttribute("listLclAgssitem");
            }
        } else if (buttonValue != null && buttonValue.equals("cancel")) {

            if (session.getAttribute("getAgsss") != null) {

                session.removeAttribute("getAgsss");
            }
            if (session.getAttribute("getEdit") != null) {

                session.removeAttribute("getEdit");
            }
            if (session.getAttribute("getDoc") != null) {

                session.removeAttribute("getDoc");
            }
            if (session.getAttribute("addlclColoadMaster") != null) {

                session.removeAttribute("addlclColoadMaster");
            }
            if (session.getAttribute("listLclAgssitem") != null) {

                session.removeAttribute("listLclAgssitem");
            }
        }

        if (session.getAttribute("editrecord") != null) {

            session.removeAttribute("editrecord");
        }
        // ----------
        if (session.getAttribute("listLclCoitem") != null) {

            session.removeAttribute("listLclCoitem");
        }// -----------------
        if (session.getAttribute("listLclAgssitem") != null) {

            session.removeAttribute("listLclAgssitem");
        }
        // --------------
        if (session.getAttribute("lcldocChargesAdd") != null) {

            session.removeAttribute("lcldocChargesAdd");
        }

        session.setAttribute("trade", "lclcoload");
        forwardName = "addlclcoload";
        return mapping.findForward(forwardName);
    }
}
