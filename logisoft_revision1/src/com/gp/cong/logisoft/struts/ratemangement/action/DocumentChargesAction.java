/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.AirFreightDocumentCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.StandardCharges;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.DocumentChargesForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2008
 * 
 * XDoclet definition:
 * @struts.action path="/documentCharges" name="documentChargesForm" input="/jsps/ratemangement/documentCharges.jsp" scope="request" validate="true"
 */
public class DocumentChargesAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        DocumentChargesForm documentChargesForm = (DocumentChargesForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String buttonValue = documentChargesForm.getButtonValue();
        String code = documentChargesForm.getCharge();
        String codeDesc = documentChargesForm.getDesc();
        AirFreightDocumentCharges documentCharges = null;

        AirFreightDocumentCharges docChargesObj = null;
        GenericCode genericCodeObj = new GenericCode();
        List docChargesList = new ArrayList();
        int index = 0;

        if (request.getParameter("index") != null && !request.getParameter("index").equals("")) {
            int ind = Integer.parseInt(request.getParameter("index"));
            List codeList1 = (List) session.getAttribute("docChargesAdd");
            docChargesObj = (AirFreightDocumentCharges) codeList1.get(ind);
            session.setAttribute("documentCharges", docChargesObj);
            forwardName = "docChargesEdit";
        } else {
            StandardCharges standardChrg = new StandardCharges();
            if (session.getAttribute("standardCharges") == null) {
                standardChrg = new StandardCharges();
            } else {
                standardChrg = (StandardCharges) session.getAttribute("standardCharges");
            }

            if (documentChargesForm.getMaxDocCharge() != null && !documentChargesForm.getMaxDocCharge().equals("")) {
                standardChrg.setMaxDocCharge(new Double(documentChargesForm.getMaxDocCharge()));
            } else {
                standardChrg.setMaxDocCharge(0.0);
            }
            if (documentChargesForm.getFfCommision() != null && !documentChargesForm.getFfCommision().equals("")) {
                standardChrg.setFfCommission(new Double(documentChargesForm.getFfCommision()));
            } else {
                standardChrg.setFfCommission(0.0);
            }
            if (documentChargesForm.getBlBottomLine() != null && !documentChargesForm.getBlBottomLine().equals("")) {
                standardChrg.setBlBottomLine(new Double(documentChargesForm.getBlBottomLine()));
            } else {
                standardChrg.setBlBottomLine(0.0);
            }
            session.setAttribute("standardCharges", standardChrg);

            if (session.getAttribute("documentCharges") != null) {
                documentCharges = (AirFreightDocumentCharges) session.getAttribute("documentCharges");
            } else {
                documentCharges = new AirFreightDocumentCharges();
            }
            if (documentChargesForm.getAmount() != null && !documentChargesForm.getAmount().equals("")) {
                documentCharges.setAmount(new Double(documentChargesForm.getAmount()));
            }
            if (code != null || !code.equals("")) {
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                List codeList = genericDAO.findGenericCode("35", code);
                genericCodeObj = null;
                if (codeList.size() > 0) {
                    genericCodeObj = (GenericCode) codeList.get(0);
                }
                if (genericCodeObj != null) {
                    documentCharges.setChargeCode(genericCodeObj);
                }
            }
            session.setAttribute("documentCharges", documentCharges);
            forwardName = "docChargesAdd";
            if (buttonValue.equals("add")) {
                if (session.getAttribute("docChargesAdd") != null) {
                    docChargesList = (List) session.getAttribute("docChargesAdd");
                    for (int i = 0; i < docChargesList.size(); i++) {
                        AirFreightDocumentCharges docCharges = (AirFreightDocumentCharges) docChargesList.get(i);
                        if (docCharges.getIndex() != null) {
                            if (docCharges.getIndex() > index) {
                                index = docCharges.getIndex();
                            }
                        } else {
                            index = docChargesList.size() - 1;
                        }
                    }
                    index++;
                } else {
                    index++;
                    docChargesList = new ArrayList();

                }
                if (documentCharges.getChargeCode() != null) {
                    docChargesList.add(documentCharges);
                } else {
                    String msg = "Please enter the proper data...";
                    request.setAttribute("exist", msg);
                }

                if (session.getAttribute("documentCharges") != null) {
                    session.removeAttribute("documentCharges");
                }
                session.setAttribute("docChargesAdd", docChargesList);
                forwardName = "docChargesAdd";
            }

            if (buttonValue != null && buttonValue.equals("chargeCode")) {
                List list = new ArrayList();
                String msg = "Charge Code already exists... ";
                if (session.getAttribute("docChargesAdd") != null) {
                    list = (List) session.getAttribute("docChargesAdd");

                    for (int i = 0; i < list.size(); i++) {
                        documentCharges = (AirFreightDocumentCharges) list.get(i);
                        if (documentCharges.getChargeCode().getCode().equals(code)) {
                            request.setAttribute("exist", msg);
                        }
                        if (documentCharges.getChargeCode().getCodedesc().equals(codeDesc)) {
                            request.setAttribute("exist", msg);
                        }
                    }
                }

                if (request.getAttribute("exist") == null && (code != null || !code.equals(""))) {
                    AirFreightDocumentCharges charges = new AirFreightDocumentCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findGenericCode("35", code);
                    genericCodeObj = null;
                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }
                    if (genericCodeObj != null) {
                        charges.setChargeCode(genericCodeObj);
                        session.setAttribute("documentCharges", charges);
                    }
                }

                if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                    AirFreightDocumentCharges charges = new AirFreightDocumentCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findByCodedesc(codeDesc);
                    genericCodeObj = null;
                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }
                    if (genericCodeObj != null) {
                        charges.setChargeCode(genericCodeObj);
                        session.setAttribute("documentCharges", charges);
                    }
                }
            }

        }
        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}