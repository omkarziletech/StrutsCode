/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.hibernate.HibernateSessionFactory;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AuditLogRecord;
import com.gp.cong.logisoft.domain.AuditLogRecordFTFRates;
import com.gp.cong.logisoft.domain.FTFCommodityCharges;
import com.gp.cong.logisoft.domain.FTFDetails;
import com.gp.cong.logisoft.domain.FTFDocumentCharges;
import com.gp.cong.logisoft.domain.FTFMaster;
import com.gp.cong.logisoft.domain.FTFStandardCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.HistoryLogInterceptor;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.FTFMasterDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.AddFTFForm;
import com.gp.cong.logisoft.util.DBUtil;

/** 
 * MyEclipse Struts
 * Creation date: 06-24-2008
 * 
 * XDoclet definition:
 * @struts.action path="/addFTF" name="addFTFForm" input="/jsps/ratemanagement/addFTF.jsp" scope="request" validate="true"
 */
public class AddFTFAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddFTFForm addFTFForm = (AddFTFForm) form;// TODO Auto-generated method stub
        FTFMaster ftfMaster = new FTFMaster();
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = addFTFForm.getButtonValue();
        FTFMasterDAO ftfMasterDAO = new FTFMasterDAO();
        String programid = null;
        String recordid = "";
        String message = "";
        String forwardName = "";
        HistoryLogInterceptor historyLogInterceptor = new HistoryLogInterceptor();
        DBUtil dbUtil = new DBUtil();
        if (buttonValue != null && buttonValue.equals("edit")) {
            programid = (String) session.getAttribute("processinfoforftf");
            if (session.getAttribute("addftfMaster") != null) {
                ftfMaster = (FTFMaster) session.getAttribute("addftfMaster");
            }

            if (ftfMaster.getId() != null) {
                recordid = ftfMaster.getId().toString();
            }
            List ftfdetails = new ArrayList();
            Set airftfdetails = new HashSet<FTFDetails>();
            if (session.getAttribute("ftfdetails") != null) {

                FTFDetails ftfDetails = (FTFDetails) session.getAttribute("ftfdetails");
                historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                if (ftfDetails.getId() != null) {
                    User userId = null;
                    if (session.getAttribute("loginuser") != null) {
                        userId = (User) session.getAttribute("loginuser");

                    }
                    historyLogInterceptor.setUserName(userId.getLoginName());
                    historyLogInterceptor.setOrgTerm(ftfMaster.getOrgTerminal());
                    historyLogInterceptor.setDisport(ftfMaster.getDestPort());
                    boolean flag = historyLogInterceptor.onFlushDirty(ftfDetails, ftfDetails.getId(), null, null, null, null);
                    if (flag) {
                        ///docCharges.setChangedDate(new Date());
                        //docCharges.setWhoChanged(userId.getLoginName());
                    }

                    airftfdetails.add(ftfDetails);
                }
                ftfMaster.setFtfDetailsSet(airftfdetails);
            }
            List cossList = new ArrayList();
            Set coSList = new HashSet<FTFCommodityCharges>();
            if (session.getAttribute("ftfcssList") != null) {

                cossList = (List) session.getAttribute("ftfcssList");

                for (int j = 0; j < cossList.size(); j++) {
                    FTFCommodityCharges ftfCssListd = (FTFCommodityCharges) cossList.get(j);
                    historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                    if (ftfCssListd.getId() != null) {

                        User userId = null;
                        if (session.getAttribute("loginuser") != null) {
                            userId = (User) session.getAttribute("loginuser");
                        }
                        historyLogInterceptor.setUserName(userId.getLoginName());
                        historyLogInterceptor.setOrgTerm(ftfMaster.getOrgTerminal());
                        historyLogInterceptor.setDisport(ftfMaster.getDestPort());
                        boolean flag = historyLogInterceptor.onFlushDirty(ftfCssListd, ftfCssListd.getId(), null, null, null, null);

                        if (flag) {
                        }
                    }
                    coSList.add(ftfCssListd);

                }
                ftfMaster.setFtfCommChgSet(coSList);
            }
            List docList = new ArrayList();
            Set docSList = new HashSet<FTFDocumentCharges>();
            if (session.getAttribute("ftfdocChargesAdd") != null) {
                docList = (List) session.getAttribute("ftfdocChargesAdd");
                for (int k = 0; k < docList.size(); k++) {
                    FTFDocumentCharges docCharges = (FTFDocumentCharges) docList.get(k);
                    docSList.add(docCharges);
                }

                ftfMaster.setFtfDocumentSet(docSList);
            }

            List coagssList = new ArrayList();
            Set cossSList = new HashSet<FTFDocumentCharges>();

            //STANDARD CHARGES
            if (session.getAttribute("ftfagssAdd") != null) {
                coagssList = (List) session.getAttribute("ftfagssAdd");
                for (int i = 0; i < coagssList.size(); i++) {
                    FTFStandardCharges coss1 = (FTFStandardCharges) coagssList.get(i);
                    historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                    if (coss1.getId() != null) {
                        User userId = null;
                        if (session.getAttribute("loginuser") != null) {
                            userId = (User) session.getAttribute("loginuser");
                        }
                        historyLogInterceptor.setUserName(userId.getLoginName());
                        historyLogInterceptor.setOrgTerm(ftfMaster.getOrgTerminal());
                        historyLogInterceptor.setDisport(ftfMaster.getDestPort());
                        boolean flag = historyLogInterceptor.onFlushDirty(coss1, coss1.getId(), null, null, null, null);

                        if (flag) {
                            coss1.setChangedDate(new Date());
                            coss1.setWhoChanged(userId.getLoginName());
                        }
                    }
                    cossSList.add(coss1);

                }
                ftfMaster.setFtfStdChgSet(cossSList);
            }

            List coratesList = new ArrayList();

            //String programid=null;
            programid = (String) session.getAttribute("processinfoforairRates");
            //String recordid="";
            if (ftfMaster != null && ftfMaster.getId() != null) {
                recordid = ftfMaster.getId().toString();
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            ftfMasterDAO.update(ftfMaster, userId.getLoginName());
            GenericCode genObj = null;
            GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
            List newList = new ArrayList();
            if (ftfMaster.getComCode() != null && !ftfMaster.getComCode().equals("000000")) {
                newList = (List) session.getAttribute("ftfnoncommonList");
                for (int i = 0; i < newList.size(); i++) {
                    FTFMaster aStandardCharges11 = (FTFMaster) newList.get(i);//parent
                    if (aStandardCharges11.getComCode() != null && ftfMaster.getComCode() != null &&
                            aStandardCharges11.getComCode() != null && ftfMaster.getComCode() != null && aStandardCharges11.getComCode().equals(ftfMaster.getComCode())) {
                        newList.set(i, ftfMaster);
                    }

                }
                session.setAttribute("ftfnoncommonList", newList);
                session.setAttribute("FtfUpdateRecords", ftfMaster);
            } else {
                genObj = genericCodeDAO.findById(11292);
                List list = ftfMasterDAO.findAllDetails(ftfMaster.getOrgTerminal(), ftfMaster.getDestPort(), genObj.getCode());
                if (list != null && list.size() > 0) {
                    FTFMaster lclGetStd = (FTFMaster) list.get(0);

                    if (lclGetStd.getFtfStdChgSet() != null) {
                        Iterator iter = (Iterator) lclGetStd.getFtfStdChgSet().iterator();
                        while (iter.hasNext()) {
                            FTFStandardCharges retailStdChild = (FTFStandardCharges) iter.next();
                            retailStdChild.setFtfId(ftfMaster.getId());
                            newList.add(retailStdChild);

                        }
                        session.setAttribute("ftfcommonList", newList);
                        session.setAttribute("ffcommonListCaps", "Common Accessorial Charges (All)");
                    }
                }

            }
            programid = (String) session.getAttribute("processinfoforftf");
            if (programid != null) {
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");//error
            }
            message = "Foreign to Foreign  details Edited successfully";
            session.setAttribute("ftfmessage", message);
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("ftfdefaultRate") != null) {
                session.removeAttribute("ftfdefaultRate");
            }
            if (session.getAttribute("addftfMaster") != null) {

                session.removeAttribute("addftfMaster");
            }
            if (session.getAttribute("ftfcssList") != null) {

                session.removeAttribute("ftfcssList");
            }
            if (session.getAttribute("ftfdocChargesAdd") != null) {

                session.removeAttribute("ftfdocChargesAdd");
            }
            if (session.getAttribute("ftfagssAdd") != null) {

                session.removeAttribute("ftfagssAdd");
            }
            if (session.getAttribute("ftfdetails") != null) {
                session.removeAttribute("ftfdetails");
            }
            if (session.getAttribute("ftfStandardCharges") != null) {

                session.removeAttribute("ftfStandardCharges");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");
            }
            if (session.getAttribute("getAddssEdit") != null) {
                session.removeAttribute("getAddssEdit");
            }
            if (session.getAttribute("getDocEdit") != null) {
                session.removeAttribute("getDocEdit");
            }
            if (session.getAttribute("ftfeditrecord") != null) {
                session.removeAttribute("ftfeditrecord");
            }

            session.setAttribute("trade", "addftfrates");
        }

        if (buttonValue != null && buttonValue.equals("save")) {
            List cossList = new ArrayList();
            Set coSList = new HashSet<FTFCommodityCharges>();
            if (session.getAttribute("ftfcssList") != null) {
                cossList = (List) session.getAttribute("ftfcssList");
                for (int j = 0; j < cossList.size(); j++) {
                    FTFCommodityCharges ftfCssListd = (FTFCommodityCharges) cossList.get(j);
                    coSList.add(ftfCssListd);

                }
                ftfMaster.setFtfCommChgSet(coSList);
            }
            //-------------
            List docList = new ArrayList();
            Set docSList = new HashSet<FTFDocumentCharges>();

            if (session.getAttribute("ftfdocChargesAdd") != null) {

                docList = (List) session.getAttribute("ftfdocChargesAdd");
                for (int k = 0; k < docList.size(); k++) {
                    FTFDocumentCharges docCharges = (FTFDocumentCharges) docList.get(k);
                    docSList.add(docCharges);
                }
                ftfMaster.setFtfDocumentSet(docSList);
            }

            //----------------------------------------
            List coagssList = new ArrayList();
            Set cossSList = new HashSet<FTFDocumentCharges>();
            if (session.getAttribute("ftfagssAdd") != null) {
                coagssList = (List) session.getAttribute("ftfagssAdd");
                for (int i = 0; i < coagssList.size(); i++) {
                    FTFStandardCharges coss1 = (FTFStandardCharges) coagssList.get(i);
                    cossSList.add(coss1);
                }
                ftfMaster.setFtfStdChgSet(cossSList);
            }
            //-------------------------------------
            List ftfdetails = new ArrayList();
            Set airftfdetails = new HashSet<FTFDetails>();
            if (session.getAttribute("ftfdetails") != null) {
                FTFDetails document1 = (FTFDetails) session.getAttribute("ftfdetails");
                airftfdetails.add(document1);
                ftfMaster.setFtfDetailsSet(airftfdetails);
            }
            if (session.getAttribute("addftfMaster") != null) {
                FTFMaster master = (FTFMaster) session.getAttribute("addftfMaster");
                ftfMaster.setOrgTerminal(master.getOrgTerminal());
                ftfMaster.setDestPort(master.getDestPort());
                ftfMaster.setComCode(master.getComCode());
                ftfMaster.setBlBottomLine(master.getBlBottomLine());
                ftfMaster.setFfCommission(master.getFfCommission());
                ftfMaster.setMaxDocCharge(master.getMaxDocCharge());

                User userId = null;
                if (session.getAttribute("loginuser") != null) {
                    userId = (User) session.getAttribute("loginuser");
                }

                ftfMasterDAO.save(ftfMaster, userId.getLoginName());


                message = "Foreign to Foreign details added successfully";
                session.setAttribute("ftfmessage", message);

            }//if
            List newList = new ArrayList();
            GenericCode genObj = null;
            GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
            if (ftfMaster.getComCode() != null && !ftfMaster.getComCode().equals("000000")) {
                if (session.getAttribute("ftfnoncommonList") != null) {
                    newList = (List) session.getAttribute("ftfnoncommonList");
                } else {
                    newList = new ArrayList();
                }
                newList.add(ftfMaster);
                session.setAttribute("ftfnoncommonList", newList);
                session.setAttribute("FtfUpdateRecords", ftfMaster);
            } else {
                genObj = genericCodeDAO.findById(11292);
                List list = ftfMasterDAO.findAllDetails(ftfMaster.getOrgTerminal(), ftfMaster.getDestPort(), genObj.getCode());
                if (list != null && list.size() > 0) {
                    FTFMaster lclGetStd = (FTFMaster) list.get(0);

                    if (lclGetStd.getFtfStdChgSet() != null) {
                        Iterator iter = (Iterator) lclGetStd.getFtfStdChgSet().iterator();
                        while (iter.hasNext()) {
                            FTFStandardCharges retailStdChild = (FTFStandardCharges) iter.next();
                            retailStdChild.setFtfId(ftfMaster.getId());
                            newList.add(retailStdChild);

                        }
                        session.setAttribute("ftfcommonList", newList);
                        session.setAttribute("ffcommonListCaps", "Common Accessorial Charges (All)");
                    }
                }

            }




            if (session.getAttribute("ftfdefaultRate") != null) {
                session.removeAttribute("ftfdefaultRate");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");

            }
            if (session.getAttribute("addftfMaster") != null) {

                session.removeAttribute("addftfMaster");
            }
            if (session.getAttribute("ftfcssList") != null) {

                session.removeAttribute("ftfcssList");
            }
            if (session.getAttribute("ftfdocChargesAdd") != null) {

                session.removeAttribute("ftfdocChargesAdd");
            }
            if (session.getAttribute("ftfagssAdd") != null) {

                session.removeAttribute("ftfagssAdd");
            }
            if (session.getAttribute("ftfdetails") != null) {
                session.removeAttribute("ftfdetails");
            }
            if (session.getAttribute("ftfStandardCharges") != null) {

                session.removeAttribute("ftfStandardCharges");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");
            }
            if (session.getAttribute("getAddssEdit") != null) {
                session.removeAttribute("getAddssEdit");
            }
            if (session.getAttribute("getDocEdit") != null) {
                session.removeAttribute("getDocEdit");
            }
            if (session.getAttribute("ftfeditrecord") != null) {
                session.removeAttribute("ftfeditrecord");
            }


        }//------------------------------------------------------------------------------------------
        else if (buttonValue != null && buttonValue.equals("delete")) {

            //programid=(String)session.getAttribute("processinfoforcoLoad");
            if (session.getAttribute("addftfMaster") != null) {
                ftfMaster = (FTFMaster) session.getAttribute("addftfMaster");
            }
            programid = (String) session.getAttribute("processinfoforftf");
            if (ftfMaster != null && ftfMaster.getId() != null) {
                recordid = ftfMaster.getId().toString();
            }
            if (programid != null) {
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");//error
            }
            List newList = new ArrayList();
            if (ftfMaster.getComCode() != null && !ftfMaster.getComCode().equals("000000")) {
                newList = (List) session.getAttribute("ftfnoncommonList");
                for (int i = 0; i < newList.size(); i++) {
                    FTFMaster aStandardCharges11 = (FTFMaster) newList.get(i);//parent
                    if (aStandardCharges11.getComCode() != null && ftfMaster.getComCode() != null &&
                            aStandardCharges11.getComCode() != null && ftfMaster.getComCode() != null && aStandardCharges11.getComCode().equals(ftfMaster.getComCode())) {
                        newList.remove(aStandardCharges11);
                        break;
                    }

                }
                session.setAttribute("ftfnoncommonList", newList);

            } else if (ftfMaster.getComCode() != null && ftfMaster.getComCode().equals("000000")) {

                if (session.getAttribute("ftfcommonList") != null) {

                    session.removeAttribute("ftfcommonList");
                }
                if (session.getAttribute("ffcommonListCaps") != null) {

                    session.removeAttribute("ffcommonListCaps");
                }

            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            ftfMasterDAO.delete(ftfMaster, userId.getLoginName());



            message = "Foreign to Foreign details Deleted successfully";
            session.setAttribute("ftfmessage", message);
            if (session.getAttribute("addftfMaster") != null) {

                session.removeAttribute("addftfMaster");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");

            }
            if (session.getAttribute("ftfagssAdd") != null) {
                session.removeAttribute("ftfagssAdd");
            }
            if (session.getAttribute("ftfdocumentCharges") != null) {
                session.removeAttribute("ftfdocumentCharges");
            }
            if (session.getAttribute("applyftfcharges") != null) {
                session.removeAttribute("applyftfcharges");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }

            if (session.getAttribute("addftfMaster") != null) {

                session.removeAttribute("addftfMaster");
            }


            if (session.getAttribute("searchftfList") != null) {
                session.removeAttribute("searchftfList");

            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");
            }
            if (session.getAttribute("getAddssEdit") != null) {
                session.removeAttribute("getAddssEdit");
            }
            if (session.getAttribute("getDocEdit") != null) {
                session.removeAttribute("getDocEdit");
            }
            if (session.getAttribute("ftfeditrecord") != null) {
                session.removeAttribute("ftfeditrecord");
            }
            session.setAttribute("trade", "addftfrates");
        } //---------------------------------------------------------------------------------------------------
        else if (buttonValue != null && buttonValue.equals("note")) {
            if (session.getAttribute("addftfMaster") != null) {
                ftfMaster = (FTFMaster) session.getAttribute("addftfMaster");
            }

            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforftf") != null) {
                String itemId = (String) session.getAttribute("processinfoforftf");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();

            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordFTFRates();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            //noteBean.setUser(user);
            noteBean.setPageName("cancelftfdetails");
            String noteId = "";

            if (ftfMaster.getId() != null) {
                noteId = ftfMaster.getId().toString();

                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }



            List auditList = null;

            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            String documentName = "User";
            request.setAttribute("buttonValue", buttonValue);
            //session.setAttribute("document",documentName);
            return mapping.findForward("note");

        } else if (buttonValue != null && buttonValue.equals("savecancel")) {
            if (session.getAttribute("ftfdefaultRate") != null) {
                session.removeAttribute("ftfdefaultRate");
            }
            if (session.getAttribute("ftfMaster") != null) {
                session.removeAttribute("ftfMaster");
            }
            if (session.getAttribute("ftfdocChargesAdd") != null) {
                session.removeAttribute("ftfdocChargesAdd");
            }
            if (session.getAttribute("ftfdetails") != null) {
                session.removeAttribute("ftfdetails");
            }
            if (session.getAttribute("ftfStandardCharges") != null) {
                session.removeAttribute("ftfStandardCharges");
            }

            if (session.getAttribute("ftfcssList") != null) {
                session.removeAttribute("ftfcssList");
            }

            if (session.getAttribute("applyftfcharges") != null) {
                session.removeAttribute("applyftfcharges");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("ftfStandardCharges") != null) {

                session.removeAttribute("ftfStandardCharges");
            }

            if (session.getAttribute("ftfmessage") != null) {
                session.removeAttribute("ftfmessage");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("addftfMaster") != null) {

                session.removeAttribute("addftfMaster");
            }

        } else if (buttonValue != null && buttonValue.equals("cancelview")) {
            if (session.getAttribute("addftfMaster") != null) {
                ftfMaster = (FTFMaster) session.getAttribute("addftfMaster");
            }
            programid = (String) session.getAttribute("processinfoforftf");
            if (ftfMaster != null && ftfMaster.getId() != null) {
                recordid = ftfMaster.getId().toString();
            }
            if (programid != null) {
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");//error
            }

            if (session.getAttribute("ftfdefaultRate") != null) {
                session.removeAttribute("ftfdefaultRate");
            }
            if (session.getAttribute("ftfMaster") != null) {
                session.removeAttribute("ftfMaster");
            }
            if (session.getAttribute("ftfdocChargesAdd") != null) {
                session.removeAttribute("ftfdocChargesAdd");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");

            }
            if (session.getAttribute("ftfdetails") != null) {
                session.removeAttribute("ftfdetails");
            }
            if (session.getAttribute("ftfStandardCharges") != null) {
                session.removeAttribute("ftfStandardCharges");
            }

            if (session.getAttribute("ftfcssList") != null) {
                session.removeAttribute("ftfcssList");
            }

            if (session.getAttribute("applyftfcharges") != null) {
                session.removeAttribute("applyftfcharges");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("ftfStandardCharges") != null) {

                session.removeAttribute("ftfStandardCharges");
            }
            if (session.getAttribute("ftfmessage") != null) {
                session.removeAttribute("ftfmessage");
            }
            if (session.getAttribute("includedList") != null) {
                session.removeAttribute("includedList");
            }
            if (session.getAttribute("addftfMaster") != null) {

                session.removeAttribute("addftfMaster");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");
            }
            if (session.getAttribute("getAddssEdit") != null) {
                session.removeAttribute("getAddssEdit");
            }
            if (session.getAttribute("getDocEdit") != null) {
                session.removeAttribute("getDocEdit");
            }
            if (session.getAttribute("ftfeditrecord") != null) {
                session.removeAttribute("ftfeditrecord");
            }

        } else if (buttonValue != null && buttonValue.equals("cancel")) {
            if (session.getAttribute("addftfMaster") != null) {
                ftfMaster = (FTFMaster) session.getAttribute("addftfMaster");
            }
            programid = (String) session.getAttribute("processinfoforftf");
            if (ftfMaster != null && ftfMaster.getId() != null) {
                recordid = ftfMaster.getId().toString();
            }
            if (programid != null) {
                dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");//error
            }

            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");
            }
            if (session.getAttribute("addftfMaster") != null) {
                session.removeAttribute("addftfMaster");
            }
            if (session.getAttribute("getFtfEdit") != null) {
                session.removeAttribute("getFtfEdit");
            }
            if (session.getAttribute("getAddssEdit") != null) {
                session.removeAttribute("getAddssEdit");
            }
            if (session.getAttribute("getDocEdit") != null) {
                session.removeAttribute("getDocEdit");
            }
            if (session.getAttribute("ftfeditrecord") != null) {
                session.removeAttribute("ftfeditrecord");
            }
        }
        if (session.getAttribute("ftfeditrecord") != null) {

            session.removeAttribute("ftfeditrecord");
        }

        //----------------
        if (session.getAttribute("listAgsCoitem") != null) {

            session.removeAttribute("listAgsCoitem");
        }
        //-------------
        if (session.getAttribute("listCoFtfitem") != null) {

            session.removeAttribute("listCoFtfitem");
        }//-----------------

        if (session.getAttribute("ftfdocChargesAdd") != null) {

            session.removeAttribute("ftfdocChargesAdd");
        }

        session.setAttribute("trade", "ftf");
        forwardName = "addftf";
        return mapping.findForward(forwardName);

    }
}