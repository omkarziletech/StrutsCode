/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.domain.AirFreightFlightShedules;
import com.gp.cong.logisoft.domain.FclBuy;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.RefTerminalTemp;
import com.gp.cong.logisoft.domain.StandardCharges;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.RefTerminalDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.FlightSheduleForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-22-2008
 * 
 * XDoclet definition:
 * @struts.action path="/flightShedule" name="flightSheduleForm" input="/jsps/ratemanagement/flightShedule.jsp" scope="request" validate="true"
 */
public class FlightSheduleAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        FlightSheduleForm flightSheduleForm = (FlightSheduleForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String terminalName = flightSheduleForm.getTerminalName();
        String terminalNumber = flightSheduleForm.getTerminalNumber();
        String buttonValue = flightSheduleForm.getButtonValue();
        RefTerminalDAO refTerminalDAO = new RefTerminalDAO();
        RefTerminalTemp refTerminal = null;
        FclBuy fclBuy = new FclBuy();
        StandardCharges standardCharges = new StandardCharges();
        AirFreightFlightShedules flightShedules = new AirFreightFlightShedules();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        List flightSheduleList = new ArrayList();
        int index = flightSheduleForm.getIndex();
        int index1 = 0;

        if (request.getParameter("index") != null && request.getParameter("index") != "") {
            int ind = Integer.parseInt(request.getParameter("index"));

            List flightShedulesAdd = (List) session.getAttribute("flightShedulesAdd");
            AirFreightFlightShedules airFrieght = (AirFreightFlightShedules) flightShedulesAdd.get(ind);
            session.setAttribute("airFrieght", airFrieght);
            forwardName = "flightSheduleEdit";
        } else {
            StringBuffer cmbselect = new StringBuffer();
            String[] days = flightSheduleForm.getDay();
            if (days != null) {
                for (int i = 0; i < days.length; i++) {
                    if (i == (days.length - 1)) {
                        cmbselect.append(days[i]);

                    } else {
                        cmbselect.append(days[i] + ",");

                    }
                }
            } else {
                cmbselect.append("'No Day'");
            }

            flightShedules.setDay(cmbselect.toString());

            flightShedules.setDeparture(flightSheduleForm.getFlightHours() + ":" + flightSheduleForm.getFlightMinutes());
            flightShedules.setCutOffTime(flightSheduleForm.getCutOffFlightHours() + ":" + flightSheduleForm.getCutOffFlightMinutes());
            flightShedules.setFlight(flightSheduleForm.getFlight());
            flightShedules.setAircraftType(flightSheduleForm.getAirCraftType());
            flightShedules.setStops(flightSheduleForm.getStops());
            forwardName = "flightShedulesAdd";
            if (buttonValue.equals("add")) {
                if (session.getAttribute("flightShedulesAdd") != null) {
                    flightSheduleList = (List) session.getAttribute("flightShedulesAdd");
                    for (int i = 0; i < flightSheduleList.size(); i++) {
                        AirFreightFlightShedules airFreight = (AirFreightFlightShedules) flightSheduleList.get(i);
                        if (airFreight.getIndex() != null) {
                            if (airFreight.getIndex() > index1) {
                                index1 = airFreight.getIndex();
                            }
                        } else {
                            index1 = flightSheduleList.size() - 1;
                        }
                    }
                    index1++;
                } else {
                    flightSheduleList = new ArrayList();
                    index1++;
                }
                flightShedules.setIndex(index1);
                flightSheduleList.add(flightShedules);
                session.setAttribute("flightShedulesAdd", flightSheduleList);
                forwardName = "flightShedulesAdd";
            }

            if (buttonValue != null && buttonValue.equals("popupsearch")) {
                if (session.getAttribute("standardCharges") != null) {
                    standardCharges = (StandardCharges) session.getAttribute("standardCharges");
                }
                if (standardCharges != null) {
                    if (terminalNumber != null && !terminalNumber.equals("")) {

                        refTerminal = refTerminalDAO.findById1(terminalNumber);

                        List portsList = genericCodeDAO.findGenericCode("1", terminalNumber);
                        if (portsList != null && portsList.size() > 0) {
                            GenericCode ports = (GenericCode) portsList.get(0);
                            standardCharges.setScheduleTerminal(ports);
                            session.setAttribute("standardCharges", standardCharges);
                        }


                    }

                    if (terminalName != null && !terminalName.equals("")) {
                        List portsList = genericCodeDAO.findByCodedesc(terminalName);
                        if (portsList != null && portsList.size() > 0) {

                            GenericCode ports = (GenericCode) portsList.get(0);
                            standardCharges.setScheduleTerminal(ports);
                            session.setAttribute("standardCharges", standardCharges);
                        }
                    }

                }
            }
            forwardName = "flightShedulesAdd";

        }


        request.setAttribute("buttonValue", buttonValue);
        return mapping.findForward(forwardName);
    }
}
