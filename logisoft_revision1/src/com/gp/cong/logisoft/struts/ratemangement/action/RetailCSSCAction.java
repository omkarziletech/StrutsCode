/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;

import com.gp.cong.logisoft.domain.RetailCommodityCharges;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.RetailCSSCForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-16-2008
 * 
 * XDoclet definition:
 * @struts.action path="/retailCSSC" name="retailCSSCForm" input="/jsps/ratemanagement/retailCSSC.jsp" scope="request" validate="true"
 */
public class RetailCSSCAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    java.util.Date javaDate = null;

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception{
        RetailCSSCForm retailCSSCForm = (RetailCSSCForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        RetailCommodityCharges retailCommodityCharges = new RetailCommodityCharges();
        String code = retailCSSCForm.getCharge();
        String codeDesc = retailCSSCForm.getDesc();
        String buttonValue = retailCSSCForm.getButtonValue();
        String standard = retailCSSCForm.getStandard();
        GenericCode genericCodeObj = new GenericCode();
        String exclude = retailCSSCForm.getExclude();
        String asFreighted = retailCSSCForm.getAsFreightedCheckBox();
        int index = 0;
        User user = null;
        if (request.getParameter("ind") != null) {
            RetailCommodityCharges retailCommodity = new RetailCommodityCharges();
            int ind = Integer.parseInt(request.getParameter("ind"));
            List codeList1 = (List) session.getAttribute("retailcssList");
            retailCommodity = (RetailCommodityCharges) codeList1.get(ind);
            session.setAttribute("retailCommodityCharges", retailCommodity);
            forwardName = "csssEdit";
        } else {
            if (session.getAttribute("retailCommodityCharges") != null) {
                retailCommodityCharges = (RetailCommodityCharges) session.getAttribute("retailCommodityCharges");
            } else {
                retailCommodityCharges = new RetailCommodityCharges();
            }
            AirRatesBean airRatesBean = new AirRatesBean();
            airRatesBean.setStandard(retailCSSCForm.getStandard());
            airRatesBean.setExclude(retailCSSCForm.getExclude());
            airRatesBean.setAsFrfgted(retailCSSCForm.getAsFreightedCheckBox());
            request.setAttribute("airRatesBean", airRatesBean);
            if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
                retailCommodityCharges.setAsFreightedCheckBox("X");
            } else if (asFreighted == null) {
                retailCommodityCharges.setAsFreightedCheckBox(null);
            }


            List csssList = new ArrayList();

            GenericCode genObj = null;
            GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
            String type = retailCSSCForm.getChargeType();
            if (code != null && !code.equals("")) {
                genericCodeObj = null;
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                List codeList = genericDAO.findGenericCode("36", code);
                if (codeList.size() > 0) {
                    genericCodeObj = (GenericCode) codeList.get(0);
                }
                if (genericCodeObj != null) {
                    retailCommodityCharges.setChargeCode(genericCodeObj);
                }
            }

            if (codeDesc != null && !codeDesc.equals("")) {
                genericCodeObj = null;
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                List codeList = genericDAO.findByCodedesc(codeDesc);
                if (codeList.size() > 0) {
                    genericCodeObj = (GenericCode) codeList.get(0);
                }
                if (genericCodeObj != null) {
                    retailCommodityCharges.setChargeCode(genericCodeObj);
                }
            }

            if (type != null && !type.equals("0")) {
                genObj = (GenericCode) genericCodeDAO.findById(Integer.parseInt(type));
                retailCommodityCharges.setChargeType(genObj);



            }
            GenericCode gen = null;
            if (exclude != null && exclude.equalsIgnoreCase("on")) {
                retailCommodityCharges.setExclude("Y");
                retailCommodityCharges.setChargeType(gen);
            } else if (exclude == null) {
                retailCommodityCharges.setExclude("N");
            }
            forwardName = "csssAdd";


            if (standard != null && standard.equalsIgnoreCase("on")) {
                retailCommodityCharges.setStandard("Y");
            } else if (standard == null) {
                retailCommodityCharges.setStandard("N");
            }

            if (session.getAttribute("loginuser") != null) {
                user = (User) session.getAttribute("loginuser");
            }
            retailCommodityCharges.setWhoChanged(user.getLoginName());
            if (retailCSSCForm.getAmtPerCft() != null && !retailCSSCForm.getAmtPerCft().equals("")) {
                retailCommodityCharges.setAmtPerCft(new Double(retailCSSCForm.getAmtPerCft()));
            } else {
                retailCommodityCharges.setAmtPerCft(0.0);
            }
            /*for chargetype
            if(retailCSSCForm.getChargeType()!=null && !retailCSSCForm.getChargeType().equals(""))
            {
            retailCommodityCharges.setChargeType(retailCSSCForm.getChargeType());
            }
            else
            {
            retailCommodityCharges.setChargeType(0.0);
            }
             */
            if (retailCSSCForm.getAmtPer100lbs() != null && !retailCSSCForm.getAmtPer100lbs().equals("")) {
                retailCommodityCharges.setAmtPer100lbs(new Double(retailCSSCForm.getAmtPer100lbs()));
            } else {
                retailCommodityCharges.setAmtPer100lbs(0.0);
            }
            if (retailCSSCForm.getAmtPerCbm() != null && !retailCSSCForm.getAmtPerCbm().equals("")) {
                retailCommodityCharges.setAmtPerCbm(new Double(retailCSSCForm.getAmtPerCbm()));
            } else {
                retailCommodityCharges.setAmtPerCbm(0.0);
            }
            if (retailCSSCForm.getAmtPer1000kg() != null && !retailCSSCForm.getAmtPer1000kg().equals("")) {
                retailCommodityCharges.setAmtPer1000kg(new Double(retailCSSCForm.getAmtPer1000kg()));
            } else {
                retailCommodityCharges.setAmtPer1000kg(0.0);
            }
            if (retailCSSCForm.getAmount() != null && !retailCSSCForm.getAmount().equals("")) {
                retailCommodityCharges.setAmount(new Double(retailCSSCForm.getAmount()));
            } else {
                retailCommodityCharges.setAmount(0.0);
            }
            if (retailCSSCForm.getPercentage() != null && !retailCSSCForm.getPercentage().equals("")) {
                double d = Double.parseDouble(retailCSSCForm.getPercentage());
                retailCommodityCharges.setPercentage(d / 1000);
            } else {
                retailCommodityCharges.setPercentage(0.0);
            }
            if (retailCSSCForm.getMinAmt() != null && !retailCSSCForm.getMinAmt().equals("")) {
                retailCommodityCharges.setMinAmt(new Double(retailCSSCForm.getMinAmt()));
            } else {
                retailCommodityCharges.setMinAmt(0.0);
            }
            if (retailCSSCForm.getInsuranceAmt() != null && !retailCSSCForm.getInsuranceAmt().equals("")) {
                retailCommodityCharges.setInsuranceAmt(new Double(retailCSSCForm.getInsuranceAmt()));
            } else {
                retailCommodityCharges.setInsuranceAmt(0.0);
            }
            if (retailCSSCForm.getInsuranceRate() != null && !retailCSSCForm.getInsuranceRate().equals("")) {
                retailCommodityCharges.setInsuranceRate(new Double(retailCSSCForm.getInsuranceRate()));
            } else {
                retailCommodityCharges.setInsuranceRate(0.0);
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            if (userId != null) {
                retailCommodityCharges.setWhoChanged(userId.getLoginName());
            }
            if (retailCSSCForm.getTxtItemcreatedon() != null && retailCSSCForm.getTxtItemcreatedon() != "") {
                java.util.Date javaDate = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
                    javaDate = sdf.parse(retailCSSCForm.getTxtItemcreatedon() + " " + sdf1.format(new Date()));
                retailCommodityCharges.setEffectiveDate(javaDate);
            }

            session.setAttribute("retailCommodityCharges", retailCommodityCharges);

            if (buttonValue.equals("add") && !buttonValue.equals("")) {
                if (session.getAttribute("retailcssList") != null) {
                    csssList = (List) session.getAttribute("retailcssList");
                    for (int i = 0; i < csssList.size(); i++) {
                        RetailCommodityCharges retailComm = (RetailCommodityCharges) csssList.get(i);
                        if (retailComm.getIndex() != null) {

                            if (retailComm.getIndex() > index) {
                                index = retailComm.getIndex();
                            }
                        } else {
                            index = csssList.size() - 1;
                        }
                    }
                    index++;
                } else {
                    csssList = new ArrayList();
                    index++;
                }
                retailCommodityCharges.setIndex(index);
                if (retailCommodityCharges.getChargeCode() != null) {
                    csssList.add(retailCommodityCharges);
                } else {
                    String msg = "Please enter the proper Charge Code...";
                    request.setAttribute("exist", msg);
                }
                session.setAttribute("retailcssList", csssList);
                forwardName = "csssAdd";
                request.setAttribute("buttonValue", buttonValue);
                if (session.getAttribute("retailCommodityCharges") != null) {
                    session.removeAttribute("retailCommodityCharges");
                }

                if (session.getAttribute("listcss") != null) {
                    session.removeAttribute("listcss");
                }
            }
            if (buttonValue != null && buttonValue.equals("coloumnadd")) {
                session.setAttribute("listcss", "listcss");
            }

            if (buttonValue != null && buttonValue.equals("chargeCode")) {
                List list = new ArrayList();
                String msg = "Charge Code already exists... ";

                if (session.getAttribute("retailcssList") != null) {
                    list = (List) session.getAttribute("retailcssList");

                    for (int i = 0; i < list.size(); i++) {
                        retailCommodityCharges = (RetailCommodityCharges) list.get(i);
                        if (retailCommodityCharges.getChargeCode().getCode().equals(code)) {
                            request.setAttribute("exist", msg);
                        }
                        if (retailCommodityCharges.getChargeCode().getCodedesc().equals(code)) {
                            request.setAttribute("exist", msg);
                        }
                    }
                }
                if (request.getAttribute("exist") == null && (code != null || !code.equals(""))) {
                    genericCodeObj = null;
                    RetailCommodityCharges retailCommodityCharges2 = new RetailCommodityCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findGenericCode("36", code);
                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }
                    if (genericCodeObj != null) {
                        retailCommodityCharges2.setChargeCode(genericCodeObj);
                        session.setAttribute("retailCommodityCharges", retailCommodityCharges2);
                    }
                }

                if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                    genericCodeObj = null;
                    RetailCommodityCharges retailCommodityCharges2 = new RetailCommodityCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findByCodedesc(codeDesc);
                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }
                    if (genericCodeObj != null) {
                        retailCommodityCharges2.setChargeCode(genericCodeObj);
                        session.setAttribute("retailCommodityCharges", retailCommodityCharges2);
                    }
                }
            } else if (buttonValue != null && buttonValue.equals("delete")) {

                List cssList = new ArrayList();
                if (session.getAttribute("retailcssList") != null) {

                    cssList = (List) session.getAttribute("retailcssList");
                }
                for (int i = 0; i < cssList.size(); i++) {
                    RetailCommodityCharges retailCommodity = (RetailCommodityCharges) cssList.get(i);
                    if (retailCommodity.getChargeCode() != null && retailCSSCForm.getRetailCSSId() != null && retailCommodity.getChargeCode().getCode().equals(retailCSSCForm.getRetailCSSId())) {
                        cssList.remove(retailCommodity);
                    }
                    session.setAttribute("retailcssList", cssList);
                }
                if (session.getAttribute("retailCommodityCharges") != null) {
                    session.removeAttribute("retailCommodityCharges");
                }

                forwardName = "csssAdd";
            }
        }

        return mapping.findForward(forwardName);

    }
}