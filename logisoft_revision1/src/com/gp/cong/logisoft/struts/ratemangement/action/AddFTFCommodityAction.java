/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.FTFCommodityCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.AddFTFCommodityForm;

public class AddFTFCommodityAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddFTFCommodityForm addFTFCommodityForm = (AddFTFCommodityForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = addFTFCommodityForm.getButtonValue();
        FTFCommodityCharges ftfCommodityCharges = null;
        String chargeType = addFTFCommodityForm.getChargeType();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        GenericCode genObj = new GenericCode();
        String standard = addFTFCommodityForm.getStandard();
        String chargeCode = addFTFCommodityForm.getCharge();
        String chargeCodeDesc = addFTFCommodityForm.getDesc();
        String amtPerCft = addFTFCommodityForm.getAmtPerCft();
        String amtPer100lbs = addFTFCommodityForm.getAmtPer100lbs();
        String amtPerCbm = addFTFCommodityForm.getAmtPerCbm();
        String amtPer1000kg = addFTFCommodityForm.getAmtPer1000kg();
        String exclude = addFTFCommodityForm.getExclude();
        String amount = addFTFCommodityForm.getAmount();
        String percentage = addFTFCommodityForm.getPercentage();
        String minAmt = addFTFCommodityForm.getMinAmt();
        String effectiveDate = addFTFCommodityForm.getTxtItemcreatedon();
        String asFrfgted = addFTFCommodityForm.getAsFrfgted();
        String insuranceRate = addFTFCommodityForm.getInsuranceRate();
        String insuranceAmt = addFTFCommodityForm.getInsuranceAmt();
        List ftfcssList = new ArrayList();
        GenericCode genericCodeObj = new GenericCode();
        AirRatesBean airRatesBean = new AirRatesBean();
        airRatesBean.setStandard(standard);
        airRatesBean.setAsFrfgted(asFrfgted);
        request.setAttribute("airRatesBean", airRatesBean);
        String forwardName = "";

        if (request.getParameter("ind") != null) {
            FTFCommodityCharges lclCoload = new FTFCommodityCharges();
            int ind = Integer.parseInt(request.getParameter("ind"));
            List codeList1 = (List) session.getAttribute("ftfcssList");
            lclCoload = (FTFCommodityCharges) codeList1.get(ind);
            session.setAttribute("addftfcommodity", lclCoload);
            forwardName = "addftfEdit";
        } else {
            if (session.getAttribute("addftfcommodity") != null) {
                ftfCommodityCharges = (FTFCommodityCharges) session.getAttribute("addftfcommodity");


            } else {
                ftfCommodityCharges = new FTFCommodityCharges();

            }
            if (chargeType != null && !chargeType.equals("0")) {
                genObj = genericCodeDAO.findById(Integer.parseInt(chargeType));
                ftfCommodityCharges.setChargeType(genObj);
            }
            if (exclude != null) {
                if (exclude.equals("on")) {
                    exclude = "y";
                } else {
                    exclude = "N";
                }
                ftfCommodityCharges.setExclude(exclude);
                GenericCode gen = null;
                ftfCommodityCharges.setChargeType(gen);
            }



            if (standard != null && standard.equals("on")) {
                ftfCommodityCharges.setStandard("Y");
            } else {
                ftfCommodityCharges.setStandard("N");
            }
            if (asFrfgted != null && asFrfgted.equals("on")) {
                ftfCommodityCharges.setAsFrfgted("X");
            }
            /*else
            {
            ftfCommodityCharges.setAsFrfgted("off");
            }*/
            if (amtPerCft != null && !amtPerCft.equals("")) {
                ftfCommodityCharges.setAmtPerCft(new Double(amtPerCft));
            } else {
                ftfCommodityCharges.setAmtPerCft(0.0);
            }

            if (amtPer100lbs != null && !amtPer100lbs.equals("")) {
                ftfCommodityCharges.setAmtPer100lbs(new Double(amtPer100lbs));
            } else {
                ftfCommodityCharges.setAmtPer100lbs(0.0);
            }
            if (amtPerCbm != null && !amtPerCbm.equals("")) {
                ftfCommodityCharges.setAmtPerCbm(new Double(amtPerCbm));
            } else {
                ftfCommodityCharges.setAmtPerCbm(0.0);
            }
            if (amtPer1000kg != null && !amtPer1000kg.equals("")) {
                ftfCommodityCharges.setAmtPer1000kg(new Double(amtPer1000kg));
            } else {
                ftfCommodityCharges.setAmtPer1000kg(0.0);
            }
            if (amount != null && !amount.equals("")) {
                ftfCommodityCharges.setAmount(new Double(amount));
            } else {
                ftfCommodityCharges.setAmount(0.0);
            }

            if (percentage != null && !percentage.equals("")) {

                double d = Double.parseDouble(percentage);
                ftfCommodityCharges.setPercentage(d / 1000);
            } else {
                ftfCommodityCharges.setPercentage(0.000);
            }
            if (minAmt != null && !minAmt.equals("")) {
                ftfCommodityCharges.setMinAmt(new Double(minAmt));
            } else {
                ftfCommodityCharges.setMinAmt(0.0);
            }
            if (insuranceRate != null && !insuranceRate.equals("")) {
                ftfCommodityCharges.setInsuranceRate(new Double(insuranceRate));
            } else {
                ftfCommodityCharges.setInsuranceRate(0.0);
            }
            if (insuranceAmt != null && !insuranceAmt.equals("")) {
                ftfCommodityCharges.setInsuranceAmt(new Double(insuranceAmt));
            } else {
                ftfCommodityCharges.setInsuranceAmt(0.0);
            }
            if (effectiveDate != null && effectiveDate != "") {
                Date javaDate = null;
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                javaDate = sdf.parse(effectiveDate);
                ftfCommodityCharges.setEffectiveDate(javaDate);

            }

            session.setAttribute("addftfcommodity", ftfCommodityCharges);


            if (!buttonValue.equals("") && buttonValue.equals("add")) {

                if (session.getAttribute("ftfcssList") != null) {
                    ftfcssList = (List) session.getAttribute("ftfcssList");
                } else {
                    ftfcssList = new ArrayList();

                }
                if (ftfCommodityCharges.getChargeCode() != null) {
                    ftfcssList.add(ftfCommodityCharges);

                    session.setAttribute("ftfcssList", ftfcssList);
                    if (session.getAttribute("addftfcommodity") != null) {
                        session.removeAttribute("addftfcommodity");
                    }
                    if (session.getAttribute("listCoFtfitem") != null) {
                        session.removeAttribute("listCoFtfitem");
                    }
                } else {
                    String msg = "Please Select correct Charge Code... ";
                    request.setAttribute("exist", msg);
                }
            }
            if (!buttonValue.equals("") && buttonValue.equals("addItem")) {
                session.setAttribute("listCoFtfitem", "listCoFtfitem");
            }
            if (buttonValue.equals("delete")) {
                List csssList = new ArrayList();
                if (session.getAttribute("ftfcssList") != null) {
                    csssList = (List) session.getAttribute("ftfcssList");
                    for (int i = 0; i < csssList.size(); i++) {
                        FTFCommodityCharges ftfCommCharges = (FTFCommodityCharges) csssList.get(i);
                        if (ftfCommCharges.getChargeCode() != null && addFTFCommodityForm.getCommodityId() != null && ftfCommCharges.getChargeCode().getCode().equals(addFTFCommodityForm.getCommodityId())) {
                            csssList.remove(ftfCommCharges);
                        }
                    }
                }
                session.setAttribute("ftfcssList", csssList);
                forwardName = "addftfcommodity";
            }

            if (buttonValue != null && buttonValue.equals("popupsearch")) {
                List list = new ArrayList();
                String msg = "Charge Code already exists... ";

                if (session.getAttribute("ftfcssList") != null) {
                    list = (List) session.getAttribute("ftfcssList");

                    for (int i = 0; i < list.size(); i++) {
                        ftfCommodityCharges = (FTFCommodityCharges) list.get(i);
                        if (ftfCommodityCharges.getChargeCode().getCode().equals(chargeCode)) {
                            request.setAttribute("exist", msg);
                        }
                        if (ftfCommodityCharges.getChargeCode().getCodedesc().equalsIgnoreCase(chargeCodeDesc)) {
                            request.setAttribute("exist", msg);
                        }
                    }
                }

                if (request.getAttribute("exist") == null && (chargeCode != null || !chargeCode.equals(""))) {
                    FTFCommodityCharges commodityCharges = new FTFCommodityCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    genericCodeObj = null;

                    List codeList = genericDAO.findGenericCode("2", chargeCode);

                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }

                    if (genericCodeObj != null) {

                        commodityCharges.setChargeCode(genericCodeObj);
                        session.setAttribute("addftfcommodity", commodityCharges);
                    }
                }


                if (request.getAttribute("exist") == null && (chargeCodeDesc != null || !chargeCodeDesc.equals(""))) {
                    FTFCommodityCharges commodityCharges = new FTFCommodityCharges();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    genericCodeObj = null;

                    List codeList = genericDAO.findByCodedesc(chargeCodeDesc);

                    if (codeList.size() > 0) {
                        genericCodeObj = (GenericCode) codeList.get(0);
                    }

                    if (genericCodeObj != null) {

                        commodityCharges.setChargeCode(genericCodeObj);
                        session.setAttribute("addftfcommodity", commodityCharges);
                    }
                }

            }
            forwardName = "addftfcommodity";

        }
        return mapping.findForward(forwardName);

    }
}
