/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.UniverseCommodityChrg;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.UniversalCommodity;

/** 
 * MyEclipse Struts
 * Creation date: 07-30-2008
 * 
 * XDoclet definition:
 * @struts.action path="/universalCommodity" name="universalCommodityForm" input="jsps/ratemanagement/universalCommodity.jsp" scope="request"
 */
public class UniversalCommodityAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception {
        UniversalCommodity addLclColoadCommodityForm = (UniversalCommodity) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String chargeCode = addLclColoadCommodityForm.getCharge();
        String codeDesc = addLclColoadCommodityForm.getDesc();
        String buttonValue = addLclColoadCommodityForm.getButtonValue();
        UniverseCommodityChrg lCLColoadCommodityCharges = null;//new LCLColoadCommodityCharges();
        String chargeType = addLclColoadCommodityForm.getChargeType();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        GenericCode genObj = new GenericCode();
        String standard = addLclColoadCommodityForm.getStandard();
        String amtPerCft = addLclColoadCommodityForm.getAmtPerCft();
        String amtPer100lbs = addLclColoadCommodityForm.getAmtPer100lbs();
        String amtPerCbm = addLclColoadCommodityForm.getAmtPerCbm();
        String amtPer1000kg = addLclColoadCommodityForm.getAmtPer1000kg();
        String exclude = addLclColoadCommodityForm.getExclude();
        String amount = addLclColoadCommodityForm.getAmount();
        String percentage = addLclColoadCommodityForm.getPercentage();
        String minAmt = addLclColoadCommodityForm.getMinAmt();
        String effectiveDate = addLclColoadCommodityForm.getTxtItemcreatedon();
        String asFrfgted = addLclColoadCommodityForm.getAsFrfgted();
        String insuranceRate = addLclColoadCommodityForm.getInsuranceRate();
        String insuranceAmt = addLclColoadCommodityForm.getInsuranceAmt();
        List lclcoloadcssList = new ArrayList();
        AirRatesBean airRatesBean = new AirRatesBean();
        airRatesBean.setStandard(standard);
        airRatesBean.setAsFrfgted(asFrfgted);
        request.setAttribute("airRatesBean", airRatesBean);
        String forwardName = "";
        User user = null;
        if (request.getParameter("ind") != null) {
            UniverseCommodityChrg lclCoload = new UniverseCommodityChrg();
            int ind = Integer.parseInt(request.getParameter("ind"));
            List codeList1 = (List) session.getAttribute("unicssList");
            lclCoload = (UniverseCommodityChrg) codeList1.get(ind);
            session.setAttribute("uniCommodityCharges", lclCoload);
            forwardName = "editunicommodity";
        } else {
            if (session.getAttribute("uniCommodityCharges") != null) {
                lCLColoadCommodityCharges = (UniverseCommodityChrg) session.getAttribute("uniCommodityCharges");

            } else {
                lCLColoadCommodityCharges = new UniverseCommodityChrg();
            }
            if (chargeType != null && !chargeType.equals("0")) {
                genObj = genericCodeDAO.findById(Integer.parseInt(chargeType));
                lCLColoadCommodityCharges.setChargeType(genObj);
            }
            /*if(exclude!=null){
            if(exclude.equals("on"))
            exclude="y";
            else
            exclude="N";
            lCLColoadCommodityCharges.setExclude(exclude);
            GenericCode gen=null;
            lCLColoadCommodityCharges.setChargeType(gen);
            }*/

            if (session.getAttribute("loginuser") != null) {
                user = (User) session.getAttribute("loginuser");
            }
            lCLColoadCommodityCharges.setWhoChanged(user.getLoginName());

            if (standard != null && standard.equals("on")) {
                lCLColoadCommodityCharges.setStandard("Y");
            } else {
                lCLColoadCommodityCharges.setStandard("N");
            }
            if (asFrfgted != null && asFrfgted.equals("on")) {
                lCLColoadCommodityCharges.setAsFrfgted("X");
            } else {
                lCLColoadCommodityCharges.setAsFrfgted("off");
            }
            if (amtPerCft != null && !amtPerCft.equals("")) {
                lCLColoadCommodityCharges.setAmtPerCft(new Double(amtPerCft));
            } else {
                lCLColoadCommodityCharges.setAmtPerCft(0.0);
            }

            if (amtPer100lbs != null && !amtPer100lbs.equals("")) {
                lCLColoadCommodityCharges.setAmtPer100lbs(new Double(amtPer100lbs));
            } else {
                lCLColoadCommodityCharges.setAmtPer100lbs(0.0);
            }
            if (amtPerCbm != null && !amtPerCbm.equals("")) {
                lCLColoadCommodityCharges.setAmtPerCbm(new Double(amtPerCbm));
            } else {
                lCLColoadCommodityCharges.setAmtPerCbm(0.0);
            }
            if (amtPer1000kg != null && !amtPer1000kg.equals("")) {
                lCLColoadCommodityCharges.setAmtPer1000kg(new Double(amtPer1000kg));
            } else {
                lCLColoadCommodityCharges.setAmtPer1000kg(0.0);
            }
            if (amount != null && !amount.equals("")) {
                lCLColoadCommodityCharges.setAmount(new Double(amount));
            } else {
                lCLColoadCommodityCharges.setAmount(0.0);
            }
            if (percentage != null && !percentage.equals("")) {
                double d = Double.parseDouble(percentage);
                lCLColoadCommodityCharges.setPercentage(d / 1000);

            } else {
                lCLColoadCommodityCharges.setPercentage(0.0);
            }

            if (minAmt != null && !minAmt.equals("")) {
                lCLColoadCommodityCharges.setMinAmt(new Double(minAmt));
            } else {
                lCLColoadCommodityCharges.setMinAmt(0.0);
            }
            if (insuranceRate != null && !insuranceRate.equals("")) {
                lCLColoadCommodityCharges.setInsuranceRate(new Double(insuranceRate));
            } else {
                lCLColoadCommodityCharges.setInsuranceRate(0.0);
            }
            if (insuranceAmt != null && !insuranceAmt.equals("")) {
                lCLColoadCommodityCharges.setInsuranceAmt(new Double(insuranceAmt));
            } else {
                lCLColoadCommodityCharges.setInsuranceAmt(0.0);
            }
            if (effectiveDate != null && effectiveDate != "") {
                Date javaDate = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
                    javaDate = sdf.parse(effectiveDate + " " + sdf1.format(new Date()));
                lCLColoadCommodityCharges.setEffectiveDate(javaDate);

            }

            session.setAttribute("uniCommodityCharges", lCLColoadCommodityCharges);


            if (!buttonValue.equals("") && buttonValue.equals("add")) {

                if (session.getAttribute("unicssList") != null) {
                    lclcoloadcssList = (List) session.getAttribute("unicssList");
                } else {
                    lclcoloadcssList = new ArrayList();

                }
                if (lCLColoadCommodityCharges.getChargeCode() != null) {
                    lclcoloadcssList.add(lCLColoadCommodityCharges);
                } else {
                    String msg = "Please Select correct Charge Code... ";
                    request.setAttribute("exist", msg);
                }

                session.setAttribute("unicssList", lclcoloadcssList);
                if (session.getAttribute("uniCommodityCharges") != null) {
                    session.removeAttribute("uniCommodityCharges");
                }
                if (session.getAttribute("uniCssAdd") != null) {
                    session.removeAttribute("uniCssAdd");
                }
            }
            if (!buttonValue.equals("") && buttonValue.equals("addItem")) {
                session.setAttribute("uniCssAdd", "uniCssAdd");
            }
            if (buttonValue != null && buttonValue.equals("popupsearch")) {

                List list = new ArrayList();
                String msg = "Charge Code already exists... ";

                if (session.getAttribute("unicssList") != null) {
                    list = (List) session.getAttribute("unicssList");

                    for (int i = 0; i < list.size(); i++) {
                        lCLColoadCommodityCharges = (UniverseCommodityChrg) list.get(i);
                        if (lCLColoadCommodityCharges.getChargeCode().getCode().equals(chargeCode)) {
                            request.setAttribute("exist", msg);
                        }
                        if (lCLColoadCommodityCharges.getChargeCode().getCodedesc().equalsIgnoreCase(codeDesc)) {
                            request.setAttribute("exist", msg);
                        }
                    }
                }


                if (request.getAttribute("exist") == null && (chargeCode != null || !chargeCode.equals(""))) {
                    UniverseCommodityChrg commodityChrg = new UniverseCommodityChrg();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    genObj = null;

                    List codeList = genericDAO.findGenericCode("2", chargeCode);

                    if (codeList.size() > 0) {
                        genObj = (GenericCode) codeList.get(0);
                    }

                    if (genObj != null) {

                        commodityChrg.setChargeCode(genObj);
                        session.setAttribute("uniCommodityCharges", commodityChrg);
                    }
                }


                if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                    UniverseCommodityChrg commodityChrg = new UniverseCommodityChrg();
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    genObj = null;

                    List codeList = genericDAO.findByCodedesc(codeDesc);

                    if (codeList.size() > 0) {
                        genObj = (GenericCode) codeList.get(0);
                    }

                    if (genObj != null) {

                        commodityChrg.setChargeCode(genObj);
                        session.setAttribute("uniCommodityCharges", commodityChrg);
                    }
                }
            }


            forwardName = "addunicommodity";

        }

        return mapping.findForward(forwardName);
    }
}