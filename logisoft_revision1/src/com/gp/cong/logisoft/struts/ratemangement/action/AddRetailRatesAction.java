/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.hibernate.HibernateSessionFactory;
import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.beans.NoteBean;
import com.gp.cong.logisoft.domain.AuditLogRecordRetailRates;
import com.gp.cong.logisoft.domain.RetailFreightDocumentCharges;
import com.gp.cong.logisoft.domain.RetailCommodityCharges;
import com.gp.cong.logisoft.domain.AuditLogRecord;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.HistoryLogInterceptor;
import com.gp.cong.logisoft.domain.Item;
import com.gp.cong.logisoft.domain.RetailOceanDetailsRates;
import com.gp.cong.logisoft.domain.RetailStandardCharges;
import com.gp.cong.logisoft.domain.RetailStandardCharges1;

import com.gp.cong.logisoft.domain.User;

import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ItemDAO;
import com.gp.cong.logisoft.hibernate.dao.StandardChargesDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.AddRetailRatesForm;
import com.gp.cong.logisoft.util.DBUtil;

/**
 * MyEclipse Strutsf Creation date: 05-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/addRetailRates" name="addRetailRatesForm"
 *                input="/jsps/ratemanagement/addRetailRates.jsp"
 *                scope="request" validate="true"
 */
public class AddRetailRatesAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddRetailRatesForm addRetailRatesForm = (AddRetailRatesForm) form;// TODO
        String buttonValue = addRetailRatesForm.getButtonValue();
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        String commodityCode = null;
        List RetailWeightRangeList = new ArrayList();
        List RetailCommodityList = new ArrayList();
        List RetailStandardCharges1List = new ArrayList();
        Set RetailWeightRangeSet = new HashSet<RetailStandardCharges1>();
        Set RetailCommoditySet = new HashSet<RetailCommodityCharges>();
        RetailStandardCharges standardChrg = new RetailStandardCharges();
        StandardChargesDAO standardChargesDAO = new StandardChargesDAO();
        HistoryLogInterceptor historyLogInterceptor = new HistoryLogInterceptor();
        List setList = new ArrayList();
        DBUtil dbUtil = new DBUtil();
        if (session.getAttribute("retailstandardCharges") != null) {
            standardChrg = (RetailStandardCharges) session.getAttribute("retailstandardCharges");
        }

        // ----------CODE FOR EDIT STARTS-----------------------------------
        if (buttonValue.equals("edit")) {
            List docList = new ArrayList();
            Set documentCharges = new HashSet<RetailFreightDocumentCharges>();
            if (session.getAttribute("retaildocChargesAdd") != null) {
                docList = (List) session.getAttribute("retaildocChargesAdd");
                for (int i = 0; i < docList.size(); i++) {
                    RetailFreightDocumentCharges document1 = (RetailFreightDocumentCharges) docList.get(i);
                    documentCharges.add(document1);
                }
            }
            standardChrg.setRetailDocumentCharges(documentCharges);
            List agssList = new ArrayList();
            Set retailStandard = new HashSet<RetailStandardCharges1>();
            if (session.getAttribute("retailagssAdd") != null) {
                agssList = (List) session.getAttribute("retailagssAdd");
                for (int j = 0; j < agssList.size(); j++) {
                    RetailStandardCharges1 retailStd = (RetailStandardCharges1) agssList.get(j);
                    historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());

                    if (retailStd.getRetailStdId() != null) {
                        User userId = null;
                        if (session.getAttribute("loginuser") != null) {
                            userId = (User) session.getAttribute("loginuser");
                        }
                        historyLogInterceptor.setUserName(userId.getLoginName());
                        historyLogInterceptor.setOrgTerm(standardChrg.getOrgTerminal());
                        historyLogInterceptor.setDisport(standardChrg.getDestPort());
                        boolean flag = historyLogInterceptor.onFlushDirty(
                                retailStd, retailStd.getRetailStdId(), null,
                                null, null, null);
                        if (flag) {
                            retailStd.setChangedDate(new Date());
                            retailStd.setWhoChanged(userId.getLoginName());
                        }
                    }
                    retailStandard.add(retailStd);
                }
            }
            standardChrg.setRetailStandardCharges(retailStandard);
            // reference1
            RetailOceanDetailsRates retailOceanDetailsRates = new RetailOceanDetailsRates();
            if (session.getAttribute("retailDetails") != null) {
                retailOceanDetailsRates = (RetailOceanDetailsRates) session.getAttribute("retailDetails");
                historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                if (retailOceanDetailsRates.getId() != null) {
                    User userId = null;
                    if (session.getAttribute("loginuser") != null) {
                        userId = (User) session.getAttribute("loginuser");
                    }

                    historyLogInterceptor.setUserName(userId.getLoginName());
                    historyLogInterceptor.setOrgTerm(standardChrg.getOrgTerminal());
                    historyLogInterceptor.setDisport(standardChrg.getDestPort());
                    boolean flag = historyLogInterceptor.onFlushDirty(
                            retailOceanDetailsRates, retailOceanDetailsRates.getId(), null, null, null, null);

                    if (flag) {

                        retailOceanDetailsRates.setEffectiveDate(new Date());
                        retailOceanDetailsRates.setWhoChanged(userId.getLoginName());
                    }
                    RetailWeightRangeSet.add(retailOceanDetailsRates);
                    standardChrg.setRetailWeightRangeSet(RetailWeightRangeSet);

                }
                standardChrg.setRetailWeightRangeSet(RetailWeightRangeSet);
            }

            if (session.getAttribute("retailcssList") != null) {

                RetailCommodityList = (List) session.getAttribute("retailcssList");
                for (int i = 0; i < RetailCommodityList.size(); i++) {
                    RetailCommodityCharges retailCommodityChargesObj = (RetailCommodityCharges) RetailCommodityList.get(i);
                    historyLogInterceptor.setSessionFactory(HibernateSessionFactory.getSessionFactory());
                    if (retailCommodityChargesObj.getRetailCmdId() != null) {
                        User userId = null;
                        if (session.getAttribute("loginuser") != null) {
                            userId = (User) session.getAttribute("loginuser");
                        }
                        historyLogInterceptor.setUserName(userId.getLoginName());
                        historyLogInterceptor.setOrgTerm(standardChrg.getOrgTerminal());
                        historyLogInterceptor.setDisport(standardChrg.getDestPort());
                        boolean flag = historyLogInterceptor.onFlushDirty(
                                retailCommodityChargesObj,
                                retailCommodityChargesObj.getRetailCmdId(),
                                null, null, null, null);

                        if (flag) {

                            retailCommodityChargesObj.setChangedDate(new Date());
                            retailCommodityChargesObj.setWhoChanged(userId.getLoginName());
                        }
                    }
                    RetailCommoditySet.add(retailCommodityChargesObj);
                }
                /*
                 * if(RetailCommoditySet != null && RetailCommoditySet.size()>0) {
                 */
                standardChrg.setRetailCommoditySet(RetailCommoditySet);
            // }
            }
            List retailRatesList = new ArrayList();
            String programid = "";
            programid = (String) session.getAttribute("processinfoforretailRates");
            String recordid = "";
            if (standardChrg != null && standardChrg.getId() != null) {
                recordid = standardChrg.getId().toString();
            }

            RetailStandardCharges std = standardChrg;
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            standardChargesDAO.update1(standardChrg, userId.getLoginName());

            List retailRatesLi = new ArrayList();
            retailRatesLi.add(standardChrg);
            GenericCode genObj = null;
            GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
            List newList = new ArrayList();
            if (standardChrg.getComCode() != null && !standardChrg.getComCode().equals("000000")) {
                newList = (List) session.getAttribute("renoncommonList");
                for (int i = 0; i < newList.size(); i++) {
                    RetailStandardCharges aStandardCharges11 = (RetailStandardCharges) newList.get(i);// parent
                    if (aStandardCharges11.getComCode() != null && standardChrg.getComCode() != null && aStandardCharges11.getComCode() != null && standardChrg.getComCode() != null && aStandardCharges11.getComCode().equals(standardChrg.getComCode())) {
                        newList.set(i, standardChrg);
                    }

                }
                session.setAttribute("renoncommonList", newList);
            } else {

                genObj = genericCodeDAO.findById(11292);
                if (genObj != null) {
                    commodityCode = genObj.getCode();
                }
                List list = dbUtil.getRetailDetails(standardChrg.getOrgTerminal(), standardChrg.getDestPort(), commodityCode);
                if (list != null && list.size() > 0) {
                    RetailStandardCharges lclGetStd = (RetailStandardCharges) list.get(0);
                    if (lclGetStd.getRetailStandardCharges() != null) {
                        Iterator iter = (Iterator) lclGetStd.getRetailStandardCharges().iterator();
                        while (iter.hasNext()) {
                            RetailStandardCharges1 retailStdChild = (RetailStandardCharges1) iter.next();
                            retailStdChild.setStandardId(lclGetStd.getId());
                            newList.add(retailStdChild);

                        }
                    }

                }
                session.setAttribute("recommonList", newList);
                session.setAttribute("reatilcommonList",
                        "Common Accessorial Charges (All)");

            }
            RetailStandardCharges sc = new RetailStandardCharges();
            sc.setOrgTerminal(standardChrg.getOrgTerminal());
            sc.setDestPort(standardChrg.getDestPort());
            sc.setComCode(standardChrg.getComCode());

            if (agssList != null && agssList.size() > 0) {

                session.setAttribute("reatilcommonList",
                        "Common Accessorial Charges (All)");
            }

            if (session.getAttribute("retailstandardCharges") != null) {
                session.removeAttribute("retailstandardCharges");
            }
            if (session.getAttribute("retailstandardCharges") != null) {
                session.removeAttribute("retailstandardCharges");
            }
            session.setAttribute("getchangedcolore", sc);
            session.setAttribute("retailstandardCharges", sc);
            // session.setAttribute("renoncommonList", sc);
            // session.setAttribute("renoncommonList",retailRatesLi);
            session.setAttribute("RetailRateCaption", "Ocean Freight Rates ");
            AirRatesBean airRatesBean = null;
            if (session.getAttribute("reairRatesBean") != null) {
                airRatesBean = (AirRatesBean) session.getAttribute("reairRatesBean");
            } else {
                airRatesBean = new AirRatesBean();
            }
            airRatesBean.setNoncommon("noncommon");

            session.setAttribute("reairRatesBean", airRatesBean);
            String message = "";
            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
            message = "Retailrates details Edited successfully";
            session.setAttribute("retmessage", message);
            session.setAttribute("collaps", "collaps");
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }

            if (session.getAttribute("retaildefaultRate") != null) {
                session.removeAttribute("retaildefaultRate");
            }

            if (session.getAttribute("retailstandardCharges") != null) {
                session.removeAttribute("retailstandardCharges");
            }
            if (session.getAttribute("retailaddrates") != null) {
                session.removeAttribute("retailaddrates");
            }
            if (session.getAttribute("retaildocChargesAdd") != null) {
                session.removeAttribute("retaildocChargesAdd");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }
            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }
            if (session.getAttribute("retailDetails") != null) {
                session.removeAttribute("retailDetails");
            }
            if (session.getAttribute("addaccess") != null) {
                session.removeAttribute("addaccess");
            }

            if (session.getAttribute("retaildefaultRate") != null) {
                session.removeAttribute("retaildefaultRate");
            }

            if (session.getAttribute("retailRatesList") != null) {
                session.removeAttribute("retailRatesList");
            }
            if (session.getAttribute("retailaddterminal") != null) {
                session.removeAttribute("retailaddterminal");
            }
            if (session.getAttribute("retailFrieght") != null) {
                session.removeAttribute("retailFrieght");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailaddComCode") != null) {
                session.removeAttribute("retailaddComCode");
            }
            if (session.getAttribute("retailaddAirport") != null) {
                session.removeAttribute("retailaddAirport");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }
            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }

            if (session.getAttribute("retmessage") != null) {
                session.removeAttribute("retmessage");
            }

            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("listofitem") != null) {
                session.removeAttribute("listofitem");
            }
            if (session.getAttribute("listcss") != null) {
                session.removeAttribute("listcss");
            }
            if (session.getAttribute("getRetailsAgsss") != null) {
                session.removeAttribute("getRetailsAgsss");
            }
            if (session.getAttribute("getRetailsDoc") != null) {
                session.removeAttribute("getRetailsDoc");
            }

            session.setAttribute("trade", "addretailrates");
        }

        // -------CODE FOR SAVE STARTS------------------------------------

        if (buttonValue.equals("save")) {
            if (session.getAttribute("retailmanage") != null) {
                RetailStandardCharges sc1 = (RetailStandardCharges) session.getAttribute("retailmanage");

            }
            if (session.getAttribute("retaildefaultRate") != null) {
                session.removeAttribute("retaildefaultRate");
            }

            List docList = new ArrayList();
            Set documentCharges = new HashSet<RetailFreightDocumentCharges>();
            if (session.getAttribute("retaildocChargesAdd") != null) {
                docList = (List) session.getAttribute("retaildocChargesAdd");
                for (int i = 0; i < docList.size(); i++) {
                    RetailFreightDocumentCharges document1 = (RetailFreightDocumentCharges) docList.get(i);
                    documentCharges.add(document1);
                }
            }

            standardChrg.setRetailDocumentCharges(documentCharges);
            List agssList = new ArrayList();
            Set retailStandard = new HashSet<RetailStandardCharges1>();

            if (session.getAttribute("retailagssAdd") != null) {
                agssList = (List) session.getAttribute("retailagssAdd");
                for (int j = 0; j < agssList.size(); j++) {
                    RetailStandardCharges1 retailStd = (RetailStandardCharges1) agssList.get(j);
                    retailStandard.add(retailStd);
                }
            }
            standardChrg.setRetailStandardCharges(retailStandard);

            RetailOceanDetailsRates retailOceanDetailsRates = new RetailOceanDetailsRates();
            if (session.getAttribute("retailDetails") != null) {
                retailOceanDetailsRates = (RetailOceanDetailsRates) session.getAttribute("retailDetails");
                RetailWeightRangeSet.add(retailOceanDetailsRates);
                standardChrg.setRetailWeightRangeSet(RetailWeightRangeSet);
            }

            if (session.getAttribute("retailcssList") != null) {
                RetailCommodityList = (List) session.getAttribute("retailcssList");
                for (int i = 0; i < RetailCommodityList.size(); i++) {
                    RetailCommodityCharges retailCommodityChargesObj = (RetailCommodityCharges) RetailCommodityList.get(i);
                    RetailCommoditySet.add(retailCommodityChargesObj);
                }
                if (RetailCommoditySet != null && RetailCommoditySet.size() > 0) {
                    standardChrg.setRetailCommoditySet(RetailCommoditySet);
                }
            }
            List retailRatesList = new ArrayList();

            standardChrg.setOrgTerminal(standardChrg.getOrgTerminal());
            standardChrg.setDestPort(standardChrg.getDestPort());
            standardChrg.setComCode(standardChrg.getComCode());

            standardChrg.setMaxDocCharge(standardChrg.getMaxDocCharge());
            standardChrg.setBlBottomLine(standardChrg.getBlBottomLine());
            standardChrg.setFfCommission(standardChrg.getFfCommission());
            standardChrg.setRetailWeightRangeSet(standardChrg.getRetailWeightRangeSet());
            standardChrg.setRetailCommoditySet(standardChrg.getRetailCommoditySet());
            standardChrg.setRetailStandardCharges(standardChrg.getRetailStandardCharges());
            standardChrg.setRetailDocumentCharges(standardChrg.getRetailDocumentCharges());

            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            standardChargesDAO.save1(standardChrg, userId.getLoginName());

            if (session.getAttribute("renoncommonList") != null) {

                // retailRatesList=(List)session.getAttribute("renoncommonList");
                // retailRatesList.add(standardChrg);
            }
            List retailRatesLi = new ArrayList();
            retailRatesLi.add(standardChrg);
            String message = "Retailrates details Saved successfully";
            session.setAttribute("retmessage", message);
            GenericCode genObj = null;
            AirRatesBean srBean = new AirRatesBean();
            GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
            if (standardChrg.getComCode() != null && !standardChrg.getComCode().equals("000000")) {
                genObj = genericCodeDAO.findById(11292);
                if (genObj != null) {
                    commodityCode = genObj.getCode();
                }
                List forcom = standardChargesDAO.getRecordsForCommRetail(
                        standardChrg.getOrgTerminal(), standardChrg.getDestPort(), commodityCode);
                if (forcom != null && forcom.size() > 0) {

                    for (int i = 0; i < forcom.size(); i++) {
                        RetailStandardCharges1 retailStdChild = new RetailStandardCharges1();// child
                        RetailStandardCharges aStandardCharges11 = (RetailStandardCharges) forcom.get(i);
                        if (aStandardCharges11.getComCode() != null && aStandardCharges11.getComCode() != null && aStandardCharges11.getComCode().equals("000000")) {
                            // ----code to display only STANDARD RECORDs of
                            // COMMON COMMODITY------
                            if (aStandardCharges11.getRetailStandardCharges() != null) {

                                Iterator iter = (Iterator) aStandardCharges11.getRetailStandardCharges().iterator();
                                while (iter.hasNext()) {

                                    retailStdChild = (RetailStandardCharges1) iter.next();
                                    if (retailStdChild.getStandard() != null && retailStdChild.getStandard().equals("Y")) {
                                        setList.add(retailStdChild);
                                    }
                                }
                                session.setAttribute("reatilcommonList",
                                        "Common Accessorial Charges (Standard Only)");
                            }
                        }
                    }
                    session.setAttribute("recommonList", setList);
                    session.setAttribute("rerecords", "getrecords");
                }
            }

            if (standardChrg.getComCode() != null && standardChrg.getComCode().equals("000000")) {

                standardChrg.setComCode(standardChrg.getComCode());

                session.setAttribute("setTabEnable", "enable");
                srBean.setCommon("setcommon");
                RetailStandardCharges1 retailStdChild = new RetailStandardCharges1();// child

                if (standardChrg.getComCode() != null && standardChrg.getComCode() != null && standardChrg.getComCode().equals("000000")) {
                    // ----code to display only STANDARD RECORDs of COMMON
                    // COMMODITY------
                    boolean flag = true;
                    StandardChargesDAO StandardCharges = new StandardChargesDAO();
                    standardChrg = StandardCharges.findById1(standardChrg.getId());
                    if (standardChrg.getRetailStandardCharges() != null) {

                        Iterator iter = (Iterator) standardChrg.getRetailStandardCharges().iterator();
                        while (iter.hasNext()) {

                            retailStdChild = (RetailStandardCharges1) iter.next();
                            if (retailStdChild.getStandard() != null && retailStdChild.getStandard().equals("Y")) {
                                setList.add(retailStdChild);
                            }
                            flag = false;
                            retailStdChild.setStandardId(standardChrg.getId());
                        }

                    }
                    if (flag) {
                        session.setAttribute("reatilcommonList",
                                "No Accessorial Add");
                    } else {
                        session.setAttribute("reatilcommonList",
                                "Common Accessorial Charges (Standard Only)");

                    }
                }
                session.setAttribute("recommonList", setList);
                session.setAttribute("reairRatesBean", srBean);
            } else {

                List nonList = null;
                if (session.getAttribute("renoncommonList") != null) {
                    nonList = (List) session.getAttribute("renoncommonList");
                } else {
                    nonList = new ArrayList();
                }
                nonList.add(standardChrg);
                session.setAttribute("renoncommonList", nonList);
            }
            session.setAttribute("RetailRateCaption", "Ocean Freight Rates");
            RetailStandardCharges sc = new RetailStandardCharges();
            sc.setOrgTerminal(standardChrg.getOrgTerminal());
            sc.setDestPort(standardChrg.getDestPort());
            sc.setComCode(standardChrg.getComCode());
            standardChrg = null;
            if (session.getAttribute("retailstandardCharges") != null) {
                session.removeAttribute("retailstandardCharges");
            }
            session.setAttribute("getchangedcolore", sc);
            // session.setAttribute("retailstandardCharges", sc);
            // session.setAttribute("renoncommonList", sc);
            session.setAttribute("collaps", "collaps");
            if (session.getAttribute("retailaddrates") != null) {
                session.removeAttribute("retailaddrates");
            }
            if (session.getAttribute("retaildocChargesAdd") != null) {
                session.removeAttribute("retaildocChargesAdd");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }
            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }
            if (session.getAttribute("retailDetails") != null) {
                session.removeAttribute("retailDetails");
            }
            if (session.getAttribute("listofitem") != null) {
                session.removeAttribute("listofitem");
            }
            if (session.getAttribute("listcss") != null) {
                session.removeAttribute("listcss");
            }
            if (session.getAttribute("addaccess") != null) {
                session.removeAttribute("addaccess");
            }
            if (session.getAttribute("getRetailsAgsss") != null) {
                session.removeAttribute("getRetailsAgsss");
            }
            if (session.getAttribute("getRetailsDoc") != null) {
                session.removeAttribute("getRetailsDoc");
            }
            if (session.getAttribute("retailmanage") != null) {
                RetailStandardCharges sc1 = (RetailStandardCharges) session.getAttribute("retailmanage");
                if (sc1.getOrgTerminal() != null) {
                }
                if (sc1.getDestPort() != null) {
                }
                if (sc1.getComCode() != null) {
                }
            }
            // ==============================================================================
            session.setAttribute("trade", "addretailrates");
        } // code ends for save
        else if (buttonValue.equals("delete")) {
            String programid = "";
            programid = (String) session.getAttribute("processinfoforretailRates");
            String recordid = "";
            if (standardChrg != null && standardChrg.getId() != null) {
                recordid = standardChrg.getId().toString();
            }

            boolean expire = false;
            if (standardChrg.getComCode() != null && standardChrg.getComCode().equals("000000")) {
                expire = true;

            }
            User userId1 = null;
            if (session.getAttribute("loginuser") != null) {
                userId1 = (User) session.getAttribute("loginuser");
            }
            standardChargesDAO.delete1(standardChrg, userId1.getLoginName());
            List newList = new ArrayList();
            newList = (List) session.getAttribute("renoncommonList");
            for (int i = 0; i < newList.size(); i++) {
                RetailStandardCharges aStandardCharges11 = (RetailStandardCharges) newList.get(i);// parent
                if (aStandardCharges11.getComCode() != null && standardChrg.getComCode() != null && aStandardCharges11.getComCode() != null && standardChrg.getComCode() != null && aStandardCharges11.getComCode().equals(
                        standardChrg.getComCode())) {
                    newList.remove(i);
                }

            }
            session.setAttribute("renoncommonList", newList);

            // session.setAttribute("retailmanage",standardChrg);
            if (expire) {
                if (session.getAttribute("recommonList") != null) {
                    session.removeAttribute("recommonList");
                }
                if (session.getAttribute("reatilcommonList") != null) {
                    session.removeAttribute("reatilcommonList");
                }

            }
            String message = "";
            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");
            message = "Retailrates details Deleted successfully";
            session.setAttribute("retmessage", message);
            if (session.getAttribute("retailstandardCharges") != null) {
                session.removeAttribute("retailstandardCharges");
            }
            if (session.getAttribute("retailaddrates") != null) {
                session.removeAttribute("retailaddrates");
            }
            if (session.getAttribute("retailFrieght") != null) {
                session.removeAttribute("retailFrieght");
            }
            if (session.getAttribute("retaildocChargesAdd") != null) {
                session.removeAttribute("retaildocChargesAdd");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }

            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }
            if (session.getAttribute("reairRatesBean") != null) {
                session.removeAttribute("reairRatesBean");
            }
            if (session.getAttribute("listofitem") != null) {
                session.removeAttribute("listofitem");
            }
            if (session.getAttribute("listcss") != null) {
                session.removeAttribute("listcss");
            }
            if (session.getAttribute("addaccess") != null) {
                session.removeAttribute("addaccess");
            }
            if (session.getAttribute("getchangedcolore") != null) {
                session.removeAttribute("getchangedcolore");
            }
            session.setAttribute("trade", "addretailrates");
            if (session.getAttribute("getRetailsAgsss") != null) {
                session.removeAttribute("getRetailsAgsss");
            }
            if (session.getAttribute("getRetailsDoc") != null) {
                session.removeAttribute("getRetailsDoc");
            }
        } // code ends for delete
        else if (buttonValue.equals("cancel")) {
            if (session.getAttribute("retmessage") != null) {
                session.removeAttribute("retmessage");
            }
            String programid = "";
            programid = (String) session.getAttribute("processinfoforretailRates");

            String recordid = "";
            if (standardChrg != null && standardChrg.getId() != null) {
                recordid = standardChrg.getId().toString();
            }
            String message = "";
            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");// saveorupdate
            // error
            if (session.getAttribute("retailFrieght") != null) {
                session.removeAttribute("retailFrieght");
            }
            if (session.getAttribute("retailaddterminal") != null) {
                session.removeAttribute("retailaddterminal");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }

            if (session.getAttribute("retaildefaultRate") != null) {
                session.removeAttribute("retaildefaultRate");
            }
            if (session.getAttribute("retailaddComCode") != null) {
                session.removeAttribute("retailaddComCode");
            }
            if (session.getAttribute("retailaddAirport") != null) {
                session.removeAttribute("retailaddAirport");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }
            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }

            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("listofitem") != null) {
                session.removeAttribute("listofitem");
            }
            if (session.getAttribute("listcss") != null) {
                session.removeAttribute("listcss");
            }
            if (session.getAttribute("addaccess") != null) {
                session.removeAttribute("addaccess");
            }
            if (session.getAttribute("getRetailsAgsss") != null) {
                session.removeAttribute("getRetailsAgsss");
            }
            if (session.getAttribute("getRetailsDoc") != null) {
                session.removeAttribute("getRetailsDoc");
            }
        } // code ends for cancel
        else if (buttonValue.equals("cancelview")) {
            String programid = "";
            programid = (String) session.getAttribute("processinfoforretailRates");

            String recordid = "";
            if (standardChrg != null && standardChrg.getId() != null) {
                recordid = standardChrg.getId().toString();
            }

            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");// saveorupdate
            // error

            if (session.getAttribute("retaildefaultRate") != null) {
                session.removeAttribute("retaildefaultRate");
            }

            if (session.getAttribute("retailRatesList") != null) {
                session.removeAttribute("retailRatesList");
            }
            if (session.getAttribute("retailaddterminal") != null) {
                session.removeAttribute("retailaddterminal");
            }
            if (session.getAttribute("retailFrieght") != null) {
                session.removeAttribute("retailFrieght");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailaddComCode") != null) {
                session.removeAttribute("retailaddComCode");
            }
            if (session.getAttribute("retailaddAirport") != null) {
                session.removeAttribute("retailaddAirport");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }
            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }

            if (session.getAttribute("retmessage") != null) {
                session.removeAttribute("retmessage");
            }

            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("listofitem") != null) {
                session.removeAttribute("listofitem");
            }
            if (session.getAttribute("listcss") != null) {
                session.removeAttribute("listcss");
            }
            if (session.getAttribute("addaccess") != null) {
                session.removeAttribute("addaccess");
            }
            if (session.getAttribute("removebutton") != null) {
                session.removeAttribute("removebutton");
            }
            if (session.getAttribute("getRetailsAgsss") != null) {
                session.removeAttribute("getRetailsAgsss");
            }
            if (session.getAttribute("getRetailsDoc") != null) {
                session.removeAttribute("getRetailsDoc");
            }
        } // code ends for cancel view
        else if (buttonValue.equals("savecancel")) {
            String programid = "";
            programid = (String) session.getAttribute("processinfoforretailRates");

            String recordid = "";
            if (standardChrg != null && standardChrg.getId() != null) {
                recordid = standardChrg.getId().toString();
            }

            dbUtil.getProcessInfo(programid, recordid, "deleted", "edited");// saveorupdate
            // error
            if (session.getAttribute("retaildefaultRate") != null) {
                session.removeAttribute("retaildefaultRate");
            }
            if (session.getAttribute("retailaddterminal") != null) {
                session.removeAttribute("retailaddterminal");
            }
            if (session.getAttribute("retailFrieght") != null) {
                session.removeAttribute("retailFrieght");
            }
            if (session.getAttribute("retaildocChargesAdd") != null) {
                session.removeAttribute("retaildocChargesAdd");
            }
            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("retaildetailsAdd") != null) {
                session.removeAttribute("retaildetailsAdd");
            }
            if (session.getAttribute("getRetailsAgsss") != null) {
                session.removeAttribute("getRetailsAgsss");
            }
            if (session.getAttribute("getRetailsDoc") != null) {
                session.removeAttribute("getRetailsDoc");
            }
            if (session.getAttribute("retailaddComCode") != null) {
                session.removeAttribute("retailaddComCode");
            }
            if (session.getAttribute("retailaddAirport") != null) {
                session.removeAttribute("retailaddAirport");
            }
            if (session.getAttribute("retailagssAdd") != null) {
                session.removeAttribute("retailagssAdd");
            }
            if (session.getAttribute("retaildocumentCharges") != null) {
                session.removeAttribute("retaildocumentCharges");
            }
            if (session.getAttribute("retailcssList") != null) {
                session.removeAttribute("retailcssList");
            }
            if (session.getAttribute("retailCommodityCharges") != null) {
                session.removeAttribute("retailCommodityCharges");
            }

            if (session.getAttribute("retailapplyGeneralStandardList") != null) {
                session.removeAttribute("retailapplyGeneralStandardList");
            }
            if (session.getAttribute("retailincludedList") != null) {
                session.removeAttribute("retailincludedList");
            }

            if (session.getAttribute("retmessage") != null) {
                session.removeAttribute("retmessage");
            }

            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            if (session.getAttribute("listofitem") != null) {
                session.removeAttribute("listofitem");
            }
            if (session.getAttribute("listcss") != null) {
                session.removeAttribute("listcss");
            }
            if (session.getAttribute("addaccess") != null) {
                session.removeAttribute("addaccess");
            }
        } // code ends for save cancel
        else if (buttonValue != null && buttonValue.equals("note")) {
            ItemDAO itemDAO = new ItemDAO();
            Item item = new Item();
            String itemName = "";
            if (session.getAttribute("processinfoforretailRates") != null) {
                String itemId = (String) session.getAttribute("processinfoforretailRates");
                item = itemDAO.findById(Integer.parseInt(itemId));
                itemName = item.getItemDesc();
            }

            forwardName = "note";
            AuditLogRecord auditLogRecord = new AuditLogRecordRetailRates();
            NoteBean noteBean = new NoteBean();
            noteBean.setItemName(itemName);
            noteBean.setAuditLogRecord(auditLogRecord);
            noteBean.setButtonValue(buttonValue);
            noteBean.setPageName("cancelretaildetails");
            String noteId = "";
            if (standardChrg.getId() != null) {
                noteId = standardChrg.getId().toString();
                noteBean.setNoteId(noteId);
                noteBean.setReferenceId(noteId);
            }
            List auditList = null;

            auditList = dbUtil.getNoteInformation(noteId, auditLogRecord);
            noteBean.setAuditList(auditList);
            noteBean.setVoidednote("");
            request.setAttribute("noteBean", noteBean);
            String documentName = "User";
            request.setAttribute("buttonValue", buttonValue);
            return mapping.findForward("note");
        }

        session.setAttribute("trade", "addretailrates");
        forwardName = "addairrates";

        if (session.getAttribute("removebutton") != null) {

            session.removeAttribute("removebutton");
        }
        if (session.getAttribute("retailagssAdd") != null) {

            session.removeAttribute("retailagssAdd");
        }
        if (session.getAttribute("listofitem") != null) {

            session.removeAttribute("listofitem");
        }
        if (session.getAttribute("listcss") != null) {

            session.removeAttribute("listcss");
        }
        return mapping.findForward("addairrates");
    }
}