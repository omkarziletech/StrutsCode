/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;



import com.gp.cong.logisoft.domain.RetailCommodityCharges;
import com.gp.cong.logisoft.domain.RetailStandardCharges1;
import com.gp.cong.logisoft.struts.ratemangement.form.RetailApplyGeneralStandardChargesForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-16-2008
 * 
 * XDoclet definition:
 * @struts.action path="/retailApplyGeneralStandardCharges" name="retailApplyGeneralStandardChargesForm" input="/jsps/ratemanagement/retailApplyGeneralStandardCharges.jsp" scope="request" validate="true"
 */
public class RetailApplyGeneralStandardChargesAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {
        RetailApplyGeneralStandardChargesForm retailApplyGeneralStandardChargesForm = (RetailApplyGeneralStandardChargesForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String buttonValue = retailApplyGeneralStandardChargesForm.getButtonValue();
        String index = retailApplyGeneralStandardChargesForm.getIndex();
        String forwardName = "";
        List applyStdList = new ArrayList();
        RetailStandardCharges1 retailStandard = new RetailStandardCharges1();
        List includedList = new ArrayList();
        List csssList = new ArrayList();
        boolean flag = false;
        if (request.getParameter("ind") != null) {

            int ind = Integer.parseInt(request.getParameter("ind"));
            applyStdList = (List) session.getAttribute("retailapplyGeneralStandardList");
            retailStandard = (RetailStandardCharges1) applyStdList.get(ind);
            if (session.getAttribute("retailcssList") != null) {
                csssList = (List) session.getAttribute("retailcssList");
            }
            if (session.getAttribute("retailincludedList") == null) {
                includedList = new ArrayList();
            } else {
                includedList = (List) session.getAttribute("retailincludedList");
            }
            if (csssList != null) {



                for (int i = 0; i < csssList.size(); i++) {
                    RetailCommodityCharges retailComm1 = (RetailCommodityCharges) csssList.get(i);
                    if (retailComm1.getChargeCode().getCode().equals(retailStandard.getChargeCode().getCode()) &&
                            retailComm1.getChargeType().getId().equals(retailStandard.getChargeType().getId())) {
                        flag = true;
                        session.setAttribute("getrecord", retailStandard);

                        includedList.remove(retailStandard);
                        break;

                    }
                }

                if (flag) {
                    request.setAttribute("message", "This charge code is already exist");
                } else {
                    includedList.add(retailStandard);
                    applyStdList.remove(retailStandard);

                    session.setAttribute("retailincludedList", includedList);
                }
            }//if
            else {

                includedList.add(retailStandard);
                applyStdList.remove(retailStandard);

                session.setAttribute("retailincludedList", includedList);

            }

        } else {
            if (buttonValue.equals("accept")) {

                if (session.getAttribute("getrecord") != null) {

                    retailStandard = (RetailStandardCharges1) session.getAttribute("getrecord");
                    if (session.getAttribute("retailincludedList") == null) {
                        includedList = new ArrayList();
                    } else {
                        includedList = (List) session.getAttribute("retailincludedList");
                    }

                    includedList.add(retailStandard);
                    applyStdList = (List) session.getAttribute("retailapplyGeneralStandardList");
                    if (csssList != null) {
                        csssList = (List) session.getAttribute("retailcssList");
                        for (int i = 0; i < csssList.size(); i++) {
                            RetailCommodityCharges retailComm1 = (RetailCommodityCharges) csssList.get(i);
                            if (retailComm1.getChargeCode().getId().equals(retailStandard.getChargeCode().getId())) {

                                csssList.remove(retailComm1);
                                break;
                            }
                        }
                    }

                    applyStdList.remove(retailStandard);

                    session.setAttribute("retailincludedList", includedList);
                }
            }
            if (buttonValue.equals("delete")) {
                if (session.getAttribute("retailincludedList") == null) {
                    includedList = new ArrayList();
                } else {
                    includedList = (List) session.getAttribute("retailincludedList");
                }
                applyStdList = (List) session.getAttribute("retailapplyGeneralStandardList");
                RetailStandardCharges1 ChargestoRemove = (RetailStandardCharges1) includedList.get(Integer.parseInt(index));
                includedList.remove(ChargestoRemove);
                applyStdList.add(ChargestoRemove);
                List cssList = new ArrayList();
                if (session.getAttribute("retailcssList") != null) {
                    cssList = (List) session.getAttribute("retailcssList");
                    for (int i = 0; i < cssList.size(); i++) {
                        RetailCommodityCharges retailCom = (RetailCommodityCharges) cssList.get(i);
                        if (retailCom.getFlag() != null && retailCom.getFlag().equals("Y")) {
                            if (retailCom.getChargeCode().getId().equals(ChargestoRemove.getChargeCode().getId()) &&
                                    retailCom.getChargeType().getId().equals(ChargestoRemove.getChargeType().getId())) {
                                cssList.remove(retailCom);
                                break;
                            }
                        }
                    }
                }
                session.setAttribute("retailincludedList", includedList);
            } else if (buttonValue.equals("cancel")) {

                List includedList1 = new ArrayList();
                List cssList = new ArrayList();
                if (session.getAttribute("retailcssList") != null) {
                    cssList = (List) session.getAttribute("retailcssList");
                }
                boolean flag1 = false;
                if (session.getAttribute("retailincludedList") != null) {

                    includedList1 = (List) session.getAttribute("retailincludedList");
                    for (int i = 0; i < includedList1.size(); i++) {
                        RetailStandardCharges1 retailStd = (RetailStandardCharges1) includedList1.get(i);

                        if (cssList != null && cssList.size() > 0) {
                            for (int j = 0; j < cssList.size(); j++) {
                                RetailCommodityCharges air1 = (RetailCommodityCharges) cssList.get(j);
                                if (retailStd.getChargeCode().getId().equals(air1.getChargeCode().getId()) && retailStd.getChargeType().getId().equals(air1.getChargeType().getId())) {
                                    flag1 = true;
                                    break;
                                } else {
                                    flag1 = false;
                                }
                            }
                            if (!flag1) {

                                RetailCommodityCharges retailCom = new RetailCommodityCharges();
                                retailCom.setChargeCode(retailStd.getChargeCode());
                                retailCom.setChargeType(retailStd.getChargeType());
                                retailCom.setStandard(retailStd.getStandard());
                                retailCom.setAmount(retailStd.getAmount());
                                retailCom.setAmtPer1000kg(retailStd.getAmtPer1000kg());
                                retailCom.setAmtPer100lbs(retailStd.getAmtPer100lbs());
                                retailCom.setAmtPerCbm(retailStd.getAmtPerCbm());
                                retailCom.setAmtPerCft(retailStd.getAmtPerCft());
                                retailCom.setAsFreightedCheckBox(retailStd.getAsFrfgted());
                                retailCom.setChangedDate(retailStd.getChangedDate());
                                retailCom.setEffectiveDate(retailStd.getEffectiveDate());
                                retailCom.setInsuranceAmt(retailStd.getInsuranceAmt());
                                retailCom.setInsuranceRate(retailStd.getInsuranceRate());
                                retailCom.setMinAmt(retailStd.getMinAmt());
                                retailCom.setPercentage(retailStd.getPercentage());
                                retailCom.setWhoChanged(retailStd.getWhoChanged());
                                retailCom.setFlag("Y");
                                cssList.add(retailCom);
                            }
                        } else {
                            RetailCommodityCharges retailCom = new RetailCommodityCharges();
                            retailCom.setChargeCode(retailStd.getChargeCode());
                            retailCom.setChargeType(retailStd.getChargeType());
                            retailCom.setStandard(retailStd.getStandard());
                            retailCom.setAmount(retailStd.getAmount());
                            retailCom.setAmtPer1000kg(retailStd.getAmtPer1000kg());
                            retailCom.setAmtPer100lbs(retailStd.getAmtPer100lbs());
                            retailCom.setAmtPerCbm(retailStd.getAmtPerCbm());
                            retailCom.setAmtPerCft(retailStd.getAmtPerCft());
                            retailCom.setAsFreightedCheckBox(retailStd.getAsFrfgted());
                            retailCom.setChangedDate(retailStd.getChangedDate());
                            retailCom.setEffectiveDate(retailStd.getEffectiveDate());
                            retailCom.setInsuranceAmt(retailStd.getInsuranceAmt());
                            retailCom.setInsuranceRate(retailStd.getInsuranceRate());
                            retailCom.setMinAmt(retailStd.getMinAmt());
                            retailCom.setPercentage(retailStd.getPercentage());
                            retailCom.setWhoChanged(retailStd.getWhoChanged());
                            retailCom.setFlag("Y");
                            cssList.add(retailCom);
                        }

                    }
                }
                session.setAttribute("retailcssList", cssList);
                String option = "";
                if (session.getAttribute("option") != null) {
                    option = (String) session.getAttribute("option");
                }
                if (option.equals("retailaddcomcode")) {
                    request.setAttribute("cancel", "cancel");
                } else if (option.equals("edit")) {
                    request.setAttribute("cancel", "editcancel");
                }

            }
        }

        return mapping.findForward("applyGeneralStandardCharges");
    }
}