/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.AirStandardCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.AGSSForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-05-2008
 * 
 * XDoclet definition:
 * @struts.action path="/aGSS" name="aGSSForm" input="/jsps/ratemanagement/aGSS.jsp" scope="request" validate="true"
 */
public class AGSSAction extends Action {

    java.util.Date javaDate = null;

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AGSSForm aGSSForm = (AGSSForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";

        AirStandardCharges airStandardCharges = new AirStandardCharges();



        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();

        String buttonValue = aGSSForm.getButtonValue();
        String code = aGSSForm.getCharge();
        String codeDesc = aGSSForm.getDesc();
        String percentage = aGSSForm.getPercentage();
        String standard = aGSSForm.getStandard();
        String asFreighted = aGSSForm.getAsFrfgted();
        int index = 0;

        if (request.getParameter("ind") != null) {
            AirStandardCharges airStandard = new AirStandardCharges();
            int ind = Integer.parseInt(request.getParameter("ind"));
            List codeList1 = (List) session.getAttribute("agssAdd");
            airStandard = (AirStandardCharges) codeList1.get(ind);
            session.setAttribute("airStandardCharges", airStandard);
            forwardName = "agssEdit";

        } else {
            if (session.getAttribute("airStandardCharges") != null) {
                airStandardCharges = (AirStandardCharges) session.getAttribute("airStandardCharges");
            } else {
                airStandardCharges = new AirStandardCharges();
            }
            AirRatesBean airRatesBean = new AirRatesBean();
            airRatesBean.setStandard(aGSSForm.getStandard());
            airRatesBean.setAsFrfgted(aGSSForm.getAsFrfgted());

            request.setAttribute("airRatesBean", airRatesBean);
            if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
                airStandardCharges.setAsFrfgted("X");
            } else if (asFreighted == null) {
                airStandardCharges.setAsFrfgted(null);
            }
            List agssList = new ArrayList();

            GenericCode genObj = new GenericCode();
            String type = aGSSForm.getChargeType();

            forwardName = "agssAdd";

            if (type != null && !type.equals("0")) {
                genObj = (GenericCode) genericCodeDAO.findById(Integer.parseInt(type));
                airStandardCharges.setChargeType(genObj);
            }

            if (standard != null && standard.equalsIgnoreCase("on")) {
                airStandardCharges.setStandard("Y");
            } else if (standard == null) {
                airStandardCharges.setStandard("N");
            }
            if (aGSSForm.getInsuranceRate() != null && !aGSSForm.getInsuranceRate().equals("")) {
                airStandardCharges.setInsuranceRate(aGSSForm.getInsuranceRate());
            } else {
                airStandardCharges.setInsuranceRate(0.0);
            }
            if (aGSSForm.getInsuranceAmt() != null && !aGSSForm.getInsuranceAmt().equals("")) {
                airStandardCharges.setInsuranceAmt(aGSSForm.getInsuranceAmt());
            } else {
                airStandardCharges.setInsuranceAmt(0.0);
            }
            if (aGSSForm.getAmtPerCft() != null && !aGSSForm.getAmtPerCft().equals("")) {
                airStandardCharges.setAmtPerCft(aGSSForm.getAmtPerCft());
            } else {
                airStandardCharges.setAmtPerCft(0.0);
            }
            if (aGSSForm.getAmtPer100lbs() != null && !aGSSForm.getAmtPer100lbs().equals("")) {
                airStandardCharges.setAmtPer100lbs(aGSSForm.getAmtPer100lbs());
            } else {
                airStandardCharges.setAmtPer100lbs(0.0);
            }
            if (aGSSForm.getAmtPerCbm() != null && !aGSSForm.getAmtPerCbm().equals("")) {
                airStandardCharges.setAmtPerCbm(aGSSForm.getAmtPerCbm());
            } else {
                airStandardCharges.setAmtPerCbm(0.0);
            }
            if (aGSSForm.getAmtPer1000kg() != null && !aGSSForm.getAmtPer1000kg().equals("")) {
                airStandardCharges.setAmtPer1000kg(aGSSForm.getAmtPer1000kg());
            } else {
                airStandardCharges.setAmtPer1000kg(0.0);
            }
            if (aGSSForm.getAmount() != null && !aGSSForm.getAmount().equals("")) {
                airStandardCharges.setAmount(aGSSForm.getAmount());
            } else {
                airStandardCharges.setAmount(0.0);
            }
            if (percentage != null && !percentage.equals("")) {
                double d = Double.parseDouble(percentage);
                airStandardCharges.setPercentage(d / 1000);
            }

            if (aGSSForm.getMinAmt() != null && !aGSSForm.getMinAmt().equals("")) {
                airStandardCharges.setMinAmt(aGSSForm.getMinAmt());
            } else {
                airStandardCharges.setMinAmt(0.0);
            }

            if (aGSSForm.getTxtItemcreatedon() != null && aGSSForm.getTxtItemcreatedon() != "") {

                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
                String dd = sdf1.format(new Date());
                String effectiveDate = aGSSForm.getTxtItemcreatedon();
                javaDate = sdf.parse(effectiveDate + " " + dd);
                airStandardCharges.setEffectiveDate(javaDate);
            }

            session.setAttribute("airStandardCharges", airStandardCharges);
            if (buttonValue.equals("add")) {

                if (session.getAttribute("agssAdd") != null) {
                    agssList = (List) session.getAttribute("agssAdd");
                    for (int i = 0; i < agssList.size(); i++) {
                        AirStandardCharges airStandard = (AirStandardCharges) agssList.get(i);
                        if (airStandard.getIndex() != null) {
                            if (airStandard.getIndex() > index) {
                                index = airStandard.getIndex();
                            }
                        } else {
                            index = agssList.size() - 1;
                        }
                    }
                    index++;
                } else {
                    agssList = new ArrayList();
                    index++;
                }
                airStandardCharges.setIndex(index);
                if (airStandardCharges.getChargeCode() != null) {
                    agssList.add(airStandardCharges);
                } else {
                    String msg = "Please enter proper data...";
                    request.setAttribute("exist", msg);
                }


                session.setAttribute("agssAdd", agssList);
                if (session.getAttribute("airStandardCharges") != null) {
                    session.removeAttribute("airStandardCharges");
                }
                forwardName = "agssAdd";
                if (session.getAttribute("listOfAgssItem") != null) {

                    session.removeAttribute("listOfAgssItem");
                }
            }

            if (buttonValue != null && buttonValue.equals("chargeCode")) {
                List list = new ArrayList();
                String msg = "Charge Code already exists... ";

                if (session.getAttribute("agssAdd") != null) {
                    list = (List) session.getAttribute("agssAdd");

                    for (int i = 0; i < list.size(); i++) {
                        airStandardCharges = (AirStandardCharges) list.get(i);
                        if (airStandardCharges.getChargeCode().getCode().equals(code)) {
                            request.setAttribute("exist", msg);
                        }

                        if (airStandardCharges.getChargeCode().getCodedesc().equalsIgnoreCase(codeDesc)) {
                            request.setAttribute("exist", msg);
                        }
                    }
                }
                if (request.getAttribute("exist") == null && (code != null || !code.equals(""))) {
                    AirStandardCharges airStandardCharges2 = new AirStandardCharges();
                    genObj = null;
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findGenericCode("2", code);

                    if (codeList.size() > 0) {
                        genObj = (GenericCode) codeList.get(0);
                    }
                    if (genObj != null) {
                        airStandardCharges2.setChargeCode(genObj);
                        session.setAttribute("airStandardCharges", airStandardCharges2);
                    }
                }

                if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                    AirStandardCharges airStandardCharges2 = new AirStandardCharges();
                    genObj = null;
                    GenericCodeDAO genericDAO = new GenericCodeDAO();
                    List codeList = genericDAO.findByCodedesc(codeDesc);

                    if (codeList.size() > 0) {
                        genObj = (GenericCode) codeList.get(0);
                    }
                    if (genObj != null) {
                        airStandardCharges2.setChargeCode(genObj);
                        session.setAttribute("airStandardCharges", airStandardCharges2);
                    }
                }


                forwardName = "agssAdd";
            }
            if (buttonValue != null && buttonValue.equals("addItem")) {
                session.setAttribute("listOfAgssItem", "listOfAgssItem");
                forwardName = "agssAdd";

            }

        }
        request.setAttribute("buttonValue", buttonValue);

        return mapping.findForward(forwardName);
    }
}
