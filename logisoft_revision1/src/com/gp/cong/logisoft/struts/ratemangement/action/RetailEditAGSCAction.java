/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;

import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.RetailStandardCharges1;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.RetailEditAGSCForm;

public class RetailEditAGSCAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception{
        RetailEditAGSCForm retailEditAGSCForm = (RetailEditAGSCForm) form;// TODO
        // Auto-generated
        // method
        // stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        RetailStandardCharges1 retailStandardCharges = new RetailStandardCharges1();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        String buttonValue = retailEditAGSCForm.getButtonValue();
        String standard = retailEditAGSCForm.getStandard();
        String asFreighted = retailEditAGSCForm.getAsFreightedCheckBox();
        int index = 0;
        AirRatesBean airRatesBean = new AirRatesBean();
        String exclude = retailEditAGSCForm.getExclude();
        airRatesBean.setStandard(retailEditAGSCForm.getStandard());
        airRatesBean.setAsFrfgted(retailEditAGSCForm.getAsFreightedCheckBox());
        request.setAttribute("airRatesBean", airRatesBean);
        if (session.getAttribute("retailStandardCharges") != null) {
            retailStandardCharges = (RetailStandardCharges1) session.getAttribute("retailStandardCharges");
        } else {
            retailStandardCharges = new RetailStandardCharges1();
        }
        if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
            retailStandardCharges.setAsFrfgted("X");
        } else if (asFreighted == null) {
            retailStandardCharges.setAsFrfgted(null);
        }
        List agssList = new ArrayList();

        GenericCode genObj = new GenericCode();
        String type = retailEditAGSCForm.getChargeType();

        forwardName = "agssEdit";


        if (exclude != null && exclude.equalsIgnoreCase("on")) {
            retailStandardCharges.setExclude("Y");
        } else if (exclude == null) {
            retailStandardCharges.setExclude("N");
        }

        if (standard != null && standard.equalsIgnoreCase("on")) {
            retailStandardCharges.setStandard("Y");
        } else if (standard == null) {
            retailStandardCharges.setStandard("N");
        }
        if (retailEditAGSCForm.getAmtPerCft() != null && !retailEditAGSCForm.getAmtPerCft().equals("")) {
            retailStandardCharges.setAmtPerCft(new Double(retailEditAGSCForm.getAmtPerCft()));
        } else {
            retailStandardCharges.setAmtPerCft(0.0);
        }
        if (retailEditAGSCForm.getInsuranceAmt() != null && !retailEditAGSCForm.getInsuranceAmt().equals("")) {
            retailStandardCharges.setInsuranceAmt(new Double(retailEditAGSCForm.getInsuranceAmt()));
        } else {
            retailStandardCharges.setInsuranceAmt(0.0);
        }
        if (retailEditAGSCForm.getInsuranceRate() != null && !retailEditAGSCForm.getInsuranceRate().equals("")) {
            retailStandardCharges.setInsuranceRate(new Double(retailEditAGSCForm.getInsuranceRate()));
        } else {
            retailStandardCharges.setInsuranceRate(0.0);
        }
        if (retailEditAGSCForm.getAmtPer100lbs() != null && !retailEditAGSCForm.getAmtPer100lbs().equals("")) {
            retailStandardCharges.setAmtPer100lbs(new Double(retailEditAGSCForm.getAmtPer100lbs()));
        } else {
            retailStandardCharges.setAmtPer100lbs(0.0);
        }
        if (retailEditAGSCForm.getAmtPerCbm() != null && !retailEditAGSCForm.getAmtPerCbm().equals("")) {
            retailStandardCharges.setAmtPerCbm(new Double(retailEditAGSCForm.getAmtPerCbm()));
        } else {
            retailStandardCharges.setAmtPerCbm(0.0);
        }
        if (retailEditAGSCForm.getAmtPer1000kg() != null && !retailEditAGSCForm.getAmtPer1000kg().equals("")) {
            retailStandardCharges.setAmtPer1000kg(new Double(retailEditAGSCForm.getAmtPer1000kg()));
        } else {
            retailStandardCharges.setAmtPer1000kg(0.0);
        }
        if (retailEditAGSCForm.getAmount() != null && !retailEditAGSCForm.getAmount().equals("")) {
            retailStandardCharges.setAmount(new Double(retailEditAGSCForm.getAmount()));
        } else {
            retailStandardCharges.setAmount(0.0);
        }

        if (retailEditAGSCForm.getPercentage() != null && !retailEditAGSCForm.getPercentage().equals("")) {
            double d = Double.parseDouble(retailEditAGSCForm.getPercentage());

            retailStandardCharges.setPercentage(d / 1000);
        } else {
            retailStandardCharges.setPercentage(0.0);
        }
        if (retailEditAGSCForm.getMinAmt() != null && !retailEditAGSCForm.getMinAmt().equals("")) {
            retailStandardCharges.setMinAmt(new Double(retailEditAGSCForm.getMinAmt()));
        } else {
            retailStandardCharges.setMinAmt(0.0);
        }
        if (retailEditAGSCForm.getTxtItemcreatedon() != null && !retailEditAGSCForm.getTxtItemcreatedon().equals("")) {
            java.util.Date javaDate = null;
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
                javaDate = sdf.parse(retailEditAGSCForm.getTxtItemcreatedon() + " " + sdf1.format(new Date()));
            retailStandardCharges.setEffectiveDate(javaDate);

        }

        session.setAttribute("retailStandardCharges", retailStandardCharges);
        if (buttonValue != null && buttonValue.equals("edit")) {

            if (session.getAttribute("retailagssAdd") != null) {
                agssList = (List) session.getAttribute("retailagssAdd");
                for (int i = 0; i < agssList.size(); i++) {
                    RetailStandardCharges1 retailStandard = (RetailStandardCharges1) agssList.get(i);
                    if (retailStandard.getChargeCode() != null && retailStandardCharges.getChargeCode() != null && retailStandard.getChargeType() != null && retailStandardCharges.getChargeType() != null) {
                        if (retailStandard.getChargeCode().getId().equals(
                                retailStandardCharges.getChargeCode().getId()) && retailStandard.getChargeType().getId().equals(
                                retailStandardCharges.getChargeType().getId())) {
                            agssList.remove(i);
                            agssList.add(retailStandardCharges);

                            break;
                        }
                    }
                }
            }
            session.setAttribute("getChangedagss", retailStandardCharges);
            session.setAttribute("retailagssAdd", agssList);
            session.setAttribute("retailStandardCharges",
                    retailStandardCharges);
            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            forwardName = "agssAdd";
        } else if (buttonValue != null && buttonValue.equals("cancel")) {
            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            forwardName = "agssAdd";
        }
        if (buttonValue != null && buttonValue.equals("delete")) {
            if (session.getAttribute("retailagssAdd") != null) {
                agssList = (List) session.getAttribute("retailagssAdd");
            }
            for (int i = 0; i < agssList.size(); i++) {
                RetailStandardCharges1 retailStandard = (RetailStandardCharges1) agssList.get(i);
                if (retailStandard.getChargeCode() != null) {
                }
                if (retailStandard.getChargeCode() != null && retailStandardCharges.getChargeCode() != null && retailStandard.getChargeCode().getId().equals(
                        retailStandardCharges.getChargeCode().getId())) {
                    agssList.remove(retailStandard);
                }
                session.setAttribute("retailagssAdd", agssList);
            }
            if (session.getAttribute("retailStandardCharges") != null) {
                session.removeAttribute("retailStandardCharges");
            }
            forwardName = "agssAdd";
        }

        request.setAttribute("buttonValue", buttonValue);
        if (session.getAttribute("removebutton") == null) {

            session.removeAttribute("removebutton");
        }
        return mapping.findForward(forwardName);
    }
    /*
     * public Date changeToDate(String dateFromForm) { Date javaDate=null;
     * if(dateFromForm!=null && dateFromForm!="") { try { SimpleDateFormat
     * sdf=new SimpleDateFormat("MM/dd/yyyy");////
     * javaDate=sdf.parse(dateFromForm); } catch (ParseException e) {
     * e.printStackTrace(); } } return javaDate; }
     */
}