/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.LCLColoadStandardCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.EditAddLclColoadStandardForm;

/** 
 * MyEclipse Struts
 * Creation date: 06-03-2008
 * 
 * XDoclet definition:
 * @struts.action path="/editAddLclColoadStandard" name="editAddLclColoadStandardForm" input="jsps/ratemangement/form/editCoAgss.jsp" scope="request" validate="true"
 */
public class EditAddLclColoadStandardAction extends Action {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception{
        EditAddLclColoadStandardForm coaGSSEditForm = (EditAddLclColoadStandardForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        LCLColoadStandardCharges lCLColoadStandardCharges = new LCLColoadStandardCharges();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        String buttonValue = coaGSSEditForm.getButtonValue();
        String standard = coaGSSEditForm.getStandard();
        String asFreighted = coaGSSEditForm.getAsFrfgted();
        int index = 0;
        AirRatesBean airRatesBean = new AirRatesBean();
        airRatesBean.setStandard(coaGSSEditForm.getStandard());
        airRatesBean.setAsFrfgted(coaGSSEditForm.getAsFrfgted());
        request.setAttribute("airRatesBean", airRatesBean);
        List agssList = new ArrayList();
        if (session.getAttribute("coStandardCharges") != null) {
            lCLColoadStandardCharges = (LCLColoadStandardCharges) session.getAttribute("coStandardCharges");
        } else {
            lCLColoadStandardCharges = new LCLColoadStandardCharges();
        }
        if (!buttonValue.equals("cancel")) {
            if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
                lCLColoadStandardCharges.setAsFrfgted("X");
            } else if (asFreighted == null) {
                lCLColoadStandardCharges.setAsFrfgted(null);
            }


            GenericCode genObj = new GenericCode();
            String type = coaGSSEditForm.getChargeType();

            forwardName = "coagssEdit";



            if (standard != null && standard.equalsIgnoreCase("on")) {
                lCLColoadStandardCharges.setStandard("Y");
            } else if (standard == null) {
                lCLColoadStandardCharges.setStandard("N");
            }
            if (coaGSSEditForm.getAmtPerCft() != null && !coaGSSEditForm.getAmtPerCft().equals("")) {
                lCLColoadStandardCharges.setAmtPerCft(new Double(coaGSSEditForm.getAmtPerCft()));
            }
            if (coaGSSEditForm.getAmtPer100lbs() != null && !coaGSSEditForm.getAmtPer100lbs().equals("")) {
                lCLColoadStandardCharges.setAmtPer100lbs(new Double(coaGSSEditForm.getAmtPer100lbs()));
            }
            if (coaGSSEditForm.getAmtPerCbm() != null && !coaGSSEditForm.getAmtPerCbm().equals("")) {
                lCLColoadStandardCharges.setAmtPerCbm(new Double(coaGSSEditForm.getAmtPerCbm()));
            }
            if (coaGSSEditForm.getAmtPer1000kg() != null && !coaGSSEditForm.getAmtPer1000kg().equals("")) {
                lCLColoadStandardCharges.setAmtPer1000Kg(new Double(coaGSSEditForm.getAmtPer1000kg()));
            }
            if (coaGSSEditForm.getAmount() != null && !coaGSSEditForm.getAmount().equals("")) {
                lCLColoadStandardCharges.setAmount(new Double(coaGSSEditForm.getAmount()));
            }
            if (coaGSSEditForm.getPercentage() != null && !coaGSSEditForm.getPercentage().equals("")) {
                double d = Double.parseDouble(coaGSSEditForm.getPercentage());
                lCLColoadStandardCharges.setPercentage(d / 1000);
            }
            if (coaGSSEditForm.getMinAmt() != null && !coaGSSEditForm.getMinAmt().equals("")) {
                lCLColoadStandardCharges.setMinAmt(new Double(coaGSSEditForm.getMinAmt()));
            }
            if (coaGSSEditForm.getInsuranceRate() != null && !coaGSSEditForm.getInsuranceRate().equals("")) {
                lCLColoadStandardCharges.setInsuranceRate(new Double(coaGSSEditForm.getInsuranceRate()));
            }
            if (coaGSSEditForm.getInsuranceAmt() != null && !coaGSSEditForm.getInsuranceAmt().equals("")) {
                lCLColoadStandardCharges.setInsuranceAmt(new Double(coaGSSEditForm.getInsuranceAmt()));
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            if (userId != null) {
                lCLColoadStandardCharges.setWhoChanged(userId.getLoginName());
            }
            if (coaGSSEditForm.getTxtItemcreatedon() != null && !coaGSSEditForm.getTxtItemcreatedon().equals("")) {
                java.util.Date javaDate = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm aaa");
                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
                    javaDate = sdf.parse(coaGSSEditForm.getTxtItemcreatedon() + " " + sdf1.format(new Date()));
                lCLColoadStandardCharges.setEffectiveDate(javaDate);

            }


            session.setAttribute("coStandardCharges", lCLColoadStandardCharges);
        }
        if (buttonValue.equals("edit")) {
            if (session.getAttribute("coagssAdd") != null) {
                agssList = (List) session.getAttribute("coagssAdd");
                for (int i = 0; i < agssList.size(); i++) {
                    LCLColoadStandardCharges coStandard = (LCLColoadStandardCharges) agssList.get(i);
                    if (coStandard.getChargeCode().getId().equals(lCLColoadStandardCharges.getChargeCode().getId()) && coStandard.getChargeType().getId().equals(lCLColoadStandardCharges.getChargeType().getId())) {
                        lCLColoadStandardCharges.setIndex(coStandard.getIndex());
                        agssList.remove(coStandard);
                    }
                }
            }
            agssList.add(lCLColoadStandardCharges);
            session.setAttribute("coagssAdd", agssList);
            if (session.getAttribute("coStandardCharges") != null) {
                session.removeAttribute("coStandardCharges");
            }

            session.setAttribute("getLclAgsss", lCLColoadStandardCharges);
            forwardName = "coagssAdd";
        } else if (buttonValue.equals("cancel")) {
            if (session.getAttribute("coStandardCharges") != null) {
                session.removeAttribute("coStandardCharges");
            }
            forwardName = "coagssAdd";
        } else if (buttonValue.equals("delete")) {
            if (session.getAttribute("coagssAdd") != null) {
                agssList = (List) session.getAttribute("coagssAdd");
            }
            for (int i = 0; i < agssList.size(); i++) {
                LCLColoadStandardCharges coStandard = (LCLColoadStandardCharges) agssList.get(i);
                if (coStandard.getChargeCode().getId().equals(lCLColoadStandardCharges.getChargeCode().getId()) && coStandard.getChargeType().getId().equals(lCLColoadStandardCharges.getChargeType().getId())) {
                    agssList.remove(coStandard);
                }
                session.setAttribute("coagssAdd", agssList);
            }
            if (session.getAttribute("coStandardCharges") != null) {
                session.removeAttribute("coStandardCharges");
            }
            forwardName = "coagssAdd";
        }

        request.setAttribute("buttonValue", buttonValue);


        return mapping.findForward(forwardName);
    }
}