/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.LCLColoadStandardCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.AddLclColoadStandardForm;

/**
 * MyEclipse Struts Creation date: 06-03-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/addLclColoadStandard" name="addLclColoadStandardForm"
 *                input="/jsps/ratemangement/AddLclColoadStandard.jsp"
 *                scope="request" validate="true"
 */
public class AddLclColoadStandardAction extends Action {

    java.util.Date javaDate = null;

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        AddLclColoadStandardForm coaGSSForm = (AddLclColoadStandardForm) form;// TODO
        // Auto-generated
        // method
        // stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";

        LCLColoadStandardCharges lCLColoadStandardCharges = new LCLColoadStandardCharges();

        GenericCode genericCodeObj = new GenericCode();

        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();

        String buttonValue = coaGSSForm.getButtonValue();
        String code = coaGSSForm.getCharge();
        String codeDesc = coaGSSForm.getDesc();
        String standard = coaGSSForm.getStandard();
        String asFreighted = coaGSSForm.getAsFrfgted();
        int index = 0;
        if (session.getAttribute("coStandardCharges") != null) {
            lCLColoadStandardCharges = (LCLColoadStandardCharges) session.getAttribute("coStandardCharges");
        } else {
            lCLColoadStandardCharges = new LCLColoadStandardCharges();
        }

        if (request.getParameter("ind") != null) {
            LCLColoadStandardCharges coStandard = new LCLColoadStandardCharges();
            int ind = Integer.parseInt(request.getParameter("ind"));
            List codeList1 = (List) session.getAttribute("coagssAdd");
            coStandard = (LCLColoadStandardCharges) codeList1.get(ind);
            session.setAttribute("coStandardCharges", coStandard);
            forwardName = "coagssEdit";

        } else {

            AirRatesBean airRatesBean = new AirRatesBean();
            airRatesBean.setStandard(coaGSSForm.getStandard());
            airRatesBean.setAsFrfgted(coaGSSForm.getAsFrfgted());

            request.setAttribute("airRatesBean", airRatesBean);
            if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
                lCLColoadStandardCharges.setAsFrfgted("X");
            } else if (asFreighted == null) {
                lCLColoadStandardCharges.setAsFrfgted(null);
            }
            List agssList = new ArrayList();

            GenericCode genObj = new GenericCode();
            String type = coaGSSForm.getChargeType();

            forwardName = "coagssAdd";

            if (type != null && !type.equals("0")) {
                genObj = (GenericCode) genericCodeDAO.findById(Integer.parseInt(type));
                lCLColoadStandardCharges.setChargeType(genObj);
            }
            User userId = null;
            if (session.getAttribute("loginuser") != null) {
                userId = (User) session.getAttribute("loginuser");
            }
            if (userId != null) {
                lCLColoadStandardCharges.setWhoChanged(userId.getLoginName());
            }
            if (standard != null && standard.equalsIgnoreCase("on")) {
                lCLColoadStandardCharges.setStandard("Y");
            } else if (standard == null) {
                lCLColoadStandardCharges.setStandard("N");
            }
            if (coaGSSForm.getInsuranceRate() != null && !coaGSSForm.getInsuranceRate().equals("")) {
                lCLColoadStandardCharges.setInsuranceRate(coaGSSForm.getInsuranceRate());
            } else {
                lCLColoadStandardCharges.setInsuranceRate(0.0);
            }
            if (coaGSSForm.getInsuranceAmt() != null && !coaGSSForm.getInsuranceAmt().equals("")) {
                lCLColoadStandardCharges.setInsuranceAmt(coaGSSForm.getInsuranceAmt());
            } else {
                lCLColoadStandardCharges.setInsuranceAmt(0.0);
            }
            if (coaGSSForm.getAmtPerCft() != null && !coaGSSForm.getAmtPerCft().equals("")) {
                lCLColoadStandardCharges.setAmtPerCft(coaGSSForm.getAmtPerCft());
            } else {
                lCLColoadStandardCharges.setAmtPerCft(0.0);
            }
            if (coaGSSForm.getAmtPer100lbs() != null && !coaGSSForm.getAmtPer100lbs().equals("")) {
                lCLColoadStandardCharges.setAmtPer100lbs(coaGSSForm.getAmtPer100lbs());
            } else {
                lCLColoadStandardCharges.setAmtPer100lbs(0.0);
            }
            if (coaGSSForm.getAmtPerCbm() != null && !coaGSSForm.getAmtPerCbm().equals("")) {
                lCLColoadStandardCharges.setAmtPerCbm(coaGSSForm.getAmtPerCbm());
            } else {
                lCLColoadStandardCharges.setAmtPerCbm(0.0);
            }
            if (coaGSSForm.getAmtPer1000kg() != null && !coaGSSForm.getAmtPer1000kg().equals("")) {
                lCLColoadStandardCharges.setAmtPer1000Kg(coaGSSForm.getAmtPer1000kg());
            } else {
                lCLColoadStandardCharges.setAmtPer1000Kg(0.0);
            }
            if (coaGSSForm.getAmount() != null && !coaGSSForm.getAmount().equals("")) {
                lCLColoadStandardCharges.setAmount(coaGSSForm.getAmount());
            } else {
                lCLColoadStandardCharges.setAmount(0.0);
            }
            if (coaGSSForm.getPercentage() != null && !coaGSSForm.getPercentage().equals("")) {
                double d = Double.parseDouble(coaGSSForm.getPercentage());
                lCLColoadStandardCharges.setPercentage(d / 1000);
            } else {
                lCLColoadStandardCharges.setPercentage(0.0);
            }
            if (coaGSSForm.getMinAmt() != null && !coaGSSForm.getMinAmt().equals("")) {
                lCLColoadStandardCharges.setMinAmt(coaGSSForm.getMinAmt());
            } else {
                lCLColoadStandardCharges.setMinAmt(0.0);
            }

            if (coaGSSForm.getTxtItemcreatedon() != null && coaGSSForm.getTxtItemcreatedon() != "") {

                SimpleDateFormat sdf = new SimpleDateFormat(
                        "MM/dd/yyyy hh:mm aaa");
                SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");
                javaDate = sdf.parse(coaGSSForm.getTxtItemcreatedon() + " " + sdf1.format(new Date()));
                lCLColoadStandardCharges.setEffectiveDate(javaDate);
            }

            session.setAttribute("coStandardCharges", lCLColoadStandardCharges);

            if (buttonValue != null && buttonValue.equals("add")) {
                if (lCLColoadStandardCharges.getChargeCode() != null) {

                    if (session.getAttribute("coagssAdd") != null) {
                        agssList = (List) session.getAttribute("coagssAdd");
                        for (int i = 0; i < agssList.size(); i++) {
                            LCLColoadStandardCharges lCLColoadStandard = (LCLColoadStandardCharges) agssList.get(i);
                            if (lCLColoadStandard.getIndex() != null) {
                                if (lCLColoadStandard.getIndex() > index) {
                                    index = lCLColoadStandard.getIndex();
                                }
                            } else {
                                index = agssList.size() - 1;
                            }
                        }
                        index++;
                    } else {
                        agssList = new ArrayList();
                        index++;
                    }
                    lCLColoadStandardCharges.setIndex(index);
                    agssList.add(lCLColoadStandardCharges);
                    session.setAttribute("coagssAdd", agssList);
                    if (session.getAttribute("coStandardCharges") != null) {
                        session.removeAttribute("coStandardCharges");
                    }
                    if (session.getAttribute("listLclAgssitem") != null) {
                        session.removeAttribute("listLclAgssitem");
                    }
                } else {
                    String msg = "Please Select correct Charge Code... ";
                    request.setAttribute("exist", msg);
                }
                forwardName = "coagssAdd";
            }

        }
        if (buttonValue != null && buttonValue.equals("chargeCode")) {
            List list = new ArrayList();
            String msg = "Charge Code already exists... ";

            if (session.getAttribute("coagssAdd") != null) {
                list = (List) session.getAttribute("coagssAdd");

                for (int i = 0; i < list.size(); i++) {
                    lCLColoadStandardCharges = (LCLColoadStandardCharges) list.get(i);
                    if (lCLColoadStandardCharges.getChargeCode().getCode().equals(code)) {
                        request.setAttribute("exist", msg);
                    }
                    if (lCLColoadStandardCharges.getChargeCode().getCodedesc().equals(codeDesc)) {
                        request.setAttribute("exist", msg);
                    }
                }
            }
            if (request.getAttribute("exist") == null && (code != null || !code.equals(""))) {
                genericCodeObj = null;
                LCLColoadStandardCharges coloadStandardCharges = new LCLColoadStandardCharges();
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                List codeList = genericDAO.findGenericCode("2", code);
                if (codeList.size() > 0) {
                    genericCodeObj = (GenericCode) codeList.get(0);
                }
                if (genericCodeObj != null) {
                    coloadStandardCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("coStandardCharges",
                            coloadStandardCharges);
                }

            }

            if (request.getAttribute("exist") == null && (codeDesc != null || !codeDesc.equals(""))) {
                genericCodeObj = null;
                LCLColoadStandardCharges coloadStandardCharges = new LCLColoadStandardCharges();
                GenericCodeDAO genericDAO = new GenericCodeDAO();
                List codeList = genericDAO.findByCodedesc(codeDesc);
                if (codeList.size() > 0) {
                    genericCodeObj = (GenericCode) codeList.get(0);
                }
                if (genericCodeObj != null) {
                    coloadStandardCharges.setChargeCode(genericCodeObj);
                    session.setAttribute("coStandardCharges",
                            coloadStandardCharges);
                }

            }

        } else if (buttonValue.equals("delete")) {
            List agssList = new ArrayList();
            if (session.getAttribute("coagssAdd") != null) {
                agssList = (List) session.getAttribute("coagssAdd");
            }
            for (int i = 0; i < agssList.size(); i++) {
                LCLColoadStandardCharges coStandard = (LCLColoadStandardCharges) agssList.get(i);
                if (coStandard.getChargeCode() != null && coaGSSForm.getStandardId() != null
                        && coStandard.getChargeCode().getCode().equals(coaGSSForm.getStandardId())) {
                    agssList.remove(coStandard);
                }
                session.setAttribute("coagssAdd", agssList);
            }
            if (session.getAttribute("coStandardCharges") != null) {
                session.removeAttribute("coStandardCharges");
            }
            forwardName = "coagssAdd";
        }

        if (buttonValue != null && buttonValue.equals("addItem")) {

            session.setAttribute("listLclAgssitem", "listLclAgssitem");
        }
        request.setAttribute("buttonValue", buttonValue);

        return mapping.findForward(forwardName);
    }
}
