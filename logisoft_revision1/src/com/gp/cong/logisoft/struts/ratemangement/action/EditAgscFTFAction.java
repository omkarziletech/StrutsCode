/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.gp.cong.logisoft.beans.AirRatesBean;
import com.gp.cong.logisoft.domain.FTFStandardCharges;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.EditAgscFTFForm;

public class EditAgscFTFAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)throws Exception{
        EditAgscFTFForm editAgscFTFForm = (EditAgscFTFForm) form;// TODO Auto-generated method stub
        HttpSession session = ((HttpServletRequest) request).getSession();
        String forwardName = "";
        FTFStandardCharges ftfStandardCharges = new FTFStandardCharges();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        String buttonValue = editAgscFTFForm.getButtonValue();
        String standard = editAgscFTFForm.getStandard();
        String asFreighted = editAgscFTFForm.getAsFrfgted();
        int index = 0;
        AirRatesBean airRatesBean = new AirRatesBean();
        airRatesBean.setStandard(editAgscFTFForm.getStandard());
        airRatesBean.setAsFrfgted(editAgscFTFForm.getAsFrfgted());
        request.setAttribute("airRatesBean", airRatesBean);
        List agssList = new ArrayList();

        if (session.getAttribute("ftfStandardCharges") != null) {
            ftfStandardCharges = (FTFStandardCharges) session.getAttribute("ftfStandardCharges");
        } else {
            ftfStandardCharges = new FTFStandardCharges();
        }
        if (!buttonValue.equals("cancel")) {
            if (asFreighted != null && asFreighted.equalsIgnoreCase("on")) {
                ftfStandardCharges.setAsFrfgted("X");
            } else if (asFreighted == null) {
                ftfStandardCharges.setAsFrfgted(null);
            }


            GenericCode genObj = new GenericCode();
            String type = editAgscFTFForm.getChargeType();

            forwardName = "ftfagssEdit";



            if (standard != null && standard.equalsIgnoreCase("on")) {
                ftfStandardCharges.setStandard("Y");
            } else if (standard == null) {
                ftfStandardCharges.setStandard("N");
            }
            if (editAgscFTFForm.getAmtPerCft() != null && !editAgscFTFForm.getAmtPerCft().equals("")) {
                ftfStandardCharges.setAmtPerCft(new Double(editAgscFTFForm.getAmtPerCft()));
            }
            if (editAgscFTFForm.getAmtPer100lbs() != null && !editAgscFTFForm.getAmtPer100lbs().equals("")) {
                ftfStandardCharges.setAmtPer100lbs(new Double(editAgscFTFForm.getAmtPer100lbs()));
            }
            if (editAgscFTFForm.getAmtPerCbm() != null && !editAgscFTFForm.getAmtPerCbm().equals("")) {
                ftfStandardCharges.setAmtPerCbm(new Double(editAgscFTFForm.getAmtPerCbm()));
            }
            if (editAgscFTFForm.getAmtPer1000kg() != null && !editAgscFTFForm.getAmtPer1000kg().equals("")) {
                ftfStandardCharges.setAmtPer1000Kg(new Double(editAgscFTFForm.getAmtPer1000kg()));
            }
            if (editAgscFTFForm.getAmount() != null && !editAgscFTFForm.getAmount().equals("")) {
                ftfStandardCharges.setAmount(new Double(editAgscFTFForm.getAmount()));
            }
            if (editAgscFTFForm.getPercentage() != null && !editAgscFTFForm.getPercentage().equals("")) {
                double d = Double.parseDouble(editAgscFTFForm.getPercentage());
                ftfStandardCharges.setPercentage(d / 1000);
            }

            if (editAgscFTFForm.getMinAmt() != null && !editAgscFTFForm.getMinAmt().equals("")) {
                ftfStandardCharges.setMinAmt(new Double(editAgscFTFForm.getMinAmt()));
            }
            if (editAgscFTFForm.getInsuranceRate() != null && !editAgscFTFForm.getInsuranceRate().equals("")) {
                ftfStandardCharges.setInsuranceRate(new Double(editAgscFTFForm.getInsuranceRate()));
            }
            if (editAgscFTFForm.getInsuranceAmt() != null && !editAgscFTFForm.getInsuranceAmt().equals("")) {
                ftfStandardCharges.setInsuranceAmt(new Double(editAgscFTFForm.getInsuranceAmt()));
            }

            if (editAgscFTFForm.getTxtItemcreatedon() != null && !editAgscFTFForm.getTxtItemcreatedon().equals("")) {
                java.util.Date javaDate = null;
                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm aaa");
                    SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm aaa");

                    javaDate = sdf.parse(editAgscFTFForm.getTxtItemcreatedon() + " " + sdf1.format(new Date()));
                ftfStandardCharges.setEffectiveDate(javaDate);

            }


            session.setAttribute("ftfStandardCharges", ftfStandardCharges);
        }
        if (buttonValue.equals("edit")) {

            if (session.getAttribute("ftfagssAdd") != null) {
                agssList = (List) session.getAttribute("ftfagssAdd");
                for (int i = 0; i < agssList.size(); i++) {
                    FTFStandardCharges ftfStandard = (FTFStandardCharges) agssList.get(i);
                    if (ftfStandard.getChargeCode().getId().equals(ftfStandardCharges.getChargeCode().getId()) && ftfStandard.getChargeType().getId().equals(ftfStandardCharges.getChargeType().getId())) {
                        ftfStandardCharges.setIndex(ftfStandard.getIndex());
                        agssList.remove(ftfStandard);
                    }
                }
            }
            agssList.add(ftfStandardCharges);
            session.setAttribute("ftfagssAdd", agssList);
            session.setAttribute("displayftfagss", ftfStandardCharges);
            if (session.getAttribute("ftfStandardCharges") != null) {
                session.removeAttribute("ftfStandardCharges");
            }

            forwardName = "ftfagssAdd";
        } else if (buttonValue.equals("cancel")) {
            if (session.getAttribute("ftfStandardCharges") != null) {
                session.removeAttribute("ftfStandardCharges");
            }
            forwardName = "ftfagssAdd";
        } else if (buttonValue.equals("delete")) {
            if (session.getAttribute("ftfagssAdd") != null) {
                agssList = (List) session.getAttribute("ftfagssAdd");
            }
            for (int i = 0; i < agssList.size(); i++) {
                FTFStandardCharges ftfStandard = (FTFStandardCharges) agssList.get(i);
                if (ftfStandard.getChargeCode().getId().equals(ftfStandardCharges.getChargeCode().getId()) && ftfStandard.getChargeType().getId().equals(ftfStandardCharges.getChargeType().getId())) {
                    agssList.remove(ftfStandard);
                }
                session.setAttribute("ftfagssAdd", agssList);
            }
            if (session.getAttribute("ftfStandardCharges") != null) {
                session.removeAttribute("ftfStandardCharges");
            }
            forwardName = "ftfagssAdd";
        }
        request.setAttribute("buttonValue", buttonValue);


        return mapping.findForward(forwardName);

    }
}