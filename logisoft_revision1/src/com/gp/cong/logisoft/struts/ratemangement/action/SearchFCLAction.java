/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gp.cong.logisoft.struts.ratemangement.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.LabelValueBean;
import org.apache.struts.util.MessageResources;

import com.gp.cong.logisoft.bc.fcl.QuotationBC;
import com.gp.cong.logisoft.domain.CarriersOrLineTemp;
import com.gp.cong.logisoft.domain.FclBuy;
import com.gp.cong.logisoft.domain.FclBuyAirFreightCharges;
import com.gp.cong.logisoft.domain.FclBuyCost;
import com.gp.cong.logisoft.domain.FclBuyCostTypeRates;
import com.gp.cong.logisoft.domain.GenericCode;
import com.gp.cong.logisoft.domain.ProcessInfo;
import com.gp.cong.logisoft.domain.TradingPartnerTemp;
import com.gp.cong.logisoft.domain.UnLocation;
import com.gp.cong.logisoft.domain.User;
import com.gp.cong.logisoft.hibernate.dao.CustomerDAO;
import com.gp.cong.logisoft.hibernate.dao.FclBuyCostDAO;
import com.gp.cong.logisoft.hibernate.dao.FclBuyDAO;
import com.gp.cong.logisoft.hibernate.dao.GenericCodeDAO;
import com.gp.cong.logisoft.hibernate.dao.ProcessInfoDAO;
import com.gp.cong.logisoft.hibernate.dao.UnLocationDAO;
import com.gp.cong.logisoft.hibernate.dao.UserDAO;
import com.gp.cong.logisoft.struts.ratemangement.form.SearchFCLForm;
import com.gp.cong.logisoft.util.DBUtil;
import org.apache.commons.beanutils.PropertyUtils;

public class SearchFCLAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) throws Exception {
        SearchFCLForm searchFCLForm = (SearchFCLForm) form;// TODO
        String button = searchFCLForm.getButtonValue();
        String buttonValue = searchFCLForm.getButtonValue();
        String get = searchFCLForm.getIndex();
        String match = searchFCLForm.getMatch();
        // match=searchFCLForm.get
        String trmNum = searchFCLForm.getTerminalNumber();
        String tername = searchFCLForm.getTerminalName();
        String portName = searchFCLForm.getDestAirportname();
        String comCodedesc = searchFCLForm.getComDescription();
        String portNum = searchFCLForm.getDestSheduleNumber();
        String comCode = searchFCLForm.getComCode();
        String sslineNO = searchFCLForm.getSslinenumber();
        String ssName = searchFCLForm.getSslinename();
        String orgRegion = searchFCLForm.getOrgRegion();
        String destRegion = searchFCLForm.getDestRegion();
        String ocean = searchFCLForm.getMatch();
        CustomerDAO carriersOrLineDAO = new CustomerDAO();
        CarriersOrLineTemp carriersOrLineTemp = null;
        UnLocationDAO unLocationDAO = new UnLocationDAO();
        GenericCodeDAO genericCodeDAO = new GenericCodeDAO();
        TradingPartnerTemp carriesObjectForSSLine = null;
        FclBuyCostDAO fclBuyCostDAO = new FclBuyCostDAO();
        FclBuyDAO fclBuyDAO = new FclBuyDAO();
        List searchFclrecords = new ArrayList();
        QuotationBC quotationBC = new QuotationBC();
        MessageResources messageResources = getResources(request);
        String loginName = "";
        String msg = "";
        String forwardName = "";
        DBUtil dbUtil = new DBUtil();
        String message = "";

        FclBuyCost fclBuyCost = new FclBuyCost();
        Set set = new HashSet();
        List unLocationList = new ArrayList();
        GenericCode genericCodeObject = null;
        UnLocation unLocObjectForPorts = null;
        UnLocation unLocObjectForTerminal = null;
        List unittypelist = new ArrayList();
        HttpSession session = ((HttpServletRequest) request).getSession();
        FclBuy fclBuy = new FclBuy();
        if (buttonValue != null && buttonValue.equals("popupsearch")) {
            if (session.getAttribute("searchfclrecords") != null) {
                fclBuy = (FclBuy) session.getAttribute("searchfclrecords");
            } else {
                fclBuy = new FclBuy();

            }
            fclBuy.setOriginalRegion(orgRegion);
            fclBuy.setDestinationRegion(destRegion);
            if (trmNum != null && !trmNum.equals("")) {

                unLocationList = unLocationDAO.findForManagement(trmNum, tername);
                if (unLocationList != null && unLocationList.size() > 0) {
                    unLocObjectForTerminal = (UnLocation) unLocationList.get(0);
                    fclBuy.setOriginTerminal(unLocObjectForTerminal);
                }
            } else if (tername != null && !tername.equals("")) {
                String stringTokens[] = StringUtils.splitPreserveAllTokens(tername, '-');
                if (stringTokens != null && stringTokens.length > 1) {
                    tername = stringTokens[0];
                    trmNum = stringTokens[1];
                }
                List terminal = unLocationDAO.findForManagement(trmNum, tername);
                if (terminal.size() > 0) {
                    unLocObjectForTerminal = (UnLocation) terminal.get(0);
                }
                if (unLocObjectForTerminal != null) {
                    fclBuy.setOriginTerminal(unLocObjectForTerminal);
                }
            }
            if (portNum != null && !portNum.equals("")) {
                List portsList = unLocationDAO.findForManagement(portNum, null);
                if (portsList != null && portsList.size() > 0) {
                    unLocObjectForPorts = (UnLocation) portsList.get(0);
                    fclBuy.setDestinationPort(unLocObjectForPorts);
                }
            } else if (portName != null && !portName.equals("")) {
                String stringTokens[] = StringUtils.splitPreserveAllTokens(portName, '-');
                if (stringTokens != null && stringTokens.length > 1) {
                    portName = stringTokens[0];
                    portNum = stringTokens[1];
                }
                List portsList = unLocationDAO.findForManagement(portNum, portName);
                if (portsList != null && portsList.size() > 0) {
                    unLocObjectForPorts = (UnLocation) portsList.get(0);
                    fclBuy.setDestinationPort(unLocObjectForPorts);
                }
            }
            if (comCode != null && !comCode.equals("") && !comCode.equals("%")) {
                List comList = genericCodeDAO.findForGenericCode(comCode);
                if (comList != null && comList.size() > 0) {
                    genericCodeObject = (GenericCode) comList.get(0);
                    fclBuy.setComNum(genericCodeObject);
                    session.setAttribute("searchfclrecords", fclBuy);
                }
            } else if (comCodedesc != null && !comCodedesc.equals("")) {
                List codeList = genericCodeDAO.findForAirRates(null,
                        comCodedesc);
                if (codeList != null && codeList.size() > 0) {
                    genericCodeObject = (GenericCode) codeList.get(0);
                    fclBuy.setComNum(genericCodeObject);
                }

            }
            if (sslineNO != null && !sslineNO.equals("")) {
                List codeList = carriersOrLineDAO.findAccountNo1(sslineNO);
                if (codeList != null && codeList.size() > 0) {
                    carriesObjectForSSLine = (TradingPartnerTemp) codeList.get(0);
                    fclBuy.setSslineNo(carriesObjectForSSLine);
                    session.setAttribute("searchfclrecords", fclBuy);
                }
            } else if (ssName != null && !ssName.equals("")) {
                List codeList = carriersOrLineDAO.findAccountName1(ssName);
                if (codeList != null && codeList.size() > 0) {
                    carriesObjectForSSLine = (TradingPartnerTemp) codeList.get(0);
                    fclBuy.setSslineNo(carriesObjectForSSLine);

                }
            }
            session.setAttribute("searchfclrecords", fclBuy);
            forwardName = "fclsearch";
        }

        if (buttonValue != null && buttonValue.equals("search")) {
            session.setAttribute("addfclrecords", fclBuy);
            if (session.getAttribute("searchunittypelist") != null) {

                session.removeAttribute("searchunittypelist");
            }
            if (session.getAttribute("fclatescaptioncom") != null) {
                session.removeAttribute("fclatescaptioncom");
            }
            if (session.getAttribute("fclatescaption") != null) {
                session.removeAttribute("fclatescaption");
            }
            if (session.getAttribute("fclmessage") != null) {
                session.removeAttribute("fclmessage");
            }
            if (get != null && !get.equals("")) {
                if (match != null && match.equals("match")) {
                    if (session.getAttribute("searchFclcodelist") != null) {
                        session.removeAttribute("searchFclcodelist");
                    }
                    List tempCompressList = new ArrayList();
                    searchFclrecords = fclBuyDAO.findForSearchFclBuyRatesMatch(trmNum, portNum, comCode, sslineNO, orgRegion, destRegion);
                    Map fclBuyMap = new HashMap<Integer, FclBuy>();
                    for (Iterator iter = searchFclrecords.iterator(); iter.hasNext();) {
                        FclBuy newfclBuy = (FclBuy) iter.next();
                        if (!fclBuyMap.containsKey(newfclBuy.getFclStdId())) {
                            fclBuyMap.put(newfclBuy.getFclStdId(), newfclBuy);
                        }
                    }
                    session.setAttribute("fclBuyMap", fclBuyMap);
                    tempCompressList = quotationBC.getRates(searchFclrecords, messageResources, null);
                    String[] unitType = new String[10];
                    unitType[0] = "0";
                    List fclConsolidatorList = quotationBC.getConsolidatorList(messageResources);
                    Map compressList = quotationBC.displayRecordsForConsolidator1(tempCompressList, unitType, fclConsolidatorList, request, messageResources);
                    session.setAttribute("compressList", compressList);
                    List fclBuyList = new ArrayList();
                    for (Iterator iter = tempCompressList.iterator(); iter.hasNext();) {
                        FclBuyCost tempfclBuyCost = (FclBuyCost) iter.next();
                        FclBuyCost newFclBuyCost = new FclBuyCost();
                            PropertyUtils.copyProperties(newFclBuyCost, tempfclBuyCost);
                        fclBuyList.add(newFclBuyCost);
                    }
                    if (request.getAttribute("worning") == null) {
                        if (trmNum != null || portNum != null || comCode != null || sslineNO != null) {
                            List temList = fclBuyDAO.getSslineId(fclBuyList, null, messageResources);
                            session.setAttribute("searchFclcodelist", temList);
                            session.setAttribute("fclatescaption", "FCL Current Match Only Rates");
                        }
                    }

                }
                if (session.getAttribute("searchunittypelist") == null) {
                    List value = new ArrayList();
                    unittypelist = dbUtil.getUnitListForFCLTest(
                            new Integer(38), "yes", "Select Unit code");
                    for (int i = 0; i < unittypelist.size(); i++) {
                        LabelValueBean removegenCo = (LabelValueBean) unittypelist.get(i);
                        if (!removegenCo.getValue().equals("0")) {
                            value.add(removegenCo.getLabel());
                        }
                    }
                    session.setAttribute("searchunittypelist", value);// FOROCEN
                }
            }
            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");

            }
            if (session.getAttribute("view") != null) {

                session.removeAttribute("view");
            }

            forwardName = "fclsearch";
            session.setAttribute("fclCollapas", "fclCollapas");
        }

        if (request.getParameter("paramid") != null) {
            fclBuy = fclBuyDAO.findById(Integer.parseInt(request.getParameter("paramid")));
            User userid = null;
            UserDAO user1 = new UserDAO();
            if (session.getAttribute("view") != null) {
                session.removeAttribute("view");
            }
            if (session.getAttribute("loginuser") != null) {
                userid = (User) session.getAttribute("loginuser");
            }
            ProcessInfoDAO processinfoDAO = new ProcessInfoDAO();
            ProcessInfo pi = new ProcessInfo();
            String programid = null;
            programid = (String) session.getAttribute("processinfoforfl");
            String recordid = "";
            if (fclBuy.getFclStdId() != null) {
                recordid = fclBuy.getFclStdId().toString();
            }
            String editstatus = "startedited";
            String deletestatus = "startdeleted";
            ProcessInfo processinfoobj = null;
            if (programid != null && !programid.equals("")) {
                processinfoobj = processinfoDAO.findById(Integer.parseInt(programid), recordid, deletestatus,
                        editstatus);
            }
            if (processinfoobj != null) {
                String view = "3";
                User loginuser = user1.findById(processinfoobj.getUserid());
                loginName = loginuser.getLoginName();
                msg = "This record is being used by ";
                message = msg + loginName;
                session.setAttribute("usermessage", message);
                session.setAttribute("view", view);
                forwardName = "addfclrecords";
            } else {
                if (userid != null) {
                    pi.setUserid(userid.getUserId());
                }
                if (programid != null && !programid.equals("")) {
                    pi.setProgramid(Integer.parseInt(programid));
                }
                java.util.Date currdate = new java.util.Date();
                pi.setProcessinfodate(currdate);
                pi.setEditstatus(editstatus);
                pi.setRecordid(recordid);
                processinfoDAO.save(pi);
                if (session.getAttribute("view") != null) {
                    session.removeAttribute("view");
                }

            }
            Set editCostType = new HashSet<FclBuyCost>();
            List fclCostList = new ArrayList();
            List fclCostListType = new ArrayList();
            List editBuyAirFirghtlist = new ArrayList();
            FclBuyCostTypeRates fclBuyCostTypeRates = new FclBuyCostTypeRates();
            FclBuyAirFreightCharges fclBuyAirFreightCharges = new FclBuyAirFreightCharges();
            editCostType = fclBuy.getFclBuyCostsSet();
            Map getFclrecords = new HashMap();
            if (fclBuy.getFclBuyCostsSet() != null) {
                Iterator it = fclBuy.getFclBuyCostsSet().iterator();

                while (it.hasNext()) {

                    fclBuyCost = (FclBuyCost) it.next();

                    if (fclBuyCost.getFclBuyUnitTypesSet() != null) {

                        Iterator it1 = fclBuyCost.getFclBuyUnitTypesSet().iterator();
                        while (it1.hasNext()) {
                            fclBuyCostTypeRates = (FclBuyCostTypeRates) it1.next();
                            if (fclBuyCostTypeRates.getFclCostId() != null && fclBuyCost != null && fclBuyCostTypeRates.getFclCostId().equals(fclBuyCost.getFclCostId())) {
                                // fclCostList.add(fclBuyCost);
                                // break;
                                if (fclBuyCost.getCostId() != null && fclBuyCost.getContType() != null) {
                                    fclBuyCostTypeRates.setCostCode(fclBuyCost.getCostId().getCodedesc());
                                    fclBuyCostTypeRates.setCostType(fclBuyCost.getContType().getCodedesc());
                                    fclBuyCostTypeRates.setCostId(fclBuyCost.getContType().getId().toString());
                                    fclBuyCostTypeRates.setTypeId(fclBuyCost.getCostId().getId().toString());

                                }
                                fclCostListType.add(fclBuyCostTypeRates);
                            }
                        }
                        Iterator it2 = fclBuyCost.getFclBuyUnitTypesSet().iterator();
                        while (it2.hasNext()) {
                            fclBuyCostTypeRates = (FclBuyCostTypeRates) it2.next();
                            if (fclBuyCost.getFclCostId() != null && fclBuyCostTypeRates.getFclCostId() != null && fclBuyCost.getFclCostId().equals(
                                    fclBuyCostTypeRates.getFclCostId())) {
                                fclCostList.add(fclBuyCost);
                                break;
                            // getFclrecords.put(fclBuyCost.getFclStdId(),fclBuyCost);

                            }
                        }

                    }
                    if (fclBuyCost.getFclBuyAirFreightSet() != null) {
                        Iterator fclBuyAirFreightSetIterator = fclBuyCost.getFclBuyAirFreightSet().iterator();
                        while (fclBuyAirFreightSetIterator.hasNext()) {
                            fclBuyAirFreightCharges = (FclBuyAirFreightCharges) fclBuyAirFreightSetIterator.next();

                            if (fclBuyCost.getCostId() != null) {
                                fclBuyAirFreightCharges.setCostCode(fclBuyCost.getCostId().getCodedesc());
                                fclBuyAirFreightCharges.setCostType(fclBuyCost.getContType().getCodedesc());
                                fclBuyAirFreightCharges.setCostId(fclBuyCost.getContType().getId().toString());
                                fclBuyAirFreightCharges.setTypeId(fclBuyCost.getCostId().getId().toString());

                            }
                            editBuyAirFirghtlist.add(fclBuyAirFreightCharges);

                        }
                        Iterator it2 = fclBuyCost.getFclBuyAirFreightSet().iterator();
                        while (it2.hasNext()) {
                            fclBuyAirFreightCharges = (FclBuyAirFreightCharges) it2.next();
                            if (fclBuyCost.getFclCostId() != null && fclBuyAirFreightCharges.getFclCostTypeId() != null && fclBuyCost.getFclCostId().equals(
                                    fclBuyAirFreightCharges.getFclCostTypeId())) {
                                fclCostList.add(fclBuyCost);
                                break;
                            // getFclrecords.put(fclBuyCost.getFclStdId(),fclBuyCost);

                            }
                        }

                    }
                }
            }

            session.setAttribute("fclfrightrecords", editBuyAirFirghtlist);
            session.setAttribute("fclrecords", fclCostListType);

            if (session.getAttribute("message") != null) {
                session.removeAttribute("message");

            }

            session.setAttribute("costCodeList", fclCostList);
            session.setAttribute("editrecords", "edit");
            session.setAttribute("addfclrecords", fclBuy);

            forwardName = "addfclrecords";

        }

        if (request.getParameter("param") != null) {
//            String view = "3";
//            session.setAttribute("view", view);
            fclBuy = fclBuyDAO.findById(Integer.parseInt(request.getParameter("param")));
            List unitlistedit = new ArrayList();
            Set editCostType = new HashSet<FclBuyCost>();
            Set editBuyCostType = new HashSet<FclBuyCostTypeRates>();
            Set editBuyAirFirght = new HashSet<FclBuyAirFreightCharges>();
            List reoveList = new ArrayList();
            List fclCostList = new ArrayList();
            List fclCostListType = new ArrayList();
            List editBuyAirFirghtlist = new ArrayList();
            FclBuyCostTypeRates fclBuyCostTypeRates = new FclBuyCostTypeRates();

            FclBuyAirFreightCharges fclBuyAirFreightCharges = new FclBuyAirFreightCharges();

            editCostType = fclBuy.getFclBuyCostsSet();


            if (fclBuy.getFclBuyCostsSet() != null) {
                Iterator it = fclBuy.getFclBuyCostsSet().iterator();
                while (it.hasNext()) {
                    fclBuyCost = (FclBuyCost) it.next();
                    fclCostList.add(fclBuyCost);

                }
            // session.setAttribute("fclCostList", fclCostList);
            }
            if (fclCostList != null) {
                for (int i = 0; i < fclCostList.size(); i++) {
                    fclBuyCost = (FclBuyCost) fclCostList.get(i);
                    if (fclBuyCost.getFclBuyAirFreightSet() != null) {

                        Iterator it = fclBuyCost.getFclBuyAirFreightSet().iterator();
                        while (it.hasNext()) {
                            fclBuyAirFreightCharges = (FclBuyAirFreightCharges) it.next();

                            if (fclBuyCost.getCostId() != null && fclBuyCost.getContType() != null) {
                                fclBuyAirFreightCharges.setCostCode(fclBuyCost.getCostId().getCodedesc());
                                fclBuyAirFreightCharges.setCostType(fclBuyCost.getContType().getCodedesc());
                                fclBuyAirFreightCharges.setCostId(fclBuyCost.getContType().getId().toString());
                                fclBuyAirFreightCharges.setTypeId(fclBuyCost.getContType().getId().toString());
                            }

                            editBuyAirFirghtlist.add(fclBuyAirFreightCharges);
                        }
                    }
                    if (fclBuyCost.getFclBuyUnitTypesSet() != null) {
                        Iterator it = fclBuyCost.getFclBuyUnitTypesSet().iterator();
                        while (it.hasNext()) {
                            fclBuyCostTypeRates = (FclBuyCostTypeRates) it.next();

                            if (fclBuyCost.getCostId() != null) {
                                fclBuyCostTypeRates.setCostCode(fclBuyCost.getCostId().getCodedesc());
                                fclBuyCostTypeRates.setCostType(fclBuyCost.getContType().getCodedesc());
                                fclBuyCostTypeRates.setCostId(fclBuyCost.getContType().getId().toString());

                            }
                            fclCostListType.add(fclBuyCostTypeRates);

                        }
                    }

                // editBuyCostType=fclBuyCostsSet.getFclBuyUnitTypesSet();
                }
                session.setAttribute("fclfrightrecords", editBuyAirFirghtlist);

                session.setAttribute("fclrecords", fclCostListType);

                if (session.getAttribute("message") != null) {
                    session.removeAttribute("message");

                }
            }

            session.setAttribute("costCodeList", fclCostList);
            session.setAttribute("editrecords", "edit");
            session.setAttribute("addfclrecords", fclBuy);

            forwardName = "addfclrecords";

        }
        if (button != null && button.equals("clear")) {
            if (session.getAttribute("searchfclrecords") != null) {
                session.removeAttribute("searchfclrecords");
            }
            if (session.getAttribute("searchFclcodelist") != null) {
                session.removeAttribute("searchFclcodelist");
            }
            if (session.getAttribute("fclcommonList") != null) {
                session.removeAttribute("fclcommonList");
            }
            if (session.getAttribute("fclmessage") != null) {
                session.removeAttribute("fclmessage");
            }
            if (session.getAttribute("fclCollapas") != null) {
                session.removeAttribute("fclCollapas");
            }
            if (session.getAttribute("costcode") != null) {
                session.removeAttribute("costcode");
            }
            if (session.getAttribute("fclrecords") != null) {
                session.removeAttribute("fclrecords");
            }
            if (session.getAttribute("searchunittypelist") != null) {
                session.removeAttribute("searchunittypelist");
            }
            if (session.getAttribute("costCodeList") != null) {
                session.removeAttribute("costCodeList");
            }
            if (session.getAttribute("fclfrightrecords") != null) {
                session.removeAttribute("fclfrightrecords");
            }
            if (session.getAttribute("addfclrecords") != null) {
                session.removeAttribute("addfclrecords");
            }
            forwardName = "fclsearch";
        }


        return mapping.findForward(forwardName);
    }
}